
LT24.elf:     file format elf32-littlenios2
LT24.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000244

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0003e14c memsz 0x0003e2ac flags rwx
    LOAD off    0x00040000 vaddr 0x05001000 paddr 0x05001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  05001000  05001000  00040000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000165f0  02000244  02000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00025d74  02016834  02016834  00017834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc4  0203c5a8  0203c5a8  0003d5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0203e16c  0203e16c  0003f16c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0203e2cc  0203e2cc  00040000  2**0
                  CONTENTS
  7 .epcs_flash_controller_0 00000000  05001020  05001020  00040000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00040000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001108  00000000  00000000  00040028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002b5b9  00000000  00000000  00041130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000acfd  00000000  00000000  0006c6e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e5dd  00000000  00000000  000773e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002d00  00000000  00000000  000859c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004406  00000000  00000000  000886c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001cf15  00000000  00000000  0008caca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000050  00000000  00000000  000a99e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b00  00000000  00000000  000a9a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000af0d6  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000af0d9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000af0dc  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000af0dd  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000af0de  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000af0e2  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000af0e6  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000af0ea  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000af0f3  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000af0fc  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000d  00000000  00000000  000af105  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000031  00000000  00000000  000af112  2**0
                  CONTENTS, READONLY
 30 .jdi          0000824f  00000000  00000000  000af143  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00091917  00000000  00000000  000b7392  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
05001000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000244 l    d  .text	00000000 .text
02016834 l    d  .rodata	00000000 .rodata
0203c5a8 l    d  .rwdata	00000000 .rwdata
0203e16c l    d  .bss	00000000 .bss
0203e2cc l    d  .sdram	00000000 .sdram
05001020 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../LT24_bsp//obj/HAL/src/crt0.o
02000288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 ILI9341.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 geometry.c
00000000 l    df *ABS*	00000000 main.c
02016a38 l     O .rodata	00025800 staticimg
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0203c5a8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0203c39a l     O .rodata	00000010 zeroes.4389
0203c3aa l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
0203c3ba l     O .rodata	00000010 zeroes.4404
0200a304 l     F .text	000000bc __sbprintf
0203c3ca l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0200a638 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0200c168 l     F .text	00000008 __fp_unlock
0200c17c l     F .text	0000019c __sinit.part.1
0200c318 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0203cdf4 l     O .rwdata	00000020 lc_ctype_charset
0203cdd4 l     O .rwdata	00000020 lc_message_charset
0203ce14 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0203c3f8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0203c52c l     O .rodata	00000010 blanks.4332
0203c51c l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
02010124 l     F .text	000000fc __sprint_r.part.0
0203c54c l     O .rodata	00000010 blanks.4348
0203c53c l     O .rodata	00000010 zeroes.4349
020116b0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
02012cf8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02012e04 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02012e30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
02012f1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
02012ffc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
020131d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0203e154 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0201344c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
02013580 l     F .text	00000034 alt_dev_reg
0203cff4 l     O .rwdata	000000cc epcs_flash_controller_0
0203d0c0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0201365c l     F .text	00000034 alt_flash_device_register
020136e4 l     F .text	000003f8 alt_epcs_flash_query
02013adc l     F .text	000000ec alt_epcs_flash_memcmp
02013eb4 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0201437c l     F .text	0000020c altera_avalon_jtag_uart_irq
02014588 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
02014bc0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
02014d10 l     F .text	00000038 epcs_test_wip
02014d48 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02015574 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02015a70 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
02015bb0 l     F .text	0000003c alt_get_errno
02015bec l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0203e1a0 g     O .bss	00000004 alt_instruction_exception_handler
0200e424 g     F .text	00000074 _mprec_log10
0200050c g     F .text	00000124 I2C_Read
02013e28 g     F .text	0000008c alt_epcs_flash_get_info
0200e510 g     F .text	0000008c __any_on
02011b88 g     F .text	00000054 _isatty_r
0203c404 g     O .rodata	00000028 __mprec_tinytens
02001698 g     F .text	00000070 LCD_DrawPoint
0201310c g     F .text	0000007c alt_main
02005c18 g     F .text	000000c0 _puts_r
0203e1cc g     O .bss	00000100 alt_irq
02011bdc g     F .text	00000060 _lseek_r
02002748 g     F .text	00000130 sqrt
020012c8 g     F .text	000000a0 I2CL_Read16
02012aec g     F .text	00000088 .hidden __eqdf2
0203e2cc g       *ABS*	00000000 __alt_heap_start
02001d78 g     F .text	0000013c LCD_Pattern_Horizon
02005bdc g     F .text	0000003c printf
02011df4 g     F .text	0000009c _wcrtomb_r
0200ebd8 g     F .text	0000005c __sseek
0200c4b8 g     F .text	00000010 __sinit
02011c9c g     F .text	00000140 __swbuf_r
0200cf80 g     F .text	0000007c _setlocale_r
0200c320 g     F .text	00000068 __sfmoreglue
020131ac g     F .text	00000024 __malloc_unlock
02002514 g     F .text	00000048 PtCopy
0200d444 g     F .text	0000015c memmove
0200c4a0 g     F .text	00000018 _cleanup
0200d5a0 g     F .text	000000a8 _Balloc
02012b74 g     F .text	000000dc .hidden __gtdf2
02015fa8 g     F .text	00000024 altera_nios2_gen2_irq_init
02005268 g     F .text	00000010 __errno
02014d84 g     F .text	000000fc epcs_sector_erase
0200114c g     F .text	0000017c I2CL_MultipleWrite
02000a28 g     F .text	00000164 i2c_write
05001000 g     F .entry	00000000 __reset
0200028c g     F .text	00000044 my_wait
020014fc g     F .text	00000084 LCD_Clear
02011b2c g     F .text	0000005c _fstat_r
0203e178 g     O .bss	00000004 errno
02000630 g     F .text	00000178 I2C_Read16
0200eb54 g     F .text	00000008 __seofread
0200eee8 g     F .text	0000123c ___svfiprintf_internal_r
02001600 g     F .text	00000098 LCD_DrawImg240x320
0203e18c g     O .bss	00000004 alt_argv
02046120 g       *ABS*	00000000 _gp
0201341c g     F .text	00000030 usleep
0203ce74 g     O .rwdata	00000180 alt_fd_list
02014fc8 g     F .text	0000006c epcs_write_status_register
020161c8 g     F .text	00000090 alt_find_dev
0200d2fc g     F .text	00000148 memcpy
0200c170 g     F .text	0000000c _cleanup_r
02004e98 g     F .text	000000dc .hidden __floatsidf
02015b34 g     F .text	0000007c alt_io_redirect
02003d10 g     F .text	000000f4 .hidden __ltdf2
02016834 g       *ABS*	00000000 __DTOR_END__
02005cd8 g     F .text	00000014 puts
02016404 g     F .text	0000009c alt_exception_cause_generated_bad_addr
02013fc0 g     F .text	00000100 alt_epcs_flash_write_block
02002b00 g     F .text	00000074 __fpclassifyd
0200e380 g     F .text	000000a4 __ratio
02011694 g     F .text	0000001c __vfiprintf_internal
02014780 g     F .text	0000021c altera_avalon_jtag_uart_read
02005bac g     F .text	00000030 _printf_r
020050d0 g     F .text	00000064 .hidden __udivsi3
02012f58 g     F .text	000000a4 isatty
0203c454 g     O .rodata	000000c8 __mprec_tens
0200cffc g     F .text	0000000c __locale_charset
0200a4b0 g     F .text	00000034 vsnprintf
020007a8 g     F .text	0000017c I2C_MultipleRead
0203e174 g     O .bss	00000004 __malloc_top_pad
0203e134 g     O .rwdata	00000004 __mb_cur_max
0200d02c g     F .text	0000000c _localeconv_r
0200d9ac g     F .text	0000003c __i2b
0200c93c g     F .text	000004bc __sfvwrite_r
02005d68 g     F .text	00000054 _sbrk_r
0200242c g     F .text	00000034 RectHeight
02011c3c g     F .text	00000060 _read_r
0203e14c g     O .rwdata	00000004 alt_max_fd
02011820 g     F .text	000000f0 _fclose_r
0200c138 g     F .text	00000030 fflush
0203e170 g     O .bss	00000004 __malloc_max_sbrked_mem
02000e24 g     F .text	00000168 I2CL_Read
02002b7c g     F .text	000008ac .hidden __adddf3
02013f48 g     F .text	00000078 alt_epcs_flash_erase_block
020021d4 g     F .text	00000044 PtSet
0200e128 g     F .text	0000010c __b2d
020125b4 g     F .text	00000538 .hidden __umoddi3
02013038 g     F .text	000000d4 lseek
0203e120 g     O .rwdata	00000004 __fdlib_version
0203e124 g     O .rwdata	00000004 _global_impure_ptr
02015294 g     F .text	0000005c epcs_exit_4_bytes_mode
0200e59c g     F .text	00000564 _realloc_r
0203e2cc g       *ABS*	00000000 __bss_end
02015980 g     F .text	000000f0 alt_iic_isr_register
02015ea0 g     F .text	00000108 alt_tick
020003cc g     F .text	00000140 I2C_Write16
02002304 g     F .text	0000008c RectOffset
0201203c g     F .text	00000578 .hidden __udivdi3
02011a88 g     F .text	00000024 _fputwc_r
0203c42c g     O .rodata	00000028 __mprec_bigtens
0200d790 g     F .text	00000104 __s2b
02012c50 g     F .text	000000a8 .hidden __floatunsidf
0200de68 g     F .text	00000060 __mcmp
0200c4d8 g     F .text	00000018 __fp_lock_all
02015934 g     F .text	0000004c alt_ic_irq_enabled
020002d0 g     F .text	000000fc I2C_Write
02015e04 g     F .text	0000009c alt_alarm_stop
0203e194 g     O .bss	00000004 alt_irq_active
02001eb4 g     F .text	000000e4 LCD_Pattern_Vertical
020000fc g     F .exceptions	000000d4 alt_irq_handler
0203ce4c g     O .rwdata	00000028 alt_dev_null
02001368 g     F .text	0000008c I2CL_Write16
02000924 g     F .text	0000008c i2c_start
0200d894 g     F .text	00000068 __hi0bits
0200518c g     F .text	00000018 calloc
02004e18 g     F .text	00000080 .hidden __fixdfsi
0203e144 g     O .rwdata	00000008 alt_dev_list
02013488 g     F .text	000000f8 write
02012e6c g     F .text	000000b0 fstat
02003d10 g     F .text	000000f4 .hidden __ledf2
02001fcc g     F .text	0000006c myprintf
0200dbe0 g     F .text	00000140 __pow5mult
02010238 g     F .text	0000145c ___vfiprintf_internal_r
0203e184 g     O .bss	00000004 __nlocale_changed
02005134 g     F .text	00000058 .hidden __umodsi3
02001580 g     F .text	00000080 LCD_ClearRnd
020023f8 g     F .text	00000034 RectWidth
02015150 g     F .text	00000068 epcs_read_electronic_signature
0203e2cc g       *ABS*	00000000 end
020142bc g     F .text	000000c0 altera_avalon_jtag_uart_init
020001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
02016834 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02014c38 g     F .text	0000007c alt_avalon_timer_sc_init
02004f74 g     F .text	00000064 .hidden __clzsi2
0201499c g     F .text	00000224 altera_avalon_jtag_uart_write
0200c4c8 g     F .text	00000004 __sfp_lock_acquire
0200d218 g     F .text	000000e4 memchr
020080f0 g     F .text	000021f8 ___vfprintf_internal_r
02005dbc g     F .text	00000058 _sprintf_r
0200c62c g     F .text	00000310 _free_r
0200d008 g     F .text	00000010 __locale_mb_cur_max
02001444 g     F .text	000000b8 LCD_SetCursor
02016680 g     F .text	00000180 __call_exitprocs
0203e180 g     O .bss	00000004 __mlocale_changed
0203e12c g     O .rwdata	00000004 __malloc_sbrk_base
02000244 g     F .text	00000048 _start
0203e198 g     O .bss	00000004 _alt_tick_rate
02005d04 g     F .text	00000064 rand
0200dd20 g     F .text	00000148 __lshift
02015fcc g     F .text	000001fc alt_avalon_spi_command
0203e19c g     O .bss	00000004 _alt_nticks
0201320c g     F .text	000000fc read
020135ec g     F .text	00000070 alt_sys_init
0200ed18 g     F .text	000001d0 __ssprint_r
02016568 g     F .text	00000118 __register_exitproc
0200d9e8 g     F .text	000001f8 __multiply
02014628 g     F .text	00000068 altera_avalon_jtag_uart_close
0203e1a4 g     O .bss	00000028 __malloc_current_mallinfo
0200e234 g     F .text	0000014c __d2b
02014cb4 g     F .text	0000005c epcs_read_status_register
02014158 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02016360 g     F .text	000000a4 alt_get_fd
0201541c g     F .text	00000158 alt_busy_sleep
020117cc g     F .text	00000054 _close_r
020151b8 g     F .text	00000080 epcs_read_device_id
020164ec g     F .text	0000007c memcmp
02014218 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0203e2cc g       *ABS*	00000000 __alt_stack_base
02014268 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
05001000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
0200a4e4 g     F .text	00000154 __swsetup_r
02003428 g     F .text	000008e8 .hidden __divdf3
0200c388 g     F .text	00000118 __sfp
0200e498 g     F .text	00000078 __copybits
0203c9cc g     O .rwdata	00000408 __malloc_av_
0200c4d4 g     F .text	00000004 __sinit_lock_release
0200a3c0 g     F .text	000000f0 _vsnprintf_r
020009b0 g     F .text	00000078 i2c_stop
02003e04 g     F .text	00000718 .hidden __muldf3
0200eb00 g     F .text	00000054 __sread
02016258 g     F .text	00000108 alt_find_file
020155b0 g     F .text	000000a4 alt_dev_llist_insert
02013188 g     F .text	00000024 __malloc_lock
0201336c g     F .text	000000b0 sbrk
02005f18 g     F .text	000021d8 ___svfprintf_internal_r
0200c0dc g     F .text	0000005c _fflush_r
020051a4 g     F .text	000000c4 _calloc_r
0203e158 g     O .rwdata	00000008 alt_flash_dev_list
0203e16c g       *ABS*	00000000 __bss_start
02001708 g     F .text	00000670 LCD_Init
02005a84 g     F .text	00000128 memset
0200255c g     F .text	000001ec main
0203e190 g     O .bss	00000004 alt_envp
0203e16c g     O .bss	00000004 __malloc_max_total_mem
02002038 g     F .text	00000088 myprintf_hexarray
020141b8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02000b8c g     F .text	00000158 i2c_read
02011ddc g     F .text	00000018 __swbuf
02005cec g     F .text	00000018 srand
0200ec34 g     F .text	00000008 __sclose
02002b74 g     F .text	00000008 matherr
04000000 g       *ABS*	00000000 __alt_heap_limit
02011910 g     F .text	00000014 fclose
0200a838 g     F .text	00001688 _dtoa_r
02005278 g     F .text	0000080c _malloc_r
02011f50 g     F .text	00000030 __ascii_wctomb
0203e150 g     O .rwdata	00000004 alt_errno
0200cdf8 g     F .text	000000c4 _fwalk
02002460 g     F .text	000000b4 PtDistance
02002218 g     F .text	00000060 RectSet
02004fd8 g     F .text	00000084 .hidden __divsi3
020013f4 g     F .text	00000050 Delay_Ms
02002390 g     F .text	00000068 RectCopy
0200c508 g     F .text	00000124 _malloc_trim_r
02016834 g       *ABS*	00000000 __CTOR_END__
02013bc8 g     F .text	00000260 alt_epcs_flash_write
0200ec3c g     F .text	000000dc strcmp
02016834 g       *ABS*	00000000 __DTOR_LIST__
02012aec g     F .text	00000088 .hidden __nedf2
020135b4 g     F .text	00000038 alt_irq_init
02013308 g     F .text	00000064 alt_release_fd
02005e14 g     F .text	0000006c sprintf
0203c24d g     O .rodata	00000100 .hidden __clz_tab
02001f98 g     F .text	00000034 debug_output
0203e17c g     O .bss	00000004 _PathLocale
020164a0 g     F .text	00000014 atexit
0201176c g     F .text	00000060 _write_r
02002150 g     F .text	00000084 IsPtInRect
0200d038 g     F .text	00000018 setlocale
0203e128 g     O .rwdata	00000004 _impure_ptr
0203e188 g     O .bss	00000004 alt_argc
0200bec0 g     F .text	0000021c __sflush_r
020156b4 g     F .text	00000060 _do_dtors
0200d024 g     F .text	00000008 __locale_cjk_lang
020020c0 g     F .text	00000090 myprintf_dwordarray
02000f8c g     F .text	000001c0 I2CL_MultipleRead
02000020 g       .exceptions	00000000 alt_irq_entry
0200e0c4 g     F .text	00000064 __ulp
0200c4f0 g     F .text	00000018 __fp_unlock_all
0203e13c g     O .rwdata	00000008 alt_fs_list
0200d050 g     F .text	0000000c localeconv
02014e80 g     F .text	000000f4 epcs_read_buffer
02002878 g     F .text	00000288 __ieee754_sqrt
02013690 g     F .text	00000054 alt_epcs_flash_init
020157d0 g     F .text	00000050 alt_ic_isr_register
0203e16c g       *ABS*	00000000 _edata
0203e2cc g       *ABS*	00000000 _end
02015714 g     F .text	00000068 alt_flash_open_dev
02011924 g     F .text	00000164 __fputwc
02014690 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
020158a8 g     F .text	0000008c alt_ic_irq_disable
02015238 g     F .text	0000005c epcs_enter_4_bytes_mode
0200eb5c g     F .text	0000007c __swrite
0203e130 g     O .rwdata	00000004 __malloc_trim_threshold
0200d018 g     F .text	0000000c __locale_msgcharset
020164b4 g     F .text	00000038 exit
0200cebc g     F .text	000000c4 _fwalk_reent
0200dec8 g     F .text	000001fc __mdiff
0201577c g     F .text	00000054 alt_flash_close_dev
0200505c g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
0200c4cc g     F .text	00000004 __sfp_lock_release
02000000 g       *ABS*	00000000 __alt_mem_sdram
02016800 g     F .text	00000034 _exit
020152f0 g     F .text	0000012c alt_alarm_start
02011fdc g     F .text	00000060 .hidden __muldi3
0200d05c g     F .text	000001bc __smakebuf_r
02005e80 g     F .text	00000098 strlen
02014f74 g     F .text	00000054 epcs_write_enable
02015cb0 g     F .text	00000154 open
02012b74 g     F .text	000000dc .hidden __gedf2
02002278 g     F .text	0000008c RectInflate
0203e138 g     O .rwdata	00000004 __wctomb
02010220 g     F .text	00000018 __sprint_r
0203e160 g     O .rwdata	00000004 alt_priority_mask
02015820 g     F .text	00000088 alt_ic_irq_enable
0200a2e8 g     F .text	0000001c __vfprintf_internal
02011f80 g     F .text	0000005c _wctomb_r
0200451c g     F .text	000008fc .hidden __subdf3
020140c0 g     F .text	00000098 alt_epcs_flash_read
0200d8fc g     F .text	000000b0 __lo0bits
0203e164 g     O .rwdata	00000008 alt_alarm_list
02015654 g     F .text	00000060 _do_ctors
02000ce4 g     F .text	00000140 I2CL_Write
02011e90 g     F .text	000000c0 wcrtomb
02012d34 g     F .text	000000d0 close
02011aac g     F .text	00000080 fputwc
0200c4d0 g     F .text	00000004 __sinit_lock_acquire
02015034 g     F .text	0000011c epcs_write_buffer
0200d670 g     F .text	00000120 __multadd
0200d648 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d00 	call	20001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	00808134 	movhi	r2,516
 2000140:	10b87304 	addi	r2,r2,-7732
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	00808134 	movhi	r2,516
 2000158:	10b87304 	addi	r2,r2,-7732
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <__alt_mem_epcs_flash_controller_0+0xfcfff12c>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <__alt_mem_epcs_flash_controller_0+0xfcfff120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	0001883a 	nop
}
 20001b8:	0001883a 	nop
 20001bc:	e037883a 	mov	sp,fp
 20001c0:	dfc00117 	ldw	ra,4(sp)
 20001c4:	df000017 	ldw	fp,0(sp)
 20001c8:	dec00204 	addi	sp,sp,8
 20001cc:	f800283a 	ret

020001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d0:	defffb04 	addi	sp,sp,-20
 20001d4:	dfc00415 	stw	ra,16(sp)
 20001d8:	df000315 	stw	fp,12(sp)
 20001dc:	df000304 	addi	fp,sp,12
 20001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20001e4:	000531fa 	rdctl	r2,exception
 20001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20001ec:	e0bffd17 	ldw	r2,-12(fp)
 20001f0:	10801f0c 	andi	r2,r2,124
 20001f4:	1004d0ba 	srli	r2,r2,2
 20001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 20001fc:	0005333a 	rdctl	r2,badaddr
 2000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 2000204:	d0a02017 	ldw	r2,-32640(gp)
 2000208:	10000726 	beq	r2,zero,2000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 200020c:	d0a02017 	ldw	r2,-32640(gp)
 2000210:	e0fffd17 	ldw	r3,-12(fp)
 2000214:	e1bffe17 	ldw	r6,-8(fp)
 2000218:	e17fff17 	ldw	r5,-4(fp)
 200021c:	1809883a 	mov	r4,r3
 2000220:	103ee83a 	callr	r2
 2000224:	00000206 	br	2000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 200022c:	0005883a 	mov	r2,zero
}
 2000230:	e037883a 	mov	sp,fp
 2000234:	dfc00117 	ldw	ra,4(sp)
 2000238:	df000017 	ldw	fp,0(sp)
 200023c:	dec00204 	addi	sp,sp,8
 2000240:	f800283a 	ret

Disassembly of section .text:

02000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 2000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 2000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 200024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 2000250:	00bffd16 	blt	zero,r2,2000248 <__alt_mem_epcs_flash_controller_0+0xfcfff248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000254:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 200025c:	06808134 	movhi	gp,516
    ori gp, gp, %lo(_gp)
 2000260:	d6984814 	ori	gp,gp,24864
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000264:	008080f4 	movhi	r2,515
    ori r2, r2, %lo(__bss_start)
 2000268:	10b85b14 	ori	r2,r2,57708

    movhi r3, %hi(__bss_end)
 200026c:	00c080f4 	movhi	r3,515
    ori r3, r3, %lo(__bss_end)
 2000270:	18f8b314 	ori	r3,r3,58060

    beq r2, r3, 1f
 2000274:	10c00326 	beq	r2,r3,2000284 <_start+0x40>

0:
    stw zero, (r2)
 2000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 200027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000280:	10fffd36 	bltu	r2,r3,2000278 <__alt_mem_epcs_flash_controller_0+0xfcfff278>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000284:	201310c0 	call	201310c <alt_main>

02000288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000288:	003fff06 	br	2000288 <__alt_mem_epcs_flash_controller_0+0xfcfff288>

0200028c <my_wait>:
    #define I2C_DEBUG(x)    DEBUG(x)  
#else
    #define I2C_DEBUG(x)
#endif

void my_wait(int nWait){
 200028c:	defffd04 	addi	sp,sp,-12
 2000290:	df000215 	stw	fp,8(sp)
 2000294:	df000204 	addi	fp,sp,8
 2000298:	e13fff15 	stw	r4,-4(fp)
    int i;
    i = 0;
 200029c:	e03ffe15 	stw	zero,-8(fp)
    while (i < nWait){
 20002a0:	00000306 	br	20002b0 <my_wait+0x24>
        i++;
 20002a4:	e0bffe17 	ldw	r2,-8(fp)
 20002a8:	10800044 	addi	r2,r2,1
 20002ac:	e0bffe15 	stw	r2,-8(fp)
#endif

void my_wait(int nWait){
    int i;
    i = 0;
    while (i < nWait){
 20002b0:	e0fffe17 	ldw	r3,-8(fp)
 20002b4:	e0bfff17 	ldw	r2,-4(fp)
 20002b8:	18bffa16 	blt	r3,r2,20002a4 <__alt_mem_epcs_flash_controller_0+0xfcfff2a4>
        i++;
     //   IOWR(LED_BASE, 0, i);
    }    
}
 20002bc:	0001883a 	nop
 20002c0:	e037883a 	mov	sp,fp
 20002c4:	df000017 	ldw	fp,0(sp)
 20002c8:	dec00104 	addi	sp,sp,4
 20002cc:	f800283a 	ret

020002d0 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 20002d0:	defff804 	addi	sp,sp,-32
 20002d4:	dfc00715 	stw	ra,28(sp)
 20002d8:	df000615 	stw	fp,24(sp)
 20002dc:	df000604 	addi	fp,sp,24
 20002e0:	e13ffb15 	stw	r4,-20(fp)
 20002e4:	e17ffc15 	stw	r5,-16(fp)
 20002e8:	3009883a 	mov	r4,r6
 20002ec:	3807883a 	mov	r3,r7
 20002f0:	e0800217 	ldw	r2,8(fp)
 20002f4:	e13ffd05 	stb	r4,-12(fp)
 20002f8:	e0fffe05 	stb	r3,-8(fp)
 20002fc:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 2000300:	00800044 	movi	r2,1
 2000304:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 2000308:	e17ffc17 	ldw	r5,-16(fp)
 200030c:	e13ffb17 	ldw	r4,-20(fp)
 2000310:	20009240 	call	2000924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2000314:	e0bffd03 	ldbu	r2,-12(fp)
 2000318:	10803fcc 	andi	r2,r2,255
 200031c:	100d883a 	mov	r6,r2
 2000320:	e17ffc17 	ldw	r5,-16(fp)
 2000324:	e13ffb17 	ldw	r4,-20(fp)
 2000328:	2000a280 	call	2000a28 <i2c_write>
 200032c:	1000041e 	bne	r2,zero,2000340 <I2C_Write+0x70>
        bSuccess = FALSE;
 2000330:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 2000334:	01008074 	movhi	r4,513
 2000338:	211a0d04 	addi	r4,r4,26676
 200033c:	2001fcc0 	call	2001fcc <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2000340:	e0bffa17 	ldw	r2,-24(fp)
 2000344:	10000a26 	beq	r2,zero,2000370 <I2C_Write+0xa0>
 2000348:	e0bffe03 	ldbu	r2,-8(fp)
 200034c:	100d883a 	mov	r6,r2
 2000350:	e17ffc17 	ldw	r5,-16(fp)
 2000354:	e13ffb17 	ldw	r4,-20(fp)
 2000358:	2000a280 	call	2000a28 <i2c_write>
 200035c:	1000041e 	bne	r2,zero,2000370 <I2C_Write+0xa0>
        bSuccess = FALSE;
 2000360:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 2000364:	01008074 	movhi	r4,513
 2000368:	211a1504 	addi	r4,r4,26708
 200036c:	2001fcc0 	call	2001fcc <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 2000370:	e0bffa17 	ldw	r2,-24(fp)
 2000374:	10000a26 	beq	r2,zero,20003a0 <I2C_Write+0xd0>
 2000378:	e0bfff03 	ldbu	r2,-4(fp)
 200037c:	100d883a 	mov	r6,r2
 2000380:	e17ffc17 	ldw	r5,-16(fp)
 2000384:	e13ffb17 	ldw	r4,-20(fp)
 2000388:	2000a280 	call	2000a28 <i2c_write>
 200038c:	1000041e 	bne	r2,zero,20003a0 <I2C_Write+0xd0>
        bSuccess = FALSE;
 2000390:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 2000394:	01008074 	movhi	r4,513
 2000398:	211a1e04 	addi	r4,r4,26744
 200039c:	2001fcc0 	call	2001fcc <myprintf>
    }
    i2c_stop(clk_base, data_base);
 20003a0:	e17ffc17 	ldw	r5,-16(fp)
 20003a4:	e13ffb17 	ldw	r4,-20(fp)
 20003a8:	20009b00 	call	20009b0 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 20003ac:	0106d604 	movi	r4,7000
 20003b0:	201341c0 	call	201341c <usleep>
    
    return bSuccess;
 20003b4:	e0bffa17 	ldw	r2,-24(fp)

    
}
 20003b8:	e037883a 	mov	sp,fp
 20003bc:	dfc00117 	ldw	ra,4(sp)
 20003c0:	df000017 	ldw	fp,0(sp)
 20003c4:	dec00204 	addi	sp,sp,8
 20003c8:	f800283a 	ret

020003cc <I2C_Write16>:

bool I2C_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 ControlData){
 20003cc:	defff704 	addi	sp,sp,-36
 20003d0:	dfc00815 	stw	ra,32(sp)
 20003d4:	df000715 	stw	fp,28(sp)
 20003d8:	df000704 	addi	fp,sp,28
 20003dc:	e13ffb15 	stw	r4,-20(fp)
 20003e0:	e17ffc15 	stw	r5,-16(fp)
 20003e4:	3009883a 	mov	r4,r6
 20003e8:	3807883a 	mov	r3,r7
 20003ec:	e0800217 	ldw	r2,8(fp)
 20003f0:	e13ffd05 	stb	r4,-12(fp)
 20003f4:	e0fffe05 	stb	r3,-8(fp)
 20003f8:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 20003fc:	00800044 	movi	r2,1
 2000400:	e0bff915 	stw	r2,-28(fp)
    alt_u8 HighByte, LowByte;
    //alt_u8 DeviceAddr;
    HighByte = (ControlData >> 8) & 0xFF;
 2000404:	e0bfff0b 	ldhu	r2,-4(fp)
 2000408:	1004d23a 	srli	r2,r2,8
 200040c:	e0bffa05 	stb	r2,-24(fp)
    LowByte = ControlData & 0xFF; 
 2000410:	e0bfff0b 	ldhu	r2,-4(fp)
 2000414:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 2000418:	e17ffc17 	ldw	r5,-16(fp)
 200041c:	e13ffb17 	ldw	r4,-20(fp)
 2000420:	20009240 	call	2000924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2000424:	e0bffd03 	ldbu	r2,-12(fp)
 2000428:	10803fcc 	andi	r2,r2,255
 200042c:	100d883a 	mov	r6,r2
 2000430:	e17ffc17 	ldw	r5,-16(fp)
 2000434:	e13ffb17 	ldw	r4,-20(fp)
 2000438:	2000a280 	call	2000a28 <i2c_write>
 200043c:	1000041e 	bne	r2,zero,2000450 <I2C_Write16+0x84>
        bSuccess = FALSE;
 2000440:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 2000444:	01008074 	movhi	r4,513
 2000448:	211a0d04 	addi	r4,r4,26676
 200044c:	2001fcc0 	call	2001fcc <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2000450:	e0bff917 	ldw	r2,-28(fp)
 2000454:	10000a26 	beq	r2,zero,2000480 <I2C_Write16+0xb4>
 2000458:	e0bffe03 	ldbu	r2,-8(fp)
 200045c:	100d883a 	mov	r6,r2
 2000460:	e17ffc17 	ldw	r5,-16(fp)
 2000464:	e13ffb17 	ldw	r4,-20(fp)
 2000468:	2000a280 	call	2000a28 <i2c_write>
 200046c:	1000041e 	bne	r2,zero,2000480 <I2C_Write16+0xb4>
        bSuccess = FALSE;
 2000470:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 2000474:	01008074 	movhi	r4,513
 2000478:	211a1504 	addi	r4,r4,26708
 200047c:	2001fcc0 	call	2001fcc <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, HighByte)){  
 2000480:	e0bff917 	ldw	r2,-28(fp)
 2000484:	10000a26 	beq	r2,zero,20004b0 <I2C_Write16+0xe4>
 2000488:	e0bffa03 	ldbu	r2,-24(fp)
 200048c:	100d883a 	mov	r6,r2
 2000490:	e17ffc17 	ldw	r5,-16(fp)
 2000494:	e13ffb17 	ldw	r4,-20(fp)
 2000498:	2000a280 	call	2000a28 <i2c_write>
 200049c:	1000041e 	bne	r2,zero,20004b0 <I2C_Write16+0xe4>
        bSuccess = FALSE;
 20004a0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 20004a4:	01008074 	movhi	r4,513
 20004a8:	211a1e04 	addi	r4,r4,26744
 20004ac:	2001fcc0 	call	2001fcc <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, LowByte)){  
 20004b0:	e0bff917 	ldw	r2,-28(fp)
 20004b4:	10000a26 	beq	r2,zero,20004e0 <I2C_Write16+0x114>
 20004b8:	e0bffa43 	ldbu	r2,-23(fp)
 20004bc:	100d883a 	mov	r6,r2
 20004c0:	e17ffc17 	ldw	r5,-16(fp)
 20004c4:	e13ffb17 	ldw	r4,-20(fp)
 20004c8:	2000a280 	call	2000a28 <i2c_write>
 20004cc:	1000041e 	bne	r2,zero,20004e0 <I2C_Write16+0x114>
        bSuccess = FALSE;
 20004d0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 20004d4:	01008074 	movhi	r4,513
 20004d8:	211a1e04 	addi	r4,r4,26744
 20004dc:	2001fcc0 	call	2001fcc <myprintf>
    }    
    i2c_stop(clk_base, data_base);
 20004e0:	e17ffc17 	ldw	r5,-16(fp)
 20004e4:	e13ffb17 	ldw	r4,-20(fp)
 20004e8:	20009b00 	call	20009b0 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 20004ec:	0106d604 	movi	r4,7000
 20004f0:	201341c0 	call	201341c <usleep>
    
    return bSuccess;
 20004f4:	e0bff917 	ldw	r2,-28(fp)

    
}
 20004f8:	e037883a 	mov	sp,fp
 20004fc:	dfc00117 	ldw	ra,4(sp)
 2000500:	df000017 	ldw	fp,0(sp)
 2000504:	dec00204 	addi	sp,sp,8
 2000508:	f800283a 	ret

0200050c <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 200050c:	defff904 	addi	sp,sp,-28
 2000510:	dfc00615 	stw	ra,24(sp)
 2000514:	df000515 	stw	fp,20(sp)
 2000518:	df000504 	addi	fp,sp,20
 200051c:	e13ffc15 	stw	r4,-16(fp)
 2000520:	e17ffd15 	stw	r5,-12(fp)
 2000524:	3007883a 	mov	r3,r6
 2000528:	3805883a 	mov	r2,r7
 200052c:	e0fffe05 	stb	r3,-8(fp)
 2000530:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 2000534:	00800044 	movi	r2,1
 2000538:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 200053c:	e17ffd17 	ldw	r5,-12(fp)
 2000540:	e13ffc17 	ldw	r4,-16(fp)
 2000544:	20009240 	call	2000924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2000548:	e0bffe03 	ldbu	r2,-8(fp)
 200054c:	10803fcc 	andi	r2,r2,255
 2000550:	100d883a 	mov	r6,r2
 2000554:	e17ffd17 	ldw	r5,-12(fp)
 2000558:	e13ffc17 	ldw	r4,-16(fp)
 200055c:	2000a280 	call	2000a28 <i2c_write>
 2000560:	1000041e 	bne	r2,zero,2000574 <I2C_Read+0x68>
        bSuccess = FALSE;
 2000564:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(1) Fail: Address NACK!\n"));
 2000568:	01008074 	movhi	r4,513
 200056c:	211a2604 	addi	r4,r4,26776
 2000570:	2001fcc0 	call	2001fcc <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2000574:	e0bffb17 	ldw	r2,-20(fp)
 2000578:	10000a26 	beq	r2,zero,20005a4 <I2C_Read+0x98>
 200057c:	e0bfff03 	ldbu	r2,-4(fp)
 2000580:	100d883a 	mov	r6,r2
 2000584:	e17ffd17 	ldw	r5,-12(fp)
 2000588:	e13ffc17 	ldw	r4,-16(fp)
 200058c:	2000a280 	call	2000a28 <i2c_write>
 2000590:	1000041e 	bne	r2,zero,20005a4 <I2C_Read+0x98>
        bSuccess = FALSE;
 2000594:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(2) Fail: SubAddress NACK!\n"));
 2000598:	01008074 	movhi	r4,513
 200059c:	211a2f04 	addi	r4,r4,26812
 20005a0:	2001fcc0 	call	2001fcc <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 20005a4:	e17ffd17 	ldw	r5,-12(fp)
 20005a8:	e13ffc17 	ldw	r4,-16(fp)
 20005ac:	20009240 	call	2000924 <i2c_start>
    DeviceAddr |= 1; // Read
 20005b0:	e0bffe03 	ldbu	r2,-8(fp)
 20005b4:	10800054 	ori	r2,r2,1
 20005b8:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 20005bc:	e0bffb17 	ldw	r2,-20(fp)
 20005c0:	10000b26 	beq	r2,zero,20005f0 <I2C_Read+0xe4>
 20005c4:	e0bffe03 	ldbu	r2,-8(fp)
 20005c8:	10803fcc 	andi	r2,r2,255
 20005cc:	100d883a 	mov	r6,r2
 20005d0:	e17ffd17 	ldw	r5,-12(fp)
 20005d4:	e13ffc17 	ldw	r4,-16(fp)
 20005d8:	2000a280 	call	2000a28 <i2c_write>
 20005dc:	1000041e 	bne	r2,zero,20005f0 <I2C_Read+0xe4>
        bSuccess = FALSE;
 20005e0:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(3) Fail: Address+1 NACK!\n"));
 20005e4:	01008074 	movhi	r4,513
 20005e8:	211a3804 	addi	r4,r4,26848
 20005ec:	2001fcc0 	call	2001fcc <myprintf>
    }
    
    if (bSuccess){
 20005f0:	e0bffb17 	ldw	r2,-20(fp)
 20005f4:	10000526 	beq	r2,zero,200060c <I2C_Read+0x100>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 20005f8:	000f883a 	mov	r7,zero
 20005fc:	e1800217 	ldw	r6,8(fp)
 2000600:	e17ffd17 	ldw	r5,-12(fp)
 2000604:	e13ffc17 	ldw	r4,-16(fp)
 2000608:	2000b8c0 	call	2000b8c <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 200060c:	e17ffd17 	ldw	r5,-12(fp)
 2000610:	e13ffc17 	ldw	r4,-16(fp)
 2000614:	20009b00 	call	20009b0 <i2c_stop>
    
    return bSuccess;
 2000618:	e0bffb17 	ldw	r2,-20(fp)
}
 200061c:	e037883a 	mov	sp,fp
 2000620:	dfc00117 	ldw	ra,4(sp)
 2000624:	df000017 	ldw	fp,0(sp)
 2000628:	dec00204 	addi	sp,sp,8
 200062c:	f800283a 	ret

02000630 <I2C_Read16>:

bool I2C_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
 2000630:	defff804 	addi	sp,sp,-32
 2000634:	dfc00715 	stw	ra,28(sp)
 2000638:	df000615 	stw	fp,24(sp)
 200063c:	df000604 	addi	fp,sp,24
 2000640:	e13ffc15 	stw	r4,-16(fp)
 2000644:	e17ffd15 	stw	r5,-12(fp)
 2000648:	3007883a 	mov	r3,r6
 200064c:	3805883a 	mov	r2,r7
 2000650:	e0fffe05 	stb	r3,-8(fp)
 2000654:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 2000658:	00800044 	movi	r2,1
 200065c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 2000660:	e17ffd17 	ldw	r5,-12(fp)
 2000664:	e13ffc17 	ldw	r4,-16(fp)
 2000668:	20009240 	call	2000924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 200066c:	e0bffe03 	ldbu	r2,-8(fp)
 2000670:	10803fcc 	andi	r2,r2,255
 2000674:	100d883a 	mov	r6,r2
 2000678:	e17ffd17 	ldw	r5,-12(fp)
 200067c:	e13ffc17 	ldw	r4,-16(fp)
 2000680:	2000a280 	call	2000a28 <i2c_write>
 2000684:	1000041e 	bne	r2,zero,2000698 <I2C_Read16+0x68>
        bSuccess = FALSE;
 2000688:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 200068c:	01008074 	movhi	r4,513
 2000690:	211a0d04 	addi	r4,r4,26676
 2000694:	2001fcc0 	call	2001fcc <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2000698:	e0bffa17 	ldw	r2,-24(fp)
 200069c:	10000a26 	beq	r2,zero,20006c8 <I2C_Read16+0x98>
 20006a0:	e0bfff03 	ldbu	r2,-4(fp)
 20006a4:	100d883a 	mov	r6,r2
 20006a8:	e17ffd17 	ldw	r5,-12(fp)
 20006ac:	e13ffc17 	ldw	r4,-16(fp)
 20006b0:	2000a280 	call	2000a28 <i2c_write>
 20006b4:	1000041e 	bne	r2,zero,20006c8 <I2C_Read16+0x98>
        bSuccess = FALSE;
 20006b8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 20006bc:	01008074 	movhi	r4,513
 20006c0:	211a1504 	addi	r4,r4,26708
 20006c4:	2001fcc0 	call	2001fcc <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 20006c8:	e17ffd17 	ldw	r5,-12(fp)
 20006cc:	e13ffc17 	ldw	r4,-16(fp)
 20006d0:	20009240 	call	2000924 <i2c_start>
    DeviceAddr |= 1; // Read
 20006d4:	e0bffe03 	ldbu	r2,-8(fp)
 20006d8:	10800054 	ori	r2,r2,1
 20006dc:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 20006e0:	e0bffa17 	ldw	r2,-24(fp)
 20006e4:	10000b26 	beq	r2,zero,2000714 <I2C_Read16+0xe4>
 20006e8:	e0bffe03 	ldbu	r2,-8(fp)
 20006ec:	10803fcc 	andi	r2,r2,255
 20006f0:	100d883a 	mov	r6,r2
 20006f4:	e17ffd17 	ldw	r5,-12(fp)
 20006f8:	e13ffc17 	ldw	r4,-16(fp)
 20006fc:	2000a280 	call	2000a28 <i2c_write>
 2000700:	1000041e 	bne	r2,zero,2000714 <I2C_Read16+0xe4>
        bSuccess = FALSE;
 2000704:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 2000708:	01008074 	movhi	r4,513
 200070c:	211a4104 	addi	r4,r4,26884
 2000710:	2001fcc0 	call	2001fcc <myprintf>
    }
    
    if (bSuccess){
 2000714:	e0bffa17 	ldw	r2,-24(fp)
 2000718:	10000626 	beq	r2,zero,2000734 <I2C_Read16+0x104>
        i2c_read(clk_base, data_base, &HighByte, TRUE);  // read
 200071c:	e0bffb44 	addi	r2,fp,-19
 2000720:	01c00044 	movi	r7,1
 2000724:	100d883a 	mov	r6,r2
 2000728:	e17ffd17 	ldw	r5,-12(fp)
 200072c:	e13ffc17 	ldw	r4,-16(fp)
 2000730:	2000b8c0 	call	2000b8c <i2c_read>
    }        
    if (bSuccess){
 2000734:	e0bffa17 	ldw	r2,-24(fp)
 2000738:	10000626 	beq	r2,zero,2000754 <I2C_Read16+0x124>
        i2c_read(clk_base, data_base, &LowByte, FALSE);  // read
 200073c:	e0bffb04 	addi	r2,fp,-20
 2000740:	000f883a 	mov	r7,zero
 2000744:	100d883a 	mov	r6,r2
 2000748:	e17ffd17 	ldw	r5,-12(fp)
 200074c:	e13ffc17 	ldw	r4,-16(fp)
 2000750:	2000b8c0 	call	2000b8c <i2c_read>
    }        
    if (bSuccess)
 2000754:	e0bffa17 	ldw	r2,-24(fp)
 2000758:	10000a26 	beq	r2,zero,2000784 <I2C_Read16+0x154>
        *pControlData = (HighByte << 8) | LowByte;
 200075c:	e0bffb43 	ldbu	r2,-19(fp)
 2000760:	10803fcc 	andi	r2,r2,255
 2000764:	1004923a 	slli	r2,r2,8
 2000768:	1007883a 	mov	r3,r2
 200076c:	e0bffb03 	ldbu	r2,-20(fp)
 2000770:	10803fcc 	andi	r2,r2,255
 2000774:	1884b03a 	or	r2,r3,r2
 2000778:	1007883a 	mov	r3,r2
 200077c:	e0800217 	ldw	r2,8(fp)
 2000780:	10c0000d 	sth	r3,0(r2)
    i2c_stop(clk_base, data_base);
 2000784:	e17ffd17 	ldw	r5,-12(fp)
 2000788:	e13ffc17 	ldw	r4,-16(fp)
 200078c:	20009b00 	call	20009b0 <i2c_stop>
    
    return bSuccess;
 2000790:	e0bffa17 	ldw	r2,-24(fp)
}
 2000794:	e037883a 	mov	sp,fp
 2000798:	dfc00117 	ldw	ra,4(sp)
 200079c:	df000017 	ldw	fp,0(sp)
 20007a0:	dec00204 	addi	sp,sp,8
 20007a4:	f800283a 	ret

020007a8 <I2C_MultipleRead>:


bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
 20007a8:	defff704 	addi	sp,sp,-36
 20007ac:	dfc00815 	stw	ra,32(sp)
 20007b0:	df000715 	stw	fp,28(sp)
 20007b4:	df000704 	addi	fp,sp,28
 20007b8:	e13ffb15 	stw	r4,-20(fp)
 20007bc:	e17ffc15 	stw	r5,-16(fp)
 20007c0:	3009883a 	mov	r4,r6
 20007c4:	3807883a 	mov	r3,r7
 20007c8:	e0800317 	ldw	r2,12(fp)
 20007cc:	e13ffd05 	stb	r4,-12(fp)
 20007d0:	e0fffe05 	stb	r3,-8(fp)
 20007d4:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 20007d8:	00800044 	movi	r2,1
 20007dc:	e0bffa15 	stw	r2,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 20007e0:	e17ffc17 	ldw	r5,-16(fp)
 20007e4:	e13ffb17 	ldw	r4,-20(fp)
 20007e8:	20009240 	call	2000924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 20007ec:	e0bffd03 	ldbu	r2,-12(fp)
 20007f0:	10803fcc 	andi	r2,r2,255
 20007f4:	100d883a 	mov	r6,r2
 20007f8:	e17ffc17 	ldw	r5,-16(fp)
 20007fc:	e13ffb17 	ldw	r4,-20(fp)
 2000800:	2000a280 	call	2000a28 <i2c_write>
 2000804:	1000041e 	bne	r2,zero,2000818 <I2C_MultipleRead+0x70>
        bSuccess = FALSE;
 2000808:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(1) Fail: Address NACK!\n"));
 200080c:	01008074 	movhi	r4,513
 2000810:	211a4a04 	addi	r4,r4,26920
 2000814:	2001fcc0 	call	2001fcc <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2000818:	e0bffa17 	ldw	r2,-24(fp)
 200081c:	10000a26 	beq	r2,zero,2000848 <I2C_MultipleRead+0xa0>
 2000820:	e0bffe03 	ldbu	r2,-8(fp)
 2000824:	100d883a 	mov	r6,r2
 2000828:	e17ffc17 	ldw	r5,-16(fp)
 200082c:	e13ffb17 	ldw	r4,-20(fp)
 2000830:	2000a280 	call	2000a28 <i2c_write>
 2000834:	1000041e 	bne	r2,zero,2000848 <I2C_MultipleRead+0xa0>
        bSuccess = FALSE;
 2000838:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(2) Fail: SubAddress NACK!\n"));
 200083c:	01008074 	movhi	r4,513
 2000840:	211a5504 	addi	r4,r4,26964
 2000844:	2001fcc0 	call	2001fcc <myprintf>
    }    
    if (bSuccess)        
 2000848:	e0bffa17 	ldw	r2,-24(fp)
 200084c:	10000326 	beq	r2,zero,200085c <I2C_MultipleRead+0xb4>
        i2c_start(clk_base, data_base);  // restart
 2000850:	e17ffc17 	ldw	r5,-16(fp)
 2000854:	e13ffb17 	ldw	r4,-20(fp)
 2000858:	20009240 	call	2000924 <i2c_start>
    DeviceAddr |= 1; // Read
 200085c:	e0bffd03 	ldbu	r2,-12(fp)
 2000860:	10800054 	ori	r2,r2,1
 2000864:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 2000868:	e0bffa17 	ldw	r2,-24(fp)
 200086c:	10000b26 	beq	r2,zero,200089c <I2C_MultipleRead+0xf4>
 2000870:	e0bffd03 	ldbu	r2,-12(fp)
 2000874:	10803fcc 	andi	r2,r2,255
 2000878:	100d883a 	mov	r6,r2
 200087c:	e17ffc17 	ldw	r5,-16(fp)
 2000880:	e13ffb17 	ldw	r4,-20(fp)
 2000884:	2000a280 	call	2000a28 <i2c_write>
 2000888:	1000041e 	bne	r2,zero,200089c <I2C_MultipleRead+0xf4>
        bSuccess = FALSE;
 200088c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
 2000890:	01008074 	movhi	r4,513
 2000894:	211a6004 	addi	r4,r4,27008
 2000898:	2001fcc0 	call	2001fcc <myprintf>
    }
    
    if (bSuccess){
 200089c:	e0bffa17 	ldw	r2,-24(fp)
 20008a0:	10001726 	beq	r2,zero,2000900 <I2C_MultipleRead+0x158>
        for(i=0;i<len && bSuccess;i++){
 20008a4:	e03ff915 	stw	zero,-28(fp)
 20008a8:	00001006 	br	20008ec <I2C_MultipleRead+0x144>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
 20008ac:	e0bfff0b 	ldhu	r2,-4(fp)
 20008b0:	10ffffc4 	addi	r3,r2,-1
 20008b4:	e0bff917 	ldw	r2,-28(fp)
 20008b8:	1884c03a 	cmpne	r2,r3,r2
 20008bc:	10803fcc 	andi	r2,r2,255
 20008c0:	100f883a 	mov	r7,r2
 20008c4:	e1800217 	ldw	r6,8(fp)
 20008c8:	e17ffc17 	ldw	r5,-16(fp)
 20008cc:	e13ffb17 	ldw	r4,-20(fp)
 20008d0:	2000b8c0 	call	2000b8c <i2c_read>
            pBuf++;
 20008d4:	e0800217 	ldw	r2,8(fp)
 20008d8:	10800044 	addi	r2,r2,1
 20008dc:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 20008e0:	e0bff917 	ldw	r2,-28(fp)
 20008e4:	10800044 	addi	r2,r2,1
 20008e8:	e0bff915 	stw	r2,-28(fp)
 20008ec:	e0bfff0b 	ldhu	r2,-4(fp)
 20008f0:	e0fff917 	ldw	r3,-28(fp)
 20008f4:	1880020e 	bge	r3,r2,2000900 <I2C_MultipleRead+0x158>
 20008f8:	e0bffa17 	ldw	r2,-24(fp)
 20008fc:	103feb1e 	bne	r2,zero,20008ac <__alt_mem_epcs_flash_controller_0+0xfcfff8ac>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
 2000900:	e17ffc17 	ldw	r5,-16(fp)
 2000904:	e13ffb17 	ldw	r4,-20(fp)
 2000908:	20009b00 	call	20009b0 <i2c_stop>
    
    return bSuccess;    
 200090c:	e0bffa17 	ldw	r2,-24(fp)
    
}
 2000910:	e037883a 	mov	sp,fp
 2000914:	dfc00117 	ldw	ra,4(sp)
 2000918:	df000017 	ldw	fp,0(sp)
 200091c:	dec00204 	addi	sp,sp,8
 2000920:	f800283a 	ret

02000924 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 2000924:	defffc04 	addi	sp,sp,-16
 2000928:	dfc00315 	stw	ra,12(sp)
 200092c:	df000215 	stw	fp,8(sp)
 2000930:	df000204 	addi	fp,sp,8
 2000934:	e13ffe15 	stw	r4,-8(fp)
 2000938:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 200093c:	e0bfff17 	ldw	r2,-4(fp)
 2000940:	10800104 	addi	r2,r2,4
 2000944:	1007883a 	mov	r3,r2
 2000948:	00800044 	movi	r2,1
 200094c:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
 2000950:	e0bfff17 	ldw	r2,-4(fp)
 2000954:	00c00044 	movi	r3,1
 2000958:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
 200095c:	e0bffe17 	ldw	r2,-8(fp)
 2000960:	00c00044 	movi	r3,1
 2000964:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 2000968:	01000584 	movi	r4,22
 200096c:	200028c0 	call	200028c <my_wait>
     
    SDA_LOW(data_base); // data low
 2000970:	e0bfff17 	ldw	r2,-4(fp)
 2000974:	0007883a 	mov	r3,zero
 2000978:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
 200097c:	01000584 	movi	r4,22
 2000980:	200028c0 	call	200028c <my_wait>
    SCL_LOW(clk_base); // clock low
 2000984:	e0bffe17 	ldw	r2,-8(fp)
 2000988:	0007883a 	mov	r3,zero
 200098c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 2000990:	01000584 	movi	r4,22
 2000994:	200028c0 	call	200028c <my_wait>
}
 2000998:	0001883a 	nop
 200099c:	e037883a 	mov	sp,fp
 20009a0:	dfc00117 	ldw	ra,4(sp)
 20009a4:	df000017 	ldw	fp,0(sp)
 20009a8:	dec00204 	addi	sp,sp,8
 20009ac:	f800283a 	ret

020009b0 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 20009b0:	defffc04 	addi	sp,sp,-16
 20009b4:	dfc00315 	stw	ra,12(sp)
 20009b8:	df000215 	stw	fp,8(sp)
 20009bc:	df000204 	addi	fp,sp,8
 20009c0:	e13ffe15 	stw	r4,-8(fp)
 20009c4:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 20009c8:	e0bfff17 	ldw	r2,-4(fp)
 20009cc:	10800104 	addi	r2,r2,4
 20009d0:	1007883a 	mov	r3,r2
 20009d4:	00800044 	movi	r2,1
 20009d8:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
 20009dc:	e0bfff17 	ldw	r2,-4(fp)
 20009e0:	0007883a 	mov	r3,zero
 20009e4:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 20009e8:	e0bffe17 	ldw	r2,-8(fp)
 20009ec:	00c00044 	movi	r3,1
 20009f0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
 20009f4:	01000584 	movi	r4,22
 20009f8:	200028c0 	call	200028c <my_wait>
    SDA_HIGH(data_base); // data high
 20009fc:	e0bfff17 	ldw	r2,-4(fp)
 2000a00:	00c00044 	movi	r3,1
 2000a04:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
 2000a08:	01000584 	movi	r4,22
 2000a0c:	200028c0 	call	200028c <my_wait>
    

    
}
 2000a10:	0001883a 	nop
 2000a14:	e037883a 	mov	sp,fp
 2000a18:	dfc00117 	ldw	ra,4(sp)
 2000a1c:	df000017 	ldw	fp,0(sp)
 2000a20:	dec00204 	addi	sp,sp,8
 2000a24:	f800283a 	ret

02000a28 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 2000a28:	defff704 	addi	sp,sp,-36
 2000a2c:	dfc00815 	stw	ra,32(sp)
 2000a30:	df000715 	stw	fp,28(sp)
 2000a34:	df000704 	addi	fp,sp,28
 2000a38:	e13ffd15 	stw	r4,-12(fp)
 2000a3c:	e17ffe15 	stw	r5,-8(fp)
 2000a40:	3005883a 	mov	r2,r6
 2000a44:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
 2000a48:	00bfe004 	movi	r2,-128
 2000a4c:	e0bff905 	stb	r2,-28(fp)
    int i;
    int w;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 2000a50:	e0bffe17 	ldw	r2,-8(fp)
 2000a54:	10800104 	addi	r2,r2,4
 2000a58:	1007883a 	mov	r3,r2
 2000a5c:	00800044 	movi	r2,1
 2000a60:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
 2000a64:	e03ffa15 	stw	zero,-24(fp)
 2000a68:	00001f06 	br	2000ae8 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 2000a6c:	e0bffd17 	ldw	r2,-12(fp)
 2000a70:	0007883a 	mov	r3,zero
 2000a74:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 2000a78:	e0ffff03 	ldbu	r3,-4(fp)
 2000a7c:	e0bff903 	ldbu	r2,-28(fp)
 2000a80:	1884703a 	and	r2,r3,r2
 2000a84:	10803fcc 	andi	r2,r2,255
 2000a88:	10000426 	beq	r2,zero,2000a9c <i2c_write+0x74>
            SDA_HIGH(data_base);
 2000a8c:	e0bffe17 	ldw	r2,-8(fp)
 2000a90:	00c00044 	movi	r3,1
 2000a94:	10c00035 	stwio	r3,0(r2)
 2000a98:	00000306 	br	2000aa8 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
 2000a9c:	e0bffe17 	ldw	r2,-8(fp)
 2000aa0:	0007883a 	mov	r3,zero
 2000aa4:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 2000aa8:	e0bff903 	ldbu	r2,-28(fp)
 2000aac:	1004d07a 	srli	r2,r2,1
 2000ab0:	e0bff905 	stb	r2,-28(fp)
        // clock high
        SCL_HIGH(clk_base);
 2000ab4:	e0bffd17 	ldw	r2,-12(fp)
 2000ab8:	00c00044 	movi	r3,1
 2000abc:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 2000ac0:	01000584 	movi	r4,22
 2000ac4:	200028c0 	call	200028c <my_wait>
        SCL_LOW(clk_base);
 2000ac8:	e0bffd17 	ldw	r2,-12(fp)
 2000acc:	0007883a 	mov	r3,zero
 2000ad0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 2000ad4:	01000584 	movi	r4,22
 2000ad8:	200028c0 	call	200028c <my_wait>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 2000adc:	e0bffa17 	ldw	r2,-24(fp)
 2000ae0:	10800044 	addi	r2,r2,1
 2000ae4:	e0bffa15 	stw	r2,-24(fp)
 2000ae8:	e0bffa17 	ldw	r2,-24(fp)
 2000aec:	10800210 	cmplti	r2,r2,8
 2000af0:	103fde1e 	bne	r2,zero,2000a6c <__alt_mem_epcs_flash_controller_0+0xfcfffa6c>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 2000af4:	e0bffe17 	ldw	r2,-8(fp)
 2000af8:	10800104 	addi	r2,r2,4
 2000afc:	0007883a 	mov	r3,zero
 2000b00:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
//------------------ wait ack for muti-touch panel
SCL_DELAY;
 2000b04:	01000584 	movi	r4,22
 2000b08:	200028c0 	call	200028c <my_wait>
w = 0;
 2000b0c:	e03ffb15 	stw	zero,-20(fp)
while(SDA_READ(data_base) && w++ < 1000000){
 2000b10:	0001883a 	nop
 2000b14:	e0bffe17 	ldw	r2,-8(fp)
 2000b18:	10800037 	ldwio	r2,0(r2)
 2000b1c:	10000626 	beq	r2,zero,2000b38 <i2c_write+0x110>
 2000b20:	e0fffb17 	ldw	r3,-20(fp)
 2000b24:	18800044 	addi	r2,r3,1
 2000b28:	e0bffb15 	stw	r2,-20(fp)
 2000b2c:	008003f4 	movhi	r2,15
 2000b30:	10908fc4 	addi	r2,r2,16959
 2000b34:	10fff70e 	bge	r2,r3,2000b14 <__alt_mem_epcs_flash_controller_0+0xfcfffb14>
}    
    // clock high
    SCL_HIGH(clk_base);  // clock high
 2000b38:	e0bffd17 	ldw	r2,-12(fp)
 2000b3c:	00c00044 	movi	r3,1
 2000b40:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
 2000b44:	01000584 	movi	r4,22
 2000b48:	200028c0 	call	200028c <my_wait>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 2000b4c:	e0bffe17 	ldw	r2,-8(fp)
 2000b50:	10800037 	ldwio	r2,0(r2)
 2000b54:	1005003a 	cmpeq	r2,r2,zero
 2000b58:	10803fcc 	andi	r2,r2,255
 2000b5c:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 2000b60:	e0bffd17 	ldw	r2,-12(fp)
 2000b64:	0007883a 	mov	r3,zero
 2000b68:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 2000b6c:	01000584 	movi	r4,22
 2000b70:	200028c0 	call	200028c <my_wait>
    return bAck;
 2000b74:	e0bffc17 	ldw	r2,-16(fp)
}    
 2000b78:	e037883a 	mov	sp,fp
 2000b7c:	dfc00117 	ldw	ra,4(sp)
 2000b80:	df000017 	ldw	fp,0(sp)
 2000b84:	dec00204 	addi	sp,sp,8
 2000b88:	f800283a 	ret

02000b8c <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 2000b8c:	defff804 	addi	sp,sp,-32
 2000b90:	dfc00715 	stw	ra,28(sp)
 2000b94:	df000615 	stw	fp,24(sp)
 2000b98:	df000604 	addi	fp,sp,24
 2000b9c:	e13ffc15 	stw	r4,-16(fp)
 2000ba0:	e17ffd15 	stw	r5,-12(fp)
 2000ba4:	e1bffe15 	stw	r6,-8(fp)
 2000ba8:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 2000bac:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 2000bb0:	e0bffd17 	ldw	r2,-12(fp)
 2000bb4:	10800104 	addi	r2,r2,4
 2000bb8:	0007883a 	mov	r3,zero
 2000bbc:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
 2000bc0:	e0bffc17 	ldw	r2,-16(fp)
 2000bc4:	0007883a 	mov	r3,zero
 2000bc8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 2000bcc:	01000584 	movi	r4,22
 2000bd0:	200028c0 	call	200028c <my_wait>

    for(i=0;i<8;i++){
 2000bd4:	e03ffb15 	stw	zero,-20(fp)
 2000bd8:	00001606 	br	2000c34 <i2c_read+0xa8>
        Data <<= 1;
 2000bdc:	e0bffa03 	ldbu	r2,-24(fp)
 2000be0:	1085883a 	add	r2,r2,r2
 2000be4:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
 2000be8:	e0bffc17 	ldw	r2,-16(fp)
 2000bec:	00c00044 	movi	r3,1
 2000bf0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 2000bf4:	01000584 	movi	r4,22
 2000bf8:	200028c0 	call	200028c <my_wait>
        if (SDA_READ(data_base))  // read data   
 2000bfc:	e0bffd17 	ldw	r2,-12(fp)
 2000c00:	10800037 	ldwio	r2,0(r2)
 2000c04:	10000326 	beq	r2,zero,2000c14 <i2c_read+0x88>
            Data |= 0x01;
 2000c08:	e0bffa03 	ldbu	r2,-24(fp)
 2000c0c:	10800054 	ori	r2,r2,1
 2000c10:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
 2000c14:	e0bffc17 	ldw	r2,-16(fp)
 2000c18:	0007883a 	mov	r3,zero
 2000c1c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 2000c20:	01000584 	movi	r4,22
 2000c24:	200028c0 	call	200028c <my_wait>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 2000c28:	e0bffb17 	ldw	r2,-20(fp)
 2000c2c:	10800044 	addi	r2,r2,1
 2000c30:	e0bffb15 	stw	r2,-20(fp)
 2000c34:	e0bffb17 	ldw	r2,-20(fp)
 2000c38:	10800210 	cmplti	r2,r2,8
 2000c3c:	103fe71e 	bne	r2,zero,2000bdc <__alt_mem_epcs_flash_controller_0+0xfcfffbdc>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 2000c40:	e0bffc17 	ldw	r2,-16(fp)
 2000c44:	0007883a 	mov	r3,zero
 2000c48:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 2000c4c:	e0bffd17 	ldw	r2,-12(fp)
 2000c50:	10800104 	addi	r2,r2,4
 2000c54:	1007883a 	mov	r3,r2
 2000c58:	00800044 	movi	r2,1
 2000c5c:	18800035 	stwio	r2,0(r3)
    if (bAck)
 2000c60:	e0bfff17 	ldw	r2,-4(fp)
 2000c64:	10000426 	beq	r2,zero,2000c78 <i2c_read+0xec>
        SDA_LOW(data_base);
 2000c68:	e0bffd17 	ldw	r2,-12(fp)
 2000c6c:	0007883a 	mov	r3,zero
 2000c70:	10c00035 	stwio	r3,0(r2)
 2000c74:	00000306 	br	2000c84 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
 2000c78:	e0bffd17 	ldw	r2,-12(fp)
 2000c7c:	00c00044 	movi	r3,1
 2000c80:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
 2000c84:	e0bffc17 	ldw	r2,-16(fp)
 2000c88:	00c00044 	movi	r3,1
 2000c8c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
 2000c90:	01000584 	movi	r4,22
 2000c94:	200028c0 	call	200028c <my_wait>
    SCL_LOW(clk_base); // clock low
 2000c98:	e0bffc17 	ldw	r2,-16(fp)
 2000c9c:	0007883a 	mov	r3,zero
 2000ca0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 2000ca4:	01000584 	movi	r4,22
 2000ca8:	200028c0 	call	200028c <my_wait>
    SDA_LOW(data_base);  // data low
 2000cac:	e0bffd17 	ldw	r2,-12(fp)
 2000cb0:	0007883a 	mov	r3,zero
 2000cb4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
 2000cb8:	01000584 	movi	r4,22
 2000cbc:	200028c0 	call	200028c <my_wait>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 2000cc0:	e0bffe17 	ldw	r2,-8(fp)
 2000cc4:	e0fffa03 	ldbu	r3,-24(fp)
 2000cc8:	10c00005 	stb	r3,0(r2)
}
 2000ccc:	0001883a 	nop
 2000cd0:	e037883a 	mov	sp,fp
 2000cd4:	dfc00117 	ldw	ra,4(sp)
 2000cd8:	df000017 	ldw	fp,0(sp)
 2000cdc:	dec00204 	addi	sp,sp,8
 2000ce0:	f800283a 	ret

02000ce4 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
 2000ce4:	defff704 	addi	sp,sp,-36
 2000ce8:	dfc00815 	stw	ra,32(sp)
 2000cec:	df000715 	stw	fp,28(sp)
 2000cf0:	df000704 	addi	fp,sp,28
 2000cf4:	e13ffb15 	stw	r4,-20(fp)
 2000cf8:	e17ffc15 	stw	r5,-16(fp)
 2000cfc:	3009883a 	mov	r4,r6
 2000d00:	3807883a 	mov	r3,r7
 2000d04:	e0800217 	ldw	r2,8(fp)
 2000d08:	e13ffd05 	stb	r4,-12(fp)
 2000d0c:	e0fffe0d 	sth	r3,-8(fp)
 2000d10:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 2000d14:	00800044 	movi	r2,1
 2000d18:	e0bff915 	stw	r2,-28(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 2000d1c:	e0bffe0b 	ldhu	r2,-8(fp)
 2000d20:	1004d23a 	srli	r2,r2,8
 2000d24:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
 2000d28:	e0bffe0b 	ldhu	r2,-8(fp)
 2000d2c:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 2000d30:	e17ffc17 	ldw	r5,-16(fp)
 2000d34:	e13ffb17 	ldw	r4,-20(fp)
 2000d38:	20009240 	call	2000924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2000d3c:	e0bffd03 	ldbu	r2,-12(fp)
 2000d40:	10803fcc 	andi	r2,r2,255
 2000d44:	100d883a 	mov	r6,r2
 2000d48:	e17ffc17 	ldw	r5,-16(fp)
 2000d4c:	e13ffb17 	ldw	r4,-20(fp)
 2000d50:	2000a280 	call	2000a28 <i2c_write>
 2000d54:	1000041e 	bne	r2,zero,2000d68 <I2CL_Write+0x84>
        bSuccess = FALSE;
 2000d58:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 2000d5c:	01008074 	movhi	r4,513
 2000d60:	211a0d04 	addi	r4,r4,26676
 2000d64:	2001fcc0 	call	2001fcc <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 2000d68:	e0bff917 	ldw	r2,-28(fp)
 2000d6c:	10000a26 	beq	r2,zero,2000d98 <I2CL_Write+0xb4>
 2000d70:	e0bffa03 	ldbu	r2,-24(fp)
 2000d74:	100d883a 	mov	r6,r2
 2000d78:	e17ffc17 	ldw	r5,-16(fp)
 2000d7c:	e13ffb17 	ldw	r4,-20(fp)
 2000d80:	2000a280 	call	2000a28 <i2c_write>
 2000d84:	1000041e 	bne	r2,zero,2000d98 <I2CL_Write+0xb4>
        bSuccess = FALSE;
 2000d88:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 2000d8c:	01008074 	movhi	r4,513
 2000d90:	211a6b04 	addi	r4,r4,27052
 2000d94:	2001fcc0 	call	2001fcc <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 2000d98:	e0bff917 	ldw	r2,-28(fp)
 2000d9c:	10000a26 	beq	r2,zero,2000dc8 <I2CL_Write+0xe4>
 2000da0:	e0bffa43 	ldbu	r2,-23(fp)
 2000da4:	100d883a 	mov	r6,r2
 2000da8:	e17ffc17 	ldw	r5,-16(fp)
 2000dac:	e13ffb17 	ldw	r4,-20(fp)
 2000db0:	2000a280 	call	2000a28 <i2c_write>
 2000db4:	1000041e 	bne	r2,zero,2000dc8 <I2CL_Write+0xe4>
        bSuccess = FALSE;
 2000db8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 2000dbc:	01008074 	movhi	r4,513
 2000dc0:	211a7504 	addi	r4,r4,27092
 2000dc4:	2001fcc0 	call	2001fcc <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 2000dc8:	e0bff917 	ldw	r2,-28(fp)
 2000dcc:	10000a26 	beq	r2,zero,2000df8 <I2CL_Write+0x114>
 2000dd0:	e0bfff03 	ldbu	r2,-4(fp)
 2000dd4:	100d883a 	mov	r6,r2
 2000dd8:	e17ffc17 	ldw	r5,-16(fp)
 2000ddc:	e13ffb17 	ldw	r4,-20(fp)
 2000de0:	2000a280 	call	2000a28 <i2c_write>
 2000de4:	1000041e 	bne	r2,zero,2000df8 <I2CL_Write+0x114>
        bSuccess = FALSE;
 2000de8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 2000dec:	01008074 	movhi	r4,513
 2000df0:	211a1e04 	addi	r4,r4,26744
 2000df4:	2001fcc0 	call	2001fcc <myprintf>
    }
    i2c_stop(clk_base, data_base);
 2000df8:	e17ffc17 	ldw	r5,-16(fp)
 2000dfc:	e13ffb17 	ldw	r4,-20(fp)
 2000e00:	20009b00 	call	20009b0 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 2000e04:	0106d604 	movi	r4,7000
 2000e08:	201341c0 	call	201341c <usleep>
    
    return bSuccess;
 2000e0c:	e0bff917 	ldw	r2,-28(fp)
    
}
 2000e10:	e037883a 	mov	sp,fp
 2000e14:	dfc00117 	ldw	ra,4(sp)
 2000e18:	df000017 	ldw	fp,0(sp)
 2000e1c:	dec00204 	addi	sp,sp,8
 2000e20:	f800283a 	ret

02000e24 <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
 2000e24:	defff804 	addi	sp,sp,-32
 2000e28:	dfc00715 	stw	ra,28(sp)
 2000e2c:	df000615 	stw	fp,24(sp)
 2000e30:	df000604 	addi	fp,sp,24
 2000e34:	e13ffc15 	stw	r4,-16(fp)
 2000e38:	e17ffd15 	stw	r5,-12(fp)
 2000e3c:	3007883a 	mov	r3,r6
 2000e40:	3805883a 	mov	r2,r7
 2000e44:	e0fffe05 	stb	r3,-8(fp)
 2000e48:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 2000e4c:	00800044 	movi	r2,1
 2000e50:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 2000e54:	e0bfff0b 	ldhu	r2,-4(fp)
 2000e58:	1004d23a 	srli	r2,r2,8
 2000e5c:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = ControlAddr & 0xFF; 
 2000e60:	e0bfff0b 	ldhu	r2,-4(fp)
 2000e64:	e0bffb45 	stb	r2,-19(fp)

    i2c_start(clk_base, data_base);
 2000e68:	e17ffd17 	ldw	r5,-12(fp)
 2000e6c:	e13ffc17 	ldw	r4,-16(fp)
 2000e70:	20009240 	call	2000924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2000e74:	e0bffe03 	ldbu	r2,-8(fp)
 2000e78:	10803fcc 	andi	r2,r2,255
 2000e7c:	100d883a 	mov	r6,r2
 2000e80:	e17ffd17 	ldw	r5,-12(fp)
 2000e84:	e13ffc17 	ldw	r4,-16(fp)
 2000e88:	2000a280 	call	2000a28 <i2c_write>
 2000e8c:	1000041e 	bne	r2,zero,2000ea0 <I2CL_Read+0x7c>
        bSuccess = FALSE;
 2000e90:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 2000e94:	01008074 	movhi	r4,513
 2000e98:	211a0d04 	addi	r4,r4,26676
 2000e9c:	2001fcc0 	call	2001fcc <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 2000ea0:	e0bffa17 	ldw	r2,-24(fp)
 2000ea4:	10000a26 	beq	r2,zero,2000ed0 <I2CL_Read+0xac>
 2000ea8:	e0bffb03 	ldbu	r2,-20(fp)
 2000eac:	100d883a 	mov	r6,r2
 2000eb0:	e17ffd17 	ldw	r5,-12(fp)
 2000eb4:	e13ffc17 	ldw	r4,-16(fp)
 2000eb8:	2000a280 	call	2000a28 <i2c_write>
 2000ebc:	1000041e 	bne	r2,zero,2000ed0 <I2CL_Read+0xac>
        bSuccess = FALSE;
 2000ec0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 2000ec4:	01008074 	movhi	r4,513
 2000ec8:	211a6b04 	addi	r4,r4,27052
 2000ecc:	2001fcc0 	call	2001fcc <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 2000ed0:	e0bffa17 	ldw	r2,-24(fp)
 2000ed4:	10000a26 	beq	r2,zero,2000f00 <I2CL_Read+0xdc>
 2000ed8:	e0bffb43 	ldbu	r2,-19(fp)
 2000edc:	100d883a 	mov	r6,r2
 2000ee0:	e17ffd17 	ldw	r5,-12(fp)
 2000ee4:	e13ffc17 	ldw	r4,-16(fp)
 2000ee8:	2000a280 	call	2000a28 <i2c_write>
 2000eec:	1000041e 	bne	r2,zero,2000f00 <I2CL_Read+0xdc>
        bSuccess = FALSE;
 2000ef0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 2000ef4:	01008074 	movhi	r4,513
 2000ef8:	211a7504 	addi	r4,r4,27092
 2000efc:	2001fcc0 	call	2001fcc <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 2000f00:	e17ffd17 	ldw	r5,-12(fp)
 2000f04:	e13ffc17 	ldw	r4,-16(fp)
 2000f08:	20009240 	call	2000924 <i2c_start>
    DeviceAddr |= 1; // Read
 2000f0c:	e0bffe03 	ldbu	r2,-8(fp)
 2000f10:	10800054 	ori	r2,r2,1
 2000f14:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 2000f18:	e0bffa17 	ldw	r2,-24(fp)
 2000f1c:	10000b26 	beq	r2,zero,2000f4c <I2CL_Read+0x128>
 2000f20:	e0bffe03 	ldbu	r2,-8(fp)
 2000f24:	10803fcc 	andi	r2,r2,255
 2000f28:	100d883a 	mov	r6,r2
 2000f2c:	e17ffd17 	ldw	r5,-12(fp)
 2000f30:	e13ffc17 	ldw	r4,-16(fp)
 2000f34:	2000a280 	call	2000a28 <i2c_write>
 2000f38:	1000041e 	bne	r2,zero,2000f4c <I2CL_Read+0x128>
        bSuccess = FALSE;
 2000f3c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 2000f40:	01008074 	movhi	r4,513
 2000f44:	211a4104 	addi	r4,r4,26884
 2000f48:	2001fcc0 	call	2001fcc <myprintf>
    }
    
    if (bSuccess){
 2000f4c:	e0bffa17 	ldw	r2,-24(fp)
 2000f50:	10000526 	beq	r2,zero,2000f68 <I2CL_Read+0x144>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 2000f54:	000f883a 	mov	r7,zero
 2000f58:	e1800217 	ldw	r6,8(fp)
 2000f5c:	e17ffd17 	ldw	r5,-12(fp)
 2000f60:	e13ffc17 	ldw	r4,-16(fp)
 2000f64:	2000b8c0 	call	2000b8c <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 2000f68:	e17ffd17 	ldw	r5,-12(fp)
 2000f6c:	e13ffc17 	ldw	r4,-16(fp)
 2000f70:	20009b00 	call	20009b0 <i2c_stop>
    
    return bSuccess;    
 2000f74:	e0bffa17 	ldw	r2,-24(fp)
}
 2000f78:	e037883a 	mov	sp,fp
 2000f7c:	dfc00117 	ldw	ra,4(sp)
 2000f80:	df000017 	ldw	fp,0(sp)
 2000f84:	dec00204 	addi	sp,sp,8
 2000f88:	f800283a 	ret

02000f8c <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 2000f8c:	defff604 	addi	sp,sp,-40
 2000f90:	dfc00915 	stw	ra,36(sp)
 2000f94:	df000815 	stw	fp,32(sp)
 2000f98:	df000804 	addi	fp,sp,32
 2000f9c:	e13ffb15 	stw	r4,-20(fp)
 2000fa0:	e17ffc15 	stw	r5,-16(fp)
 2000fa4:	3009883a 	mov	r4,r6
 2000fa8:	3807883a 	mov	r3,r7
 2000fac:	e0800317 	ldw	r2,12(fp)
 2000fb0:	e13ffd05 	stb	r4,-12(fp)
 2000fb4:	e0fffe0d 	sth	r3,-8(fp)
 2000fb8:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 2000fbc:	00800044 	movi	r2,1
 2000fc0:	e0bff915 	stw	r2,-28(fp)
  // alt_u8 ControlAddr = 0;
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 2000fc4:	e0bffe0b 	ldhu	r2,-8(fp)
 2000fc8:	1004d23a 	srli	r2,r2,8
 2000fcc:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF;     
 2000fd0:	e0bffe0b 	ldhu	r2,-8(fp)
 2000fd4:	e0bffa45 	stb	r2,-23(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 2000fd8:	e17ffc17 	ldw	r5,-16(fp)
 2000fdc:	e13ffb17 	ldw	r4,-20(fp)
 2000fe0:	20009240 	call	2000924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2000fe4:	e0bffd03 	ldbu	r2,-12(fp)
 2000fe8:	10803fcc 	andi	r2,r2,255
 2000fec:	100d883a 	mov	r6,r2
 2000ff0:	e17ffc17 	ldw	r5,-16(fp)
 2000ff4:	e13ffb17 	ldw	r4,-20(fp)
 2000ff8:	2000a280 	call	2000a28 <i2c_write>
 2000ffc:	1000041e 	bne	r2,zero,2001010 <I2CL_MultipleRead+0x84>
        bSuccess = FALSE;
 2001000:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 2001004:	01008074 	movhi	r4,513
 2001008:	211a0d04 	addi	r4,r4,26676
 200100c:	2001fcc0 	call	2001fcc <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 2001010:	e0bff917 	ldw	r2,-28(fp)
 2001014:	10000a26 	beq	r2,zero,2001040 <I2CL_MultipleRead+0xb4>
 2001018:	e0bffa03 	ldbu	r2,-24(fp)
 200101c:	100d883a 	mov	r6,r2
 2001020:	e17ffc17 	ldw	r5,-16(fp)
 2001024:	e13ffb17 	ldw	r4,-20(fp)
 2001028:	2000a280 	call	2000a28 <i2c_write>
 200102c:	1000041e 	bne	r2,zero,2001040 <I2CL_MultipleRead+0xb4>
        bSuccess = FALSE;
 2001030:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 2001034:	01008074 	movhi	r4,513
 2001038:	211a6b04 	addi	r4,r4,27052
 200103c:	2001fcc0 	call	2001fcc <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 2001040:	e0bff917 	ldw	r2,-28(fp)
 2001044:	10000a26 	beq	r2,zero,2001070 <I2CL_MultipleRead+0xe4>
 2001048:	e0bffa43 	ldbu	r2,-23(fp)
 200104c:	100d883a 	mov	r6,r2
 2001050:	e17ffc17 	ldw	r5,-16(fp)
 2001054:	e13ffb17 	ldw	r4,-20(fp)
 2001058:	2000a280 	call	2000a28 <i2c_write>
 200105c:	1000041e 	bne	r2,zero,2001070 <I2CL_MultipleRead+0xe4>
        bSuccess = FALSE;
 2001060:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 2001064:	01008074 	movhi	r4,513
 2001068:	211a7504 	addi	r4,r4,27092
 200106c:	2001fcc0 	call	2001fcc <myprintf>
    }    
    if (bSuccess)        
 2001070:	e0bff917 	ldw	r2,-28(fp)
 2001074:	10000326 	beq	r2,zero,2001084 <I2CL_MultipleRead+0xf8>
        i2c_start(clk_base, data_base);  // restart
 2001078:	e17ffc17 	ldw	r5,-16(fp)
 200107c:	e13ffb17 	ldw	r4,-20(fp)
 2001080:	20009240 	call	2000924 <i2c_start>
    DeviceAddr |= 1; // Read
 2001084:	e0bffd03 	ldbu	r2,-12(fp)
 2001088:	10800054 	ori	r2,r2,1
 200108c:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 2001090:	e0bff917 	ldw	r2,-28(fp)
 2001094:	10000b26 	beq	r2,zero,20010c4 <I2CL_MultipleRead+0x138>
 2001098:	e0bffd03 	ldbu	r2,-12(fp)
 200109c:	10803fcc 	andi	r2,r2,255
 20010a0:	100d883a 	mov	r6,r2
 20010a4:	e17ffc17 	ldw	r5,-16(fp)
 20010a8:	e13ffb17 	ldw	r4,-20(fp)
 20010ac:	2000a280 	call	2000a28 <i2c_write>
 20010b0:	1000041e 	bne	r2,zero,20010c4 <I2CL_MultipleRead+0x138>
        bSuccess = FALSE;
 20010b4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
 20010b8:	01008074 	movhi	r4,513
 20010bc:	211a7f04 	addi	r4,r4,27132
 20010c0:	2001fcc0 	call	2001fcc <myprintf>
    }
    
    if (bSuccess){
 20010c4:	e0bff917 	ldw	r2,-28(fp)
 20010c8:	10001726 	beq	r2,zero,2001128 <I2CL_MultipleRead+0x19c>
        for(i=0;i<len && bSuccess;i++){
 20010cc:	e03ff815 	stw	zero,-32(fp)
 20010d0:	00001006 	br	2001114 <I2CL_MultipleRead+0x188>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
 20010d4:	e0bff817 	ldw	r2,-32(fp)
 20010d8:	e0c00217 	ldw	r3,8(fp)
 20010dc:	1889883a 	add	r4,r3,r2
 20010e0:	e0bfff0b 	ldhu	r2,-4(fp)
 20010e4:	10ffffc4 	addi	r3,r2,-1
 20010e8:	e0bff817 	ldw	r2,-32(fp)
 20010ec:	1884c03a 	cmpne	r2,r3,r2
 20010f0:	10803fcc 	andi	r2,r2,255
 20010f4:	100f883a 	mov	r7,r2
 20010f8:	200d883a 	mov	r6,r4
 20010fc:	e17ffc17 	ldw	r5,-16(fp)
 2001100:	e13ffb17 	ldw	r4,-20(fp)
 2001104:	2000b8c0 	call	2000b8c <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 2001108:	e0bff817 	ldw	r2,-32(fp)
 200110c:	10800044 	addi	r2,r2,1
 2001110:	e0bff815 	stw	r2,-32(fp)
 2001114:	e0bfff0b 	ldhu	r2,-4(fp)
 2001118:	e0fff817 	ldw	r3,-32(fp)
 200111c:	1880020e 	bge	r3,r2,2001128 <I2CL_MultipleRead+0x19c>
 2001120:	e0bff917 	ldw	r2,-28(fp)
 2001124:	103feb1e 	bne	r2,zero,20010d4 <__alt_mem_epcs_flash_controller_0+0xfd0000d4>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
 2001128:	e17ffc17 	ldw	r5,-16(fp)
 200112c:	e13ffb17 	ldw	r4,-20(fp)
 2001130:	20009b00 	call	20009b0 <i2c_stop>
    
    return bSuccess;    
 2001134:	e0bff917 	ldw	r2,-28(fp)
    
} 
 2001138:	e037883a 	mov	sp,fp
 200113c:	dfc00117 	ldw	ra,4(sp)
 2001140:	df000017 	ldw	fp,0(sp)
 2001144:	dec00204 	addi	sp,sp,8
 2001148:	f800283a 	ret

0200114c <I2CL_MultipleWrite>:



bool I2CL_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 200114c:	defff604 	addi	sp,sp,-40
 2001150:	dfc00915 	stw	ra,36(sp)
 2001154:	df000815 	stw	fp,32(sp)
 2001158:	df000804 	addi	fp,sp,32
 200115c:	e13ffb15 	stw	r4,-20(fp)
 2001160:	e17ffc15 	stw	r5,-16(fp)
 2001164:	3009883a 	mov	r4,r6
 2001168:	3807883a 	mov	r3,r7
 200116c:	e0800317 	ldw	r2,12(fp)
 2001170:	e13ffd05 	stb	r4,-12(fp)
 2001174:	e0fffe0d 	sth	r3,-8(fp)
 2001178:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 200117c:	00800044 	movi	r2,1
 2001180:	e0bff815 	stw	r2,-32(fp)
    alt_u8 AddrHigh, AddrLow;
    int i;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 2001184:	e0bffe0b 	ldhu	r2,-8(fp)
 2001188:	1004d23a 	srli	r2,r2,8
 200118c:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
 2001190:	e0bffe0b 	ldhu	r2,-8(fp)
 2001194:	e0bffa45 	stb	r2,-23(fp)
    

    i2c_start(clk_base, data_base);
 2001198:	e17ffc17 	ldw	r5,-16(fp)
 200119c:	e13ffb17 	ldw	r4,-20(fp)
 20011a0:	20009240 	call	2000924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 20011a4:	e0bffd03 	ldbu	r2,-12(fp)
 20011a8:	10803fcc 	andi	r2,r2,255
 20011ac:	100d883a 	mov	r6,r2
 20011b0:	e17ffc17 	ldw	r5,-16(fp)
 20011b4:	e13ffb17 	ldw	r4,-20(fp)
 20011b8:	2000a280 	call	2000a28 <i2c_write>
 20011bc:	1000041e 	bne	r2,zero,20011d0 <I2CL_MultipleWrite+0x84>
        bSuccess = FALSE;
 20011c0:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 20011c4:	01008074 	movhi	r4,513
 20011c8:	211a0d04 	addi	r4,r4,26676
 20011cc:	2001fcc0 	call	2001fcc <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 20011d0:	e0bff817 	ldw	r2,-32(fp)
 20011d4:	10000a26 	beq	r2,zero,2001200 <I2CL_MultipleWrite+0xb4>
 20011d8:	e0bffa03 	ldbu	r2,-24(fp)
 20011dc:	100d883a 	mov	r6,r2
 20011e0:	e17ffc17 	ldw	r5,-16(fp)
 20011e4:	e13ffb17 	ldw	r4,-20(fp)
 20011e8:	2000a280 	call	2000a28 <i2c_write>
 20011ec:	1000041e 	bne	r2,zero,2001200 <I2CL_MultipleWrite+0xb4>
        bSuccess = FALSE;
 20011f0:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 20011f4:	01008074 	movhi	r4,513
 20011f8:	211a6b04 	addi	r4,r4,27052
 20011fc:	2001fcc0 	call	2001fcc <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 2001200:	e0bff817 	ldw	r2,-32(fp)
 2001204:	10000a26 	beq	r2,zero,2001230 <I2CL_MultipleWrite+0xe4>
 2001208:	e0bffa43 	ldbu	r2,-23(fp)
 200120c:	100d883a 	mov	r6,r2
 2001210:	e17ffc17 	ldw	r5,-16(fp)
 2001214:	e13ffb17 	ldw	r4,-20(fp)
 2001218:	2000a280 	call	2000a28 <i2c_write>
 200121c:	1000041e 	bne	r2,zero,2001230 <I2CL_MultipleWrite+0xe4>
        bSuccess = FALSE;
 2001220:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 2001224:	01008074 	movhi	r4,513
 2001228:	211a7504 	addi	r4,r4,27092
 200122c:	2001fcc0 	call	2001fcc <myprintf>
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
 2001230:	e0bff817 	ldw	r2,-32(fp)
 2001234:	10001926 	beq	r2,zero,200129c <I2CL_MultipleWrite+0x150>
        for(i=0;i<len && bSuccess;i++){
 2001238:	e03ff915 	stw	zero,-28(fp)
 200123c:	00000d06 	br	2001274 <I2CL_MultipleWrite+0x128>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
 2001240:	e0bff917 	ldw	r2,-28(fp)
 2001244:	e0c00217 	ldw	r3,8(fp)
 2001248:	1885883a 	add	r2,r3,r2
 200124c:	10800003 	ldbu	r2,0(r2)
 2001250:	10803fcc 	andi	r2,r2,255
 2001254:	100d883a 	mov	r6,r2
 2001258:	e17ffc17 	ldw	r5,-16(fp)
 200125c:	e13ffb17 	ldw	r4,-20(fp)
 2001260:	2000a280 	call	2000a28 <i2c_write>
 2001264:	e0bff815 	stw	r2,-32(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i=0;i<len && bSuccess;i++){
 2001268:	e0bff917 	ldw	r2,-28(fp)
 200126c:	10800044 	addi	r2,r2,1
 2001270:	e0bff915 	stw	r2,-28(fp)
 2001274:	e0bfff0b 	ldhu	r2,-4(fp)
 2001278:	e0fff917 	ldw	r3,-28(fp)
 200127c:	1880020e 	bge	r3,r2,2001288 <I2CL_MultipleWrite+0x13c>
 2001280:	e0bff817 	ldw	r2,-32(fp)
 2001284:	103fee1e 	bne	r2,zero,2001240 <__alt_mem_epcs_flash_controller_0+0xfd000240>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
        }  
        //bSuccess = FALSE;
        if (!bSuccess)
 2001288:	e0bff817 	ldw	r2,-32(fp)
 200128c:	1000031e 	bne	r2,zero,200129c <I2CL_MultipleWrite+0x150>
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 2001290:	01008074 	movhi	r4,513
 2001294:	211a1e04 	addi	r4,r4,26744
 2001298:	2001fcc0 	call	2001fcc <myprintf>
    }
    i2c_stop(clk_base, data_base);
 200129c:	e17ffc17 	ldw	r5,-16(fp)
 20012a0:	e13ffb17 	ldw	r4,-20(fp)
 20012a4:	20009b00 	call	20009b0 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 20012a8:	0106d604 	movi	r4,7000
 20012ac:	201341c0 	call	201341c <usleep>
    
    return bSuccess;
 20012b0:	e0bff817 	ldw	r2,-32(fp)
    
}
 20012b4:	e037883a 	mov	sp,fp
 20012b8:	dfc00117 	ldw	ra,4(sp)
 20012bc:	df000017 	ldw	fp,0(sp)
 20012c0:	dec00204 	addi	sp,sp,8
 20012c4:	f800283a 	ret

020012c8 <I2CL_Read16>:
 


bool I2CL_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 *pControlData){
 20012c8:	defff604 	addi	sp,sp,-40
 20012cc:	dfc00915 	stw	ra,36(sp)
 20012d0:	df000815 	stw	fp,32(sp)
 20012d4:	df000804 	addi	fp,sp,32
 20012d8:	e13ffc15 	stw	r4,-16(fp)
 20012dc:	e17ffd15 	stw	r5,-12(fp)
 20012e0:	3007883a 	mov	r3,r6
 20012e4:	3805883a 	mov	r2,r7
 20012e8:	e0fffe05 	stb	r3,-8(fp)
 20012ec:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    bSuccess = I2CL_MultipleRead(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 20012f0:	e0fffe07 	ldb	r3,-8(fp)
 20012f4:	e13fff0b 	ldhu	r4,-4(fp)
 20012f8:	00800084 	movi	r2,2
 20012fc:	d8800115 	stw	r2,4(sp)
 2001300:	e0bffb04 	addi	r2,fp,-20
 2001304:	d8800015 	stw	r2,0(sp)
 2001308:	200f883a 	mov	r7,r4
 200130c:	180d883a 	mov	r6,r3
 2001310:	e17ffd17 	ldw	r5,-12(fp)
 2001314:	e13ffc17 	ldw	r4,-16(fp)
 2001318:	2000f8c0 	call	2000f8c <I2CL_MultipleRead>
 200131c:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess){
 2001320:	e0bffa17 	ldw	r2,-24(fp)
 2001324:	10000a26 	beq	r2,zero,2001350 <I2CL_Read16+0x88>
        *pControlData = (szData[0] << 8 ) | szData[1];
 2001328:	e0bffb03 	ldbu	r2,-20(fp)
 200132c:	10803fcc 	andi	r2,r2,255
 2001330:	1004923a 	slli	r2,r2,8
 2001334:	1007883a 	mov	r3,r2
 2001338:	e0bffb43 	ldbu	r2,-19(fp)
 200133c:	10803fcc 	andi	r2,r2,255
 2001340:	1884b03a 	or	r2,r3,r2
 2001344:	1007883a 	mov	r3,r2
 2001348:	e0800217 	ldw	r2,8(fp)
 200134c:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;    
 2001350:	e0bffa17 	ldw	r2,-24(fp)
}
 2001354:	e037883a 	mov	sp,fp
 2001358:	dfc00117 	ldw	ra,4(sp)
 200135c:	df000017 	ldw	fp,0(sp)
 2001360:	dec00204 	addi	sp,sp,8
 2001364:	f800283a 	ret

02001368 <I2CL_Write16>:

bool I2CL_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 ControlData){
 2001368:	defff504 	addi	sp,sp,-44
 200136c:	dfc00a15 	stw	ra,40(sp)
 2001370:	df000915 	stw	fp,36(sp)
 2001374:	df000904 	addi	fp,sp,36
 2001378:	e13ffb15 	stw	r4,-20(fp)
 200137c:	e17ffc15 	stw	r5,-16(fp)
 2001380:	3009883a 	mov	r4,r6
 2001384:	3807883a 	mov	r3,r7
 2001388:	e0800217 	ldw	r2,8(fp)
 200138c:	e13ffd05 	stb	r4,-12(fp)
 2001390:	e0fffe0d 	sth	r3,-8(fp)
 2001394:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    szData[0] = (ControlData >> 8) & 0xFF;
 2001398:	e0bfff0b 	ldhu	r2,-4(fp)
 200139c:	1004d23a 	srli	r2,r2,8
 20013a0:	e0bffa05 	stb	r2,-24(fp)
    szData[1] = ControlData & 0xFF;   
 20013a4:	e0bfff0b 	ldhu	r2,-4(fp)
 20013a8:	e0bffa45 	stb	r2,-23(fp)
    bSuccess = I2CL_MultipleWrite(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 20013ac:	e0fffd07 	ldb	r3,-12(fp)
 20013b0:	e13ffe0b 	ldhu	r4,-8(fp)
 20013b4:	00800084 	movi	r2,2
 20013b8:	d8800115 	stw	r2,4(sp)
 20013bc:	e0bffa04 	addi	r2,fp,-24
 20013c0:	d8800015 	stw	r2,0(sp)
 20013c4:	200f883a 	mov	r7,r4
 20013c8:	180d883a 	mov	r6,r3
 20013cc:	e17ffc17 	ldw	r5,-16(fp)
 20013d0:	e13ffb17 	ldw	r4,-20(fp)
 20013d4:	200114c0 	call	200114c <I2CL_MultipleWrite>
 20013d8:	e0bff915 	stw	r2,-28(fp)
    return bSuccess;    
 20013dc:	e0bff917 	ldw	r2,-28(fp)
}
 20013e0:	e037883a 	mov	sp,fp
 20013e4:	dfc00117 	ldw	ra,4(sp)
 20013e8:	df000017 	ldw	fp,0(sp)
 20013ec:	dec00204 	addi	sp,sp,8
 20013f0:	f800283a 	ret

020013f4 <Delay_Ms>:
#define BLUE 0x001f
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
 20013f4:	defffd04 	addi	sp,sp,-12
 20013f8:	dfc00215 	stw	ra,8(sp)
 20013fc:	df000115 	stw	fp,4(sp)
 2001400:	df000104 	addi	fp,sp,4
 2001404:	2005883a 	mov	r2,r4
 2001408:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
 200140c:	00000206 	br	2001418 <Delay_Ms+0x24>
    {
        usleep(1000);
 2001410:	0100fa04 	movi	r4,1000
 2001414:	201341c0 	call	201341c <usleep>
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
 2001418:	e0bfff0b 	ldhu	r2,-4(fp)
 200141c:	10ffffc4 	addi	r3,r2,-1
 2001420:	e0ffff0d 	sth	r3,-4(fp)
 2001424:	10bfffcc 	andi	r2,r2,65535
 2001428:	103ff91e 	bne	r2,zero,2001410 <__alt_mem_epcs_flash_controller_0+0xfd000410>
    {
        usleep(1000);
    }
}
 200142c:	0001883a 	nop
 2001430:	e037883a 	mov	sp,fp
 2001434:	dfc00117 	ldw	ra,4(sp)
 2001438:	df000017 	ldw	fp,0(sp)
 200143c:	dec00204 	addi	sp,sp,8
 2001440:	f800283a 	ret

02001444 <LCD_SetCursor>:


void LCD_SetCursor(alt_u16 Xpos, alt_u16 Ypos)
{
 2001444:	defffd04 	addi	sp,sp,-12
 2001448:	df000215 	stw	fp,8(sp)
 200144c:	df000204 	addi	fp,sp,8
 2001450:	2007883a 	mov	r3,r4
 2001454:	2805883a 	mov	r2,r5
 2001458:	e0fffe0d 	sth	r3,-8(fp)
 200145c:	e0bfff0d 	sth	r2,-4(fp)
	 LCD_WR_REG(0x002A);
 2001460:	00c00a84 	movi	r3,42
 2001464:	00814034 	movhi	r2,1280
 2001468:	10881804 	addi	r2,r2,8288
 200146c:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos>>8);
 2001470:	e0bffe0b 	ldhu	r2,-8(fp)
 2001474:	1004d23a 	srli	r2,r2,8
 2001478:	10ffffcc 	andi	r3,r2,65535
 200147c:	00814034 	movhi	r2,1280
 2001480:	10881904 	addi	r2,r2,8292
 2001484:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos&0XFF);
 2001488:	e0bffe0b 	ldhu	r2,-8(fp)
 200148c:	10c03fcc 	andi	r3,r2,255
 2001490:	00814034 	movhi	r2,1280
 2001494:	10881904 	addi	r2,r2,8292
 2001498:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002B);
 200149c:	00c00ac4 	movi	r3,43
 20014a0:	00814034 	movhi	r2,1280
 20014a4:	10881804 	addi	r2,r2,8288
 20014a8:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos>>8);
 20014ac:	e0bfff0b 	ldhu	r2,-4(fp)
 20014b0:	1004d23a 	srli	r2,r2,8
 20014b4:	10ffffcc 	andi	r3,r2,65535
 20014b8:	00814034 	movhi	r2,1280
 20014bc:	10881904 	addi	r2,r2,8292
 20014c0:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos&0XFF);
 20014c4:	e0bfff0b 	ldhu	r2,-4(fp)
 20014c8:	10c03fcc 	andi	r3,r2,255
 20014cc:	00814034 	movhi	r2,1280
 20014d0:	10881904 	addi	r2,r2,8292
 20014d4:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002C);
 20014d8:	00c00b04 	movi	r3,44
 20014dc:	00814034 	movhi	r2,1280
 20014e0:	10881804 	addi	r2,r2,8288
 20014e4:	10c00035 	stwio	r3,0(r2)
}
 20014e8:	0001883a 	nop
 20014ec:	e037883a 	mov	sp,fp
 20014f0:	df000017 	ldw	fp,0(sp)
 20014f4:	dec00104 	addi	sp,sp,4
 20014f8:	f800283a 	ret

020014fc <LCD_Clear>:

void LCD_Clear(alt_u16 Color)
{
 20014fc:	defffc04 	addi	sp,sp,-16
 2001500:	dfc00315 	stw	ra,12(sp)
 2001504:	df000215 	stw	fp,8(sp)
 2001508:	df000204 	addi	fp,sp,8
 200150c:	2005883a 	mov	r2,r4
 2001510:	e0bfff0d 	sth	r2,-4(fp)
        alt_u32 index=0;
 2001514:	e03ffe15 	stw	zero,-8(fp)
        LCD_SetCursor(0x00,0x0000);
 2001518:	000b883a 	mov	r5,zero
 200151c:	0009883a 	mov	r4,zero
 2001520:	20014440 	call	2001444 <LCD_SetCursor>
        LCD_WR_REG(0x002C);
 2001524:	00c00b04 	movi	r3,44
 2001528:	00814034 	movhi	r2,1280
 200152c:	10881804 	addi	r2,r2,8288
 2001530:	10c00035 	stwio	r3,0(r2)
        for(index=0;index<76800;index++)
 2001534:	e03ffe15 	stw	zero,-8(fp)
 2001538:	00000706 	br	2001558 <LCD_Clear+0x5c>
        {
        	LCD_WR_DATA(Color);
 200153c:	e0ffff0b 	ldhu	r3,-4(fp)
 2001540:	00814034 	movhi	r2,1280
 2001544:	10881904 	addi	r2,r2,8292
 2001548:	10c00035 	stwio	r3,0(r2)
void LCD_Clear(alt_u16 Color)
{
        alt_u32 index=0;
        LCD_SetCursor(0x00,0x0000);
        LCD_WR_REG(0x002C);
        for(index=0;index<76800;index++)
 200154c:	e0bffe17 	ldw	r2,-8(fp)
 2001550:	10800044 	addi	r2,r2,1
 2001554:	e0bffe15 	stw	r2,-8(fp)
 2001558:	e0fffe17 	ldw	r3,-8(fp)
 200155c:	00800074 	movhi	r2,1
 2001560:	108affc4 	addi	r2,r2,11263
 2001564:	10fff52e 	bgeu	r2,r3,200153c <__alt_mem_epcs_flash_controller_0+0xfd00053c>
        {
        	LCD_WR_DATA(Color);
        }
}
 2001568:	0001883a 	nop
 200156c:	e037883a 	mov	sp,fp
 2001570:	dfc00117 	ldw	ra,4(sp)
 2001574:	df000017 	ldw	fp,0(sp)
 2001578:	dec00204 	addi	sp,sp,8
 200157c:	f800283a 	ret

02001580 <LCD_ClearRnd>:

void LCD_ClearRnd()
{
 2001580:	defffd04 	addi	sp,sp,-12
 2001584:	dfc00215 	stw	ra,8(sp)
 2001588:	df000115 	stw	fp,4(sp)
 200158c:	df000104 	addi	fp,sp,4
        alt_u32 index=0;
 2001590:	e03fff15 	stw	zero,-4(fp)
        LCD_SetCursor(0x00,0x0000);
 2001594:	000b883a 	mov	r5,zero
 2001598:	0009883a 	mov	r4,zero
 200159c:	20014440 	call	2001444 <LCD_SetCursor>
        LCD_WR_REG(0x002C);
 20015a0:	00c00b04 	movi	r3,44
 20015a4:	00814034 	movhi	r2,1280
 20015a8:	10881804 	addi	r2,r2,8288
 20015ac:	10c00035 	stwio	r3,0(r2)
        for(index=0;index<76800;index++)
 20015b0:	e03fff15 	stw	zero,-4(fp)
 20015b4:	00000806 	br	20015d8 <LCD_ClearRnd+0x58>
        {
        	LCD_WR_DATA(rand());
 20015b8:	2005d040 	call	2005d04 <rand>
 20015bc:	1007883a 	mov	r3,r2
 20015c0:	00814034 	movhi	r2,1280
 20015c4:	10881904 	addi	r2,r2,8292
 20015c8:	10c00035 	stwio	r3,0(r2)
void LCD_ClearRnd()
{
        alt_u32 index=0;
        LCD_SetCursor(0x00,0x0000);
        LCD_WR_REG(0x002C);
        for(index=0;index<76800;index++)
 20015cc:	e0bfff17 	ldw	r2,-4(fp)
 20015d0:	10800044 	addi	r2,r2,1
 20015d4:	e0bfff15 	stw	r2,-4(fp)
 20015d8:	e0ffff17 	ldw	r3,-4(fp)
 20015dc:	00800074 	movhi	r2,1
 20015e0:	108affc4 	addi	r2,r2,11263
 20015e4:	10fff42e 	bgeu	r2,r3,20015b8 <__alt_mem_epcs_flash_controller_0+0xfd0005b8>
        {
        	LCD_WR_DATA(rand());
        }
}
 20015e8:	0001883a 	nop
 20015ec:	e037883a 	mov	sp,fp
 20015f0:	dfc00117 	ldw	ra,4(sp)
 20015f4:	df000017 	ldw	fp,0(sp)
 20015f8:	dec00204 	addi	sp,sp,8
 20015fc:	f800283a 	ret

02001600 <LCD_DrawImg240x320>:

void LCD_DrawImg240x320(alt_u16* img)
{
 2001600:	defffc04 	addi	sp,sp,-16
 2001604:	dfc00315 	stw	ra,12(sp)
 2001608:	df000215 	stw	fp,8(sp)
 200160c:	df000204 	addi	fp,sp,8
 2001610:	e13fff15 	stw	r4,-4(fp)
        alt_u32 index=0;
 2001614:	e03ffe15 	stw	zero,-8(fp)
        LCD_SetCursor(0x00,0x0000);
 2001618:	000b883a 	mov	r5,zero
 200161c:	0009883a 	mov	r4,zero
 2001620:	20014440 	call	2001444 <LCD_SetCursor>
        LCD_WR_REG(0x002C);
 2001624:	00c00b04 	movi	r3,44
 2001628:	00814034 	movhi	r2,1280
 200162c:	10881804 	addi	r2,r2,8288
 2001630:	10c00035 	stwio	r3,0(r2)
        for(index=0;index<76800;index++)
 2001634:	e03ffe15 	stw	zero,-8(fp)
 2001638:	00000d06 	br	2001670 <LCD_DrawImg240x320+0x70>
        {
        	LCD_WR_DATA(img[index]);
 200163c:	e0bffe17 	ldw	r2,-8(fp)
 2001640:	1085883a 	add	r2,r2,r2
 2001644:	1007883a 	mov	r3,r2
 2001648:	e0bfff17 	ldw	r2,-4(fp)
 200164c:	10c5883a 	add	r2,r2,r3
 2001650:	1080000b 	ldhu	r2,0(r2)
 2001654:	10ffffcc 	andi	r3,r2,65535
 2001658:	00814034 	movhi	r2,1280
 200165c:	10881904 	addi	r2,r2,8292
 2001660:	10c00035 	stwio	r3,0(r2)
void LCD_DrawImg240x320(alt_u16* img)
{
        alt_u32 index=0;
        LCD_SetCursor(0x00,0x0000);
        LCD_WR_REG(0x002C);
        for(index=0;index<76800;index++)
 2001664:	e0bffe17 	ldw	r2,-8(fp)
 2001668:	10800044 	addi	r2,r2,1
 200166c:	e0bffe15 	stw	r2,-8(fp)
 2001670:	e0fffe17 	ldw	r3,-8(fp)
 2001674:	00800074 	movhi	r2,1
 2001678:	108affc4 	addi	r2,r2,11263
 200167c:	10ffef2e 	bgeu	r2,r3,200163c <__alt_mem_epcs_flash_controller_0+0xfd00063c>
        {
        	LCD_WR_DATA(img[index]);
        }
}
 2001680:	0001883a 	nop
 2001684:	e037883a 	mov	sp,fp
 2001688:	dfc00117 	ldw	ra,4(sp)
 200168c:	df000017 	ldw	fp,0(sp)
 2001690:	dec00204 	addi	sp,sp,8
 2001694:	f800283a 	ret

02001698 <LCD_DrawPoint>:

void LCD_DrawPoint(alt_u16 x,alt_u16 y,alt_u16 color )
{
 2001698:	defffb04 	addi	sp,sp,-20
 200169c:	dfc00415 	stw	ra,16(sp)
 20016a0:	df000315 	stw	fp,12(sp)
 20016a4:	df000304 	addi	fp,sp,12
 20016a8:	2807883a 	mov	r3,r5
 20016ac:	3005883a 	mov	r2,r6
 20016b0:	e13ffd0d 	sth	r4,-12(fp)
 20016b4:	e0fffe0d 	sth	r3,-8(fp)
 20016b8:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(x,y);
 20016bc:	e0bffd0b 	ldhu	r2,-12(fp)
 20016c0:	e0fffe0b 	ldhu	r3,-8(fp)
 20016c4:	180b883a 	mov	r5,r3
 20016c8:	1009883a 	mov	r4,r2
 20016cc:	20014440 	call	2001444 <LCD_SetCursor>
        LCD_WR_REG(0x002C);
 20016d0:	00c00b04 	movi	r3,44
 20016d4:	00814034 	movhi	r2,1280
 20016d8:	10881804 	addi	r2,r2,8288
 20016dc:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(color);
 20016e0:	e0ffff0b 	ldhu	r3,-4(fp)
 20016e4:	00814034 	movhi	r2,1280
 20016e8:	10881904 	addi	r2,r2,8292
 20016ec:	10c00035 	stwio	r3,0(r2)
}
 20016f0:	0001883a 	nop
 20016f4:	e037883a 	mov	sp,fp
 20016f8:	dfc00117 	ldw	ra,4(sp)
 20016fc:	df000017 	ldw	fp,0(sp)
 2001700:	dec00204 	addi	sp,sp,8
 2001704:	f800283a 	ret

02001708 <LCD_Init>:
void LCD_Init()
{
 2001708:	defffe04 	addi	sp,sp,-8
 200170c:	dfc00115 	stw	ra,4(sp)
 2001710:	df000015 	stw	fp,0(sp)
 2001714:	d839883a 	mov	fp,sp
	alt_u16 data1,data2;
	alt_u16 data3,data4;
	Set_LCD_RST;
 2001718:	00c00044 	movi	r3,1
 200171c:	00814034 	movhi	r2,1280
 2001720:	10881004 	addi	r2,r2,8256
 2001724:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
 2001728:	01000044 	movi	r4,1
 200172c:	20013f40 	call	20013f4 <Delay_Ms>
	Clr_LCD_RST;
 2001730:	0007883a 	mov	r3,zero
 2001734:	00814034 	movhi	r2,1280
 2001738:	10881004 	addi	r2,r2,8256
 200173c:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);       // Delay 10ms // This delay time is necessary
 2001740:	01000284 	movi	r4,10
 2001744:	20013f40 	call	20013f4 <Delay_Ms>
	Set_LCD_RST;
 2001748:	00c00044 	movi	r3,1
 200174c:	00814034 	movhi	r2,1280
 2001750:	10881004 	addi	r2,r2,8256
 2001754:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);       // Delay 120 ms
 2001758:	01001e04 	movi	r4,120
 200175c:	20013f40 	call	20013f4 <Delay_Ms>
//	Clr_LCD_CS;



	LCD_WR_REG(0x0011); //Exit Sleep
 2001760:	00c00444 	movi	r3,17
 2001764:	00814034 	movhi	r2,1280
 2001768:	10881804 	addi	r2,r2,8288
 200176c:	10c00035 	stwio	r3,0(r2)
	LCD_WR_REG(0x00CF);
 2001770:	00c033c4 	movi	r3,207
 2001774:	00814034 	movhi	r2,1280
 2001778:	10881804 	addi	r2,r2,8288
 200177c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2001780:	0007883a 	mov	r3,zero
 2001784:	00814034 	movhi	r2,1280
 2001788:	10881904 	addi	r2,r2,8292
 200178c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0081);
 2001790:	00c02044 	movi	r3,129
 2001794:	00814034 	movhi	r2,1280
 2001798:	10881904 	addi	r2,r2,8292
 200179c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00c0);
 20017a0:	00c03004 	movi	r3,192
 20017a4:	00814034 	movhi	r2,1280
 20017a8:	10881904 	addi	r2,r2,8292
 20017ac:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00ED);
 20017b0:	00c03b44 	movi	r3,237
 20017b4:	00814034 	movhi	r2,1280
 20017b8:	10881804 	addi	r2,r2,8288
 20017bc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0064);
 20017c0:	00c01904 	movi	r3,100
 20017c4:	00814034 	movhi	r2,1280
 20017c8:	10881904 	addi	r2,r2,8292
 20017cc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0003);
 20017d0:	00c000c4 	movi	r3,3
 20017d4:	00814034 	movhi	r2,1280
 20017d8:	10881904 	addi	r2,r2,8292
 20017dc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0012);
 20017e0:	00c00484 	movi	r3,18
 20017e4:	00814034 	movhi	r2,1280
 20017e8:	10881904 	addi	r2,r2,8292
 20017ec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0081);
 20017f0:	00c02044 	movi	r3,129
 20017f4:	00814034 	movhi	r2,1280
 20017f8:	10881904 	addi	r2,r2,8292
 20017fc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E8);
 2001800:	00c03a04 	movi	r3,232
 2001804:	00814034 	movhi	r2,1280
 2001808:	10881804 	addi	r2,r2,8288
 200180c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0085);
 2001810:	00c02144 	movi	r3,133
 2001814:	00814034 	movhi	r2,1280
 2001818:	10881904 	addi	r2,r2,8292
 200181c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 2001820:	00c00044 	movi	r3,1
 2001824:	00814034 	movhi	r2,1280
 2001828:	10881904 	addi	r2,r2,8292
 200182c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00798);
 2001830:	00c1e604 	movi	r3,1944
 2001834:	00814034 	movhi	r2,1280
 2001838:	10881904 	addi	r2,r2,8292
 200183c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00CB);
 2001840:	00c032c4 	movi	r3,203
 2001844:	00814034 	movhi	r2,1280
 2001848:	10881804 	addi	r2,r2,8288
 200184c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0039);
 2001850:	00c00e44 	movi	r3,57
 2001854:	00814034 	movhi	r2,1280
 2001858:	10881904 	addi	r2,r2,8292
 200185c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002C);
 2001860:	00c00b04 	movi	r3,44
 2001864:	00814034 	movhi	r2,1280
 2001868:	10881904 	addi	r2,r2,8292
 200186c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2001870:	0007883a 	mov	r3,zero
 2001874:	00814034 	movhi	r2,1280
 2001878:	10881904 	addi	r2,r2,8292
 200187c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
 2001880:	00c00d04 	movi	r3,52
 2001884:	00814034 	movhi	r2,1280
 2001888:	10881904 	addi	r2,r2,8292
 200188c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0002);
 2001890:	00c00084 	movi	r3,2
 2001894:	00814034 	movhi	r2,1280
 2001898:	10881904 	addi	r2,r2,8292
 200189c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F7);
 20018a0:	00c03dc4 	movi	r3,247
 20018a4:	00814034 	movhi	r2,1280
 20018a8:	10881804 	addi	r2,r2,8288
 20018ac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
 20018b0:	00c00804 	movi	r3,32
 20018b4:	00814034 	movhi	r2,1280
 20018b8:	10881904 	addi	r2,r2,8292
 20018bc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00EA);
 20018c0:	00c03a84 	movi	r3,234
 20018c4:	00814034 	movhi	r2,1280
 20018c8:	10881804 	addi	r2,r2,8288
 20018cc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 20018d0:	0007883a 	mov	r3,zero
 20018d4:	00814034 	movhi	r2,1280
 20018d8:	10881904 	addi	r2,r2,8292
 20018dc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 20018e0:	0007883a 	mov	r3,zero
 20018e4:	00814034 	movhi	r2,1280
 20018e8:	10881904 	addi	r2,r2,8292
 20018ec:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B1);
 20018f0:	00c02c44 	movi	r3,177
 20018f4:	00814034 	movhi	r2,1280
 20018f8:	10881804 	addi	r2,r2,8288
 20018fc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2001900:	0007883a 	mov	r3,zero
 2001904:	00814034 	movhi	r2,1280
 2001908:	10881904 	addi	r2,r2,8292
 200190c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001b);
 2001910:	00c006c4 	movi	r3,27
 2001914:	00814034 	movhi	r2,1280
 2001918:	10881904 	addi	r2,r2,8292
 200191c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B6);
 2001920:	00c02d84 	movi	r3,182
 2001924:	00814034 	movhi	r2,1280
 2001928:	10881804 	addi	r2,r2,8288
 200192c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000A);
 2001930:	00c00284 	movi	r3,10
 2001934:	00814034 	movhi	r2,1280
 2001938:	10881904 	addi	r2,r2,8292
 200193c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00A2);
 2001940:	00c02884 	movi	r3,162
 2001944:	00814034 	movhi	r2,1280
 2001948:	10881904 	addi	r2,r2,8292
 200194c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C0);    //Power control
 2001950:	00c03004 	movi	r3,192
 2001954:	00814034 	movhi	r2,1280
 2001958:	10881804 	addi	r2,r2,8288
 200195c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);   //VRH[5:0]
 2001960:	00c00144 	movi	r3,5
 2001964:	00814034 	movhi	r2,1280
 2001968:	10881904 	addi	r2,r2,8292
 200196c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C1);    //Power control
 2001970:	00c03044 	movi	r3,193
 2001974:	00814034 	movhi	r2,1280
 2001978:	10881804 	addi	r2,r2,8288
 200197c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0011);   //SAP[2:0];BT[3:0]
 2001980:	00c00444 	movi	r3,17
 2001984:	00814034 	movhi	r2,1280
 2001988:	10881904 	addi	r2,r2,8292
 200198c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C5);    //VCM control
 2001990:	00c03144 	movi	r3,197
 2001994:	00814034 	movhi	r2,1280
 2001998:	10881804 	addi	r2,r2,8288
 200199c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3F
 20019a0:	00c01144 	movi	r3,69
 20019a4:	00814034 	movhi	r2,1280
 20019a8:	10881904 	addi	r2,r2,8292
 20019ac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3C
 20019b0:	00c01144 	movi	r3,69
 20019b4:	00814034 	movhi	r2,1280
 20019b8:	10881904 	addi	r2,r2,8292
 20019bc:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00C7);    //VCM control2
 20019c0:	00c031c4 	movi	r3,199
 20019c4:	00814034 	movhi	r2,1280
 20019c8:	10881804 	addi	r2,r2,8288
 20019cc:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(0X00a2);
 20019d0:	00c02884 	movi	r3,162
 20019d4:	00814034 	movhi	r2,1280
 20019d8:	10881904 	addi	r2,r2,8292
 20019dc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0036);    // Memory Access Control
 20019e0:	00c00d84 	movi	r3,54
 20019e4:	00814034 	movhi	r2,1280
 20019e8:	10881804 	addi	r2,r2,8288
 20019ec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);//48
 20019f0:	00c00204 	movi	r3,8
 20019f4:	00814034 	movhi	r2,1280
 20019f8:	10881904 	addi	r2,r2,8292
 20019fc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F2);    // 3Gamma Function Disable
 2001a00:	00c03c84 	movi	r3,242
 2001a04:	00814034 	movhi	r2,1280
 2001a08:	10881804 	addi	r2,r2,8288
 2001a0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2001a10:	0007883a 	mov	r3,zero
 2001a14:	00814034 	movhi	r2,1280
 2001a18:	10881904 	addi	r2,r2,8292
 2001a1c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0026);    //Gamma curve selected
 2001a20:	00c00984 	movi	r3,38
 2001a24:	00814034 	movhi	r2,1280
 2001a28:	10881804 	addi	r2,r2,8288
 2001a2c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 2001a30:	00c00044 	movi	r3,1
 2001a34:	00814034 	movhi	r2,1280
 2001a38:	10881904 	addi	r2,r2,8292
 2001a3c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E0);    //Set Gamma
 2001a40:	00c03804 	movi	r3,224
 2001a44:	00814034 	movhi	r2,1280
 2001a48:	10881804 	addi	r2,r2,8288
 2001a4c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000F);
 2001a50:	00c003c4 	movi	r3,15
 2001a54:	00814034 	movhi	r2,1280
 2001a58:	10881904 	addi	r2,r2,8292
 2001a5c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0026);
 2001a60:	00c00984 	movi	r3,38
 2001a64:	00814034 	movhi	r2,1280
 2001a68:	10881904 	addi	r2,r2,8292
 2001a6c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0024);
 2001a70:	00c00904 	movi	r3,36
 2001a74:	00814034 	movhi	r2,1280
 2001a78:	10881904 	addi	r2,r2,8292
 2001a7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
 2001a80:	00c002c4 	movi	r3,11
 2001a84:	00814034 	movhi	r2,1280
 2001a88:	10881904 	addi	r2,r2,8292
 2001a8c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000E);
 2001a90:	00c00384 	movi	r3,14
 2001a94:	00814034 	movhi	r2,1280
 2001a98:	10881904 	addi	r2,r2,8292
 2001a9c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
 2001aa0:	00c00204 	movi	r3,8
 2001aa4:	00814034 	movhi	r2,1280
 2001aa8:	10881904 	addi	r2,r2,8292
 2001aac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x004b);
 2001ab0:	00c012c4 	movi	r3,75
 2001ab4:	00814034 	movhi	r2,1280
 2001ab8:	10881904 	addi	r2,r2,8292
 2001abc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00a8);
 2001ac0:	00c02a04 	movi	r3,168
 2001ac4:	00814034 	movhi	r2,1280
 2001ac8:	10881904 	addi	r2,r2,8292
 2001acc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003b);
 2001ad0:	00c00ec4 	movi	r3,59
 2001ad4:	00814034 	movhi	r2,1280
 2001ad8:	10881904 	addi	r2,r2,8292
 2001adc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000a);
 2001ae0:	00c00284 	movi	r3,10
 2001ae4:	00814034 	movhi	r2,1280
 2001ae8:	10881904 	addi	r2,r2,8292
 2001aec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0014);
 2001af0:	00c00504 	movi	r3,20
 2001af4:	00814034 	movhi	r2,1280
 2001af8:	10881904 	addi	r2,r2,8292
 2001afc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0006);
 2001b00:	00c00184 	movi	r3,6
 2001b04:	00814034 	movhi	r2,1280
 2001b08:	10881904 	addi	r2,r2,8292
 2001b0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
 2001b10:	00c00404 	movi	r3,16
 2001b14:	00814034 	movhi	r2,1280
 2001b18:	10881904 	addi	r2,r2,8292
 2001b1c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
 2001b20:	00c00244 	movi	r3,9
 2001b24:	00814034 	movhi	r2,1280
 2001b28:	10881904 	addi	r2,r2,8292
 2001b2c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2001b30:	0007883a 	mov	r3,zero
 2001b34:	00814034 	movhi	r2,1280
 2001b38:	10881904 	addi	r2,r2,8292
 2001b3c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0X00E1);    //Set Gamma
 2001b40:	00c03844 	movi	r3,225
 2001b44:	00814034 	movhi	r2,1280
 2001b48:	10881804 	addi	r2,r2,8288
 2001b4c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2001b50:	0007883a 	mov	r3,zero
 2001b54:	00814034 	movhi	r2,1280
 2001b58:	10881904 	addi	r2,r2,8292
 2001b5c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001c);
 2001b60:	00c00704 	movi	r3,28
 2001b64:	00814034 	movhi	r2,1280
 2001b68:	10881904 	addi	r2,r2,8292
 2001b6c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
 2001b70:	00c00804 	movi	r3,32
 2001b74:	00814034 	movhi	r2,1280
 2001b78:	10881904 	addi	r2,r2,8292
 2001b7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0004);
 2001b80:	00c00104 	movi	r3,4
 2001b84:	00814034 	movhi	r2,1280
 2001b88:	10881904 	addi	r2,r2,8292
 2001b8c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
 2001b90:	00c00404 	movi	r3,16
 2001b94:	00814034 	movhi	r2,1280
 2001b98:	10881904 	addi	r2,r2,8292
 2001b9c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
 2001ba0:	00c00204 	movi	r3,8
 2001ba4:	00814034 	movhi	r2,1280
 2001ba8:	10881904 	addi	r2,r2,8292
 2001bac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
 2001bb0:	00c00d04 	movi	r3,52
 2001bb4:	00814034 	movhi	r2,1280
 2001bb8:	10881904 	addi	r2,r2,8292
 2001bbc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0047);
 2001bc0:	00c011c4 	movi	r3,71
 2001bc4:	00814034 	movhi	r2,1280
 2001bc8:	10881904 	addi	r2,r2,8292
 2001bcc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0044);
 2001bd0:	00c01104 	movi	r3,68
 2001bd4:	00814034 	movhi	r2,1280
 2001bd8:	10881904 	addi	r2,r2,8292
 2001bdc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);
 2001be0:	00c00144 	movi	r3,5
 2001be4:	00814034 	movhi	r2,1280
 2001be8:	10881904 	addi	r2,r2,8292
 2001bec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
 2001bf0:	00c002c4 	movi	r3,11
 2001bf4:	00814034 	movhi	r2,1280
 2001bf8:	10881904 	addi	r2,r2,8292
 2001bfc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
 2001c00:	00c00244 	movi	r3,9
 2001c04:	00814034 	movhi	r2,1280
 2001c08:	10881904 	addi	r2,r2,8292
 2001c0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002f);
 2001c10:	00c00bc4 	movi	r3,47
 2001c14:	00814034 	movhi	r2,1280
 2001c18:	10881904 	addi	r2,r2,8292
 2001c1c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0036);
 2001c20:	00c00d84 	movi	r3,54
 2001c24:	00814034 	movhi	r2,1280
 2001c28:	10881904 	addi	r2,r2,8292
 2001c2c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000f);
 2001c30:	00c003c4 	movi	r3,15
 2001c34:	00814034 	movhi	r2,1280
 2001c38:	10881904 	addi	r2,r2,8292
 2001c3c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002A);
 2001c40:	00c00a84 	movi	r3,42
 2001c44:	00814034 	movhi	r2,1280
 2001c48:	10881804 	addi	r2,r2,8288
 2001c4c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2001c50:	0007883a 	mov	r3,zero
 2001c54:	00814034 	movhi	r2,1280
 2001c58:	10881904 	addi	r2,r2,8292
 2001c5c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2001c60:	0007883a 	mov	r3,zero
 2001c64:	00814034 	movhi	r2,1280
 2001c68:	10881904 	addi	r2,r2,8292
 2001c6c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2001c70:	0007883a 	mov	r3,zero
 2001c74:	00814034 	movhi	r2,1280
 2001c78:	10881904 	addi	r2,r2,8292
 2001c7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00ef);
 2001c80:	00c03bc4 	movi	r3,239
 2001c84:	00814034 	movhi	r2,1280
 2001c88:	10881904 	addi	r2,r2,8292
 2001c8c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x002B);
 2001c90:	00c00ac4 	movi	r3,43
 2001c94:	00814034 	movhi	r2,1280
 2001c98:	10881804 	addi	r2,r2,8288
 2001c9c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2001ca0:	0007883a 	mov	r3,zero
 2001ca4:	00814034 	movhi	r2,1280
 2001ca8:	10881904 	addi	r2,r2,8292
 2001cac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2001cb0:	0007883a 	mov	r3,zero
 2001cb4:	00814034 	movhi	r2,1280
 2001cb8:	10881904 	addi	r2,r2,8292
 2001cbc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 2001cc0:	00c00044 	movi	r3,1
 2001cc4:	00814034 	movhi	r2,1280
 2001cc8:	10881904 	addi	r2,r2,8292
 2001ccc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003f);
 2001cd0:	00c00fc4 	movi	r3,63
 2001cd4:	00814034 	movhi	r2,1280
 2001cd8:	10881904 	addi	r2,r2,8292
 2001cdc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x003A);
 2001ce0:	00c00e84 	movi	r3,58
 2001ce4:	00814034 	movhi	r2,1280
 2001ce8:	10881804 	addi	r2,r2,8288
 2001cec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0055);
 2001cf0:	00c01544 	movi	r3,85
 2001cf4:	00814034 	movhi	r2,1280
 2001cf8:	10881904 	addi	r2,r2,8292
 2001cfc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00f6);
 2001d00:	00c03d84 	movi	r3,246
 2001d04:	00814034 	movhi	r2,1280
 2001d08:	10881804 	addi	r2,r2,8288
 2001d0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 2001d10:	00c00044 	movi	r3,1
 2001d14:	00814034 	movhi	r2,1280
 2001d18:	10881904 	addi	r2,r2,8292
 2001d1c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0030);
 2001d20:	00c00c04 	movi	r3,48
 2001d24:	00814034 	movhi	r2,1280
 2001d28:	10881904 	addi	r2,r2,8292
 2001d2c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2001d30:	0007883a 	mov	r3,zero
 2001d34:	00814034 	movhi	r2,1280
 2001d38:	10881904 	addi	r2,r2,8292
 2001d3c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0029); //display on
 2001d40:	00c00a44 	movi	r3,41
 2001d44:	00814034 	movhi	r2,1280
 2001d48:	10881804 	addi	r2,r2,8288
 2001d4c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002c);    // 0x2C
 2001d50:	00c00b04 	movi	r3,44
 2001d54:	00814034 	movhi	r2,1280
 2001d58:	10881804 	addi	r2,r2,8288
 2001d5c:	10c00035 	stwio	r3,0(r2)

}
 2001d60:	0001883a 	nop
 2001d64:	e037883a 	mov	sp,fp
 2001d68:	dfc00117 	ldw	ra,4(sp)
 2001d6c:	df000017 	ldw	fp,0(sp)
 2001d70:	dec00204 	addi	sp,sp,8
 2001d74:	f800283a 	ret

02001d78 <LCD_Pattern_Horizon>:


void LCD_Pattern_Horizon(void)
{
 2001d78:	defffc04 	addi	sp,sp,-16
 2001d7c:	dfc00315 	stw	ra,12(sp)
 2001d80:	df000215 	stw	fp,8(sp)
 2001d84:	df000204 	addi	fp,sp,8
        alt_u32 index=0;
 2001d88:	e03ffe15 	stw	zero,-8(fp)
        alt_u16  data=0;
 2001d8c:	e03fff0d 	sth	zero,-4(fp)
        LCD_SetCursor(0x00,0x0000);
 2001d90:	000b883a 	mov	r5,zero
 2001d94:	0009883a 	mov	r4,zero
 2001d98:	20014440 	call	2001444 <LCD_SetCursor>
        data=0x0000;
 2001d9c:	e03fff0d 	sth	zero,-4(fp)
        for(index=0;index<240*80;index++)
 2001da0:	e03ffe15 	stw	zero,-8(fp)
 2001da4:	00000706 	br	2001dc4 <LCD_Pattern_Horizon+0x4c>
        {
        	LCD_WR_DATA(data);
 2001da8:	e0ffff0b 	ldhu	r3,-4(fp)
 2001dac:	00814034 	movhi	r2,1280
 2001db0:	10881904 	addi	r2,r2,8292
 2001db4:	10c00035 	stwio	r3,0(r2)
{
        alt_u32 index=0;
        alt_u16  data=0;
        LCD_SetCursor(0x00,0x0000);
        data=0x0000;
        for(index=0;index<240*80;index++)
 2001db8:	e0bffe17 	ldw	r2,-8(fp)
 2001dbc:	10800044 	addi	r2,r2,1
 2001dc0:	e0bffe15 	stw	r2,-8(fp)
 2001dc4:	e0bffe17 	ldw	r2,-8(fp)
 2001dc8:	1092c030 	cmpltui	r2,r2,19200
 2001dcc:	103ff61e 	bne	r2,zero,2001da8 <__alt_mem_epcs_flash_controller_0+0xfd000da8>
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
 2001dd0:	01401404 	movi	r5,80
 2001dd4:	0009883a 	mov	r4,zero
 2001dd8:	20014440 	call	2001444 <LCD_SetCursor>
        data=RED;
 2001ddc:	00be0004 	movi	r2,-2048
 2001de0:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
 2001de4:	e03ffe15 	stw	zero,-8(fp)
 2001de8:	00000706 	br	2001e08 <LCD_Pattern_Horizon+0x90>
		{
			LCD_WR_DATA(data);
 2001dec:	e0ffff0b 	ldhu	r3,-4(fp)
 2001df0:	00814034 	movhi	r2,1280
 2001df4:	10881904 	addi	r2,r2,8292
 2001df8:	10c00035 	stwio	r3,0(r2)
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
        data=RED;
		for(index=0;index<240*80;index++)
 2001dfc:	e0bffe17 	ldw	r2,-8(fp)
 2001e00:	10800044 	addi	r2,r2,1
 2001e04:	e0bffe15 	stw	r2,-8(fp)
 2001e08:	e0bffe17 	ldw	r2,-8(fp)
 2001e0c:	1092c030 	cmpltui	r2,r2,19200
 2001e10:	103ff61e 	bne	r2,zero,2001dec <__alt_mem_epcs_flash_controller_0+0xfd000dec>
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
 2001e14:	01402804 	movi	r5,160
 2001e18:	0009883a 	mov	r4,zero
 2001e1c:	20014440 	call	2001444 <LCD_SetCursor>
		data=GREEN;
 2001e20:	0081f804 	movi	r2,2016
 2001e24:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
 2001e28:	e03ffe15 	stw	zero,-8(fp)
 2001e2c:	00000706 	br	2001e4c <LCD_Pattern_Horizon+0xd4>
		{
			LCD_WR_DATA(data);
 2001e30:	e0ffff0b 	ldhu	r3,-4(fp)
 2001e34:	00814034 	movhi	r2,1280
 2001e38:	10881904 	addi	r2,r2,8292
 2001e3c:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
		data=GREEN;
		for(index=0;index<240*80;index++)
 2001e40:	e0bffe17 	ldw	r2,-8(fp)
 2001e44:	10800044 	addi	r2,r2,1
 2001e48:	e0bffe15 	stw	r2,-8(fp)
 2001e4c:	e0bffe17 	ldw	r2,-8(fp)
 2001e50:	1092c030 	cmpltui	r2,r2,19200
 2001e54:	103ff61e 	bne	r2,zero,2001e30 <__alt_mem_epcs_flash_controller_0+0xfd000e30>
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
 2001e58:	01403c04 	movi	r5,240
 2001e5c:	0009883a 	mov	r4,zero
 2001e60:	20014440 	call	2001444 <LCD_SetCursor>
		data=BLUE;
 2001e64:	008007c4 	movi	r2,31
 2001e68:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
 2001e6c:	e03ffe15 	stw	zero,-8(fp)
 2001e70:	00000706 	br	2001e90 <LCD_Pattern_Horizon+0x118>
		{
			LCD_WR_DATA(data);
 2001e74:	e0ffff0b 	ldhu	r3,-4(fp)
 2001e78:	00814034 	movhi	r2,1280
 2001e7c:	10881904 	addi	r2,r2,8292
 2001e80:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
		data=BLUE;
		for(index=0;index<240*80;index++)
 2001e84:	e0bffe17 	ldw	r2,-8(fp)
 2001e88:	10800044 	addi	r2,r2,1
 2001e8c:	e0bffe15 	stw	r2,-8(fp)
 2001e90:	e0bffe17 	ldw	r2,-8(fp)
 2001e94:	1092c030 	cmpltui	r2,r2,19200
 2001e98:	103ff61e 	bne	r2,zero,2001e74 <__alt_mem_epcs_flash_controller_0+0xfd000e74>
		{
			LCD_WR_DATA(data);
		}
}
 2001e9c:	0001883a 	nop
 2001ea0:	e037883a 	mov	sp,fp
 2001ea4:	dfc00117 	ldw	ra,4(sp)
 2001ea8:	df000017 	ldw	fp,0(sp)
 2001eac:	dec00204 	addi	sp,sp,8
 2001eb0:	f800283a 	ret

02001eb4 <LCD_Pattern_Vertical>:

void LCD_Pattern_Vertical(void)
{
 2001eb4:	defff804 	addi	sp,sp,-32
 2001eb8:	dfc00715 	stw	ra,28(sp)
 2001ebc:	df000615 	stw	fp,24(sp)
 2001ec0:	df000604 	addi	fp,sp,24
        int i,j,m;
        alt_u16  data=0;
 2001ec4:	e03ffd0d 	sth	zero,-12(fp)
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
 2001ec8:	00bfffc4 	movi	r2,-1
 2001ecc:	e0bffd8d 	sth	r2,-10(fp)
 2001ed0:	008007c4 	movi	r2,31
 2001ed4:	e0bffe0d 	sth	r2,-8(fp)
 2001ed8:	0081f804 	movi	r2,2016
 2001edc:	e0bffe8d 	sth	r2,-6(fp)
 2001ee0:	00be0004 	movi	r2,-2048
 2001ee4:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(0x00,0x0000);
 2001ee8:	000b883a 	mov	r5,zero
 2001eec:	0009883a 	mov	r4,zero
 2001ef0:	20014440 	call	2001444 <LCD_SetCursor>
        for(m=0;m<320;m++)
 2001ef4:	e03ffc15 	stw	zero,-16(fp)
 2001ef8:	00001e06 	br	2001f74 <LCD_Pattern_Vertical+0xc0>
        {
			for(i=0;i<4;i++)
 2001efc:	e03ffa15 	stw	zero,-24(fp)
 2001f00:	00001606 	br	2001f5c <LCD_Pattern_Vertical+0xa8>
			{
				data=color[i];
 2001f04:	e0bffa17 	ldw	r2,-24(fp)
 2001f08:	1085883a 	add	r2,r2,r2
 2001f0c:	e0fffa04 	addi	r3,fp,-24
 2001f10:	1885883a 	add	r2,r3,r2
 2001f14:	10800384 	addi	r2,r2,14
 2001f18:	1080000b 	ldhu	r2,0(r2)
 2001f1c:	e0bffd0d 	sth	r2,-12(fp)
				for(j=0;j<60;j++)
 2001f20:	e03ffb15 	stw	zero,-20(fp)
 2001f24:	00000706 	br	2001f44 <LCD_Pattern_Vertical+0x90>
				{
					LCD_WR_DATA(data);
 2001f28:	e0fffd0b 	ldhu	r3,-12(fp)
 2001f2c:	00814034 	movhi	r2,1280
 2001f30:	10881904 	addi	r2,r2,8292
 2001f34:	10c00035 	stwio	r3,0(r2)
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
			{
				data=color[i];
				for(j=0;j<60;j++)
 2001f38:	e0bffb17 	ldw	r2,-20(fp)
 2001f3c:	10800044 	addi	r2,r2,1
 2001f40:	e0bffb15 	stw	r2,-20(fp)
 2001f44:	e0bffb17 	ldw	r2,-20(fp)
 2001f48:	10800f10 	cmplti	r2,r2,60
 2001f4c:	103ff61e 	bne	r2,zero,2001f28 <__alt_mem_epcs_flash_controller_0+0xfd000f28>
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
 2001f50:	e0bffa17 	ldw	r2,-24(fp)
 2001f54:	10800044 	addi	r2,r2,1
 2001f58:	e0bffa15 	stw	r2,-24(fp)
 2001f5c:	e0bffa17 	ldw	r2,-24(fp)
 2001f60:	10800110 	cmplti	r2,r2,4
 2001f64:	103fe71e 	bne	r2,zero,2001f04 <__alt_mem_epcs_flash_controller_0+0xfd000f04>
{
        int i,j,m;
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
 2001f68:	e0bffc17 	ldw	r2,-16(fp)
 2001f6c:	10800044 	addi	r2,r2,1
 2001f70:	e0bffc15 	stw	r2,-16(fp)
 2001f74:	e0bffc17 	ldw	r2,-16(fp)
 2001f78:	10805010 	cmplti	r2,r2,320
 2001f7c:	103fdf1e 	bne	r2,zero,2001efc <__alt_mem_epcs_flash_controller_0+0xfd000efc>
				{
					LCD_WR_DATA(data);
				}
			}
        }
}
 2001f80:	0001883a 	nop
 2001f84:	e037883a 	mov	sp,fp
 2001f88:	dfc00117 	ldw	ra,4(sp)
 2001f8c:	df000017 	ldw	fp,0(sp)
 2001f90:	dec00204 	addi	sp,sp,8
 2001f94:	f800283a 	ret

02001f98 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
 2001f98:	defffd04 	addi	sp,sp,-12
 2001f9c:	dfc00215 	stw	ra,8(sp)
 2001fa0:	df000115 	stw	fp,4(sp)
 2001fa4:	df000104 	addi	fp,sp,4
 2001fa8:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
 2001fac:	e13fff17 	ldw	r4,-4(fp)
 2001fb0:	2005bdc0 	call	2005bdc <printf>
}
 2001fb4:	0001883a 	nop
 2001fb8:	e037883a 	mov	sp,fp
 2001fbc:	dfc00117 	ldw	ra,4(sp)
 2001fc0:	df000017 	ldw	fp,0(sp)
 2001fc4:	dec00204 	addi	sp,sp,8
 2001fc8:	f800283a 	ret

02001fcc <myprintf>:





int myprintf(char *format, ...){
 2001fcc:	deff7804 	addi	sp,sp,-544
 2001fd0:	dfc08415 	stw	ra,528(sp)
 2001fd4:	df008315 	stw	fp,524(sp)
 2001fd8:	df008304 	addi	fp,sp,524
 2001fdc:	e13fff15 	stw	r4,-4(fp)
 2001fe0:	e1400215 	stw	r5,8(fp)
 2001fe4:	e1800315 	stw	r6,12(fp)
 2001fe8:	e1c00415 	stw	r7,16(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
 2001fec:	e0800204 	addi	r2,fp,8
 2001ff0:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
 2001ff4:	e0fffe17 	ldw	r3,-8(fp)
 2001ff8:	e0bf7e04 	addi	r2,fp,-520
 2001ffc:	180f883a 	mov	r7,r3
 2002000:	e1bfff17 	ldw	r6,-4(fp)
 2002004:	01408004 	movi	r5,512
 2002008:	1009883a 	mov	r4,r2
 200200c:	200a4b00 	call	200a4b0 <vsnprintf>
 2002010:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
 2002014:	e0bf7e04 	addi	r2,fp,-520
 2002018:	1009883a 	mov	r4,r2
 200201c:	2001f980 	call	2001f98 <debug_output>

    return rc;    
 2002020:	e0bf7d17 	ldw	r2,-524(fp)
}
 2002024:	e037883a 	mov	sp,fp
 2002028:	dfc00117 	ldw	ra,4(sp)
 200202c:	df000017 	ldw	fp,0(sp)
 2002030:	dec00504 	addi	sp,sp,20
 2002034:	f800283a 	ret

02002038 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
 2002038:	defff704 	addi	sp,sp,-36
 200203c:	dfc00815 	stw	ra,32(sp)
 2002040:	df000715 	stw	fp,28(sp)
 2002044:	df000704 	addi	fp,sp,28
 2002048:	e13ffe15 	stw	r4,-8(fp)
 200204c:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 2002050:	e03ff915 	stw	zero,-28(fp)
 2002054:	00001106 	br	200209c <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
 2002058:	e0bff917 	ldw	r2,-28(fp)
 200205c:	e0fffe17 	ldw	r3,-8(fp)
 2002060:	1885883a 	add	r2,r3,r2
 2002064:	10800003 	ldbu	r2,0(r2)
 2002068:	10c03fcc 	andi	r3,r2,255
 200206c:	e0bffa04 	addi	r2,fp,-24
 2002070:	180d883a 	mov	r6,r3
 2002074:	01408074 	movhi	r5,513
 2002078:	295a8a04 	addi	r5,r5,27176
 200207c:	1009883a 	mov	r4,r2
 2002080:	2005e140 	call	2005e14 <sprintf>
        DEBUG((szText));
 2002084:	e0bffa04 	addi	r2,fp,-24
 2002088:	1009883a 	mov	r4,r2
 200208c:	2001fcc0 	call	2001fcc <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 2002090:	e0bff917 	ldw	r2,-28(fp)
 2002094:	10800044 	addi	r2,r2,1
 2002098:	e0bff915 	stw	r2,-28(fp)
 200209c:	e0fff917 	ldw	r3,-28(fp)
 20020a0:	e0bfff17 	ldw	r2,-4(fp)
 20020a4:	18bfec16 	blt	r3,r2,2002058 <__alt_mem_epcs_flash_controller_0+0xfd001058>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
 20020a8:	e0bfff17 	ldw	r2,-4(fp)
}
 20020ac:	e037883a 	mov	sp,fp
 20020b0:	dfc00117 	ldw	ra,4(sp)
 20020b4:	df000017 	ldw	fp,0(sp)
 20020b8:	dec00204 	addi	sp,sp,8
 20020bc:	f800283a 	ret

020020c0 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
 20020c0:	defff704 	addi	sp,sp,-36
 20020c4:	dfc00815 	stw	ra,32(sp)
 20020c8:	df000715 	stw	fp,28(sp)
 20020cc:	df000704 	addi	fp,sp,28
 20020d0:	e13ffe15 	stw	r4,-8(fp)
 20020d4:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 20020d8:	e03ff915 	stw	zero,-28(fp)
 20020dc:	00001306 	br	200212c <myprintf_dwordarray+0x6c>
        sprintf(szText, "[%08X]", *(pArray+i));
 20020e0:	e0bff917 	ldw	r2,-28(fp)
 20020e4:	1085883a 	add	r2,r2,r2
 20020e8:	1085883a 	add	r2,r2,r2
 20020ec:	1007883a 	mov	r3,r2
 20020f0:	e0bffe17 	ldw	r2,-8(fp)
 20020f4:	10c5883a 	add	r2,r2,r3
 20020f8:	10c00017 	ldw	r3,0(r2)
 20020fc:	e0bffa04 	addi	r2,fp,-24
 2002100:	180d883a 	mov	r6,r3
 2002104:	01408074 	movhi	r5,513
 2002108:	295a8c04 	addi	r5,r5,27184
 200210c:	1009883a 	mov	r4,r2
 2002110:	2005e140 	call	2005e14 <sprintf>
        DEBUG((szText));
 2002114:	e0bffa04 	addi	r2,fp,-24
 2002118:	1009883a 	mov	r4,r2
 200211c:	2001fcc0 	call	2001fcc <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 2002120:	e0bff917 	ldw	r2,-28(fp)
 2002124:	10800044 	addi	r2,r2,1
 2002128:	e0bff915 	stw	r2,-28(fp)
 200212c:	e0fff917 	ldw	r3,-28(fp)
 2002130:	e0bfff17 	ldw	r2,-4(fp)
 2002134:	18bfea16 	blt	r3,r2,20020e0 <__alt_mem_epcs_flash_controller_0+0xfd0010e0>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
 2002138:	e0bfff17 	ldw	r2,-4(fp)
}
 200213c:	e037883a 	mov	sp,fp
 2002140:	dfc00117 	ldw	ra,4(sp)
 2002144:	df000017 	ldw	fp,0(sp)
 2002148:	dec00204 	addi	sp,sp,8
 200214c:	f800283a 	ret

02002150 <IsPtInRect>:

//#define BOUND(x, mini, maxi) ((x<(mini)?(mini):( (x>(maxi))?(maxi):(x) )))

//#define COPY_POINT(pt_des, pt_src)  memcpy(&pt_des, &pt_src,sizeof(POINT))

bool IsPtInRect(POINT *pt, RECT *rc){
 2002150:	defffc04 	addi	sp,sp,-16
 2002154:	df000315 	stw	fp,12(sp)
 2002158:	df000304 	addi	fp,sp,12
 200215c:	e13ffe15 	stw	r4,-8(fp)
 2002160:	e17fff15 	stw	r5,-4(fp)
    bool bYes = FALSE;
 2002164:	e03ffd15 	stw	zero,-12(fp)
    
    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
 2002168:	e0bffe17 	ldw	r2,-8(fp)
 200216c:	10c00017 	ldw	r3,0(r2)
 2002170:	e0bfff17 	ldw	r2,-4(fp)
 2002174:	10800017 	ldw	r2,0(r2)
 2002178:	18801116 	blt	r3,r2,20021c0 <IsPtInRect+0x70>
 200217c:	e0bffe17 	ldw	r2,-8(fp)
 2002180:	10800017 	ldw	r2,0(r2)
 2002184:	e0ffff17 	ldw	r3,-4(fp)
 2002188:	18c00117 	ldw	r3,4(r3)
 200218c:	18800c16 	blt	r3,r2,20021c0 <IsPtInRect+0x70>
 2002190:	e0bffe17 	ldw	r2,-8(fp)
 2002194:	10c00117 	ldw	r3,4(r2)
 2002198:	e0bfff17 	ldw	r2,-4(fp)
 200219c:	10800217 	ldw	r2,8(r2)
 20021a0:	18800716 	blt	r3,r2,20021c0 <IsPtInRect+0x70>
 20021a4:	e0bffe17 	ldw	r2,-8(fp)
 20021a8:	10800117 	ldw	r2,4(r2)
 20021ac:	e0ffff17 	ldw	r3,-4(fp)
 20021b0:	18c00317 	ldw	r3,12(r3)
 20021b4:	18800216 	blt	r3,r2,20021c0 <IsPtInRect+0x70>
        bYes = TRUE;
 20021b8:	00800044 	movi	r2,1
 20021bc:	e0bffd15 	stw	r2,-12(fp)
    
    return bYes;
 20021c0:	e0bffd17 	ldw	r2,-12(fp)
}
 20021c4:	e037883a 	mov	sp,fp
 20021c8:	df000017 	ldw	fp,0(sp)
 20021cc:	dec00104 	addi	sp,sp,4
 20021d0:	f800283a 	ret

020021d4 <PtSet>:

void PtSet(POINT *pt, int x, int y){
 20021d4:	defffc04 	addi	sp,sp,-16
 20021d8:	df000315 	stw	fp,12(sp)
 20021dc:	df000304 	addi	fp,sp,12
 20021e0:	e13ffd15 	stw	r4,-12(fp)
 20021e4:	e17ffe15 	stw	r5,-8(fp)
 20021e8:	e1bfff15 	stw	r6,-4(fp)
    pt->x = x;
 20021ec:	e0bffd17 	ldw	r2,-12(fp)
 20021f0:	e0fffe17 	ldw	r3,-8(fp)
 20021f4:	10c00015 	stw	r3,0(r2)
    pt->y = y;
 20021f8:	e0bffd17 	ldw	r2,-12(fp)
 20021fc:	e0ffff17 	ldw	r3,-4(fp)
 2002200:	10c00115 	stw	r3,4(r2)
}
 2002204:	0001883a 	nop
 2002208:	e037883a 	mov	sp,fp
 200220c:	df000017 	ldw	fp,0(sp)
 2002210:	dec00104 	addi	sp,sp,4
 2002214:	f800283a 	ret

02002218 <RectSet>:

void RectSet(RECT *rc, int left, int right, int top, int bottom){
 2002218:	defffb04 	addi	sp,sp,-20
 200221c:	df000415 	stw	fp,16(sp)
 2002220:	df000404 	addi	fp,sp,16
 2002224:	e13ffc15 	stw	r4,-16(fp)
 2002228:	e17ffd15 	stw	r5,-12(fp)
 200222c:	e1bffe15 	stw	r6,-8(fp)
 2002230:	e1ffff15 	stw	r7,-4(fp)
    rc->left = left;
 2002234:	e0bffc17 	ldw	r2,-16(fp)
 2002238:	e0fffd17 	ldw	r3,-12(fp)
 200223c:	10c00015 	stw	r3,0(r2)
    rc->right = right;
 2002240:	e0bffc17 	ldw	r2,-16(fp)
 2002244:	e0fffe17 	ldw	r3,-8(fp)
 2002248:	10c00115 	stw	r3,4(r2)
    rc->top = top;
 200224c:	e0bffc17 	ldw	r2,-16(fp)
 2002250:	e0ffff17 	ldw	r3,-4(fp)
 2002254:	10c00215 	stw	r3,8(r2)
    rc->bottom = bottom;
 2002258:	e0bffc17 	ldw	r2,-16(fp)
 200225c:	e0c00117 	ldw	r3,4(fp)
 2002260:	10c00315 	stw	r3,12(r2)
}
 2002264:	0001883a 	nop
 2002268:	e037883a 	mov	sp,fp
 200226c:	df000017 	ldw	fp,0(sp)
 2002270:	dec00104 	addi	sp,sp,4
 2002274:	f800283a 	ret

02002278 <RectInflate>:

void RectInflate(RECT *rc, int x, int y){
 2002278:	defffc04 	addi	sp,sp,-16
 200227c:	df000315 	stw	fp,12(sp)
 2002280:	df000304 	addi	fp,sp,12
 2002284:	e13ffd15 	stw	r4,-12(fp)
 2002288:	e17ffe15 	stw	r5,-8(fp)
 200228c:	e1bfff15 	stw	r6,-4(fp)
    rc->left -= x;
 2002290:	e0bffd17 	ldw	r2,-12(fp)
 2002294:	10c00017 	ldw	r3,0(r2)
 2002298:	e0bffe17 	ldw	r2,-8(fp)
 200229c:	1887c83a 	sub	r3,r3,r2
 20022a0:	e0bffd17 	ldw	r2,-12(fp)
 20022a4:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 20022a8:	e0bffd17 	ldw	r2,-12(fp)
 20022ac:	10c00117 	ldw	r3,4(r2)
 20022b0:	e0bffe17 	ldw	r2,-8(fp)
 20022b4:	1887883a 	add	r3,r3,r2
 20022b8:	e0bffd17 	ldw	r2,-12(fp)
 20022bc:	10c00115 	stw	r3,4(r2)
    rc->top -= y;
 20022c0:	e0bffd17 	ldw	r2,-12(fp)
 20022c4:	10c00217 	ldw	r3,8(r2)
 20022c8:	e0bfff17 	ldw	r2,-4(fp)
 20022cc:	1887c83a 	sub	r3,r3,r2
 20022d0:	e0bffd17 	ldw	r2,-12(fp)
 20022d4:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 20022d8:	e0bffd17 	ldw	r2,-12(fp)
 20022dc:	10c00317 	ldw	r3,12(r2)
 20022e0:	e0bfff17 	ldw	r2,-4(fp)
 20022e4:	1887883a 	add	r3,r3,r2
 20022e8:	e0bffd17 	ldw	r2,-12(fp)
 20022ec:	10c00315 	stw	r3,12(r2)
}
 20022f0:	0001883a 	nop
 20022f4:	e037883a 	mov	sp,fp
 20022f8:	df000017 	ldw	fp,0(sp)
 20022fc:	dec00104 	addi	sp,sp,4
 2002300:	f800283a 	ret

02002304 <RectOffset>:

void RectOffset(RECT *rc, int x, int y){
 2002304:	defffc04 	addi	sp,sp,-16
 2002308:	df000315 	stw	fp,12(sp)
 200230c:	df000304 	addi	fp,sp,12
 2002310:	e13ffd15 	stw	r4,-12(fp)
 2002314:	e17ffe15 	stw	r5,-8(fp)
 2002318:	e1bfff15 	stw	r6,-4(fp)
    rc->left += x;
 200231c:	e0bffd17 	ldw	r2,-12(fp)
 2002320:	10c00017 	ldw	r3,0(r2)
 2002324:	e0bffe17 	ldw	r2,-8(fp)
 2002328:	1887883a 	add	r3,r3,r2
 200232c:	e0bffd17 	ldw	r2,-12(fp)
 2002330:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 2002334:	e0bffd17 	ldw	r2,-12(fp)
 2002338:	10c00117 	ldw	r3,4(r2)
 200233c:	e0bffe17 	ldw	r2,-8(fp)
 2002340:	1887883a 	add	r3,r3,r2
 2002344:	e0bffd17 	ldw	r2,-12(fp)
 2002348:	10c00115 	stw	r3,4(r2)
    rc->top += y;
 200234c:	e0bffd17 	ldw	r2,-12(fp)
 2002350:	10c00217 	ldw	r3,8(r2)
 2002354:	e0bfff17 	ldw	r2,-4(fp)
 2002358:	1887883a 	add	r3,r3,r2
 200235c:	e0bffd17 	ldw	r2,-12(fp)
 2002360:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 2002364:	e0bffd17 	ldw	r2,-12(fp)
 2002368:	10c00317 	ldw	r3,12(r2)
 200236c:	e0bfff17 	ldw	r2,-4(fp)
 2002370:	1887883a 	add	r3,r3,r2
 2002374:	e0bffd17 	ldw	r2,-12(fp)
 2002378:	10c00315 	stw	r3,12(r2)
}
 200237c:	0001883a 	nop
 2002380:	e037883a 	mov	sp,fp
 2002384:	df000017 	ldw	fp,0(sp)
 2002388:	dec00104 	addi	sp,sp,4
 200238c:	f800283a 	ret

02002390 <RectCopy>:

void RectCopy(RECT *rcDes, RECT *rcSrc){
 2002390:	defffd04 	addi	sp,sp,-12
 2002394:	df000215 	stw	fp,8(sp)
 2002398:	df000204 	addi	fp,sp,8
 200239c:	e13ffe15 	stw	r4,-8(fp)
 20023a0:	e17fff15 	stw	r5,-4(fp)
    rcDes->left = rcSrc->left;
 20023a4:	e0bfff17 	ldw	r2,-4(fp)
 20023a8:	10c00017 	ldw	r3,0(r2)
 20023ac:	e0bffe17 	ldw	r2,-8(fp)
 20023b0:	10c00015 	stw	r3,0(r2)
    rcDes->right = rcSrc->right;
 20023b4:	e0bfff17 	ldw	r2,-4(fp)
 20023b8:	10c00117 	ldw	r3,4(r2)
 20023bc:	e0bffe17 	ldw	r2,-8(fp)
 20023c0:	10c00115 	stw	r3,4(r2)
    rcDes->top = rcSrc->top;
 20023c4:	e0bfff17 	ldw	r2,-4(fp)
 20023c8:	10c00217 	ldw	r3,8(r2)
 20023cc:	e0bffe17 	ldw	r2,-8(fp)
 20023d0:	10c00215 	stw	r3,8(r2)
    rcDes->bottom = rcSrc->bottom;
 20023d4:	e0bfff17 	ldw	r2,-4(fp)
 20023d8:	10c00317 	ldw	r3,12(r2)
 20023dc:	e0bffe17 	ldw	r2,-8(fp)
 20023e0:	10c00315 	stw	r3,12(r2)
}
 20023e4:	0001883a 	nop
 20023e8:	e037883a 	mov	sp,fp
 20023ec:	df000017 	ldw	fp,0(sp)
 20023f0:	dec00104 	addi	sp,sp,4
 20023f4:	f800283a 	ret

020023f8 <RectWidth>:

int RectWidth(RECT *rc){
 20023f8:	defffe04 	addi	sp,sp,-8
 20023fc:	df000115 	stw	fp,4(sp)
 2002400:	df000104 	addi	fp,sp,4
 2002404:	e13fff15 	stw	r4,-4(fp)
    return (rc->right-rc->left);
 2002408:	e0bfff17 	ldw	r2,-4(fp)
 200240c:	10c00117 	ldw	r3,4(r2)
 2002410:	e0bfff17 	ldw	r2,-4(fp)
 2002414:	10800017 	ldw	r2,0(r2)
 2002418:	1885c83a 	sub	r2,r3,r2
}
 200241c:	e037883a 	mov	sp,fp
 2002420:	df000017 	ldw	fp,0(sp)
 2002424:	dec00104 	addi	sp,sp,4
 2002428:	f800283a 	ret

0200242c <RectHeight>:

int RectHeight(RECT *rc){
 200242c:	defffe04 	addi	sp,sp,-8
 2002430:	df000115 	stw	fp,4(sp)
 2002434:	df000104 	addi	fp,sp,4
 2002438:	e13fff15 	stw	r4,-4(fp)
    return (rc->bottom-rc->top);
 200243c:	e0bfff17 	ldw	r2,-4(fp)
 2002440:	10c00317 	ldw	r3,12(r2)
 2002444:	e0bfff17 	ldw	r2,-4(fp)
 2002448:	10800217 	ldw	r2,8(r2)
 200244c:	1885c83a 	sub	r2,r3,r2
}
 2002450:	e037883a 	mov	sp,fp
 2002454:	df000017 	ldw	fp,0(sp)
 2002458:	dec00104 	addi	sp,sp,4
 200245c:	f800283a 	ret

02002460 <PtDistance>:

int PtDistance(POINT *pt1, POINT *pt2){
 2002460:	defff904 	addi	sp,sp,-28
 2002464:	dfc00615 	stw	ra,24(sp)
 2002468:	df000515 	stw	fp,20(sp)
 200246c:	df000504 	addi	fp,sp,20
 2002470:	e13ffe15 	stw	r4,-8(fp)
 2002474:	e17fff15 	stw	r5,-4(fp)
    int nDistance;
    int a, b;
    a = pt1->x - pt2->x;
 2002478:	e0bffe17 	ldw	r2,-8(fp)
 200247c:	10c00017 	ldw	r3,0(r2)
 2002480:	e0bfff17 	ldw	r2,-4(fp)
 2002484:	10800017 	ldw	r2,0(r2)
 2002488:	1885c83a 	sub	r2,r3,r2
 200248c:	e0bffb15 	stw	r2,-20(fp)
    b = pt1->y - pt2->y;
 2002490:	e0bffe17 	ldw	r2,-8(fp)
 2002494:	10c00117 	ldw	r3,4(r2)
 2002498:	e0bfff17 	ldw	r2,-4(fp)
 200249c:	10800117 	ldw	r2,4(r2)
 20024a0:	1885c83a 	sub	r2,r3,r2
 20024a4:	e0bffc15 	stw	r2,-16(fp)
    nDistance = a*a + b*b;
 20024a8:	e0fffb17 	ldw	r3,-20(fp)
 20024ac:	e0bffb17 	ldw	r2,-20(fp)
 20024b0:	1887383a 	mul	r3,r3,r2
 20024b4:	e13ffc17 	ldw	r4,-16(fp)
 20024b8:	e0bffc17 	ldw	r2,-16(fp)
 20024bc:	2085383a 	mul	r2,r4,r2
 20024c0:	1885883a 	add	r2,r3,r2
 20024c4:	e0bffd15 	stw	r2,-12(fp)
    nDistance = sqrt(nDistance);
 20024c8:	e13ffd17 	ldw	r4,-12(fp)
 20024cc:	2004e980 	call	2004e98 <__floatsidf>
 20024d0:	100b883a 	mov	r5,r2
 20024d4:	180d883a 	mov	r6,r3
 20024d8:	2809883a 	mov	r4,r5
 20024dc:	300b883a 	mov	r5,r6
 20024e0:	20027480 	call	2002748 <sqrt>
 20024e4:	100b883a 	mov	r5,r2
 20024e8:	180d883a 	mov	r6,r3
 20024ec:	2809883a 	mov	r4,r5
 20024f0:	300b883a 	mov	r5,r6
 20024f4:	2004e180 	call	2004e18 <__fixdfsi>
 20024f8:	e0bffd15 	stw	r2,-12(fp)
    
    return nDistance;
 20024fc:	e0bffd17 	ldw	r2,-12(fp)
}
 2002500:	e037883a 	mov	sp,fp
 2002504:	dfc00117 	ldw	ra,4(sp)
 2002508:	df000017 	ldw	fp,0(sp)
 200250c:	dec00204 	addi	sp,sp,8
 2002510:	f800283a 	ret

02002514 <PtCopy>:

void PtCopy(POINT *ptDes, POINT *ptSrc){
 2002514:	defffd04 	addi	sp,sp,-12
 2002518:	df000215 	stw	fp,8(sp)
 200251c:	df000204 	addi	fp,sp,8
 2002520:	e13ffe15 	stw	r4,-8(fp)
 2002524:	e17fff15 	stw	r5,-4(fp)
    ptDes->x = ptSrc->x;
 2002528:	e0bfff17 	ldw	r2,-4(fp)
 200252c:	10c00017 	ldw	r3,0(r2)
 2002530:	e0bffe17 	ldw	r2,-8(fp)
 2002534:	10c00015 	stw	r3,0(r2)
    ptDes->y = ptSrc->y;
 2002538:	e0bfff17 	ldw	r2,-4(fp)
 200253c:	10c00117 	ldw	r3,4(r2)
 2002540:	e0bffe17 	ldw	r2,-8(fp)
 2002544:	10c00115 	stw	r3,4(r2)
}
 2002548:	0001883a 	nop
 200254c:	e037883a 	mov	sp,fp
 2002550:	df000017 	ldw	fp,0(sp)
 2002554:	dec00104 	addi	sp,sp,4
 2002558:	f800283a 	ret

0200255c <main>:
#include "staticimg.h"
#include "ids_lounge.h"
//#include "gif.h"

int main()
{
 200255c:	defff404 	addi	sp,sp,-48
 2002560:	dfc00b15 	stw	ra,44(sp)
 2002564:	df000a15 	stw	fp,40(sp)
 2002568:	df000a04 	addi	fp,sp,40
   // init buttons
   bool b0 = ((IORD(KEY_BASE, 0x00) & 0x01) == 0x00)?TRUE:FALSE;
 200256c:	00810034 	movhi	r2,1024
 2002570:	10801004 	addi	r2,r2,64
 2002574:	10800037 	ldwio	r2,0(r2)
 2002578:	1080004c 	andi	r2,r2,1
 200257c:	1005003a 	cmpeq	r2,r2,zero
 2002580:	10803fcc 	andi	r2,r2,255
 2002584:	e0bff615 	stw	r2,-40(fp)
   bool b0_prev = b0;
 2002588:	e0bff617 	ldw	r2,-40(fp)
 200258c:	e0bffb15 	stw	r2,-20(fp)
   bool b1 = ((IORD(KEY_BASE, 0x00) & 0x02) == 0x00)?TRUE:FALSE;
 2002590:	00810034 	movhi	r2,1024
 2002594:	10801004 	addi	r2,r2,64
 2002598:	10800037 	ldwio	r2,0(r2)
 200259c:	1080008c 	andi	r2,r2,2
 20025a0:	1005003a 	cmpeq	r2,r2,zero
 20025a4:	10803fcc 	andi	r2,r2,255
 20025a8:	e0bff715 	stw	r2,-36(fp)
   bool b1_prev = b1;
 20025ac:	e0bff717 	ldw	r2,-36(fp)
 20025b0:	e0bffc15 	stw	r2,-16(fp)

   printf("LT24 Demo!\n");
 20025b4:	01008134 	movhi	r4,516
 20025b8:	21308e04 	addi	r4,r4,-15816
 20025bc:	2005cd80 	call	2005cd8 <puts>

   // test custom block: call custom block for pixel clusters of 16 pixels
   alt_u16* img_cpy = calloc(78000,sizeof(alt_u16)); // NOTE: image is 76800 items large! Size is chosen due to end of image bug
 20025c0:	01400084 	movi	r5,2
 20025c4:	01000074 	movhi	r4,1
 20025c8:	210c2c04 	addi	r4,r4,12464
 20025cc:	200518c0 	call	200518c <calloc>
 20025d0:	e0bffd15 	stw	r2,-12(fp)
   alt_u16* gif_frame_cpy = calloc(78000,sizeof(alt_u16)); //malloc(76800*sizeof(alt_u16));
 20025d4:	01400084 	movi	r5,2
 20025d8:	01000074 	movhi	r4,1
 20025dc:	210c2c04 	addi	r4,r4,12464
 20025e0:	200518c0 	call	200518c <calloc>
 20025e4:	e0bffe15 	stw	r2,-8(fp)
   printf("%x\n", img_cpy);
 20025e8:	e17ffd17 	ldw	r5,-12(fp)
 20025ec:	01008134 	movhi	r4,516
 20025f0:	21309104 	addi	r4,r4,-15804
 20025f4:	2005bdc0 	call	2005bdc <printf>
   printf("%x\n", (img_cpy - 0x01000000));
 20025f8:	e0fffd17 	ldw	r3,-12(fp)
 20025fc:	00bf8034 	movhi	r2,65024
 2002600:	1885883a 	add	r2,r3,r2
 2002604:	100b883a 	mov	r5,r2
 2002608:	01008134 	movhi	r4,516
 200260c:	21309104 	addi	r4,r4,-15804
 2002610:	2005bdc0 	call	2005bdc <printf>

   for (int i=0;i<318;i++) {
 2002614:	e03ff815 	stw	zero,-32(fp)
 2002618:	00001006 	br	200265c <main+0x100>
	   ALT_CI_NEW_COMPONENT_0(staticimg+240*i,img_cpy+240*i);
 200261c:	e0bff817 	ldw	r2,-32(fp)
 2002620:	10807824 	muli	r2,r2,480
 2002624:	1007883a 	mov	r3,r2
 2002628:	00808074 	movhi	r2,513
 200262c:	109a8e04 	addi	r2,r2,27192
 2002630:	1885883a 	add	r2,r3,r2
 2002634:	1007883a 	mov	r3,r2
 2002638:	e0bff817 	ldw	r2,-32(fp)
 200263c:	10807824 	muli	r2,r2,480
 2002640:	1009883a 	mov	r4,r2
 2002644:	e0bffd17 	ldw	r2,-12(fp)
 2002648:	1105883a 	add	r2,r2,r4
 200264c:	1885c032 	custom	0,r2,r3,r2
   alt_u16* img_cpy = calloc(78000,sizeof(alt_u16)); // NOTE: image is 76800 items large! Size is chosen due to end of image bug
   alt_u16* gif_frame_cpy = calloc(78000,sizeof(alt_u16)); //malloc(76800*sizeof(alt_u16));
   printf("%x\n", img_cpy);
   printf("%x\n", (img_cpy - 0x01000000));

   for (int i=0;i<318;i++) {
 2002650:	e0bff817 	ldw	r2,-32(fp)
 2002654:	10800044 	addi	r2,r2,1
 2002658:	e0bff815 	stw	r2,-32(fp)
 200265c:	e0bff817 	ldw	r2,-32(fp)
 2002660:	10804f90 	cmplti	r2,r2,318
 2002664:	103fed1e 	bne	r2,zero,200261c <__alt_mem_epcs_flash_controller_0+0xfd00161c>
	   ALT_CI_NEW_COMPONENT_0(staticimg+240*i,img_cpy+240*i);
   }

   // init LCD
   LCD_Init();
 2002668:	20017080 	call	2001708 <LCD_Init>
   LCD_Clear(0XFF00);
 200266c:	013fc014 	movui	r4,65280
 2002670:	20014fc0 	call	20014fc <LCD_Clear>
   LCD_ClearRnd();
 2002674:	20015800 	call	2001580 <LCD_ClearRnd>

   bool state_filter = FALSE;
 2002678:	e03ff915 	stw	zero,-28(fp)
   bool state_video = FALSE;
 200267c:	e03ffa15 	stw	zero,-24(fp)
   int count=0;
 2002680:	e03fff15 	stw	zero,-4(fp)
   while (1) {

	  // button check for switching between images
      b0_prev = b0;
 2002684:	e0bff617 	ldw	r2,-40(fp)
 2002688:	e0bffb15 	stw	r2,-20(fp)
      b0 = ((IORD(KEY_BASE, 0x00) & 0x01) == 0x00)?TRUE:FALSE;
 200268c:	00810034 	movhi	r2,1024
 2002690:	10801004 	addi	r2,r2,64
 2002694:	10800037 	ldwio	r2,0(r2)
 2002698:	1080004c 	andi	r2,r2,1
 200269c:	1005003a 	cmpeq	r2,r2,zero
 20026a0:	10803fcc 	andi	r2,r2,255
 20026a4:	e0bff615 	stw	r2,-40(fp)
      if (b0 && (b0_prev == FALSE)) {
 20026a8:	e0bff617 	ldw	r2,-40(fp)
 20026ac:	10000726 	beq	r2,zero,20026cc <main+0x170>
 20026b0:	e0bffb17 	ldw	r2,-20(fp)
 20026b4:	1000051e 	bne	r2,zero,20026cc <main+0x170>
         state_filter = !state_filter;
 20026b8:	e0bff917 	ldw	r2,-28(fp)
 20026bc:	1005003a 	cmpeq	r2,r2,zero
 20026c0:	10803fcc 	andi	r2,r2,255
 20026c4:	e0bff915 	stw	r2,-28(fp)
         count = 0;
 20026c8:	e03fff15 	stw	zero,-4(fp)
      }

      b1_prev = b1;
 20026cc:	e0bff717 	ldw	r2,-36(fp)
 20026d0:	e0bffc15 	stw	r2,-16(fp)
	  b1 = ((IORD(KEY_BASE, 0x00) & 0x02) == 0x00)?TRUE:FALSE;
 20026d4:	00810034 	movhi	r2,1024
 20026d8:	10801004 	addi	r2,r2,64
 20026dc:	10800037 	ldwio	r2,0(r2)
 20026e0:	1080008c 	andi	r2,r2,2
 20026e4:	1005003a 	cmpeq	r2,r2,zero
 20026e8:	10803fcc 	andi	r2,r2,255
 20026ec:	e0bff715 	stw	r2,-36(fp)
	  if (b1 && (b1_prev == FALSE)) {
 20026f0:	e0bff717 	ldw	r2,-36(fp)
 20026f4:	10000726 	beq	r2,zero,2002714 <main+0x1b8>
 20026f8:	e0bffc17 	ldw	r2,-16(fp)
 20026fc:	1000051e 	bne	r2,zero,2002714 <main+0x1b8>
	    state_video = !state_video;
 2002700:	e0bffa17 	ldw	r2,-24(fp)
 2002704:	1005003a 	cmpeq	r2,r2,zero
 2002708:	10803fcc 	andi	r2,r2,255
 200270c:	e0bffa15 	stw	r2,-24(fp)
	   	count = 0;
 2002710:	e03fff15 	stw	zero,-4(fp)
	  }

      // display images
      if (state_filter) {
 2002714:	e0bff917 	ldw	r2,-28(fp)
 2002718:	10000626 	beq	r2,zero,2002734 <main+0x1d8>
    	 if (!state_video) {
 200271c:	e0bffa17 	ldw	r2,-24(fp)
 2002720:	103fd81e 	bne	r2,zero,2002684 <__alt_mem_epcs_flash_controller_0+0xfd001684>
    		 LCD_DrawImg240x320(staticimg);
 2002724:	01008074 	movhi	r4,513
 2002728:	211a8e04 	addi	r4,r4,27192
 200272c:	20016000 	call	2001600 <LCD_DrawImg240x320>
 2002730:	003fd406 	br	2002684 <__alt_mem_epcs_flash_controller_0+0xfd001684>
//			 if (count > 29)
//				 count = 0;
    	 }
      }
      else {
    	 if (!state_video) {
 2002734:	e0bffa17 	ldw	r2,-24(fp)
 2002738:	103fd21e 	bne	r2,zero,2002684 <__alt_mem_epcs_flash_controller_0+0xfd001684>
    		 LCD_DrawImg240x320(img_cpy);
 200273c:	e13ffd17 	ldw	r4,-12(fp)
 2002740:	20016000 	call	2001600 <LCD_DrawImg240x320>
//		    count = count + 1;
//		    if (count > 29)
//			   count = 0;
    	 }
      }
   }
 2002744:	003fcf06 	br	2002684 <__alt_mem_epcs_flash_controller_0+0xfd001684>

02002748 <sqrt>:
 2002748:	defff104 	addi	sp,sp,-60
 200274c:	dd000d15 	stw	r20,52(sp)
 2002750:	05008134 	movhi	r20,516
 2002754:	dcc00c15 	stw	r19,48(sp)
 2002758:	dc800b15 	stw	r18,44(sp)
 200275c:	dc400a15 	stw	r17,40(sp)
 2002760:	dc000915 	stw	r16,36(sp)
 2002764:	dfc00e15 	stw	ra,56(sp)
 2002768:	a5384804 	addi	r20,r20,-7904
 200276c:	2027883a 	mov	r19,r4
 2002770:	2825883a 	mov	r18,r5
 2002774:	20028780 	call	2002878 <__ieee754_sqrt>
 2002778:	1821883a 	mov	r16,r3
 200277c:	a0c00017 	ldw	r3,0(r20)
 2002780:	1023883a 	mov	r17,r2
 2002784:	00bfffc4 	movi	r2,-1
 2002788:	18800a26 	beq	r3,r2,20027b4 <sqrt+0x6c>
 200278c:	9809883a 	mov	r4,r19
 2002790:	900b883a 	mov	r5,r18
 2002794:	2002b000 	call	2002b00 <__fpclassifyd>
 2002798:	10000626 	beq	r2,zero,20027b4 <sqrt+0x6c>
 200279c:	000d883a 	mov	r6,zero
 20027a0:	000f883a 	mov	r7,zero
 20027a4:	9809883a 	mov	r4,r19
 20027a8:	900b883a 	mov	r5,r18
 20027ac:	2003d100 	call	2003d10 <__ledf2>
 20027b0:	10000a16 	blt	r2,zero,20027dc <sqrt+0x94>
 20027b4:	8805883a 	mov	r2,r17
 20027b8:	8007883a 	mov	r3,r16
 20027bc:	dfc00e17 	ldw	ra,56(sp)
 20027c0:	dd000d17 	ldw	r20,52(sp)
 20027c4:	dcc00c17 	ldw	r19,48(sp)
 20027c8:	dc800b17 	ldw	r18,44(sp)
 20027cc:	dc400a17 	ldw	r17,40(sp)
 20027d0:	dc000917 	ldw	r16,36(sp)
 20027d4:	dec00f04 	addi	sp,sp,60
 20027d8:	f800283a 	ret
 20027dc:	00800044 	movi	r2,1
 20027e0:	d8800015 	stw	r2,0(sp)
 20027e4:	a4000017 	ldw	r16,0(r20)
 20027e8:	00808134 	movhi	r2,516
 20027ec:	10b09204 	addi	r2,r2,-15800
 20027f0:	d8800115 	stw	r2,4(sp)
 20027f4:	d8000815 	stw	zero,32(sp)
 20027f8:	dcc00415 	stw	r19,16(sp)
 20027fc:	dc800515 	stw	r18,20(sp)
 2002800:	dcc00215 	stw	r19,8(sp)
 2002804:	dc800315 	stw	r18,12(sp)
 2002808:	80000a1e 	bne	r16,zero,2002834 <sqrt+0xec>
 200280c:	d8000615 	stw	zero,24(sp)
 2002810:	d8000715 	stw	zero,28(sp)
 2002814:	d809883a 	mov	r4,sp
 2002818:	2002b740 	call	2002b74 <matherr>
 200281c:	10000e26 	beq	r2,zero,2002858 <sqrt+0x110>
 2002820:	d8800817 	ldw	r2,32(sp)
 2002824:	1000101e 	bne	r2,zero,2002868 <sqrt+0x120>
 2002828:	d8800617 	ldw	r2,24(sp)
 200282c:	d8c00717 	ldw	r3,28(sp)
 2002830:	003fe206 	br	20027bc <__alt_mem_epcs_flash_controller_0+0xfd0017bc>
 2002834:	000d883a 	mov	r6,zero
 2002838:	000f883a 	mov	r7,zero
 200283c:	0009883a 	mov	r4,zero
 2002840:	000b883a 	mov	r5,zero
 2002844:	20034280 	call	2003428 <__divdf3>
 2002848:	d8800615 	stw	r2,24(sp)
 200284c:	d8c00715 	stw	r3,28(sp)
 2002850:	00800084 	movi	r2,2
 2002854:	80bfef1e 	bne	r16,r2,2002814 <__alt_mem_epcs_flash_controller_0+0xfd001814>
 2002858:	20052680 	call	2005268 <__errno>
 200285c:	00c00844 	movi	r3,33
 2002860:	10c00015 	stw	r3,0(r2)
 2002864:	003fee06 	br	2002820 <__alt_mem_epcs_flash_controller_0+0xfd001820>
 2002868:	20052680 	call	2005268 <__errno>
 200286c:	d8c00817 	ldw	r3,32(sp)
 2002870:	10c00015 	stw	r3,0(r2)
 2002874:	003fec06 	br	2002828 <__alt_mem_epcs_flash_controller_0+0xfd001828>

02002878 <__ieee754_sqrt>:
 2002878:	defffd04 	addi	sp,sp,-12
 200287c:	dc400115 	stw	r17,4(sp)
 2002880:	dc000015 	stw	r16,0(sp)
 2002884:	dfc00215 	stw	ra,8(sp)
 2002888:	28dffc2c 	andhi	r3,r5,32752
 200288c:	009ffc34 	movhi	r2,32752
 2002890:	2821883a 	mov	r16,r5
 2002894:	2023883a 	mov	r17,r4
 2002898:	200d883a 	mov	r6,r4
 200289c:	18807b26 	beq	r3,r2,2002a8c <__ieee754_sqrt+0x214>
 20028a0:	01405f0e 	bge	zero,r5,2002a20 <__ieee754_sqrt+0x1a8>
 20028a4:	2815d53a 	srai	r10,r5,20
 20028a8:	50006a26 	beq	r10,zero,2002a54 <__ieee754_sqrt+0x1dc>
 20028ac:	00c00434 	movhi	r3,16
 20028b0:	52bf0044 	addi	r10,r10,-1023
 20028b4:	18ffffc4 	addi	r3,r3,-1
 20028b8:	80c6703a 	and	r3,r16,r3
 20028bc:	5080004c 	andi	r2,r10,1
 20028c0:	18c00434 	orhi	r3,r3,16
 20028c4:	1000511e 	bne	r2,zero,2002a0c <__ieee754_sqrt+0x194>
 20028c8:	3004d7fa 	srli	r2,r6,31
 20028cc:	5015d07a 	srai	r10,r10,1
 20028d0:	18c7883a 	add	r3,r3,r3
 20028d4:	10c5883a 	add	r2,r2,r3
 20028d8:	01400584 	movi	r5,22
 20028dc:	3187883a 	add	r3,r6,r6
 20028e0:	0013883a 	mov	r9,zero
 20028e4:	000f883a 	mov	r7,zero
 20028e8:	01000834 	movhi	r4,32
 20028ec:	390d883a 	add	r6,r7,r4
 20028f0:	1810d7fa 	srli	r8,r3,31
 20028f4:	297fffc4 	addi	r5,r5,-1
 20028f8:	11800316 	blt	r2,r6,2002908 <__ieee754_sqrt+0x90>
 20028fc:	1185c83a 	sub	r2,r2,r6
 2002900:	310f883a 	add	r7,r6,r4
 2002904:	4913883a 	add	r9,r9,r4
 2002908:	1085883a 	add	r2,r2,r2
 200290c:	4085883a 	add	r2,r8,r2
 2002910:	18c7883a 	add	r3,r3,r3
 2002914:	2008d07a 	srli	r4,r4,1
 2002918:	283ff41e 	bne	r5,zero,20028ec <__alt_mem_epcs_flash_controller_0+0xfd0018ec>
 200291c:	01200034 	movhi	r4,32768
 2002920:	01800804 	movi	r6,32
 2002924:	0011883a 	mov	r8,zero
 2002928:	0019883a 	mov	r12,zero
 200292c:	201b883a 	mov	r13,r4
 2002930:	00000806 	br	2002954 <__ieee754_sqrt+0xdc>
 2002934:	38801726 	beq	r7,r2,2002994 <__ieee754_sqrt+0x11c>
 2002938:	180ad7fa 	srli	r5,r3,31
 200293c:	1085883a 	add	r2,r2,r2
 2002940:	31bfffc4 	addi	r6,r6,-1
 2002944:	2885883a 	add	r2,r5,r2
 2002948:	18c7883a 	add	r3,r3,r3
 200294c:	2008d07a 	srli	r4,r4,1
 2002950:	30001726 	beq	r6,zero,20029b0 <__ieee754_sqrt+0x138>
 2002954:	230b883a 	add	r5,r4,r12
 2002958:	38bff60e 	bge	r7,r2,2002934 <__alt_mem_epcs_flash_controller_0+0xfd001934>
 200295c:	2ae0002c 	andhi	r11,r5,32768
 2002960:	2919883a 	add	r12,r5,r4
 2002964:	5b400826 	beq	r11,r13,2002988 <__ieee754_sqrt+0x110>
 2002968:	3817883a 	mov	r11,r7
 200296c:	11c5c83a 	sub	r2,r2,r7
 2002970:	1940012e 	bgeu	r3,r5,2002978 <__ieee754_sqrt+0x100>
 2002974:	10bfffc4 	addi	r2,r2,-1
 2002978:	1947c83a 	sub	r3,r3,r5
 200297c:	4111883a 	add	r8,r8,r4
 2002980:	580f883a 	mov	r7,r11
 2002984:	003fec06 	br	2002938 <__alt_mem_epcs_flash_controller_0+0xfd001938>
 2002988:	603ff716 	blt	r12,zero,2002968 <__alt_mem_epcs_flash_controller_0+0xfd001968>
 200298c:	3ac00044 	addi	r11,r7,1
 2002990:	003ff606 	br	200296c <__alt_mem_epcs_flash_controller_0+0xfd00196c>
 2002994:	19401936 	bltu	r3,r5,20029fc <__ieee754_sqrt+0x184>
 2002998:	2ae0002c 	andhi	r11,r5,32768
 200299c:	2919883a 	add	r12,r5,r4
 20029a0:	5b404526 	beq	r11,r13,2002ab8 <__ieee754_sqrt+0x240>
 20029a4:	1017883a 	mov	r11,r2
 20029a8:	0005883a 	mov	r2,zero
 20029ac:	003ff206 	br	2002978 <__alt_mem_epcs_flash_controller_0+0xfd001978>
 20029b0:	10c4b03a 	or	r2,r2,r3
 20029b4:	10000426 	beq	r2,zero,20029c8 <__ieee754_sqrt+0x150>
 20029b8:	00bfffc4 	movi	r2,-1
 20029bc:	40804026 	beq	r8,r2,2002ac0 <__ieee754_sqrt+0x248>
 20029c0:	4080004c 	andi	r2,r8,1
 20029c4:	4091883a 	add	r8,r8,r2
 20029c8:	4004d07a 	srli	r2,r8,1
 20029cc:	4807d07a 	srai	r3,r9,1
 20029d0:	010ff834 	movhi	r4,16352
 20029d4:	4a40004c 	andi	r9,r9,1
 20029d8:	1909883a 	add	r4,r3,r4
 20029dc:	4800091e 	bne	r9,zero,2002a04 <__ieee754_sqrt+0x18c>
 20029e0:	5006953a 	slli	r3,r10,20
 20029e4:	1907883a 	add	r3,r3,r4
 20029e8:	dfc00217 	ldw	ra,8(sp)
 20029ec:	dc400117 	ldw	r17,4(sp)
 20029f0:	dc000017 	ldw	r16,0(sp)
 20029f4:	dec00304 	addi	sp,sp,12
 20029f8:	f800283a 	ret
 20029fc:	3805883a 	mov	r2,r7
 2002a00:	003fcd06 	br	2002938 <__alt_mem_epcs_flash_controller_0+0xfd001938>
 2002a04:	10a00034 	orhi	r2,r2,32768
 2002a08:	003ff506 	br	20029e0 <__alt_mem_epcs_flash_controller_0+0xfd0019e0>
 2002a0c:	3004d7fa 	srli	r2,r6,31
 2002a10:	18c7883a 	add	r3,r3,r3
 2002a14:	318d883a 	add	r6,r6,r6
 2002a18:	10c7883a 	add	r3,r2,r3
 2002a1c:	003faa06 	br	20028c8 <__alt_mem_epcs_flash_controller_0+0xfd0018c8>
 2002a20:	00a00034 	movhi	r2,32768
 2002a24:	10bfffc4 	addi	r2,r2,-1
 2002a28:	2884703a 	and	r2,r5,r2
 2002a2c:	1104b03a 	or	r2,r2,r4
 2002a30:	10001e26 	beq	r2,zero,2002aac <__ieee754_sqrt+0x234>
 2002a34:	2800291e 	bne	r5,zero,2002adc <__ieee754_sqrt+0x264>
 2002a38:	0015883a 	mov	r10,zero
 2002a3c:	3020d2fa 	srli	r16,r6,11
 2002a40:	52bffac4 	addi	r10,r10,-21
 2002a44:	300c957a 	slli	r6,r6,21
 2002a48:	803ffc26 	beq	r16,zero,2002a3c <__alt_mem_epcs_flash_controller_0+0xfd001a3c>
 2002a4c:	8080042c 	andhi	r2,r16,16
 2002a50:	10001e1e 	bne	r2,zero,2002acc <__ieee754_sqrt+0x254>
 2002a54:	0005883a 	mov	r2,zero
 2002a58:	00000106 	br	2002a60 <__ieee754_sqrt+0x1e8>
 2002a5c:	1805883a 	mov	r2,r3
 2002a60:	8421883a 	add	r16,r16,r16
 2002a64:	8100042c 	andhi	r4,r16,16
 2002a68:	10c00044 	addi	r3,r2,1
 2002a6c:	203ffb26 	beq	r4,zero,2002a5c <__alt_mem_epcs_flash_controller_0+0xfd001a5c>
 2002a70:	01000804 	movi	r4,32
 2002a74:	20c9c83a 	sub	r4,r4,r3
 2002a78:	3108d83a 	srl	r4,r6,r4
 2002a7c:	5095c83a 	sub	r10,r10,r2
 2002a80:	30cc983a 	sll	r6,r6,r3
 2002a84:	2420b03a 	or	r16,r4,r16
 2002a88:	003f8806 	br	20028ac <__alt_mem_epcs_flash_controller_0+0xfd0018ac>
 2002a8c:	280f883a 	mov	r7,r5
 2002a90:	2003e040 	call	2003e04 <__muldf3>
 2002a94:	880d883a 	mov	r6,r17
 2002a98:	800f883a 	mov	r7,r16
 2002a9c:	1009883a 	mov	r4,r2
 2002aa0:	180b883a 	mov	r5,r3
 2002aa4:	2002b7c0 	call	2002b7c <__adddf3>
 2002aa8:	003fcf06 	br	20029e8 <__alt_mem_epcs_flash_controller_0+0xfd0019e8>
 2002aac:	2005883a 	mov	r2,r4
 2002ab0:	2807883a 	mov	r3,r5
 2002ab4:	003fcc06 	br	20029e8 <__alt_mem_epcs_flash_controller_0+0xfd0019e8>
 2002ab8:	603fba16 	blt	r12,zero,20029a4 <__alt_mem_epcs_flash_controller_0+0xfd0019a4>
 2002abc:	003fb306 	br	200298c <__alt_mem_epcs_flash_controller_0+0xfd00198c>
 2002ac0:	4a400044 	addi	r9,r9,1
 2002ac4:	0005883a 	mov	r2,zero
 2002ac8:	003fc006 	br	20029cc <__alt_mem_epcs_flash_controller_0+0xfd0019cc>
 2002acc:	01000804 	movi	r4,32
 2002ad0:	00bfffc4 	movi	r2,-1
 2002ad4:	0007883a 	mov	r3,zero
 2002ad8:	003fe706 	br	2002a78 <__alt_mem_epcs_flash_controller_0+0xfd001a78>
 2002adc:	200d883a 	mov	r6,r4
 2002ae0:	280f883a 	mov	r7,r5
 2002ae4:	200451c0 	call	200451c <__subdf3>
 2002ae8:	100d883a 	mov	r6,r2
 2002aec:	180f883a 	mov	r7,r3
 2002af0:	1009883a 	mov	r4,r2
 2002af4:	180b883a 	mov	r5,r3
 2002af8:	20034280 	call	2003428 <__divdf3>
 2002afc:	003fba06 	br	20029e8 <__alt_mem_epcs_flash_controller_0+0xfd0019e8>

02002b00 <__fpclassifyd>:
 2002b00:	00a00034 	movhi	r2,32768
 2002b04:	10bfffc4 	addi	r2,r2,-1
 2002b08:	2884703a 	and	r2,r5,r2
 2002b0c:	10000726 	beq	r2,zero,2002b2c <__fpclassifyd+0x2c>
 2002b10:	00fffc34 	movhi	r3,65520
 2002b14:	019ff834 	movhi	r6,32736
 2002b18:	28c7883a 	add	r3,r5,r3
 2002b1c:	31bfffc4 	addi	r6,r6,-1
 2002b20:	30c00536 	bltu	r6,r3,2002b38 <__fpclassifyd+0x38>
 2002b24:	00800104 	movi	r2,4
 2002b28:	f800283a 	ret
 2002b2c:	2000021e 	bne	r4,zero,2002b38 <__fpclassifyd+0x38>
 2002b30:	00800084 	movi	r2,2
 2002b34:	f800283a 	ret
 2002b38:	00dffc34 	movhi	r3,32752
 2002b3c:	019ff834 	movhi	r6,32736
 2002b40:	28cb883a 	add	r5,r5,r3
 2002b44:	31bfffc4 	addi	r6,r6,-1
 2002b48:	317ff62e 	bgeu	r6,r5,2002b24 <__alt_mem_epcs_flash_controller_0+0xfd001b24>
 2002b4c:	01400434 	movhi	r5,16
 2002b50:	297fffc4 	addi	r5,r5,-1
 2002b54:	28800236 	bltu	r5,r2,2002b60 <__fpclassifyd+0x60>
 2002b58:	008000c4 	movi	r2,3
 2002b5c:	f800283a 	ret
 2002b60:	10c00226 	beq	r2,r3,2002b6c <__fpclassifyd+0x6c>
 2002b64:	0005883a 	mov	r2,zero
 2002b68:	f800283a 	ret
 2002b6c:	2005003a 	cmpeq	r2,r4,zero
 2002b70:	f800283a 	ret

02002b74 <matherr>:
 2002b74:	0005883a 	mov	r2,zero
 2002b78:	f800283a 	ret

02002b7c <__adddf3>:
 2002b7c:	02c00434 	movhi	r11,16
 2002b80:	5affffc4 	addi	r11,r11,-1
 2002b84:	2806d7fa 	srli	r3,r5,31
 2002b88:	2ad4703a 	and	r10,r5,r11
 2002b8c:	3ad2703a 	and	r9,r7,r11
 2002b90:	3804d53a 	srli	r2,r7,20
 2002b94:	3018d77a 	srli	r12,r6,29
 2002b98:	280ad53a 	srli	r5,r5,20
 2002b9c:	501490fa 	slli	r10,r10,3
 2002ba0:	2010d77a 	srli	r8,r4,29
 2002ba4:	481290fa 	slli	r9,r9,3
 2002ba8:	380ed7fa 	srli	r7,r7,31
 2002bac:	defffb04 	addi	sp,sp,-20
 2002bb0:	dc800215 	stw	r18,8(sp)
 2002bb4:	dc400115 	stw	r17,4(sp)
 2002bb8:	dc000015 	stw	r16,0(sp)
 2002bbc:	dfc00415 	stw	ra,16(sp)
 2002bc0:	dcc00315 	stw	r19,12(sp)
 2002bc4:	1c803fcc 	andi	r18,r3,255
 2002bc8:	2c01ffcc 	andi	r16,r5,2047
 2002bcc:	5210b03a 	or	r8,r10,r8
 2002bd0:	202290fa 	slli	r17,r4,3
 2002bd4:	1081ffcc 	andi	r2,r2,2047
 2002bd8:	4b12b03a 	or	r9,r9,r12
 2002bdc:	300c90fa 	slli	r6,r6,3
 2002be0:	91c07526 	beq	r18,r7,2002db8 <__adddf3+0x23c>
 2002be4:	8087c83a 	sub	r3,r16,r2
 2002be8:	00c0ab0e 	bge	zero,r3,2002e98 <__adddf3+0x31c>
 2002bec:	10002a1e 	bne	r2,zero,2002c98 <__adddf3+0x11c>
 2002bf0:	4984b03a 	or	r2,r9,r6
 2002bf4:	1000961e 	bne	r2,zero,2002e50 <__adddf3+0x2d4>
 2002bf8:	888001cc 	andi	r2,r17,7
 2002bfc:	10000726 	beq	r2,zero,2002c1c <__adddf3+0xa0>
 2002c00:	888003cc 	andi	r2,r17,15
 2002c04:	00c00104 	movi	r3,4
 2002c08:	10c00426 	beq	r2,r3,2002c1c <__adddf3+0xa0>
 2002c0c:	88c7883a 	add	r3,r17,r3
 2002c10:	1c63803a 	cmpltu	r17,r3,r17
 2002c14:	4451883a 	add	r8,r8,r17
 2002c18:	1823883a 	mov	r17,r3
 2002c1c:	4080202c 	andhi	r2,r8,128
 2002c20:	10005926 	beq	r2,zero,2002d88 <__adddf3+0x20c>
 2002c24:	84000044 	addi	r16,r16,1
 2002c28:	0081ffc4 	movi	r2,2047
 2002c2c:	8080ba26 	beq	r16,r2,2002f18 <__adddf3+0x39c>
 2002c30:	00bfe034 	movhi	r2,65408
 2002c34:	10bfffc4 	addi	r2,r2,-1
 2002c38:	4090703a 	and	r8,r8,r2
 2002c3c:	4004977a 	slli	r2,r8,29
 2002c40:	4010927a 	slli	r8,r8,9
 2002c44:	8822d0fa 	srli	r17,r17,3
 2002c48:	8401ffcc 	andi	r16,r16,2047
 2002c4c:	4010d33a 	srli	r8,r8,12
 2002c50:	9007883a 	mov	r3,r18
 2002c54:	1444b03a 	or	r2,r2,r17
 2002c58:	8401ffcc 	andi	r16,r16,2047
 2002c5c:	8020953a 	slli	r16,r16,20
 2002c60:	18c03fcc 	andi	r3,r3,255
 2002c64:	01000434 	movhi	r4,16
 2002c68:	213fffc4 	addi	r4,r4,-1
 2002c6c:	180697fa 	slli	r3,r3,31
 2002c70:	4110703a 	and	r8,r8,r4
 2002c74:	4410b03a 	or	r8,r8,r16
 2002c78:	40c6b03a 	or	r3,r8,r3
 2002c7c:	dfc00417 	ldw	ra,16(sp)
 2002c80:	dcc00317 	ldw	r19,12(sp)
 2002c84:	dc800217 	ldw	r18,8(sp)
 2002c88:	dc400117 	ldw	r17,4(sp)
 2002c8c:	dc000017 	ldw	r16,0(sp)
 2002c90:	dec00504 	addi	sp,sp,20
 2002c94:	f800283a 	ret
 2002c98:	0081ffc4 	movi	r2,2047
 2002c9c:	80bfd626 	beq	r16,r2,2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 2002ca0:	4a402034 	orhi	r9,r9,128
 2002ca4:	00800e04 	movi	r2,56
 2002ca8:	10c09f16 	blt	r2,r3,2002f28 <__adddf3+0x3ac>
 2002cac:	008007c4 	movi	r2,31
 2002cb0:	10c0c216 	blt	r2,r3,2002fbc <__adddf3+0x440>
 2002cb4:	00800804 	movi	r2,32
 2002cb8:	10c5c83a 	sub	r2,r2,r3
 2002cbc:	488a983a 	sll	r5,r9,r2
 2002cc0:	30c8d83a 	srl	r4,r6,r3
 2002cc4:	3084983a 	sll	r2,r6,r2
 2002cc8:	48c6d83a 	srl	r3,r9,r3
 2002ccc:	290cb03a 	or	r6,r5,r4
 2002cd0:	1004c03a 	cmpne	r2,r2,zero
 2002cd4:	308cb03a 	or	r6,r6,r2
 2002cd8:	898dc83a 	sub	r6,r17,r6
 2002cdc:	89a3803a 	cmpltu	r17,r17,r6
 2002ce0:	40d1c83a 	sub	r8,r8,r3
 2002ce4:	4451c83a 	sub	r8,r8,r17
 2002ce8:	3023883a 	mov	r17,r6
 2002cec:	4080202c 	andhi	r2,r8,128
 2002cf0:	10002326 	beq	r2,zero,2002d80 <__adddf3+0x204>
 2002cf4:	04c02034 	movhi	r19,128
 2002cf8:	9cffffc4 	addi	r19,r19,-1
 2002cfc:	44e6703a 	and	r19,r8,r19
 2002d00:	98007626 	beq	r19,zero,2002edc <__adddf3+0x360>
 2002d04:	9809883a 	mov	r4,r19
 2002d08:	2004f740 	call	2004f74 <__clzsi2>
 2002d0c:	10fffe04 	addi	r3,r2,-8
 2002d10:	010007c4 	movi	r4,31
 2002d14:	20c07716 	blt	r4,r3,2002ef4 <__adddf3+0x378>
 2002d18:	00800804 	movi	r2,32
 2002d1c:	10c5c83a 	sub	r2,r2,r3
 2002d20:	8884d83a 	srl	r2,r17,r2
 2002d24:	98d0983a 	sll	r8,r19,r3
 2002d28:	88e2983a 	sll	r17,r17,r3
 2002d2c:	1204b03a 	or	r2,r2,r8
 2002d30:	1c007416 	blt	r3,r16,2002f04 <__adddf3+0x388>
 2002d34:	1c21c83a 	sub	r16,r3,r16
 2002d38:	82000044 	addi	r8,r16,1
 2002d3c:	00c007c4 	movi	r3,31
 2002d40:	1a009116 	blt	r3,r8,2002f88 <__adddf3+0x40c>
 2002d44:	00c00804 	movi	r3,32
 2002d48:	1a07c83a 	sub	r3,r3,r8
 2002d4c:	8a08d83a 	srl	r4,r17,r8
 2002d50:	88e2983a 	sll	r17,r17,r3
 2002d54:	10c6983a 	sll	r3,r2,r3
 2002d58:	1210d83a 	srl	r8,r2,r8
 2002d5c:	8804c03a 	cmpne	r2,r17,zero
 2002d60:	1906b03a 	or	r3,r3,r4
 2002d64:	18a2b03a 	or	r17,r3,r2
 2002d68:	0021883a 	mov	r16,zero
 2002d6c:	003fa206 	br	2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 2002d70:	1890b03a 	or	r8,r3,r2
 2002d74:	40017d26 	beq	r8,zero,200336c <__adddf3+0x7f0>
 2002d78:	1011883a 	mov	r8,r2
 2002d7c:	1823883a 	mov	r17,r3
 2002d80:	888001cc 	andi	r2,r17,7
 2002d84:	103f9e1e 	bne	r2,zero,2002c00 <__alt_mem_epcs_flash_controller_0+0xfd001c00>
 2002d88:	4004977a 	slli	r2,r8,29
 2002d8c:	8822d0fa 	srli	r17,r17,3
 2002d90:	4010d0fa 	srli	r8,r8,3
 2002d94:	9007883a 	mov	r3,r18
 2002d98:	1444b03a 	or	r2,r2,r17
 2002d9c:	0101ffc4 	movi	r4,2047
 2002da0:	81002426 	beq	r16,r4,2002e34 <__adddf3+0x2b8>
 2002da4:	8120703a 	and	r16,r16,r4
 2002da8:	01000434 	movhi	r4,16
 2002dac:	213fffc4 	addi	r4,r4,-1
 2002db0:	4110703a 	and	r8,r8,r4
 2002db4:	003fa806 	br	2002c58 <__alt_mem_epcs_flash_controller_0+0xfd001c58>
 2002db8:	8089c83a 	sub	r4,r16,r2
 2002dbc:	01005e0e 	bge	zero,r4,2002f38 <__adddf3+0x3bc>
 2002dc0:	10002b26 	beq	r2,zero,2002e70 <__adddf3+0x2f4>
 2002dc4:	0081ffc4 	movi	r2,2047
 2002dc8:	80bf8b26 	beq	r16,r2,2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 2002dcc:	4a402034 	orhi	r9,r9,128
 2002dd0:	00800e04 	movi	r2,56
 2002dd4:	1100a40e 	bge	r2,r4,2003068 <__adddf3+0x4ec>
 2002dd8:	498cb03a 	or	r6,r9,r6
 2002ddc:	300ac03a 	cmpne	r5,r6,zero
 2002de0:	0013883a 	mov	r9,zero
 2002de4:	2c4b883a 	add	r5,r5,r17
 2002de8:	2c63803a 	cmpltu	r17,r5,r17
 2002dec:	4a11883a 	add	r8,r9,r8
 2002df0:	8a11883a 	add	r8,r17,r8
 2002df4:	2823883a 	mov	r17,r5
 2002df8:	4080202c 	andhi	r2,r8,128
 2002dfc:	103fe026 	beq	r2,zero,2002d80 <__alt_mem_epcs_flash_controller_0+0xfd001d80>
 2002e00:	84000044 	addi	r16,r16,1
 2002e04:	0081ffc4 	movi	r2,2047
 2002e08:	8080d226 	beq	r16,r2,2003154 <__adddf3+0x5d8>
 2002e0c:	00bfe034 	movhi	r2,65408
 2002e10:	10bfffc4 	addi	r2,r2,-1
 2002e14:	4090703a 	and	r8,r8,r2
 2002e18:	880ad07a 	srli	r5,r17,1
 2002e1c:	400897fa 	slli	r4,r8,31
 2002e20:	88c0004c 	andi	r3,r17,1
 2002e24:	28e2b03a 	or	r17,r5,r3
 2002e28:	4010d07a 	srli	r8,r8,1
 2002e2c:	2462b03a 	or	r17,r4,r17
 2002e30:	003f7106 	br	2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 2002e34:	4088b03a 	or	r4,r8,r2
 2002e38:	20014526 	beq	r4,zero,2003350 <__adddf3+0x7d4>
 2002e3c:	01000434 	movhi	r4,16
 2002e40:	42000234 	orhi	r8,r8,8
 2002e44:	213fffc4 	addi	r4,r4,-1
 2002e48:	4110703a 	and	r8,r8,r4
 2002e4c:	003f8206 	br	2002c58 <__alt_mem_epcs_flash_controller_0+0xfd001c58>
 2002e50:	18ffffc4 	addi	r3,r3,-1
 2002e54:	1800491e 	bne	r3,zero,2002f7c <__adddf3+0x400>
 2002e58:	898bc83a 	sub	r5,r17,r6
 2002e5c:	8963803a 	cmpltu	r17,r17,r5
 2002e60:	4251c83a 	sub	r8,r8,r9
 2002e64:	4451c83a 	sub	r8,r8,r17
 2002e68:	2823883a 	mov	r17,r5
 2002e6c:	003f9f06 	br	2002cec <__alt_mem_epcs_flash_controller_0+0xfd001cec>
 2002e70:	4984b03a 	or	r2,r9,r6
 2002e74:	103f6026 	beq	r2,zero,2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 2002e78:	213fffc4 	addi	r4,r4,-1
 2002e7c:	2000931e 	bne	r4,zero,20030cc <__adddf3+0x550>
 2002e80:	898d883a 	add	r6,r17,r6
 2002e84:	3463803a 	cmpltu	r17,r6,r17
 2002e88:	4251883a 	add	r8,r8,r9
 2002e8c:	8a11883a 	add	r8,r17,r8
 2002e90:	3023883a 	mov	r17,r6
 2002e94:	003fd806 	br	2002df8 <__alt_mem_epcs_flash_controller_0+0xfd001df8>
 2002e98:	1800541e 	bne	r3,zero,2002fec <__adddf3+0x470>
 2002e9c:	80800044 	addi	r2,r16,1
 2002ea0:	1081ffcc 	andi	r2,r2,2047
 2002ea4:	00c00044 	movi	r3,1
 2002ea8:	1880a00e 	bge	r3,r2,200312c <__adddf3+0x5b0>
 2002eac:	8989c83a 	sub	r4,r17,r6
 2002eb0:	8905803a 	cmpltu	r2,r17,r4
 2002eb4:	4267c83a 	sub	r19,r8,r9
 2002eb8:	98a7c83a 	sub	r19,r19,r2
 2002ebc:	9880202c 	andhi	r2,r19,128
 2002ec0:	10006326 	beq	r2,zero,2003050 <__adddf3+0x4d4>
 2002ec4:	3463c83a 	sub	r17,r6,r17
 2002ec8:	4a07c83a 	sub	r3,r9,r8
 2002ecc:	344d803a 	cmpltu	r6,r6,r17
 2002ed0:	19a7c83a 	sub	r19,r3,r6
 2002ed4:	3825883a 	mov	r18,r7
 2002ed8:	983f8a1e 	bne	r19,zero,2002d04 <__alt_mem_epcs_flash_controller_0+0xfd001d04>
 2002edc:	8809883a 	mov	r4,r17
 2002ee0:	2004f740 	call	2004f74 <__clzsi2>
 2002ee4:	10800804 	addi	r2,r2,32
 2002ee8:	10fffe04 	addi	r3,r2,-8
 2002eec:	010007c4 	movi	r4,31
 2002ef0:	20ff890e 	bge	r4,r3,2002d18 <__alt_mem_epcs_flash_controller_0+0xfd001d18>
 2002ef4:	10bff604 	addi	r2,r2,-40
 2002ef8:	8884983a 	sll	r2,r17,r2
 2002efc:	0023883a 	mov	r17,zero
 2002f00:	1c3f8c0e 	bge	r3,r16,2002d34 <__alt_mem_epcs_flash_controller_0+0xfd001d34>
 2002f04:	023fe034 	movhi	r8,65408
 2002f08:	423fffc4 	addi	r8,r8,-1
 2002f0c:	80e1c83a 	sub	r16,r16,r3
 2002f10:	1210703a 	and	r8,r2,r8
 2002f14:	003f3806 	br	2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 2002f18:	9007883a 	mov	r3,r18
 2002f1c:	0011883a 	mov	r8,zero
 2002f20:	0005883a 	mov	r2,zero
 2002f24:	003f4c06 	br	2002c58 <__alt_mem_epcs_flash_controller_0+0xfd001c58>
 2002f28:	498cb03a 	or	r6,r9,r6
 2002f2c:	300cc03a 	cmpne	r6,r6,zero
 2002f30:	0007883a 	mov	r3,zero
 2002f34:	003f6806 	br	2002cd8 <__alt_mem_epcs_flash_controller_0+0xfd001cd8>
 2002f38:	20009c1e 	bne	r4,zero,20031ac <__adddf3+0x630>
 2002f3c:	80800044 	addi	r2,r16,1
 2002f40:	1141ffcc 	andi	r5,r2,2047
 2002f44:	01000044 	movi	r4,1
 2002f48:	2140670e 	bge	r4,r5,20030e8 <__adddf3+0x56c>
 2002f4c:	0101ffc4 	movi	r4,2047
 2002f50:	11007f26 	beq	r2,r4,2003150 <__adddf3+0x5d4>
 2002f54:	898d883a 	add	r6,r17,r6
 2002f58:	4247883a 	add	r3,r8,r9
 2002f5c:	3451803a 	cmpltu	r8,r6,r17
 2002f60:	40d1883a 	add	r8,r8,r3
 2002f64:	402297fa 	slli	r17,r8,31
 2002f68:	300cd07a 	srli	r6,r6,1
 2002f6c:	4010d07a 	srli	r8,r8,1
 2002f70:	1021883a 	mov	r16,r2
 2002f74:	89a2b03a 	or	r17,r17,r6
 2002f78:	003f1f06 	br	2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 2002f7c:	0081ffc4 	movi	r2,2047
 2002f80:	80bf481e 	bne	r16,r2,2002ca4 <__alt_mem_epcs_flash_controller_0+0xfd001ca4>
 2002f84:	003f1c06 	br	2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 2002f88:	843ff844 	addi	r16,r16,-31
 2002f8c:	01000804 	movi	r4,32
 2002f90:	1406d83a 	srl	r3,r2,r16
 2002f94:	41005026 	beq	r8,r4,20030d8 <__adddf3+0x55c>
 2002f98:	01001004 	movi	r4,64
 2002f9c:	2211c83a 	sub	r8,r4,r8
 2002fa0:	1204983a 	sll	r2,r2,r8
 2002fa4:	88a2b03a 	or	r17,r17,r2
 2002fa8:	8822c03a 	cmpne	r17,r17,zero
 2002fac:	1c62b03a 	or	r17,r3,r17
 2002fb0:	0011883a 	mov	r8,zero
 2002fb4:	0021883a 	mov	r16,zero
 2002fb8:	003f7106 	br	2002d80 <__alt_mem_epcs_flash_controller_0+0xfd001d80>
 2002fbc:	193ff804 	addi	r4,r3,-32
 2002fc0:	00800804 	movi	r2,32
 2002fc4:	4908d83a 	srl	r4,r9,r4
 2002fc8:	18804526 	beq	r3,r2,20030e0 <__adddf3+0x564>
 2002fcc:	00801004 	movi	r2,64
 2002fd0:	10c5c83a 	sub	r2,r2,r3
 2002fd4:	4886983a 	sll	r3,r9,r2
 2002fd8:	198cb03a 	or	r6,r3,r6
 2002fdc:	300cc03a 	cmpne	r6,r6,zero
 2002fe0:	218cb03a 	or	r6,r4,r6
 2002fe4:	0007883a 	mov	r3,zero
 2002fe8:	003f3b06 	br	2002cd8 <__alt_mem_epcs_flash_controller_0+0xfd001cd8>
 2002fec:	80002a26 	beq	r16,zero,2003098 <__adddf3+0x51c>
 2002ff0:	0101ffc4 	movi	r4,2047
 2002ff4:	11006826 	beq	r2,r4,2003198 <__adddf3+0x61c>
 2002ff8:	00c7c83a 	sub	r3,zero,r3
 2002ffc:	42002034 	orhi	r8,r8,128
 2003000:	01000e04 	movi	r4,56
 2003004:	20c07c16 	blt	r4,r3,20031f8 <__adddf3+0x67c>
 2003008:	010007c4 	movi	r4,31
 200300c:	20c0da16 	blt	r4,r3,2003378 <__adddf3+0x7fc>
 2003010:	01000804 	movi	r4,32
 2003014:	20c9c83a 	sub	r4,r4,r3
 2003018:	4114983a 	sll	r10,r8,r4
 200301c:	88cad83a 	srl	r5,r17,r3
 2003020:	8908983a 	sll	r4,r17,r4
 2003024:	40c6d83a 	srl	r3,r8,r3
 2003028:	5162b03a 	or	r17,r10,r5
 200302c:	2008c03a 	cmpne	r4,r4,zero
 2003030:	8922b03a 	or	r17,r17,r4
 2003034:	3463c83a 	sub	r17,r6,r17
 2003038:	48c7c83a 	sub	r3,r9,r3
 200303c:	344d803a 	cmpltu	r6,r6,r17
 2003040:	1991c83a 	sub	r8,r3,r6
 2003044:	1021883a 	mov	r16,r2
 2003048:	3825883a 	mov	r18,r7
 200304c:	003f2706 	br	2002cec <__alt_mem_epcs_flash_controller_0+0xfd001cec>
 2003050:	24d0b03a 	or	r8,r4,r19
 2003054:	40001b1e 	bne	r8,zero,20030c4 <__adddf3+0x548>
 2003058:	0005883a 	mov	r2,zero
 200305c:	0007883a 	mov	r3,zero
 2003060:	0021883a 	mov	r16,zero
 2003064:	003f4d06 	br	2002d9c <__alt_mem_epcs_flash_controller_0+0xfd001d9c>
 2003068:	008007c4 	movi	r2,31
 200306c:	11003c16 	blt	r2,r4,2003160 <__adddf3+0x5e4>
 2003070:	00800804 	movi	r2,32
 2003074:	1105c83a 	sub	r2,r2,r4
 2003078:	488e983a 	sll	r7,r9,r2
 200307c:	310ad83a 	srl	r5,r6,r4
 2003080:	3084983a 	sll	r2,r6,r2
 2003084:	4912d83a 	srl	r9,r9,r4
 2003088:	394ab03a 	or	r5,r7,r5
 200308c:	1004c03a 	cmpne	r2,r2,zero
 2003090:	288ab03a 	or	r5,r5,r2
 2003094:	003f5306 	br	2002de4 <__alt_mem_epcs_flash_controller_0+0xfd001de4>
 2003098:	4448b03a 	or	r4,r8,r17
 200309c:	20003e26 	beq	r4,zero,2003198 <__adddf3+0x61c>
 20030a0:	00c6303a 	nor	r3,zero,r3
 20030a4:	18003a1e 	bne	r3,zero,2003190 <__adddf3+0x614>
 20030a8:	3463c83a 	sub	r17,r6,r17
 20030ac:	4a07c83a 	sub	r3,r9,r8
 20030b0:	344d803a 	cmpltu	r6,r6,r17
 20030b4:	1991c83a 	sub	r8,r3,r6
 20030b8:	1021883a 	mov	r16,r2
 20030bc:	3825883a 	mov	r18,r7
 20030c0:	003f0a06 	br	2002cec <__alt_mem_epcs_flash_controller_0+0xfd001cec>
 20030c4:	2023883a 	mov	r17,r4
 20030c8:	003f0d06 	br	2002d00 <__alt_mem_epcs_flash_controller_0+0xfd001d00>
 20030cc:	0081ffc4 	movi	r2,2047
 20030d0:	80bf3f1e 	bne	r16,r2,2002dd0 <__alt_mem_epcs_flash_controller_0+0xfd001dd0>
 20030d4:	003ec806 	br	2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 20030d8:	0005883a 	mov	r2,zero
 20030dc:	003fb106 	br	2002fa4 <__alt_mem_epcs_flash_controller_0+0xfd001fa4>
 20030e0:	0007883a 	mov	r3,zero
 20030e4:	003fbc06 	br	2002fd8 <__alt_mem_epcs_flash_controller_0+0xfd001fd8>
 20030e8:	4444b03a 	or	r2,r8,r17
 20030ec:	8000871e 	bne	r16,zero,200330c <__adddf3+0x790>
 20030f0:	1000ba26 	beq	r2,zero,20033dc <__adddf3+0x860>
 20030f4:	4984b03a 	or	r2,r9,r6
 20030f8:	103ebf26 	beq	r2,zero,2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 20030fc:	8985883a 	add	r2,r17,r6
 2003100:	4247883a 	add	r3,r8,r9
 2003104:	1451803a 	cmpltu	r8,r2,r17
 2003108:	40d1883a 	add	r8,r8,r3
 200310c:	40c0202c 	andhi	r3,r8,128
 2003110:	1023883a 	mov	r17,r2
 2003114:	183f1a26 	beq	r3,zero,2002d80 <__alt_mem_epcs_flash_controller_0+0xfd001d80>
 2003118:	00bfe034 	movhi	r2,65408
 200311c:	10bfffc4 	addi	r2,r2,-1
 2003120:	2021883a 	mov	r16,r4
 2003124:	4090703a 	and	r8,r8,r2
 2003128:	003eb306 	br	2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 200312c:	4444b03a 	or	r2,r8,r17
 2003130:	8000291e 	bne	r16,zero,20031d8 <__adddf3+0x65c>
 2003134:	10004b1e 	bne	r2,zero,2003264 <__adddf3+0x6e8>
 2003138:	4990b03a 	or	r8,r9,r6
 200313c:	40008b26 	beq	r8,zero,200336c <__adddf3+0x7f0>
 2003140:	4811883a 	mov	r8,r9
 2003144:	3023883a 	mov	r17,r6
 2003148:	3825883a 	mov	r18,r7
 200314c:	003eaa06 	br	2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 2003150:	1021883a 	mov	r16,r2
 2003154:	0011883a 	mov	r8,zero
 2003158:	0005883a 	mov	r2,zero
 200315c:	003f0f06 	br	2002d9c <__alt_mem_epcs_flash_controller_0+0xfd001d9c>
 2003160:	217ff804 	addi	r5,r4,-32
 2003164:	00800804 	movi	r2,32
 2003168:	494ad83a 	srl	r5,r9,r5
 200316c:	20807d26 	beq	r4,r2,2003364 <__adddf3+0x7e8>
 2003170:	00801004 	movi	r2,64
 2003174:	1109c83a 	sub	r4,r2,r4
 2003178:	4912983a 	sll	r9,r9,r4
 200317c:	498cb03a 	or	r6,r9,r6
 2003180:	300cc03a 	cmpne	r6,r6,zero
 2003184:	298ab03a 	or	r5,r5,r6
 2003188:	0013883a 	mov	r9,zero
 200318c:	003f1506 	br	2002de4 <__alt_mem_epcs_flash_controller_0+0xfd001de4>
 2003190:	0101ffc4 	movi	r4,2047
 2003194:	113f9a1e 	bne	r2,r4,2003000 <__alt_mem_epcs_flash_controller_0+0xfd002000>
 2003198:	4811883a 	mov	r8,r9
 200319c:	3023883a 	mov	r17,r6
 20031a0:	1021883a 	mov	r16,r2
 20031a4:	3825883a 	mov	r18,r7
 20031a8:	003e9306 	br	2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 20031ac:	8000161e 	bne	r16,zero,2003208 <__adddf3+0x68c>
 20031b0:	444ab03a 	or	r5,r8,r17
 20031b4:	28005126 	beq	r5,zero,20032fc <__adddf3+0x780>
 20031b8:	0108303a 	nor	r4,zero,r4
 20031bc:	20004d1e 	bne	r4,zero,20032f4 <__adddf3+0x778>
 20031c0:	89a3883a 	add	r17,r17,r6
 20031c4:	4253883a 	add	r9,r8,r9
 20031c8:	898d803a 	cmpltu	r6,r17,r6
 20031cc:	3251883a 	add	r8,r6,r9
 20031d0:	1021883a 	mov	r16,r2
 20031d4:	003f0806 	br	2002df8 <__alt_mem_epcs_flash_controller_0+0xfd001df8>
 20031d8:	1000301e 	bne	r2,zero,200329c <__adddf3+0x720>
 20031dc:	4984b03a 	or	r2,r9,r6
 20031e0:	10007126 	beq	r2,zero,20033a8 <__adddf3+0x82c>
 20031e4:	4811883a 	mov	r8,r9
 20031e8:	3023883a 	mov	r17,r6
 20031ec:	3825883a 	mov	r18,r7
 20031f0:	0401ffc4 	movi	r16,2047
 20031f4:	003e8006 	br	2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 20031f8:	4462b03a 	or	r17,r8,r17
 20031fc:	8822c03a 	cmpne	r17,r17,zero
 2003200:	0007883a 	mov	r3,zero
 2003204:	003f8b06 	br	2003034 <__alt_mem_epcs_flash_controller_0+0xfd002034>
 2003208:	0141ffc4 	movi	r5,2047
 200320c:	11403b26 	beq	r2,r5,20032fc <__adddf3+0x780>
 2003210:	0109c83a 	sub	r4,zero,r4
 2003214:	42002034 	orhi	r8,r8,128
 2003218:	01400e04 	movi	r5,56
 200321c:	29006716 	blt	r5,r4,20033bc <__adddf3+0x840>
 2003220:	014007c4 	movi	r5,31
 2003224:	29007016 	blt	r5,r4,20033e8 <__adddf3+0x86c>
 2003228:	01400804 	movi	r5,32
 200322c:	290bc83a 	sub	r5,r5,r4
 2003230:	4154983a 	sll	r10,r8,r5
 2003234:	890ed83a 	srl	r7,r17,r4
 2003238:	894a983a 	sll	r5,r17,r5
 200323c:	4108d83a 	srl	r4,r8,r4
 2003240:	51e2b03a 	or	r17,r10,r7
 2003244:	280ac03a 	cmpne	r5,r5,zero
 2003248:	8962b03a 	or	r17,r17,r5
 200324c:	89a3883a 	add	r17,r17,r6
 2003250:	2253883a 	add	r9,r4,r9
 2003254:	898d803a 	cmpltu	r6,r17,r6
 2003258:	3251883a 	add	r8,r6,r9
 200325c:	1021883a 	mov	r16,r2
 2003260:	003ee506 	br	2002df8 <__alt_mem_epcs_flash_controller_0+0xfd001df8>
 2003264:	4984b03a 	or	r2,r9,r6
 2003268:	103e6326 	beq	r2,zero,2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 200326c:	8987c83a 	sub	r3,r17,r6
 2003270:	88c9803a 	cmpltu	r4,r17,r3
 2003274:	4245c83a 	sub	r2,r8,r9
 2003278:	1105c83a 	sub	r2,r2,r4
 200327c:	1100202c 	andhi	r4,r2,128
 2003280:	203ebb26 	beq	r4,zero,2002d70 <__alt_mem_epcs_flash_controller_0+0xfd001d70>
 2003284:	3463c83a 	sub	r17,r6,r17
 2003288:	4a07c83a 	sub	r3,r9,r8
 200328c:	344d803a 	cmpltu	r6,r6,r17
 2003290:	1991c83a 	sub	r8,r3,r6
 2003294:	3825883a 	mov	r18,r7
 2003298:	003e5706 	br	2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 200329c:	4984b03a 	or	r2,r9,r6
 20032a0:	10002e26 	beq	r2,zero,200335c <__adddf3+0x7e0>
 20032a4:	4004d0fa 	srli	r2,r8,3
 20032a8:	8822d0fa 	srli	r17,r17,3
 20032ac:	4010977a 	slli	r8,r8,29
 20032b0:	10c0022c 	andhi	r3,r2,8
 20032b4:	4462b03a 	or	r17,r8,r17
 20032b8:	18000826 	beq	r3,zero,20032dc <__adddf3+0x760>
 20032bc:	4808d0fa 	srli	r4,r9,3
 20032c0:	20c0022c 	andhi	r3,r4,8
 20032c4:	1800051e 	bne	r3,zero,20032dc <__adddf3+0x760>
 20032c8:	300cd0fa 	srli	r6,r6,3
 20032cc:	4806977a 	slli	r3,r9,29
 20032d0:	2005883a 	mov	r2,r4
 20032d4:	3825883a 	mov	r18,r7
 20032d8:	19a2b03a 	or	r17,r3,r6
 20032dc:	8810d77a 	srli	r8,r17,29
 20032e0:	100490fa 	slli	r2,r2,3
 20032e4:	882290fa 	slli	r17,r17,3
 20032e8:	0401ffc4 	movi	r16,2047
 20032ec:	4090b03a 	or	r8,r8,r2
 20032f0:	003e4106 	br	2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 20032f4:	0141ffc4 	movi	r5,2047
 20032f8:	117fc71e 	bne	r2,r5,2003218 <__alt_mem_epcs_flash_controller_0+0xfd002218>
 20032fc:	4811883a 	mov	r8,r9
 2003300:	3023883a 	mov	r17,r6
 2003304:	1021883a 	mov	r16,r2
 2003308:	003e3b06 	br	2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 200330c:	10002f26 	beq	r2,zero,20033cc <__adddf3+0x850>
 2003310:	4984b03a 	or	r2,r9,r6
 2003314:	10001126 	beq	r2,zero,200335c <__adddf3+0x7e0>
 2003318:	4004d0fa 	srli	r2,r8,3
 200331c:	8822d0fa 	srli	r17,r17,3
 2003320:	4010977a 	slli	r8,r8,29
 2003324:	10c0022c 	andhi	r3,r2,8
 2003328:	4462b03a 	or	r17,r8,r17
 200332c:	183feb26 	beq	r3,zero,20032dc <__alt_mem_epcs_flash_controller_0+0xfd0022dc>
 2003330:	4808d0fa 	srli	r4,r9,3
 2003334:	20c0022c 	andhi	r3,r4,8
 2003338:	183fe81e 	bne	r3,zero,20032dc <__alt_mem_epcs_flash_controller_0+0xfd0022dc>
 200333c:	300cd0fa 	srli	r6,r6,3
 2003340:	4806977a 	slli	r3,r9,29
 2003344:	2005883a 	mov	r2,r4
 2003348:	19a2b03a 	or	r17,r3,r6
 200334c:	003fe306 	br	20032dc <__alt_mem_epcs_flash_controller_0+0xfd0022dc>
 2003350:	0011883a 	mov	r8,zero
 2003354:	0005883a 	mov	r2,zero
 2003358:	003e3f06 	br	2002c58 <__alt_mem_epcs_flash_controller_0+0xfd001c58>
 200335c:	0401ffc4 	movi	r16,2047
 2003360:	003e2506 	br	2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 2003364:	0013883a 	mov	r9,zero
 2003368:	003f8406 	br	200317c <__alt_mem_epcs_flash_controller_0+0xfd00217c>
 200336c:	0005883a 	mov	r2,zero
 2003370:	0007883a 	mov	r3,zero
 2003374:	003e8906 	br	2002d9c <__alt_mem_epcs_flash_controller_0+0xfd001d9c>
 2003378:	197ff804 	addi	r5,r3,-32
 200337c:	01000804 	movi	r4,32
 2003380:	414ad83a 	srl	r5,r8,r5
 2003384:	19002426 	beq	r3,r4,2003418 <__adddf3+0x89c>
 2003388:	01001004 	movi	r4,64
 200338c:	20c7c83a 	sub	r3,r4,r3
 2003390:	40c6983a 	sll	r3,r8,r3
 2003394:	1c46b03a 	or	r3,r3,r17
 2003398:	1806c03a 	cmpne	r3,r3,zero
 200339c:	28e2b03a 	or	r17,r5,r3
 20033a0:	0007883a 	mov	r3,zero
 20033a4:	003f2306 	br	2003034 <__alt_mem_epcs_flash_controller_0+0xfd002034>
 20033a8:	0007883a 	mov	r3,zero
 20033ac:	5811883a 	mov	r8,r11
 20033b0:	00bfffc4 	movi	r2,-1
 20033b4:	0401ffc4 	movi	r16,2047
 20033b8:	003e7806 	br	2002d9c <__alt_mem_epcs_flash_controller_0+0xfd001d9c>
 20033bc:	4462b03a 	or	r17,r8,r17
 20033c0:	8822c03a 	cmpne	r17,r17,zero
 20033c4:	0009883a 	mov	r4,zero
 20033c8:	003fa006 	br	200324c <__alt_mem_epcs_flash_controller_0+0xfd00224c>
 20033cc:	4811883a 	mov	r8,r9
 20033d0:	3023883a 	mov	r17,r6
 20033d4:	0401ffc4 	movi	r16,2047
 20033d8:	003e0706 	br	2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 20033dc:	4811883a 	mov	r8,r9
 20033e0:	3023883a 	mov	r17,r6
 20033e4:	003e0406 	br	2002bf8 <__alt_mem_epcs_flash_controller_0+0xfd001bf8>
 20033e8:	21fff804 	addi	r7,r4,-32
 20033ec:	01400804 	movi	r5,32
 20033f0:	41ced83a 	srl	r7,r8,r7
 20033f4:	21400a26 	beq	r4,r5,2003420 <__adddf3+0x8a4>
 20033f8:	01401004 	movi	r5,64
 20033fc:	2909c83a 	sub	r4,r5,r4
 2003400:	4108983a 	sll	r4,r8,r4
 2003404:	2448b03a 	or	r4,r4,r17
 2003408:	2008c03a 	cmpne	r4,r4,zero
 200340c:	3922b03a 	or	r17,r7,r4
 2003410:	0009883a 	mov	r4,zero
 2003414:	003f8d06 	br	200324c <__alt_mem_epcs_flash_controller_0+0xfd00224c>
 2003418:	0007883a 	mov	r3,zero
 200341c:	003fdd06 	br	2003394 <__alt_mem_epcs_flash_controller_0+0xfd002394>
 2003420:	0009883a 	mov	r4,zero
 2003424:	003ff706 	br	2003404 <__alt_mem_epcs_flash_controller_0+0xfd002404>

02003428 <__divdf3>:
 2003428:	defff204 	addi	sp,sp,-56
 200342c:	dd400915 	stw	r21,36(sp)
 2003430:	282ad53a 	srli	r21,r5,20
 2003434:	dd000815 	stw	r20,32(sp)
 2003438:	2828d7fa 	srli	r20,r5,31
 200343c:	dc000415 	stw	r16,16(sp)
 2003440:	04000434 	movhi	r16,16
 2003444:	df000c15 	stw	fp,48(sp)
 2003448:	843fffc4 	addi	r16,r16,-1
 200344c:	dfc00d15 	stw	ra,52(sp)
 2003450:	ddc00b15 	stw	r23,44(sp)
 2003454:	dd800a15 	stw	r22,40(sp)
 2003458:	dcc00715 	stw	r19,28(sp)
 200345c:	dc800615 	stw	r18,24(sp)
 2003460:	dc400515 	stw	r17,20(sp)
 2003464:	ad41ffcc 	andi	r21,r21,2047
 2003468:	2c20703a 	and	r16,r5,r16
 200346c:	a7003fcc 	andi	fp,r20,255
 2003470:	a8006126 	beq	r21,zero,20035f8 <__divdf3+0x1d0>
 2003474:	0081ffc4 	movi	r2,2047
 2003478:	2025883a 	mov	r18,r4
 200347c:	a8803726 	beq	r21,r2,200355c <__divdf3+0x134>
 2003480:	80800434 	orhi	r2,r16,16
 2003484:	100490fa 	slli	r2,r2,3
 2003488:	2020d77a 	srli	r16,r4,29
 200348c:	202490fa 	slli	r18,r4,3
 2003490:	ad7f0044 	addi	r21,r21,-1023
 2003494:	80a0b03a 	or	r16,r16,r2
 2003498:	0027883a 	mov	r19,zero
 200349c:	0013883a 	mov	r9,zero
 20034a0:	3804d53a 	srli	r2,r7,20
 20034a4:	382cd7fa 	srli	r22,r7,31
 20034a8:	04400434 	movhi	r17,16
 20034ac:	8c7fffc4 	addi	r17,r17,-1
 20034b0:	1081ffcc 	andi	r2,r2,2047
 20034b4:	3011883a 	mov	r8,r6
 20034b8:	3c62703a 	and	r17,r7,r17
 20034bc:	b5c03fcc 	andi	r23,r22,255
 20034c0:	10006c26 	beq	r2,zero,2003674 <__divdf3+0x24c>
 20034c4:	00c1ffc4 	movi	r3,2047
 20034c8:	10c06426 	beq	r2,r3,200365c <__divdf3+0x234>
 20034cc:	88c00434 	orhi	r3,r17,16
 20034d0:	180690fa 	slli	r3,r3,3
 20034d4:	3022d77a 	srli	r17,r6,29
 20034d8:	301090fa 	slli	r8,r6,3
 20034dc:	10bf0044 	addi	r2,r2,-1023
 20034e0:	88e2b03a 	or	r17,r17,r3
 20034e4:	000f883a 	mov	r7,zero
 20034e8:	a58cf03a 	xor	r6,r20,r22
 20034ec:	3cc8b03a 	or	r4,r7,r19
 20034f0:	a8abc83a 	sub	r21,r21,r2
 20034f4:	008003c4 	movi	r2,15
 20034f8:	3007883a 	mov	r3,r6
 20034fc:	34c03fcc 	andi	r19,r6,255
 2003500:	11009036 	bltu	r2,r4,2003744 <__divdf3+0x31c>
 2003504:	200890ba 	slli	r4,r4,2
 2003508:	00808034 	movhi	r2,512
 200350c:	108d4704 	addi	r2,r2,13596
 2003510:	2089883a 	add	r4,r4,r2
 2003514:	20800017 	ldw	r2,0(r4)
 2003518:	1000683a 	jmp	r2
 200351c:	02003744 	movi	r8,221
 2003520:	02003594 	movui	r8,214
 2003524:	02003734 	movhi	r8,220
 2003528:	02003588 	cmpgei	r8,zero,214
 200352c:	02003734 	movhi	r8,220
 2003530:	02003708 	cmpgei	r8,zero,220
 2003534:	02003734 	movhi	r8,220
 2003538:	02003588 	cmpgei	r8,zero,214
 200353c:	02003594 	movui	r8,214
 2003540:	02003594 	movui	r8,214
 2003544:	02003708 	cmpgei	r8,zero,220
 2003548:	02003588 	cmpgei	r8,zero,214
 200354c:	02003578 	rdprs	r8,zero,213
 2003550:	02003578 	rdprs	r8,zero,213
 2003554:	02003578 	rdprs	r8,zero,213
 2003558:	02003a28 	cmpgeui	r8,zero,232
 200355c:	2404b03a 	or	r2,r4,r16
 2003560:	1000661e 	bne	r2,zero,20036fc <__divdf3+0x2d4>
 2003564:	04c00204 	movi	r19,8
 2003568:	0021883a 	mov	r16,zero
 200356c:	0025883a 	mov	r18,zero
 2003570:	02400084 	movi	r9,2
 2003574:	003fca06 	br	20034a0 <__alt_mem_epcs_flash_controller_0+0xfd0024a0>
 2003578:	8023883a 	mov	r17,r16
 200357c:	9011883a 	mov	r8,r18
 2003580:	e02f883a 	mov	r23,fp
 2003584:	480f883a 	mov	r7,r9
 2003588:	00800084 	movi	r2,2
 200358c:	3881311e 	bne	r7,r2,2003a54 <__divdf3+0x62c>
 2003590:	b827883a 	mov	r19,r23
 2003594:	98c0004c 	andi	r3,r19,1
 2003598:	0081ffc4 	movi	r2,2047
 200359c:	000b883a 	mov	r5,zero
 20035a0:	0025883a 	mov	r18,zero
 20035a4:	1004953a 	slli	r2,r2,20
 20035a8:	18c03fcc 	andi	r3,r3,255
 20035ac:	04400434 	movhi	r17,16
 20035b0:	8c7fffc4 	addi	r17,r17,-1
 20035b4:	180697fa 	slli	r3,r3,31
 20035b8:	2c4a703a 	and	r5,r5,r17
 20035bc:	288ab03a 	or	r5,r5,r2
 20035c0:	28c6b03a 	or	r3,r5,r3
 20035c4:	9005883a 	mov	r2,r18
 20035c8:	dfc00d17 	ldw	ra,52(sp)
 20035cc:	df000c17 	ldw	fp,48(sp)
 20035d0:	ddc00b17 	ldw	r23,44(sp)
 20035d4:	dd800a17 	ldw	r22,40(sp)
 20035d8:	dd400917 	ldw	r21,36(sp)
 20035dc:	dd000817 	ldw	r20,32(sp)
 20035e0:	dcc00717 	ldw	r19,28(sp)
 20035e4:	dc800617 	ldw	r18,24(sp)
 20035e8:	dc400517 	ldw	r17,20(sp)
 20035ec:	dc000417 	ldw	r16,16(sp)
 20035f0:	dec00e04 	addi	sp,sp,56
 20035f4:	f800283a 	ret
 20035f8:	2404b03a 	or	r2,r4,r16
 20035fc:	2027883a 	mov	r19,r4
 2003600:	10003926 	beq	r2,zero,20036e8 <__divdf3+0x2c0>
 2003604:	80012e26 	beq	r16,zero,2003ac0 <__divdf3+0x698>
 2003608:	8009883a 	mov	r4,r16
 200360c:	d9800315 	stw	r6,12(sp)
 2003610:	d9c00215 	stw	r7,8(sp)
 2003614:	2004f740 	call	2004f74 <__clzsi2>
 2003618:	d9800317 	ldw	r6,12(sp)
 200361c:	d9c00217 	ldw	r7,8(sp)
 2003620:	113ffd44 	addi	r4,r2,-11
 2003624:	00c00704 	movi	r3,28
 2003628:	19012116 	blt	r3,r4,2003ab0 <__divdf3+0x688>
 200362c:	00c00744 	movi	r3,29
 2003630:	147ffe04 	addi	r17,r2,-8
 2003634:	1907c83a 	sub	r3,r3,r4
 2003638:	8460983a 	sll	r16,r16,r17
 200363c:	98c6d83a 	srl	r3,r19,r3
 2003640:	9c64983a 	sll	r18,r19,r17
 2003644:	1c20b03a 	or	r16,r3,r16
 2003648:	1080fcc4 	addi	r2,r2,1011
 200364c:	00abc83a 	sub	r21,zero,r2
 2003650:	0027883a 	mov	r19,zero
 2003654:	0013883a 	mov	r9,zero
 2003658:	003f9106 	br	20034a0 <__alt_mem_epcs_flash_controller_0+0xfd0024a0>
 200365c:	3446b03a 	or	r3,r6,r17
 2003660:	18001f1e 	bne	r3,zero,20036e0 <__divdf3+0x2b8>
 2003664:	0023883a 	mov	r17,zero
 2003668:	0011883a 	mov	r8,zero
 200366c:	01c00084 	movi	r7,2
 2003670:	003f9d06 	br	20034e8 <__alt_mem_epcs_flash_controller_0+0xfd0024e8>
 2003674:	3446b03a 	or	r3,r6,r17
 2003678:	18001526 	beq	r3,zero,20036d0 <__divdf3+0x2a8>
 200367c:	88011b26 	beq	r17,zero,2003aec <__divdf3+0x6c4>
 2003680:	8809883a 	mov	r4,r17
 2003684:	d9800315 	stw	r6,12(sp)
 2003688:	da400115 	stw	r9,4(sp)
 200368c:	2004f740 	call	2004f74 <__clzsi2>
 2003690:	d9800317 	ldw	r6,12(sp)
 2003694:	da400117 	ldw	r9,4(sp)
 2003698:	113ffd44 	addi	r4,r2,-11
 200369c:	00c00704 	movi	r3,28
 20036a0:	19010e16 	blt	r3,r4,2003adc <__divdf3+0x6b4>
 20036a4:	00c00744 	movi	r3,29
 20036a8:	123ffe04 	addi	r8,r2,-8
 20036ac:	1907c83a 	sub	r3,r3,r4
 20036b0:	8a22983a 	sll	r17,r17,r8
 20036b4:	30c6d83a 	srl	r3,r6,r3
 20036b8:	3210983a 	sll	r8,r6,r8
 20036bc:	1c62b03a 	or	r17,r3,r17
 20036c0:	1080fcc4 	addi	r2,r2,1011
 20036c4:	0085c83a 	sub	r2,zero,r2
 20036c8:	000f883a 	mov	r7,zero
 20036cc:	003f8606 	br	20034e8 <__alt_mem_epcs_flash_controller_0+0xfd0024e8>
 20036d0:	0023883a 	mov	r17,zero
 20036d4:	0011883a 	mov	r8,zero
 20036d8:	01c00044 	movi	r7,1
 20036dc:	003f8206 	br	20034e8 <__alt_mem_epcs_flash_controller_0+0xfd0024e8>
 20036e0:	01c000c4 	movi	r7,3
 20036e4:	003f8006 	br	20034e8 <__alt_mem_epcs_flash_controller_0+0xfd0024e8>
 20036e8:	04c00104 	movi	r19,4
 20036ec:	0021883a 	mov	r16,zero
 20036f0:	0025883a 	mov	r18,zero
 20036f4:	02400044 	movi	r9,1
 20036f8:	003f6906 	br	20034a0 <__alt_mem_epcs_flash_controller_0+0xfd0024a0>
 20036fc:	04c00304 	movi	r19,12
 2003700:	024000c4 	movi	r9,3
 2003704:	003f6606 	br	20034a0 <__alt_mem_epcs_flash_controller_0+0xfd0024a0>
 2003708:	01400434 	movhi	r5,16
 200370c:	0007883a 	mov	r3,zero
 2003710:	297fffc4 	addi	r5,r5,-1
 2003714:	04bfffc4 	movi	r18,-1
 2003718:	0081ffc4 	movi	r2,2047
 200371c:	003fa106 	br	20035a4 <__alt_mem_epcs_flash_controller_0+0xfd0025a4>
 2003720:	00c00044 	movi	r3,1
 2003724:	1887c83a 	sub	r3,r3,r2
 2003728:	01000e04 	movi	r4,56
 200372c:	20c1210e 	bge	r4,r3,2003bb4 <__divdf3+0x78c>
 2003730:	98c0004c 	andi	r3,r19,1
 2003734:	0005883a 	mov	r2,zero
 2003738:	000b883a 	mov	r5,zero
 200373c:	0025883a 	mov	r18,zero
 2003740:	003f9806 	br	20035a4 <__alt_mem_epcs_flash_controller_0+0xfd0025a4>
 2003744:	8c00fd36 	bltu	r17,r16,2003b3c <__divdf3+0x714>
 2003748:	8440fb26 	beq	r16,r17,2003b38 <__divdf3+0x710>
 200374c:	8007883a 	mov	r3,r16
 2003750:	ad7fffc4 	addi	r21,r21,-1
 2003754:	0021883a 	mov	r16,zero
 2003758:	4004d63a 	srli	r2,r8,24
 200375c:	8822923a 	slli	r17,r17,8
 2003760:	1809883a 	mov	r4,r3
 2003764:	402c923a 	slli	r22,r8,8
 2003768:	88b8b03a 	or	fp,r17,r2
 200376c:	e028d43a 	srli	r20,fp,16
 2003770:	d8c00015 	stw	r3,0(sp)
 2003774:	e5ffffcc 	andi	r23,fp,65535
 2003778:	a00b883a 	mov	r5,r20
 200377c:	20050d00 	call	20050d0 <__udivsi3>
 2003780:	d8c00017 	ldw	r3,0(sp)
 2003784:	a00b883a 	mov	r5,r20
 2003788:	d8800315 	stw	r2,12(sp)
 200378c:	1809883a 	mov	r4,r3
 2003790:	20051340 	call	2005134 <__umodsi3>
 2003794:	d9800317 	ldw	r6,12(sp)
 2003798:	1006943a 	slli	r3,r2,16
 200379c:	9004d43a 	srli	r2,r18,16
 20037a0:	b9a3383a 	mul	r17,r23,r6
 20037a4:	10c4b03a 	or	r2,r2,r3
 20037a8:	1440062e 	bgeu	r2,r17,20037c4 <__divdf3+0x39c>
 20037ac:	1705883a 	add	r2,r2,fp
 20037b0:	30ffffc4 	addi	r3,r6,-1
 20037b4:	1700ee36 	bltu	r2,fp,2003b70 <__divdf3+0x748>
 20037b8:	1440ed2e 	bgeu	r2,r17,2003b70 <__divdf3+0x748>
 20037bc:	31bfff84 	addi	r6,r6,-2
 20037c0:	1705883a 	add	r2,r2,fp
 20037c4:	1463c83a 	sub	r17,r2,r17
 20037c8:	a00b883a 	mov	r5,r20
 20037cc:	8809883a 	mov	r4,r17
 20037d0:	d9800315 	stw	r6,12(sp)
 20037d4:	20050d00 	call	20050d0 <__udivsi3>
 20037d8:	a00b883a 	mov	r5,r20
 20037dc:	8809883a 	mov	r4,r17
 20037e0:	d8800215 	stw	r2,8(sp)
 20037e4:	20051340 	call	2005134 <__umodsi3>
 20037e8:	d9c00217 	ldw	r7,8(sp)
 20037ec:	1004943a 	slli	r2,r2,16
 20037f0:	94bfffcc 	andi	r18,r18,65535
 20037f4:	b9d1383a 	mul	r8,r23,r7
 20037f8:	90a4b03a 	or	r18,r18,r2
 20037fc:	d9800317 	ldw	r6,12(sp)
 2003800:	9200062e 	bgeu	r18,r8,200381c <__divdf3+0x3f4>
 2003804:	9725883a 	add	r18,r18,fp
 2003808:	38bfffc4 	addi	r2,r7,-1
 200380c:	9700d636 	bltu	r18,fp,2003b68 <__divdf3+0x740>
 2003810:	9200d52e 	bgeu	r18,r8,2003b68 <__divdf3+0x740>
 2003814:	39ffff84 	addi	r7,r7,-2
 2003818:	9725883a 	add	r18,r18,fp
 200381c:	3004943a 	slli	r2,r6,16
 2003820:	b012d43a 	srli	r9,r22,16
 2003824:	b1bfffcc 	andi	r6,r22,65535
 2003828:	11e2b03a 	or	r17,r2,r7
 200382c:	8806d43a 	srli	r3,r17,16
 2003830:	893fffcc 	andi	r4,r17,65535
 2003834:	218b383a 	mul	r5,r4,r6
 2003838:	30c5383a 	mul	r2,r6,r3
 200383c:	2249383a 	mul	r4,r4,r9
 2003840:	280ed43a 	srli	r7,r5,16
 2003844:	9225c83a 	sub	r18,r18,r8
 2003848:	2089883a 	add	r4,r4,r2
 200384c:	3909883a 	add	r4,r7,r4
 2003850:	1a47383a 	mul	r3,r3,r9
 2003854:	2080022e 	bgeu	r4,r2,2003860 <__divdf3+0x438>
 2003858:	00800074 	movhi	r2,1
 200385c:	1887883a 	add	r3,r3,r2
 2003860:	2004d43a 	srli	r2,r4,16
 2003864:	2008943a 	slli	r4,r4,16
 2003868:	297fffcc 	andi	r5,r5,65535
 200386c:	10c7883a 	add	r3,r2,r3
 2003870:	2149883a 	add	r4,r4,r5
 2003874:	90c0a536 	bltu	r18,r3,2003b0c <__divdf3+0x6e4>
 2003878:	90c0bf26 	beq	r18,r3,2003b78 <__divdf3+0x750>
 200387c:	90c7c83a 	sub	r3,r18,r3
 2003880:	810fc83a 	sub	r7,r16,r4
 2003884:	81e5803a 	cmpltu	r18,r16,r7
 2003888:	1ca5c83a 	sub	r18,r3,r18
 200388c:	e480c126 	beq	fp,r18,2003b94 <__divdf3+0x76c>
 2003890:	a00b883a 	mov	r5,r20
 2003894:	9009883a 	mov	r4,r18
 2003898:	d9800315 	stw	r6,12(sp)
 200389c:	d9c00215 	stw	r7,8(sp)
 20038a0:	da400115 	stw	r9,4(sp)
 20038a4:	20050d00 	call	20050d0 <__udivsi3>
 20038a8:	a00b883a 	mov	r5,r20
 20038ac:	9009883a 	mov	r4,r18
 20038b0:	d8800015 	stw	r2,0(sp)
 20038b4:	20051340 	call	2005134 <__umodsi3>
 20038b8:	d9c00217 	ldw	r7,8(sp)
 20038bc:	da000017 	ldw	r8,0(sp)
 20038c0:	1006943a 	slli	r3,r2,16
 20038c4:	3804d43a 	srli	r2,r7,16
 20038c8:	ba21383a 	mul	r16,r23,r8
 20038cc:	d9800317 	ldw	r6,12(sp)
 20038d0:	10c4b03a 	or	r2,r2,r3
 20038d4:	da400117 	ldw	r9,4(sp)
 20038d8:	1400062e 	bgeu	r2,r16,20038f4 <__divdf3+0x4cc>
 20038dc:	1705883a 	add	r2,r2,fp
 20038e0:	40ffffc4 	addi	r3,r8,-1
 20038e4:	1700ad36 	bltu	r2,fp,2003b9c <__divdf3+0x774>
 20038e8:	1400ac2e 	bgeu	r2,r16,2003b9c <__divdf3+0x774>
 20038ec:	423fff84 	addi	r8,r8,-2
 20038f0:	1705883a 	add	r2,r2,fp
 20038f4:	1421c83a 	sub	r16,r2,r16
 20038f8:	a00b883a 	mov	r5,r20
 20038fc:	8009883a 	mov	r4,r16
 2003900:	d9800315 	stw	r6,12(sp)
 2003904:	d9c00215 	stw	r7,8(sp)
 2003908:	da000015 	stw	r8,0(sp)
 200390c:	da400115 	stw	r9,4(sp)
 2003910:	20050d00 	call	20050d0 <__udivsi3>
 2003914:	8009883a 	mov	r4,r16
 2003918:	a00b883a 	mov	r5,r20
 200391c:	1025883a 	mov	r18,r2
 2003920:	20051340 	call	2005134 <__umodsi3>
 2003924:	d9c00217 	ldw	r7,8(sp)
 2003928:	1004943a 	slli	r2,r2,16
 200392c:	bcaf383a 	mul	r23,r23,r18
 2003930:	393fffcc 	andi	r4,r7,65535
 2003934:	2088b03a 	or	r4,r4,r2
 2003938:	d9800317 	ldw	r6,12(sp)
 200393c:	da000017 	ldw	r8,0(sp)
 2003940:	da400117 	ldw	r9,4(sp)
 2003944:	25c0062e 	bgeu	r4,r23,2003960 <__divdf3+0x538>
 2003948:	2709883a 	add	r4,r4,fp
 200394c:	90bfffc4 	addi	r2,r18,-1
 2003950:	27009436 	bltu	r4,fp,2003ba4 <__divdf3+0x77c>
 2003954:	25c0932e 	bgeu	r4,r23,2003ba4 <__divdf3+0x77c>
 2003958:	94bfff84 	addi	r18,r18,-2
 200395c:	2709883a 	add	r4,r4,fp
 2003960:	4004943a 	slli	r2,r8,16
 2003964:	25efc83a 	sub	r23,r4,r23
 2003968:	1490b03a 	or	r8,r2,r18
 200396c:	4008d43a 	srli	r4,r8,16
 2003970:	40ffffcc 	andi	r3,r8,65535
 2003974:	30c5383a 	mul	r2,r6,r3
 2003978:	1a47383a 	mul	r3,r3,r9
 200397c:	310d383a 	mul	r6,r6,r4
 2003980:	100ad43a 	srli	r5,r2,16
 2003984:	4913383a 	mul	r9,r9,r4
 2003988:	1987883a 	add	r3,r3,r6
 200398c:	28c7883a 	add	r3,r5,r3
 2003990:	1980022e 	bgeu	r3,r6,200399c <__divdf3+0x574>
 2003994:	01000074 	movhi	r4,1
 2003998:	4913883a 	add	r9,r9,r4
 200399c:	1808d43a 	srli	r4,r3,16
 20039a0:	1806943a 	slli	r3,r3,16
 20039a4:	10bfffcc 	andi	r2,r2,65535
 20039a8:	2253883a 	add	r9,r4,r9
 20039ac:	1887883a 	add	r3,r3,r2
 20039b0:	ba403836 	bltu	r23,r9,2003a94 <__divdf3+0x66c>
 20039b4:	ba403626 	beq	r23,r9,2003a90 <__divdf3+0x668>
 20039b8:	42000054 	ori	r8,r8,1
 20039bc:	a880ffc4 	addi	r2,r21,1023
 20039c0:	00bf570e 	bge	zero,r2,2003720 <__alt_mem_epcs_flash_controller_0+0xfd002720>
 20039c4:	40c001cc 	andi	r3,r8,7
 20039c8:	18000726 	beq	r3,zero,20039e8 <__divdf3+0x5c0>
 20039cc:	40c003cc 	andi	r3,r8,15
 20039d0:	01000104 	movi	r4,4
 20039d4:	19000426 	beq	r3,r4,20039e8 <__divdf3+0x5c0>
 20039d8:	4107883a 	add	r3,r8,r4
 20039dc:	1a11803a 	cmpltu	r8,r3,r8
 20039e0:	8a23883a 	add	r17,r17,r8
 20039e4:	1811883a 	mov	r8,r3
 20039e8:	88c0402c 	andhi	r3,r17,256
 20039ec:	18000426 	beq	r3,zero,2003a00 <__divdf3+0x5d8>
 20039f0:	00ffc034 	movhi	r3,65280
 20039f4:	18ffffc4 	addi	r3,r3,-1
 20039f8:	a8810004 	addi	r2,r21,1024
 20039fc:	88e2703a 	and	r17,r17,r3
 2003a00:	00c1ff84 	movi	r3,2046
 2003a04:	18bee316 	blt	r3,r2,2003594 <__alt_mem_epcs_flash_controller_0+0xfd002594>
 2003a08:	8824977a 	slli	r18,r17,29
 2003a0c:	4010d0fa 	srli	r8,r8,3
 2003a10:	8822927a 	slli	r17,r17,9
 2003a14:	1081ffcc 	andi	r2,r2,2047
 2003a18:	9224b03a 	or	r18,r18,r8
 2003a1c:	880ad33a 	srli	r5,r17,12
 2003a20:	98c0004c 	andi	r3,r19,1
 2003a24:	003edf06 	br	20035a4 <__alt_mem_epcs_flash_controller_0+0xfd0025a4>
 2003a28:	8080022c 	andhi	r2,r16,8
 2003a2c:	10001226 	beq	r2,zero,2003a78 <__divdf3+0x650>
 2003a30:	8880022c 	andhi	r2,r17,8
 2003a34:	1000101e 	bne	r2,zero,2003a78 <__divdf3+0x650>
 2003a38:	00800434 	movhi	r2,16
 2003a3c:	89400234 	orhi	r5,r17,8
 2003a40:	10bfffc4 	addi	r2,r2,-1
 2003a44:	b007883a 	mov	r3,r22
 2003a48:	288a703a 	and	r5,r5,r2
 2003a4c:	4025883a 	mov	r18,r8
 2003a50:	003f3106 	br	2003718 <__alt_mem_epcs_flash_controller_0+0xfd002718>
 2003a54:	008000c4 	movi	r2,3
 2003a58:	3880a626 	beq	r7,r2,2003cf4 <__divdf3+0x8cc>
 2003a5c:	00800044 	movi	r2,1
 2003a60:	3880521e 	bne	r7,r2,2003bac <__divdf3+0x784>
 2003a64:	b807883a 	mov	r3,r23
 2003a68:	0005883a 	mov	r2,zero
 2003a6c:	000b883a 	mov	r5,zero
 2003a70:	0025883a 	mov	r18,zero
 2003a74:	003ecb06 	br	20035a4 <__alt_mem_epcs_flash_controller_0+0xfd0025a4>
 2003a78:	00800434 	movhi	r2,16
 2003a7c:	81400234 	orhi	r5,r16,8
 2003a80:	10bfffc4 	addi	r2,r2,-1
 2003a84:	a007883a 	mov	r3,r20
 2003a88:	288a703a 	and	r5,r5,r2
 2003a8c:	003f2206 	br	2003718 <__alt_mem_epcs_flash_controller_0+0xfd002718>
 2003a90:	183fca26 	beq	r3,zero,20039bc <__alt_mem_epcs_flash_controller_0+0xfd0029bc>
 2003a94:	e5ef883a 	add	r23,fp,r23
 2003a98:	40bfffc4 	addi	r2,r8,-1
 2003a9c:	bf00392e 	bgeu	r23,fp,2003b84 <__divdf3+0x75c>
 2003aa0:	1011883a 	mov	r8,r2
 2003aa4:	ba7fc41e 	bne	r23,r9,20039b8 <__alt_mem_epcs_flash_controller_0+0xfd0029b8>
 2003aa8:	b0ffc31e 	bne	r22,r3,20039b8 <__alt_mem_epcs_flash_controller_0+0xfd0029b8>
 2003aac:	003fc306 	br	20039bc <__alt_mem_epcs_flash_controller_0+0xfd0029bc>
 2003ab0:	143ff604 	addi	r16,r2,-40
 2003ab4:	9c20983a 	sll	r16,r19,r16
 2003ab8:	0025883a 	mov	r18,zero
 2003abc:	003ee206 	br	2003648 <__alt_mem_epcs_flash_controller_0+0xfd002648>
 2003ac0:	d9800315 	stw	r6,12(sp)
 2003ac4:	d9c00215 	stw	r7,8(sp)
 2003ac8:	2004f740 	call	2004f74 <__clzsi2>
 2003acc:	10800804 	addi	r2,r2,32
 2003ad0:	d9c00217 	ldw	r7,8(sp)
 2003ad4:	d9800317 	ldw	r6,12(sp)
 2003ad8:	003ed106 	br	2003620 <__alt_mem_epcs_flash_controller_0+0xfd002620>
 2003adc:	147ff604 	addi	r17,r2,-40
 2003ae0:	3462983a 	sll	r17,r6,r17
 2003ae4:	0011883a 	mov	r8,zero
 2003ae8:	003ef506 	br	20036c0 <__alt_mem_epcs_flash_controller_0+0xfd0026c0>
 2003aec:	3009883a 	mov	r4,r6
 2003af0:	d9800315 	stw	r6,12(sp)
 2003af4:	da400115 	stw	r9,4(sp)
 2003af8:	2004f740 	call	2004f74 <__clzsi2>
 2003afc:	10800804 	addi	r2,r2,32
 2003b00:	da400117 	ldw	r9,4(sp)
 2003b04:	d9800317 	ldw	r6,12(sp)
 2003b08:	003ee306 	br	2003698 <__alt_mem_epcs_flash_controller_0+0xfd002698>
 2003b0c:	85a1883a 	add	r16,r16,r22
 2003b10:	8585803a 	cmpltu	r2,r16,r22
 2003b14:	1705883a 	add	r2,r2,fp
 2003b18:	14a5883a 	add	r18,r2,r18
 2003b1c:	88bfffc4 	addi	r2,r17,-1
 2003b20:	e4800c2e 	bgeu	fp,r18,2003b54 <__divdf3+0x72c>
 2003b24:	90c03e36 	bltu	r18,r3,2003c20 <__divdf3+0x7f8>
 2003b28:	1c806926 	beq	r3,r18,2003cd0 <__divdf3+0x8a8>
 2003b2c:	90c7c83a 	sub	r3,r18,r3
 2003b30:	1023883a 	mov	r17,r2
 2003b34:	003f5206 	br	2003880 <__alt_mem_epcs_flash_controller_0+0xfd002880>
 2003b38:	923f0436 	bltu	r18,r8,200374c <__alt_mem_epcs_flash_controller_0+0xfd00274c>
 2003b3c:	800897fa 	slli	r4,r16,31
 2003b40:	9004d07a 	srli	r2,r18,1
 2003b44:	8006d07a 	srli	r3,r16,1
 2003b48:	902097fa 	slli	r16,r18,31
 2003b4c:	20a4b03a 	or	r18,r4,r2
 2003b50:	003f0106 	br	2003758 <__alt_mem_epcs_flash_controller_0+0xfd002758>
 2003b54:	e4bff51e 	bne	fp,r18,2003b2c <__alt_mem_epcs_flash_controller_0+0xfd002b2c>
 2003b58:	85bff22e 	bgeu	r16,r22,2003b24 <__alt_mem_epcs_flash_controller_0+0xfd002b24>
 2003b5c:	e0c7c83a 	sub	r3,fp,r3
 2003b60:	1023883a 	mov	r17,r2
 2003b64:	003f4606 	br	2003880 <__alt_mem_epcs_flash_controller_0+0xfd002880>
 2003b68:	100f883a 	mov	r7,r2
 2003b6c:	003f2b06 	br	200381c <__alt_mem_epcs_flash_controller_0+0xfd00281c>
 2003b70:	180d883a 	mov	r6,r3
 2003b74:	003f1306 	br	20037c4 <__alt_mem_epcs_flash_controller_0+0xfd0027c4>
 2003b78:	813fe436 	bltu	r16,r4,2003b0c <__alt_mem_epcs_flash_controller_0+0xfd002b0c>
 2003b7c:	0007883a 	mov	r3,zero
 2003b80:	003f3f06 	br	2003880 <__alt_mem_epcs_flash_controller_0+0xfd002880>
 2003b84:	ba402c36 	bltu	r23,r9,2003c38 <__divdf3+0x810>
 2003b88:	4dc05426 	beq	r9,r23,2003cdc <__divdf3+0x8b4>
 2003b8c:	1011883a 	mov	r8,r2
 2003b90:	003f8906 	br	20039b8 <__alt_mem_epcs_flash_controller_0+0xfd0029b8>
 2003b94:	023fffc4 	movi	r8,-1
 2003b98:	003f8806 	br	20039bc <__alt_mem_epcs_flash_controller_0+0xfd0029bc>
 2003b9c:	1811883a 	mov	r8,r3
 2003ba0:	003f5406 	br	20038f4 <__alt_mem_epcs_flash_controller_0+0xfd0028f4>
 2003ba4:	1025883a 	mov	r18,r2
 2003ba8:	003f6d06 	br	2003960 <__alt_mem_epcs_flash_controller_0+0xfd002960>
 2003bac:	b827883a 	mov	r19,r23
 2003bb0:	003f8206 	br	20039bc <__alt_mem_epcs_flash_controller_0+0xfd0029bc>
 2003bb4:	010007c4 	movi	r4,31
 2003bb8:	20c02616 	blt	r4,r3,2003c54 <__divdf3+0x82c>
 2003bbc:	00800804 	movi	r2,32
 2003bc0:	10c5c83a 	sub	r2,r2,r3
 2003bc4:	888a983a 	sll	r5,r17,r2
 2003bc8:	40c8d83a 	srl	r4,r8,r3
 2003bcc:	4084983a 	sll	r2,r8,r2
 2003bd0:	88e2d83a 	srl	r17,r17,r3
 2003bd4:	2906b03a 	or	r3,r5,r4
 2003bd8:	1004c03a 	cmpne	r2,r2,zero
 2003bdc:	1886b03a 	or	r3,r3,r2
 2003be0:	188001cc 	andi	r2,r3,7
 2003be4:	10000726 	beq	r2,zero,2003c04 <__divdf3+0x7dc>
 2003be8:	188003cc 	andi	r2,r3,15
 2003bec:	01000104 	movi	r4,4
 2003bf0:	11000426 	beq	r2,r4,2003c04 <__divdf3+0x7dc>
 2003bf4:	1805883a 	mov	r2,r3
 2003bf8:	10c00104 	addi	r3,r2,4
 2003bfc:	1885803a 	cmpltu	r2,r3,r2
 2003c00:	88a3883a 	add	r17,r17,r2
 2003c04:	8880202c 	andhi	r2,r17,128
 2003c08:	10002726 	beq	r2,zero,2003ca8 <__divdf3+0x880>
 2003c0c:	98c0004c 	andi	r3,r19,1
 2003c10:	00800044 	movi	r2,1
 2003c14:	000b883a 	mov	r5,zero
 2003c18:	0025883a 	mov	r18,zero
 2003c1c:	003e6106 	br	20035a4 <__alt_mem_epcs_flash_controller_0+0xfd0025a4>
 2003c20:	85a1883a 	add	r16,r16,r22
 2003c24:	8585803a 	cmpltu	r2,r16,r22
 2003c28:	1705883a 	add	r2,r2,fp
 2003c2c:	14a5883a 	add	r18,r2,r18
 2003c30:	8c7fff84 	addi	r17,r17,-2
 2003c34:	003f1106 	br	200387c <__alt_mem_epcs_flash_controller_0+0xfd00287c>
 2003c38:	b589883a 	add	r4,r22,r22
 2003c3c:	25ad803a 	cmpltu	r22,r4,r22
 2003c40:	b739883a 	add	fp,r22,fp
 2003c44:	40bfff84 	addi	r2,r8,-2
 2003c48:	bf2f883a 	add	r23,r23,fp
 2003c4c:	202d883a 	mov	r22,r4
 2003c50:	003f9306 	br	2003aa0 <__alt_mem_epcs_flash_controller_0+0xfd002aa0>
 2003c54:	013ff844 	movi	r4,-31
 2003c58:	2085c83a 	sub	r2,r4,r2
 2003c5c:	8888d83a 	srl	r4,r17,r2
 2003c60:	00800804 	movi	r2,32
 2003c64:	18802126 	beq	r3,r2,2003cec <__divdf3+0x8c4>
 2003c68:	00801004 	movi	r2,64
 2003c6c:	10c5c83a 	sub	r2,r2,r3
 2003c70:	8884983a 	sll	r2,r17,r2
 2003c74:	1204b03a 	or	r2,r2,r8
 2003c78:	1004c03a 	cmpne	r2,r2,zero
 2003c7c:	2084b03a 	or	r2,r4,r2
 2003c80:	144001cc 	andi	r17,r2,7
 2003c84:	88000d1e 	bne	r17,zero,2003cbc <__divdf3+0x894>
 2003c88:	000b883a 	mov	r5,zero
 2003c8c:	1024d0fa 	srli	r18,r2,3
 2003c90:	98c0004c 	andi	r3,r19,1
 2003c94:	0005883a 	mov	r2,zero
 2003c98:	9464b03a 	or	r18,r18,r17
 2003c9c:	003e4106 	br	20035a4 <__alt_mem_epcs_flash_controller_0+0xfd0025a4>
 2003ca0:	1007883a 	mov	r3,r2
 2003ca4:	0023883a 	mov	r17,zero
 2003ca8:	880a927a 	slli	r5,r17,9
 2003cac:	1805883a 	mov	r2,r3
 2003cb0:	8822977a 	slli	r17,r17,29
 2003cb4:	280ad33a 	srli	r5,r5,12
 2003cb8:	003ff406 	br	2003c8c <__alt_mem_epcs_flash_controller_0+0xfd002c8c>
 2003cbc:	10c003cc 	andi	r3,r2,15
 2003cc0:	01000104 	movi	r4,4
 2003cc4:	193ff626 	beq	r3,r4,2003ca0 <__alt_mem_epcs_flash_controller_0+0xfd002ca0>
 2003cc8:	0023883a 	mov	r17,zero
 2003ccc:	003fca06 	br	2003bf8 <__alt_mem_epcs_flash_controller_0+0xfd002bf8>
 2003cd0:	813fd336 	bltu	r16,r4,2003c20 <__alt_mem_epcs_flash_controller_0+0xfd002c20>
 2003cd4:	1023883a 	mov	r17,r2
 2003cd8:	003fa806 	br	2003b7c <__alt_mem_epcs_flash_controller_0+0xfd002b7c>
 2003cdc:	b0ffd636 	bltu	r22,r3,2003c38 <__alt_mem_epcs_flash_controller_0+0xfd002c38>
 2003ce0:	1011883a 	mov	r8,r2
 2003ce4:	b0ff341e 	bne	r22,r3,20039b8 <__alt_mem_epcs_flash_controller_0+0xfd0029b8>
 2003ce8:	003f3406 	br	20039bc <__alt_mem_epcs_flash_controller_0+0xfd0029bc>
 2003cec:	0005883a 	mov	r2,zero
 2003cf0:	003fe006 	br	2003c74 <__alt_mem_epcs_flash_controller_0+0xfd002c74>
 2003cf4:	00800434 	movhi	r2,16
 2003cf8:	89400234 	orhi	r5,r17,8
 2003cfc:	10bfffc4 	addi	r2,r2,-1
 2003d00:	b807883a 	mov	r3,r23
 2003d04:	288a703a 	and	r5,r5,r2
 2003d08:	4025883a 	mov	r18,r8
 2003d0c:	003e8206 	br	2003718 <__alt_mem_epcs_flash_controller_0+0xfd002718>

02003d10 <__ledf2>:
 2003d10:	2804d53a 	srli	r2,r5,20
 2003d14:	3810d53a 	srli	r8,r7,20
 2003d18:	00c00434 	movhi	r3,16
 2003d1c:	18ffffc4 	addi	r3,r3,-1
 2003d20:	1081ffcc 	andi	r2,r2,2047
 2003d24:	0241ffc4 	movi	r9,2047
 2003d28:	28d4703a 	and	r10,r5,r3
 2003d2c:	4201ffcc 	andi	r8,r8,2047
 2003d30:	38c6703a 	and	r3,r7,r3
 2003d34:	280ad7fa 	srli	r5,r5,31
 2003d38:	380ed7fa 	srli	r7,r7,31
 2003d3c:	12401f26 	beq	r2,r9,2003dbc <__ledf2+0xac>
 2003d40:	0241ffc4 	movi	r9,2047
 2003d44:	42401426 	beq	r8,r9,2003d98 <__ledf2+0x88>
 2003d48:	1000091e 	bne	r2,zero,2003d70 <__ledf2+0x60>
 2003d4c:	2296b03a 	or	r11,r4,r10
 2003d50:	5813003a 	cmpeq	r9,r11,zero
 2003d54:	29403fcc 	andi	r5,r5,255
 2003d58:	40000a1e 	bne	r8,zero,2003d84 <__ledf2+0x74>
 2003d5c:	30d8b03a 	or	r12,r6,r3
 2003d60:	6000081e 	bne	r12,zero,2003d84 <__ledf2+0x74>
 2003d64:	0005883a 	mov	r2,zero
 2003d68:	5800111e 	bne	r11,zero,2003db0 <__ledf2+0xa0>
 2003d6c:	f800283a 	ret
 2003d70:	29403fcc 	andi	r5,r5,255
 2003d74:	40000c1e 	bne	r8,zero,2003da8 <__ledf2+0x98>
 2003d78:	30d2b03a 	or	r9,r6,r3
 2003d7c:	48000c26 	beq	r9,zero,2003db0 <__ledf2+0xa0>
 2003d80:	0013883a 	mov	r9,zero
 2003d84:	39c03fcc 	andi	r7,r7,255
 2003d88:	48000826 	beq	r9,zero,2003dac <__ledf2+0x9c>
 2003d8c:	38001126 	beq	r7,zero,2003dd4 <__ledf2+0xc4>
 2003d90:	00800044 	movi	r2,1
 2003d94:	f800283a 	ret
 2003d98:	30d2b03a 	or	r9,r6,r3
 2003d9c:	483fea26 	beq	r9,zero,2003d48 <__alt_mem_epcs_flash_controller_0+0xfd002d48>
 2003da0:	00800084 	movi	r2,2
 2003da4:	f800283a 	ret
 2003da8:	39c03fcc 	andi	r7,r7,255
 2003dac:	39400726 	beq	r7,r5,2003dcc <__ledf2+0xbc>
 2003db0:	2800081e 	bne	r5,zero,2003dd4 <__ledf2+0xc4>
 2003db4:	00800044 	movi	r2,1
 2003db8:	f800283a 	ret
 2003dbc:	2292b03a 	or	r9,r4,r10
 2003dc0:	483fdf26 	beq	r9,zero,2003d40 <__alt_mem_epcs_flash_controller_0+0xfd002d40>
 2003dc4:	00800084 	movi	r2,2
 2003dc8:	f800283a 	ret
 2003dcc:	4080030e 	bge	r8,r2,2003ddc <__ledf2+0xcc>
 2003dd0:	383fef26 	beq	r7,zero,2003d90 <__alt_mem_epcs_flash_controller_0+0xfd002d90>
 2003dd4:	00bfffc4 	movi	r2,-1
 2003dd8:	f800283a 	ret
 2003ddc:	123feb16 	blt	r2,r8,2003d8c <__alt_mem_epcs_flash_controller_0+0xfd002d8c>
 2003de0:	1abff336 	bltu	r3,r10,2003db0 <__alt_mem_epcs_flash_controller_0+0xfd002db0>
 2003de4:	50c00326 	beq	r10,r3,2003df4 <__ledf2+0xe4>
 2003de8:	50c0042e 	bgeu	r10,r3,2003dfc <__ledf2+0xec>
 2003dec:	283fe81e 	bne	r5,zero,2003d90 <__alt_mem_epcs_flash_controller_0+0xfd002d90>
 2003df0:	003ff806 	br	2003dd4 <__alt_mem_epcs_flash_controller_0+0xfd002dd4>
 2003df4:	313fee36 	bltu	r6,r4,2003db0 <__alt_mem_epcs_flash_controller_0+0xfd002db0>
 2003df8:	21bffc36 	bltu	r4,r6,2003dec <__alt_mem_epcs_flash_controller_0+0xfd002dec>
 2003dfc:	0005883a 	mov	r2,zero
 2003e00:	f800283a 	ret

02003e04 <__muldf3>:
 2003e04:	defff304 	addi	sp,sp,-52
 2003e08:	2804d53a 	srli	r2,r5,20
 2003e0c:	dd800915 	stw	r22,36(sp)
 2003e10:	282cd7fa 	srli	r22,r5,31
 2003e14:	dc000315 	stw	r16,12(sp)
 2003e18:	04000434 	movhi	r16,16
 2003e1c:	dd400815 	stw	r21,32(sp)
 2003e20:	dc800515 	stw	r18,20(sp)
 2003e24:	843fffc4 	addi	r16,r16,-1
 2003e28:	dfc00c15 	stw	ra,48(sp)
 2003e2c:	df000b15 	stw	fp,44(sp)
 2003e30:	ddc00a15 	stw	r23,40(sp)
 2003e34:	dd000715 	stw	r20,28(sp)
 2003e38:	dcc00615 	stw	r19,24(sp)
 2003e3c:	dc400415 	stw	r17,16(sp)
 2003e40:	1481ffcc 	andi	r18,r2,2047
 2003e44:	2c20703a 	and	r16,r5,r16
 2003e48:	b02b883a 	mov	r21,r22
 2003e4c:	b2403fcc 	andi	r9,r22,255
 2003e50:	90006026 	beq	r18,zero,2003fd4 <__muldf3+0x1d0>
 2003e54:	0081ffc4 	movi	r2,2047
 2003e58:	2029883a 	mov	r20,r4
 2003e5c:	90803626 	beq	r18,r2,2003f38 <__muldf3+0x134>
 2003e60:	80800434 	orhi	r2,r16,16
 2003e64:	100490fa 	slli	r2,r2,3
 2003e68:	2020d77a 	srli	r16,r4,29
 2003e6c:	202890fa 	slli	r20,r4,3
 2003e70:	94bf0044 	addi	r18,r18,-1023
 2003e74:	80a0b03a 	or	r16,r16,r2
 2003e78:	0027883a 	mov	r19,zero
 2003e7c:	0039883a 	mov	fp,zero
 2003e80:	3804d53a 	srli	r2,r7,20
 2003e84:	382ed7fa 	srli	r23,r7,31
 2003e88:	04400434 	movhi	r17,16
 2003e8c:	8c7fffc4 	addi	r17,r17,-1
 2003e90:	1081ffcc 	andi	r2,r2,2047
 2003e94:	3011883a 	mov	r8,r6
 2003e98:	3c62703a 	and	r17,r7,r17
 2003e9c:	ba803fcc 	andi	r10,r23,255
 2003ea0:	10006d26 	beq	r2,zero,2004058 <__muldf3+0x254>
 2003ea4:	00c1ffc4 	movi	r3,2047
 2003ea8:	10c06526 	beq	r2,r3,2004040 <__muldf3+0x23c>
 2003eac:	88c00434 	orhi	r3,r17,16
 2003eb0:	180690fa 	slli	r3,r3,3
 2003eb4:	3022d77a 	srli	r17,r6,29
 2003eb8:	301090fa 	slli	r8,r6,3
 2003ebc:	10bf0044 	addi	r2,r2,-1023
 2003ec0:	88e2b03a 	or	r17,r17,r3
 2003ec4:	000b883a 	mov	r5,zero
 2003ec8:	9085883a 	add	r2,r18,r2
 2003ecc:	2cc8b03a 	or	r4,r5,r19
 2003ed0:	00c003c4 	movi	r3,15
 2003ed4:	bdacf03a 	xor	r22,r23,r22
 2003ed8:	12c00044 	addi	r11,r2,1
 2003edc:	19009936 	bltu	r3,r4,2004144 <__muldf3+0x340>
 2003ee0:	200890ba 	slli	r4,r4,2
 2003ee4:	00c08034 	movhi	r3,512
 2003ee8:	18cfbe04 	addi	r3,r3,16120
 2003eec:	20c9883a 	add	r4,r4,r3
 2003ef0:	20c00017 	ldw	r3,0(r4)
 2003ef4:	1800683a 	jmp	r3
 2003ef8:	02004144 	movi	r8,261
 2003efc:	02003f58 	cmpnei	r8,zero,253
 2003f00:	02003f58 	cmpnei	r8,zero,253
 2003f04:	02003f54 	movui	r8,253
 2003f08:	02004120 	cmpeqi	r8,zero,260
 2003f0c:	02004120 	cmpeqi	r8,zero,260
 2003f10:	02004108 	cmpgei	r8,zero,260
 2003f14:	02003f54 	movui	r8,253
 2003f18:	02004120 	cmpeqi	r8,zero,260
 2003f1c:	02004108 	cmpgei	r8,zero,260
 2003f20:	02004120 	cmpeqi	r8,zero,260
 2003f24:	02003f54 	movui	r8,253
 2003f28:	02004130 	cmpltui	r8,zero,260
 2003f2c:	02004130 	cmpltui	r8,zero,260
 2003f30:	02004130 	cmpltui	r8,zero,260
 2003f34:	0200434c 	andi	r8,zero,269
 2003f38:	2404b03a 	or	r2,r4,r16
 2003f3c:	10006f1e 	bne	r2,zero,20040fc <__muldf3+0x2f8>
 2003f40:	04c00204 	movi	r19,8
 2003f44:	0021883a 	mov	r16,zero
 2003f48:	0029883a 	mov	r20,zero
 2003f4c:	07000084 	movi	fp,2
 2003f50:	003fcb06 	br	2003e80 <__alt_mem_epcs_flash_controller_0+0xfd002e80>
 2003f54:	502d883a 	mov	r22,r10
 2003f58:	00800084 	movi	r2,2
 2003f5c:	28805726 	beq	r5,r2,20040bc <__muldf3+0x2b8>
 2003f60:	008000c4 	movi	r2,3
 2003f64:	28816626 	beq	r5,r2,2004500 <__muldf3+0x6fc>
 2003f68:	00800044 	movi	r2,1
 2003f6c:	2881411e 	bne	r5,r2,2004474 <__muldf3+0x670>
 2003f70:	b02b883a 	mov	r21,r22
 2003f74:	0005883a 	mov	r2,zero
 2003f78:	000b883a 	mov	r5,zero
 2003f7c:	0029883a 	mov	r20,zero
 2003f80:	1004953a 	slli	r2,r2,20
 2003f84:	a8c03fcc 	andi	r3,r21,255
 2003f88:	04400434 	movhi	r17,16
 2003f8c:	8c7fffc4 	addi	r17,r17,-1
 2003f90:	180697fa 	slli	r3,r3,31
 2003f94:	2c4a703a 	and	r5,r5,r17
 2003f98:	288ab03a 	or	r5,r5,r2
 2003f9c:	28c6b03a 	or	r3,r5,r3
 2003fa0:	a005883a 	mov	r2,r20
 2003fa4:	dfc00c17 	ldw	ra,48(sp)
 2003fa8:	df000b17 	ldw	fp,44(sp)
 2003fac:	ddc00a17 	ldw	r23,40(sp)
 2003fb0:	dd800917 	ldw	r22,36(sp)
 2003fb4:	dd400817 	ldw	r21,32(sp)
 2003fb8:	dd000717 	ldw	r20,28(sp)
 2003fbc:	dcc00617 	ldw	r19,24(sp)
 2003fc0:	dc800517 	ldw	r18,20(sp)
 2003fc4:	dc400417 	ldw	r17,16(sp)
 2003fc8:	dc000317 	ldw	r16,12(sp)
 2003fcc:	dec00d04 	addi	sp,sp,52
 2003fd0:	f800283a 	ret
 2003fd4:	2404b03a 	or	r2,r4,r16
 2003fd8:	2027883a 	mov	r19,r4
 2003fdc:	10004226 	beq	r2,zero,20040e8 <__muldf3+0x2e4>
 2003fe0:	8000fc26 	beq	r16,zero,20043d4 <__muldf3+0x5d0>
 2003fe4:	8009883a 	mov	r4,r16
 2003fe8:	d9800215 	stw	r6,8(sp)
 2003fec:	d9c00015 	stw	r7,0(sp)
 2003ff0:	da400115 	stw	r9,4(sp)
 2003ff4:	2004f740 	call	2004f74 <__clzsi2>
 2003ff8:	d9800217 	ldw	r6,8(sp)
 2003ffc:	d9c00017 	ldw	r7,0(sp)
 2004000:	da400117 	ldw	r9,4(sp)
 2004004:	113ffd44 	addi	r4,r2,-11
 2004008:	00c00704 	movi	r3,28
 200400c:	1900ed16 	blt	r3,r4,20043c4 <__muldf3+0x5c0>
 2004010:	00c00744 	movi	r3,29
 2004014:	147ffe04 	addi	r17,r2,-8
 2004018:	1907c83a 	sub	r3,r3,r4
 200401c:	8460983a 	sll	r16,r16,r17
 2004020:	98c6d83a 	srl	r3,r19,r3
 2004024:	9c68983a 	sll	r20,r19,r17
 2004028:	1c20b03a 	or	r16,r3,r16
 200402c:	1080fcc4 	addi	r2,r2,1011
 2004030:	00a5c83a 	sub	r18,zero,r2
 2004034:	0027883a 	mov	r19,zero
 2004038:	0039883a 	mov	fp,zero
 200403c:	003f9006 	br	2003e80 <__alt_mem_epcs_flash_controller_0+0xfd002e80>
 2004040:	3446b03a 	or	r3,r6,r17
 2004044:	1800261e 	bne	r3,zero,20040e0 <__muldf3+0x2dc>
 2004048:	0023883a 	mov	r17,zero
 200404c:	0011883a 	mov	r8,zero
 2004050:	01400084 	movi	r5,2
 2004054:	003f9c06 	br	2003ec8 <__alt_mem_epcs_flash_controller_0+0xfd002ec8>
 2004058:	3446b03a 	or	r3,r6,r17
 200405c:	18001c26 	beq	r3,zero,20040d0 <__muldf3+0x2cc>
 2004060:	8800ce26 	beq	r17,zero,200439c <__muldf3+0x598>
 2004064:	8809883a 	mov	r4,r17
 2004068:	d9800215 	stw	r6,8(sp)
 200406c:	da400115 	stw	r9,4(sp)
 2004070:	da800015 	stw	r10,0(sp)
 2004074:	2004f740 	call	2004f74 <__clzsi2>
 2004078:	d9800217 	ldw	r6,8(sp)
 200407c:	da400117 	ldw	r9,4(sp)
 2004080:	da800017 	ldw	r10,0(sp)
 2004084:	113ffd44 	addi	r4,r2,-11
 2004088:	00c00704 	movi	r3,28
 200408c:	1900bf16 	blt	r3,r4,200438c <__muldf3+0x588>
 2004090:	00c00744 	movi	r3,29
 2004094:	123ffe04 	addi	r8,r2,-8
 2004098:	1907c83a 	sub	r3,r3,r4
 200409c:	8a22983a 	sll	r17,r17,r8
 20040a0:	30c6d83a 	srl	r3,r6,r3
 20040a4:	3210983a 	sll	r8,r6,r8
 20040a8:	1c62b03a 	or	r17,r3,r17
 20040ac:	1080fcc4 	addi	r2,r2,1011
 20040b0:	0085c83a 	sub	r2,zero,r2
 20040b4:	000b883a 	mov	r5,zero
 20040b8:	003f8306 	br	2003ec8 <__alt_mem_epcs_flash_controller_0+0xfd002ec8>
 20040bc:	b02b883a 	mov	r21,r22
 20040c0:	0081ffc4 	movi	r2,2047
 20040c4:	000b883a 	mov	r5,zero
 20040c8:	0029883a 	mov	r20,zero
 20040cc:	003fac06 	br	2003f80 <__alt_mem_epcs_flash_controller_0+0xfd002f80>
 20040d0:	0023883a 	mov	r17,zero
 20040d4:	0011883a 	mov	r8,zero
 20040d8:	01400044 	movi	r5,1
 20040dc:	003f7a06 	br	2003ec8 <__alt_mem_epcs_flash_controller_0+0xfd002ec8>
 20040e0:	014000c4 	movi	r5,3
 20040e4:	003f7806 	br	2003ec8 <__alt_mem_epcs_flash_controller_0+0xfd002ec8>
 20040e8:	04c00104 	movi	r19,4
 20040ec:	0021883a 	mov	r16,zero
 20040f0:	0029883a 	mov	r20,zero
 20040f4:	07000044 	movi	fp,1
 20040f8:	003f6106 	br	2003e80 <__alt_mem_epcs_flash_controller_0+0xfd002e80>
 20040fc:	04c00304 	movi	r19,12
 2004100:	070000c4 	movi	fp,3
 2004104:	003f5e06 	br	2003e80 <__alt_mem_epcs_flash_controller_0+0xfd002e80>
 2004108:	01400434 	movhi	r5,16
 200410c:	002b883a 	mov	r21,zero
 2004110:	297fffc4 	addi	r5,r5,-1
 2004114:	053fffc4 	movi	r20,-1
 2004118:	0081ffc4 	movi	r2,2047
 200411c:	003f9806 	br	2003f80 <__alt_mem_epcs_flash_controller_0+0xfd002f80>
 2004120:	8023883a 	mov	r17,r16
 2004124:	a011883a 	mov	r8,r20
 2004128:	e00b883a 	mov	r5,fp
 200412c:	003f8a06 	br	2003f58 <__alt_mem_epcs_flash_controller_0+0xfd002f58>
 2004130:	8023883a 	mov	r17,r16
 2004134:	a011883a 	mov	r8,r20
 2004138:	482d883a 	mov	r22,r9
 200413c:	e00b883a 	mov	r5,fp
 2004140:	003f8506 	br	2003f58 <__alt_mem_epcs_flash_controller_0+0xfd002f58>
 2004144:	a00ad43a 	srli	r5,r20,16
 2004148:	401ad43a 	srli	r13,r8,16
 200414c:	a53fffcc 	andi	r20,r20,65535
 2004150:	423fffcc 	andi	r8,r8,65535
 2004154:	4519383a 	mul	r12,r8,r20
 2004158:	4147383a 	mul	r3,r8,r5
 200415c:	6d09383a 	mul	r4,r13,r20
 2004160:	600cd43a 	srli	r6,r12,16
 2004164:	2b5d383a 	mul	r14,r5,r13
 2004168:	20c9883a 	add	r4,r4,r3
 200416c:	310d883a 	add	r6,r6,r4
 2004170:	30c0022e 	bgeu	r6,r3,200417c <__muldf3+0x378>
 2004174:	00c00074 	movhi	r3,1
 2004178:	70dd883a 	add	r14,r14,r3
 200417c:	8826d43a 	srli	r19,r17,16
 2004180:	8bffffcc 	andi	r15,r17,65535
 2004184:	7d23383a 	mul	r17,r15,r20
 2004188:	7949383a 	mul	r4,r15,r5
 200418c:	9d29383a 	mul	r20,r19,r20
 2004190:	8814d43a 	srli	r10,r17,16
 2004194:	3012943a 	slli	r9,r6,16
 2004198:	a129883a 	add	r20,r20,r4
 200419c:	633fffcc 	andi	r12,r12,65535
 20041a0:	5515883a 	add	r10,r10,r20
 20041a4:	3006d43a 	srli	r3,r6,16
 20041a8:	4b13883a 	add	r9,r9,r12
 20041ac:	2ccb383a 	mul	r5,r5,r19
 20041b0:	5100022e 	bgeu	r10,r4,20041bc <__muldf3+0x3b8>
 20041b4:	01000074 	movhi	r4,1
 20041b8:	290b883a 	add	r5,r5,r4
 20041bc:	802ad43a 	srli	r21,r16,16
 20041c0:	843fffcc 	andi	r16,r16,65535
 20041c4:	440d383a 	mul	r6,r8,r16
 20041c8:	4565383a 	mul	r18,r8,r21
 20041cc:	8349383a 	mul	r4,r16,r13
 20041d0:	500e943a 	slli	r7,r10,16
 20041d4:	3010d43a 	srli	r8,r6,16
 20041d8:	5028d43a 	srli	r20,r10,16
 20041dc:	2489883a 	add	r4,r4,r18
 20041e0:	8abfffcc 	andi	r10,r17,65535
 20041e4:	3a95883a 	add	r10,r7,r10
 20041e8:	4119883a 	add	r12,r8,r4
 20041ec:	a169883a 	add	r20,r20,r5
 20041f0:	1a87883a 	add	r3,r3,r10
 20041f4:	6d5b383a 	mul	r13,r13,r21
 20041f8:	6480022e 	bgeu	r12,r18,2004204 <__muldf3+0x400>
 20041fc:	01000074 	movhi	r4,1
 2004200:	691b883a 	add	r13,r13,r4
 2004204:	7c25383a 	mul	r18,r15,r16
 2004208:	7d4b383a 	mul	r5,r15,r21
 200420c:	84cf383a 	mul	r7,r16,r19
 2004210:	901ed43a 	srli	r15,r18,16
 2004214:	6008d43a 	srli	r4,r12,16
 2004218:	6010943a 	slli	r8,r12,16
 200421c:	394f883a 	add	r7,r7,r5
 2004220:	333fffcc 	andi	r12,r6,65535
 2004224:	79df883a 	add	r15,r15,r7
 2004228:	235b883a 	add	r13,r4,r13
 200422c:	9d63383a 	mul	r17,r19,r21
 2004230:	4309883a 	add	r4,r8,r12
 2004234:	7940022e 	bgeu	r15,r5,2004240 <__muldf3+0x43c>
 2004238:	01400074 	movhi	r5,1
 200423c:	8963883a 	add	r17,r17,r5
 2004240:	780a943a 	slli	r5,r15,16
 2004244:	91bfffcc 	andi	r6,r18,65535
 2004248:	70c7883a 	add	r3,r14,r3
 200424c:	298d883a 	add	r6,r5,r6
 2004250:	1a8f803a 	cmpltu	r7,r3,r10
 2004254:	350b883a 	add	r5,r6,r20
 2004258:	20c7883a 	add	r3,r4,r3
 200425c:	3955883a 	add	r10,r7,r5
 2004260:	1909803a 	cmpltu	r4,r3,r4
 2004264:	6a91883a 	add	r8,r13,r10
 2004268:	780cd43a 	srli	r6,r15,16
 200426c:	2219883a 	add	r12,r4,r8
 2004270:	2d0b803a 	cmpltu	r5,r5,r20
 2004274:	51cf803a 	cmpltu	r7,r10,r7
 2004278:	29ceb03a 	or	r7,r5,r7
 200427c:	4351803a 	cmpltu	r8,r8,r13
 2004280:	610b803a 	cmpltu	r5,r12,r4
 2004284:	4148b03a 	or	r4,r8,r5
 2004288:	398f883a 	add	r7,r7,r6
 200428c:	3909883a 	add	r4,r7,r4
 2004290:	1810927a 	slli	r8,r3,9
 2004294:	2449883a 	add	r4,r4,r17
 2004298:	2008927a 	slli	r4,r4,9
 200429c:	6022d5fa 	srli	r17,r12,23
 20042a0:	1806d5fa 	srli	r3,r3,23
 20042a4:	4252b03a 	or	r9,r8,r9
 20042a8:	600a927a 	slli	r5,r12,9
 20042ac:	4810c03a 	cmpne	r8,r9,zero
 20042b0:	2462b03a 	or	r17,r4,r17
 20042b4:	40c6b03a 	or	r3,r8,r3
 20042b8:	8900402c 	andhi	r4,r17,256
 20042bc:	1950b03a 	or	r8,r3,r5
 20042c0:	20000726 	beq	r4,zero,20042e0 <__muldf3+0x4dc>
 20042c4:	4006d07a 	srli	r3,r8,1
 20042c8:	880497fa 	slli	r2,r17,31
 20042cc:	4200004c 	andi	r8,r8,1
 20042d0:	8822d07a 	srli	r17,r17,1
 20042d4:	1a10b03a 	or	r8,r3,r8
 20042d8:	1210b03a 	or	r8,r2,r8
 20042dc:	5805883a 	mov	r2,r11
 20042e0:	1140ffc4 	addi	r5,r2,1023
 20042e4:	0140440e 	bge	zero,r5,20043f8 <__muldf3+0x5f4>
 20042e8:	40c001cc 	andi	r3,r8,7
 20042ec:	18000726 	beq	r3,zero,200430c <__muldf3+0x508>
 20042f0:	40c003cc 	andi	r3,r8,15
 20042f4:	01000104 	movi	r4,4
 20042f8:	19000426 	beq	r3,r4,200430c <__muldf3+0x508>
 20042fc:	4107883a 	add	r3,r8,r4
 2004300:	1a11803a 	cmpltu	r8,r3,r8
 2004304:	8a23883a 	add	r17,r17,r8
 2004308:	1811883a 	mov	r8,r3
 200430c:	88c0402c 	andhi	r3,r17,256
 2004310:	18000426 	beq	r3,zero,2004324 <__muldf3+0x520>
 2004314:	11410004 	addi	r5,r2,1024
 2004318:	00bfc034 	movhi	r2,65280
 200431c:	10bfffc4 	addi	r2,r2,-1
 2004320:	88a2703a 	and	r17,r17,r2
 2004324:	0081ff84 	movi	r2,2046
 2004328:	117f6416 	blt	r2,r5,20040bc <__alt_mem_epcs_flash_controller_0+0xfd0030bc>
 200432c:	8828977a 	slli	r20,r17,29
 2004330:	4010d0fa 	srli	r8,r8,3
 2004334:	8822927a 	slli	r17,r17,9
 2004338:	2881ffcc 	andi	r2,r5,2047
 200433c:	a228b03a 	or	r20,r20,r8
 2004340:	880ad33a 	srli	r5,r17,12
 2004344:	b02b883a 	mov	r21,r22
 2004348:	003f0d06 	br	2003f80 <__alt_mem_epcs_flash_controller_0+0xfd002f80>
 200434c:	8080022c 	andhi	r2,r16,8
 2004350:	10000926 	beq	r2,zero,2004378 <__muldf3+0x574>
 2004354:	8880022c 	andhi	r2,r17,8
 2004358:	1000071e 	bne	r2,zero,2004378 <__muldf3+0x574>
 200435c:	00800434 	movhi	r2,16
 2004360:	89400234 	orhi	r5,r17,8
 2004364:	10bfffc4 	addi	r2,r2,-1
 2004368:	b82b883a 	mov	r21,r23
 200436c:	288a703a 	and	r5,r5,r2
 2004370:	4029883a 	mov	r20,r8
 2004374:	003f6806 	br	2004118 <__alt_mem_epcs_flash_controller_0+0xfd003118>
 2004378:	00800434 	movhi	r2,16
 200437c:	81400234 	orhi	r5,r16,8
 2004380:	10bfffc4 	addi	r2,r2,-1
 2004384:	288a703a 	and	r5,r5,r2
 2004388:	003f6306 	br	2004118 <__alt_mem_epcs_flash_controller_0+0xfd003118>
 200438c:	147ff604 	addi	r17,r2,-40
 2004390:	3462983a 	sll	r17,r6,r17
 2004394:	0011883a 	mov	r8,zero
 2004398:	003f4406 	br	20040ac <__alt_mem_epcs_flash_controller_0+0xfd0030ac>
 200439c:	3009883a 	mov	r4,r6
 20043a0:	d9800215 	stw	r6,8(sp)
 20043a4:	da400115 	stw	r9,4(sp)
 20043a8:	da800015 	stw	r10,0(sp)
 20043ac:	2004f740 	call	2004f74 <__clzsi2>
 20043b0:	10800804 	addi	r2,r2,32
 20043b4:	da800017 	ldw	r10,0(sp)
 20043b8:	da400117 	ldw	r9,4(sp)
 20043bc:	d9800217 	ldw	r6,8(sp)
 20043c0:	003f3006 	br	2004084 <__alt_mem_epcs_flash_controller_0+0xfd003084>
 20043c4:	143ff604 	addi	r16,r2,-40
 20043c8:	9c20983a 	sll	r16,r19,r16
 20043cc:	0029883a 	mov	r20,zero
 20043d0:	003f1606 	br	200402c <__alt_mem_epcs_flash_controller_0+0xfd00302c>
 20043d4:	d9800215 	stw	r6,8(sp)
 20043d8:	d9c00015 	stw	r7,0(sp)
 20043dc:	da400115 	stw	r9,4(sp)
 20043e0:	2004f740 	call	2004f74 <__clzsi2>
 20043e4:	10800804 	addi	r2,r2,32
 20043e8:	da400117 	ldw	r9,4(sp)
 20043ec:	d9c00017 	ldw	r7,0(sp)
 20043f0:	d9800217 	ldw	r6,8(sp)
 20043f4:	003f0306 	br	2004004 <__alt_mem_epcs_flash_controller_0+0xfd003004>
 20043f8:	00c00044 	movi	r3,1
 20043fc:	1947c83a 	sub	r3,r3,r5
 2004400:	00800e04 	movi	r2,56
 2004404:	10feda16 	blt	r2,r3,2003f70 <__alt_mem_epcs_flash_controller_0+0xfd002f70>
 2004408:	008007c4 	movi	r2,31
 200440c:	10c01b16 	blt	r2,r3,200447c <__muldf3+0x678>
 2004410:	00800804 	movi	r2,32
 2004414:	10c5c83a 	sub	r2,r2,r3
 2004418:	888a983a 	sll	r5,r17,r2
 200441c:	40c8d83a 	srl	r4,r8,r3
 2004420:	4084983a 	sll	r2,r8,r2
 2004424:	88e2d83a 	srl	r17,r17,r3
 2004428:	2906b03a 	or	r3,r5,r4
 200442c:	1004c03a 	cmpne	r2,r2,zero
 2004430:	1886b03a 	or	r3,r3,r2
 2004434:	188001cc 	andi	r2,r3,7
 2004438:	10000726 	beq	r2,zero,2004458 <__muldf3+0x654>
 200443c:	188003cc 	andi	r2,r3,15
 2004440:	01000104 	movi	r4,4
 2004444:	11000426 	beq	r2,r4,2004458 <__muldf3+0x654>
 2004448:	1805883a 	mov	r2,r3
 200444c:	10c00104 	addi	r3,r2,4
 2004450:	1885803a 	cmpltu	r2,r3,r2
 2004454:	88a3883a 	add	r17,r17,r2
 2004458:	8880202c 	andhi	r2,r17,128
 200445c:	10001c26 	beq	r2,zero,20044d0 <__muldf3+0x6cc>
 2004460:	b02b883a 	mov	r21,r22
 2004464:	00800044 	movi	r2,1
 2004468:	000b883a 	mov	r5,zero
 200446c:	0029883a 	mov	r20,zero
 2004470:	003ec306 	br	2003f80 <__alt_mem_epcs_flash_controller_0+0xfd002f80>
 2004474:	5805883a 	mov	r2,r11
 2004478:	003f9906 	br	20042e0 <__alt_mem_epcs_flash_controller_0+0xfd0032e0>
 200447c:	00bff844 	movi	r2,-31
 2004480:	1145c83a 	sub	r2,r2,r5
 2004484:	8888d83a 	srl	r4,r17,r2
 2004488:	00800804 	movi	r2,32
 200448c:	18801a26 	beq	r3,r2,20044f8 <__muldf3+0x6f4>
 2004490:	00801004 	movi	r2,64
 2004494:	10c5c83a 	sub	r2,r2,r3
 2004498:	8884983a 	sll	r2,r17,r2
 200449c:	1204b03a 	or	r2,r2,r8
 20044a0:	1004c03a 	cmpne	r2,r2,zero
 20044a4:	2084b03a 	or	r2,r4,r2
 20044a8:	144001cc 	andi	r17,r2,7
 20044ac:	88000d1e 	bne	r17,zero,20044e4 <__muldf3+0x6e0>
 20044b0:	000b883a 	mov	r5,zero
 20044b4:	1028d0fa 	srli	r20,r2,3
 20044b8:	b02b883a 	mov	r21,r22
 20044bc:	0005883a 	mov	r2,zero
 20044c0:	a468b03a 	or	r20,r20,r17
 20044c4:	003eae06 	br	2003f80 <__alt_mem_epcs_flash_controller_0+0xfd002f80>
 20044c8:	1007883a 	mov	r3,r2
 20044cc:	0023883a 	mov	r17,zero
 20044d0:	880a927a 	slli	r5,r17,9
 20044d4:	1805883a 	mov	r2,r3
 20044d8:	8822977a 	slli	r17,r17,29
 20044dc:	280ad33a 	srli	r5,r5,12
 20044e0:	003ff406 	br	20044b4 <__alt_mem_epcs_flash_controller_0+0xfd0034b4>
 20044e4:	10c003cc 	andi	r3,r2,15
 20044e8:	01000104 	movi	r4,4
 20044ec:	193ff626 	beq	r3,r4,20044c8 <__alt_mem_epcs_flash_controller_0+0xfd0034c8>
 20044f0:	0023883a 	mov	r17,zero
 20044f4:	003fd506 	br	200444c <__alt_mem_epcs_flash_controller_0+0xfd00344c>
 20044f8:	0005883a 	mov	r2,zero
 20044fc:	003fe706 	br	200449c <__alt_mem_epcs_flash_controller_0+0xfd00349c>
 2004500:	00800434 	movhi	r2,16
 2004504:	89400234 	orhi	r5,r17,8
 2004508:	10bfffc4 	addi	r2,r2,-1
 200450c:	b02b883a 	mov	r21,r22
 2004510:	288a703a 	and	r5,r5,r2
 2004514:	4029883a 	mov	r20,r8
 2004518:	003eff06 	br	2004118 <__alt_mem_epcs_flash_controller_0+0xfd003118>

0200451c <__subdf3>:
 200451c:	02000434 	movhi	r8,16
 2004520:	423fffc4 	addi	r8,r8,-1
 2004524:	defffb04 	addi	sp,sp,-20
 2004528:	2a14703a 	and	r10,r5,r8
 200452c:	3812d53a 	srli	r9,r7,20
 2004530:	3a10703a 	and	r8,r7,r8
 2004534:	2006d77a 	srli	r3,r4,29
 2004538:	3004d77a 	srli	r2,r6,29
 200453c:	dc000015 	stw	r16,0(sp)
 2004540:	501490fa 	slli	r10,r10,3
 2004544:	2820d53a 	srli	r16,r5,20
 2004548:	401090fa 	slli	r8,r8,3
 200454c:	dc800215 	stw	r18,8(sp)
 2004550:	dc400115 	stw	r17,4(sp)
 2004554:	dfc00415 	stw	ra,16(sp)
 2004558:	202290fa 	slli	r17,r4,3
 200455c:	dcc00315 	stw	r19,12(sp)
 2004560:	4a41ffcc 	andi	r9,r9,2047
 2004564:	0101ffc4 	movi	r4,2047
 2004568:	2824d7fa 	srli	r18,r5,31
 200456c:	8401ffcc 	andi	r16,r16,2047
 2004570:	50c6b03a 	or	r3,r10,r3
 2004574:	380ed7fa 	srli	r7,r7,31
 2004578:	408ab03a 	or	r5,r8,r2
 200457c:	300c90fa 	slli	r6,r6,3
 2004580:	49009626 	beq	r9,r4,20047dc <__subdf3+0x2c0>
 2004584:	39c0005c 	xori	r7,r7,1
 2004588:	8245c83a 	sub	r2,r16,r9
 200458c:	3c807426 	beq	r7,r18,2004760 <__subdf3+0x244>
 2004590:	0080af0e 	bge	zero,r2,2004850 <__subdf3+0x334>
 2004594:	48002a1e 	bne	r9,zero,2004640 <__subdf3+0x124>
 2004598:	2988b03a 	or	r4,r5,r6
 200459c:	20009a1e 	bne	r4,zero,2004808 <__subdf3+0x2ec>
 20045a0:	888001cc 	andi	r2,r17,7
 20045a4:	10000726 	beq	r2,zero,20045c4 <__subdf3+0xa8>
 20045a8:	888003cc 	andi	r2,r17,15
 20045ac:	01000104 	movi	r4,4
 20045b0:	11000426 	beq	r2,r4,20045c4 <__subdf3+0xa8>
 20045b4:	890b883a 	add	r5,r17,r4
 20045b8:	2c63803a 	cmpltu	r17,r5,r17
 20045bc:	1c47883a 	add	r3,r3,r17
 20045c0:	2823883a 	mov	r17,r5
 20045c4:	1880202c 	andhi	r2,r3,128
 20045c8:	10005926 	beq	r2,zero,2004730 <__subdf3+0x214>
 20045cc:	84000044 	addi	r16,r16,1
 20045d0:	0081ffc4 	movi	r2,2047
 20045d4:	8080be26 	beq	r16,r2,20048d0 <__subdf3+0x3b4>
 20045d8:	017fe034 	movhi	r5,65408
 20045dc:	297fffc4 	addi	r5,r5,-1
 20045e0:	1946703a 	and	r3,r3,r5
 20045e4:	1804977a 	slli	r2,r3,29
 20045e8:	1806927a 	slli	r3,r3,9
 20045ec:	8822d0fa 	srli	r17,r17,3
 20045f0:	8401ffcc 	andi	r16,r16,2047
 20045f4:	180ad33a 	srli	r5,r3,12
 20045f8:	9100004c 	andi	r4,r18,1
 20045fc:	1444b03a 	or	r2,r2,r17
 2004600:	80c1ffcc 	andi	r3,r16,2047
 2004604:	1820953a 	slli	r16,r3,20
 2004608:	20c03fcc 	andi	r3,r4,255
 200460c:	180897fa 	slli	r4,r3,31
 2004610:	00c00434 	movhi	r3,16
 2004614:	18ffffc4 	addi	r3,r3,-1
 2004618:	28c6703a 	and	r3,r5,r3
 200461c:	1c06b03a 	or	r3,r3,r16
 2004620:	1906b03a 	or	r3,r3,r4
 2004624:	dfc00417 	ldw	ra,16(sp)
 2004628:	dcc00317 	ldw	r19,12(sp)
 200462c:	dc800217 	ldw	r18,8(sp)
 2004630:	dc400117 	ldw	r17,4(sp)
 2004634:	dc000017 	ldw	r16,0(sp)
 2004638:	dec00504 	addi	sp,sp,20
 200463c:	f800283a 	ret
 2004640:	0101ffc4 	movi	r4,2047
 2004644:	813fd626 	beq	r16,r4,20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004648:	29402034 	orhi	r5,r5,128
 200464c:	01000e04 	movi	r4,56
 2004650:	2080a316 	blt	r4,r2,20048e0 <__subdf3+0x3c4>
 2004654:	010007c4 	movi	r4,31
 2004658:	2080c616 	blt	r4,r2,2004974 <__subdf3+0x458>
 200465c:	01000804 	movi	r4,32
 2004660:	2089c83a 	sub	r4,r4,r2
 2004664:	2910983a 	sll	r8,r5,r4
 2004668:	308ed83a 	srl	r7,r6,r2
 200466c:	3108983a 	sll	r4,r6,r4
 2004670:	2884d83a 	srl	r2,r5,r2
 2004674:	41ccb03a 	or	r6,r8,r7
 2004678:	2008c03a 	cmpne	r4,r4,zero
 200467c:	310cb03a 	or	r6,r6,r4
 2004680:	898dc83a 	sub	r6,r17,r6
 2004684:	89a3803a 	cmpltu	r17,r17,r6
 2004688:	1887c83a 	sub	r3,r3,r2
 200468c:	1c47c83a 	sub	r3,r3,r17
 2004690:	3023883a 	mov	r17,r6
 2004694:	1880202c 	andhi	r2,r3,128
 2004698:	10002326 	beq	r2,zero,2004728 <__subdf3+0x20c>
 200469c:	04c02034 	movhi	r19,128
 20046a0:	9cffffc4 	addi	r19,r19,-1
 20046a4:	1ce6703a 	and	r19,r3,r19
 20046a8:	98007a26 	beq	r19,zero,2004894 <__subdf3+0x378>
 20046ac:	9809883a 	mov	r4,r19
 20046b0:	2004f740 	call	2004f74 <__clzsi2>
 20046b4:	113ffe04 	addi	r4,r2,-8
 20046b8:	00c007c4 	movi	r3,31
 20046bc:	19007b16 	blt	r3,r4,20048ac <__subdf3+0x390>
 20046c0:	00800804 	movi	r2,32
 20046c4:	1105c83a 	sub	r2,r2,r4
 20046c8:	8884d83a 	srl	r2,r17,r2
 20046cc:	9906983a 	sll	r3,r19,r4
 20046d0:	8922983a 	sll	r17,r17,r4
 20046d4:	10c4b03a 	or	r2,r2,r3
 20046d8:	24007816 	blt	r4,r16,20048bc <__subdf3+0x3a0>
 20046dc:	2421c83a 	sub	r16,r4,r16
 20046e0:	80c00044 	addi	r3,r16,1
 20046e4:	010007c4 	movi	r4,31
 20046e8:	20c09516 	blt	r4,r3,2004940 <__subdf3+0x424>
 20046ec:	01400804 	movi	r5,32
 20046f0:	28cbc83a 	sub	r5,r5,r3
 20046f4:	88c8d83a 	srl	r4,r17,r3
 20046f8:	8962983a 	sll	r17,r17,r5
 20046fc:	114a983a 	sll	r5,r2,r5
 2004700:	10c6d83a 	srl	r3,r2,r3
 2004704:	8804c03a 	cmpne	r2,r17,zero
 2004708:	290ab03a 	or	r5,r5,r4
 200470c:	28a2b03a 	or	r17,r5,r2
 2004710:	0021883a 	mov	r16,zero
 2004714:	003fa206 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004718:	2090b03a 	or	r8,r4,r2
 200471c:	40018e26 	beq	r8,zero,2004d58 <__subdf3+0x83c>
 2004720:	1007883a 	mov	r3,r2
 2004724:	2023883a 	mov	r17,r4
 2004728:	888001cc 	andi	r2,r17,7
 200472c:	103f9e1e 	bne	r2,zero,20045a8 <__alt_mem_epcs_flash_controller_0+0xfd0035a8>
 2004730:	1804977a 	slli	r2,r3,29
 2004734:	8822d0fa 	srli	r17,r17,3
 2004738:	1810d0fa 	srli	r8,r3,3
 200473c:	9100004c 	andi	r4,r18,1
 2004740:	1444b03a 	or	r2,r2,r17
 2004744:	00c1ffc4 	movi	r3,2047
 2004748:	80c02826 	beq	r16,r3,20047ec <__subdf3+0x2d0>
 200474c:	01400434 	movhi	r5,16
 2004750:	297fffc4 	addi	r5,r5,-1
 2004754:	80e0703a 	and	r16,r16,r3
 2004758:	414a703a 	and	r5,r8,r5
 200475c:	003fa806 	br	2004600 <__alt_mem_epcs_flash_controller_0+0xfd003600>
 2004760:	0080630e 	bge	zero,r2,20048f0 <__subdf3+0x3d4>
 2004764:	48003026 	beq	r9,zero,2004828 <__subdf3+0x30c>
 2004768:	0101ffc4 	movi	r4,2047
 200476c:	813f8c26 	beq	r16,r4,20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004770:	29402034 	orhi	r5,r5,128
 2004774:	01000e04 	movi	r4,56
 2004778:	2080a90e 	bge	r4,r2,2004a20 <__subdf3+0x504>
 200477c:	298cb03a 	or	r6,r5,r6
 2004780:	3012c03a 	cmpne	r9,r6,zero
 2004784:	0005883a 	mov	r2,zero
 2004788:	4c53883a 	add	r9,r9,r17
 200478c:	4c63803a 	cmpltu	r17,r9,r17
 2004790:	10c7883a 	add	r3,r2,r3
 2004794:	88c7883a 	add	r3,r17,r3
 2004798:	4823883a 	mov	r17,r9
 200479c:	1880202c 	andhi	r2,r3,128
 20047a0:	1000d026 	beq	r2,zero,2004ae4 <__subdf3+0x5c8>
 20047a4:	84000044 	addi	r16,r16,1
 20047a8:	0081ffc4 	movi	r2,2047
 20047ac:	8080fe26 	beq	r16,r2,2004ba8 <__subdf3+0x68c>
 20047b0:	00bfe034 	movhi	r2,65408
 20047b4:	10bfffc4 	addi	r2,r2,-1
 20047b8:	1886703a 	and	r3,r3,r2
 20047bc:	880ad07a 	srli	r5,r17,1
 20047c0:	180497fa 	slli	r2,r3,31
 20047c4:	8900004c 	andi	r4,r17,1
 20047c8:	2922b03a 	or	r17,r5,r4
 20047cc:	1806d07a 	srli	r3,r3,1
 20047d0:	1462b03a 	or	r17,r2,r17
 20047d4:	3825883a 	mov	r18,r7
 20047d8:	003f7106 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 20047dc:	2984b03a 	or	r2,r5,r6
 20047e0:	103f6826 	beq	r2,zero,2004584 <__alt_mem_epcs_flash_controller_0+0xfd003584>
 20047e4:	39c03fcc 	andi	r7,r7,255
 20047e8:	003f6706 	br	2004588 <__alt_mem_epcs_flash_controller_0+0xfd003588>
 20047ec:	4086b03a 	or	r3,r8,r2
 20047f0:	18015226 	beq	r3,zero,2004d3c <__subdf3+0x820>
 20047f4:	00c00434 	movhi	r3,16
 20047f8:	41400234 	orhi	r5,r8,8
 20047fc:	18ffffc4 	addi	r3,r3,-1
 2004800:	28ca703a 	and	r5,r5,r3
 2004804:	003f7e06 	br	2004600 <__alt_mem_epcs_flash_controller_0+0xfd003600>
 2004808:	10bfffc4 	addi	r2,r2,-1
 200480c:	1000491e 	bne	r2,zero,2004934 <__subdf3+0x418>
 2004810:	898fc83a 	sub	r7,r17,r6
 2004814:	89e3803a 	cmpltu	r17,r17,r7
 2004818:	1947c83a 	sub	r3,r3,r5
 200481c:	1c47c83a 	sub	r3,r3,r17
 2004820:	3823883a 	mov	r17,r7
 2004824:	003f9b06 	br	2004694 <__alt_mem_epcs_flash_controller_0+0xfd003694>
 2004828:	2988b03a 	or	r4,r5,r6
 200482c:	203f5c26 	beq	r4,zero,20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004830:	10bfffc4 	addi	r2,r2,-1
 2004834:	1000931e 	bne	r2,zero,2004a84 <__subdf3+0x568>
 2004838:	898d883a 	add	r6,r17,r6
 200483c:	3463803a 	cmpltu	r17,r6,r17
 2004840:	1947883a 	add	r3,r3,r5
 2004844:	88c7883a 	add	r3,r17,r3
 2004848:	3023883a 	mov	r17,r6
 200484c:	003fd306 	br	200479c <__alt_mem_epcs_flash_controller_0+0xfd00379c>
 2004850:	1000541e 	bne	r2,zero,20049a4 <__subdf3+0x488>
 2004854:	80800044 	addi	r2,r16,1
 2004858:	1081ffcc 	andi	r2,r2,2047
 200485c:	01000044 	movi	r4,1
 2004860:	2080a20e 	bge	r4,r2,2004aec <__subdf3+0x5d0>
 2004864:	8989c83a 	sub	r4,r17,r6
 2004868:	8905803a 	cmpltu	r2,r17,r4
 200486c:	1967c83a 	sub	r19,r3,r5
 2004870:	98a7c83a 	sub	r19,r19,r2
 2004874:	9880202c 	andhi	r2,r19,128
 2004878:	10006326 	beq	r2,zero,2004a08 <__subdf3+0x4ec>
 200487c:	3463c83a 	sub	r17,r6,r17
 2004880:	28c7c83a 	sub	r3,r5,r3
 2004884:	344d803a 	cmpltu	r6,r6,r17
 2004888:	19a7c83a 	sub	r19,r3,r6
 200488c:	3825883a 	mov	r18,r7
 2004890:	983f861e 	bne	r19,zero,20046ac <__alt_mem_epcs_flash_controller_0+0xfd0036ac>
 2004894:	8809883a 	mov	r4,r17
 2004898:	2004f740 	call	2004f74 <__clzsi2>
 200489c:	10800804 	addi	r2,r2,32
 20048a0:	113ffe04 	addi	r4,r2,-8
 20048a4:	00c007c4 	movi	r3,31
 20048a8:	193f850e 	bge	r3,r4,20046c0 <__alt_mem_epcs_flash_controller_0+0xfd0036c0>
 20048ac:	10bff604 	addi	r2,r2,-40
 20048b0:	8884983a 	sll	r2,r17,r2
 20048b4:	0023883a 	mov	r17,zero
 20048b8:	243f880e 	bge	r4,r16,20046dc <__alt_mem_epcs_flash_controller_0+0xfd0036dc>
 20048bc:	00ffe034 	movhi	r3,65408
 20048c0:	18ffffc4 	addi	r3,r3,-1
 20048c4:	8121c83a 	sub	r16,r16,r4
 20048c8:	10c6703a 	and	r3,r2,r3
 20048cc:	003f3406 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 20048d0:	9100004c 	andi	r4,r18,1
 20048d4:	000b883a 	mov	r5,zero
 20048d8:	0005883a 	mov	r2,zero
 20048dc:	003f4806 	br	2004600 <__alt_mem_epcs_flash_controller_0+0xfd003600>
 20048e0:	298cb03a 	or	r6,r5,r6
 20048e4:	300cc03a 	cmpne	r6,r6,zero
 20048e8:	0005883a 	mov	r2,zero
 20048ec:	003f6406 	br	2004680 <__alt_mem_epcs_flash_controller_0+0xfd003680>
 20048f0:	10009a1e 	bne	r2,zero,2004b5c <__subdf3+0x640>
 20048f4:	82400044 	addi	r9,r16,1
 20048f8:	4881ffcc 	andi	r2,r9,2047
 20048fc:	02800044 	movi	r10,1
 2004900:	5080670e 	bge	r10,r2,2004aa0 <__subdf3+0x584>
 2004904:	0081ffc4 	movi	r2,2047
 2004908:	4880af26 	beq	r9,r2,2004bc8 <__subdf3+0x6ac>
 200490c:	898d883a 	add	r6,r17,r6
 2004910:	1945883a 	add	r2,r3,r5
 2004914:	3447803a 	cmpltu	r3,r6,r17
 2004918:	1887883a 	add	r3,r3,r2
 200491c:	182297fa 	slli	r17,r3,31
 2004920:	300cd07a 	srli	r6,r6,1
 2004924:	1806d07a 	srli	r3,r3,1
 2004928:	4821883a 	mov	r16,r9
 200492c:	89a2b03a 	or	r17,r17,r6
 2004930:	003f1b06 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004934:	0101ffc4 	movi	r4,2047
 2004938:	813f441e 	bne	r16,r4,200464c <__alt_mem_epcs_flash_controller_0+0xfd00364c>
 200493c:	003f1806 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004940:	843ff844 	addi	r16,r16,-31
 2004944:	01400804 	movi	r5,32
 2004948:	1408d83a 	srl	r4,r2,r16
 200494c:	19405026 	beq	r3,r5,2004a90 <__subdf3+0x574>
 2004950:	01401004 	movi	r5,64
 2004954:	28c7c83a 	sub	r3,r5,r3
 2004958:	10c4983a 	sll	r2,r2,r3
 200495c:	88a2b03a 	or	r17,r17,r2
 2004960:	8822c03a 	cmpne	r17,r17,zero
 2004964:	2462b03a 	or	r17,r4,r17
 2004968:	0007883a 	mov	r3,zero
 200496c:	0021883a 	mov	r16,zero
 2004970:	003f6d06 	br	2004728 <__alt_mem_epcs_flash_controller_0+0xfd003728>
 2004974:	11fff804 	addi	r7,r2,-32
 2004978:	01000804 	movi	r4,32
 200497c:	29ced83a 	srl	r7,r5,r7
 2004980:	11004526 	beq	r2,r4,2004a98 <__subdf3+0x57c>
 2004984:	01001004 	movi	r4,64
 2004988:	2089c83a 	sub	r4,r4,r2
 200498c:	2904983a 	sll	r2,r5,r4
 2004990:	118cb03a 	or	r6,r2,r6
 2004994:	300cc03a 	cmpne	r6,r6,zero
 2004998:	398cb03a 	or	r6,r7,r6
 200499c:	0005883a 	mov	r2,zero
 20049a0:	003f3706 	br	2004680 <__alt_mem_epcs_flash_controller_0+0xfd003680>
 20049a4:	80002a26 	beq	r16,zero,2004a50 <__subdf3+0x534>
 20049a8:	0101ffc4 	movi	r4,2047
 20049ac:	49006626 	beq	r9,r4,2004b48 <__subdf3+0x62c>
 20049b0:	0085c83a 	sub	r2,zero,r2
 20049b4:	18c02034 	orhi	r3,r3,128
 20049b8:	01000e04 	movi	r4,56
 20049bc:	20807e16 	blt	r4,r2,2004bb8 <__subdf3+0x69c>
 20049c0:	010007c4 	movi	r4,31
 20049c4:	2080e716 	blt	r4,r2,2004d64 <__subdf3+0x848>
 20049c8:	01000804 	movi	r4,32
 20049cc:	2089c83a 	sub	r4,r4,r2
 20049d0:	1914983a 	sll	r10,r3,r4
 20049d4:	8890d83a 	srl	r8,r17,r2
 20049d8:	8908983a 	sll	r4,r17,r4
 20049dc:	1884d83a 	srl	r2,r3,r2
 20049e0:	5222b03a 	or	r17,r10,r8
 20049e4:	2006c03a 	cmpne	r3,r4,zero
 20049e8:	88e2b03a 	or	r17,r17,r3
 20049ec:	3463c83a 	sub	r17,r6,r17
 20049f0:	2885c83a 	sub	r2,r5,r2
 20049f4:	344d803a 	cmpltu	r6,r6,r17
 20049f8:	1187c83a 	sub	r3,r2,r6
 20049fc:	4821883a 	mov	r16,r9
 2004a00:	3825883a 	mov	r18,r7
 2004a04:	003f2306 	br	2004694 <__alt_mem_epcs_flash_controller_0+0xfd003694>
 2004a08:	24d0b03a 	or	r8,r4,r19
 2004a0c:	40001b1e 	bne	r8,zero,2004a7c <__subdf3+0x560>
 2004a10:	0005883a 	mov	r2,zero
 2004a14:	0009883a 	mov	r4,zero
 2004a18:	0021883a 	mov	r16,zero
 2004a1c:	003f4906 	br	2004744 <__alt_mem_epcs_flash_controller_0+0xfd003744>
 2004a20:	010007c4 	movi	r4,31
 2004a24:	20803a16 	blt	r4,r2,2004b10 <__subdf3+0x5f4>
 2004a28:	01000804 	movi	r4,32
 2004a2c:	2089c83a 	sub	r4,r4,r2
 2004a30:	2912983a 	sll	r9,r5,r4
 2004a34:	3090d83a 	srl	r8,r6,r2
 2004a38:	3108983a 	sll	r4,r6,r4
 2004a3c:	2884d83a 	srl	r2,r5,r2
 2004a40:	4a12b03a 	or	r9,r9,r8
 2004a44:	2008c03a 	cmpne	r4,r4,zero
 2004a48:	4912b03a 	or	r9,r9,r4
 2004a4c:	003f4e06 	br	2004788 <__alt_mem_epcs_flash_controller_0+0xfd003788>
 2004a50:	1c48b03a 	or	r4,r3,r17
 2004a54:	20003c26 	beq	r4,zero,2004b48 <__subdf3+0x62c>
 2004a58:	0084303a 	nor	r2,zero,r2
 2004a5c:	1000381e 	bne	r2,zero,2004b40 <__subdf3+0x624>
 2004a60:	3463c83a 	sub	r17,r6,r17
 2004a64:	28c5c83a 	sub	r2,r5,r3
 2004a68:	344d803a 	cmpltu	r6,r6,r17
 2004a6c:	1187c83a 	sub	r3,r2,r6
 2004a70:	4821883a 	mov	r16,r9
 2004a74:	3825883a 	mov	r18,r7
 2004a78:	003f0606 	br	2004694 <__alt_mem_epcs_flash_controller_0+0xfd003694>
 2004a7c:	2023883a 	mov	r17,r4
 2004a80:	003f0906 	br	20046a8 <__alt_mem_epcs_flash_controller_0+0xfd0036a8>
 2004a84:	0101ffc4 	movi	r4,2047
 2004a88:	813f3a1e 	bne	r16,r4,2004774 <__alt_mem_epcs_flash_controller_0+0xfd003774>
 2004a8c:	003ec406 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004a90:	0005883a 	mov	r2,zero
 2004a94:	003fb106 	br	200495c <__alt_mem_epcs_flash_controller_0+0xfd00395c>
 2004a98:	0005883a 	mov	r2,zero
 2004a9c:	003fbc06 	br	2004990 <__alt_mem_epcs_flash_controller_0+0xfd003990>
 2004aa0:	1c44b03a 	or	r2,r3,r17
 2004aa4:	80008e1e 	bne	r16,zero,2004ce0 <__subdf3+0x7c4>
 2004aa8:	1000c826 	beq	r2,zero,2004dcc <__subdf3+0x8b0>
 2004aac:	2984b03a 	or	r2,r5,r6
 2004ab0:	103ebb26 	beq	r2,zero,20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004ab4:	8989883a 	add	r4,r17,r6
 2004ab8:	1945883a 	add	r2,r3,r5
 2004abc:	2447803a 	cmpltu	r3,r4,r17
 2004ac0:	1887883a 	add	r3,r3,r2
 2004ac4:	1880202c 	andhi	r2,r3,128
 2004ac8:	2023883a 	mov	r17,r4
 2004acc:	103f1626 	beq	r2,zero,2004728 <__alt_mem_epcs_flash_controller_0+0xfd003728>
 2004ad0:	00bfe034 	movhi	r2,65408
 2004ad4:	10bfffc4 	addi	r2,r2,-1
 2004ad8:	5021883a 	mov	r16,r10
 2004adc:	1886703a 	and	r3,r3,r2
 2004ae0:	003eaf06 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004ae4:	3825883a 	mov	r18,r7
 2004ae8:	003f0f06 	br	2004728 <__alt_mem_epcs_flash_controller_0+0xfd003728>
 2004aec:	1c44b03a 	or	r2,r3,r17
 2004af0:	8000251e 	bne	r16,zero,2004b88 <__subdf3+0x66c>
 2004af4:	1000661e 	bne	r2,zero,2004c90 <__subdf3+0x774>
 2004af8:	2990b03a 	or	r8,r5,r6
 2004afc:	40009626 	beq	r8,zero,2004d58 <__subdf3+0x83c>
 2004b00:	2807883a 	mov	r3,r5
 2004b04:	3023883a 	mov	r17,r6
 2004b08:	3825883a 	mov	r18,r7
 2004b0c:	003ea406 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004b10:	127ff804 	addi	r9,r2,-32
 2004b14:	01000804 	movi	r4,32
 2004b18:	2a52d83a 	srl	r9,r5,r9
 2004b1c:	11008c26 	beq	r2,r4,2004d50 <__subdf3+0x834>
 2004b20:	01001004 	movi	r4,64
 2004b24:	2085c83a 	sub	r2,r4,r2
 2004b28:	2884983a 	sll	r2,r5,r2
 2004b2c:	118cb03a 	or	r6,r2,r6
 2004b30:	300cc03a 	cmpne	r6,r6,zero
 2004b34:	4992b03a 	or	r9,r9,r6
 2004b38:	0005883a 	mov	r2,zero
 2004b3c:	003f1206 	br	2004788 <__alt_mem_epcs_flash_controller_0+0xfd003788>
 2004b40:	0101ffc4 	movi	r4,2047
 2004b44:	493f9c1e 	bne	r9,r4,20049b8 <__alt_mem_epcs_flash_controller_0+0xfd0039b8>
 2004b48:	2807883a 	mov	r3,r5
 2004b4c:	3023883a 	mov	r17,r6
 2004b50:	4821883a 	mov	r16,r9
 2004b54:	3825883a 	mov	r18,r7
 2004b58:	003e9106 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004b5c:	80001f1e 	bne	r16,zero,2004bdc <__subdf3+0x6c0>
 2004b60:	1c48b03a 	or	r4,r3,r17
 2004b64:	20005a26 	beq	r4,zero,2004cd0 <__subdf3+0x7b4>
 2004b68:	0084303a 	nor	r2,zero,r2
 2004b6c:	1000561e 	bne	r2,zero,2004cc8 <__subdf3+0x7ac>
 2004b70:	89a3883a 	add	r17,r17,r6
 2004b74:	1945883a 	add	r2,r3,r5
 2004b78:	898d803a 	cmpltu	r6,r17,r6
 2004b7c:	3087883a 	add	r3,r6,r2
 2004b80:	4821883a 	mov	r16,r9
 2004b84:	003f0506 	br	200479c <__alt_mem_epcs_flash_controller_0+0xfd00379c>
 2004b88:	10002b1e 	bne	r2,zero,2004c38 <__subdf3+0x71c>
 2004b8c:	2984b03a 	or	r2,r5,r6
 2004b90:	10008026 	beq	r2,zero,2004d94 <__subdf3+0x878>
 2004b94:	2807883a 	mov	r3,r5
 2004b98:	3023883a 	mov	r17,r6
 2004b9c:	3825883a 	mov	r18,r7
 2004ba0:	0401ffc4 	movi	r16,2047
 2004ba4:	003e7e06 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004ba8:	3809883a 	mov	r4,r7
 2004bac:	0011883a 	mov	r8,zero
 2004bb0:	0005883a 	mov	r2,zero
 2004bb4:	003ee306 	br	2004744 <__alt_mem_epcs_flash_controller_0+0xfd003744>
 2004bb8:	1c62b03a 	or	r17,r3,r17
 2004bbc:	8822c03a 	cmpne	r17,r17,zero
 2004bc0:	0005883a 	mov	r2,zero
 2004bc4:	003f8906 	br	20049ec <__alt_mem_epcs_flash_controller_0+0xfd0039ec>
 2004bc8:	3809883a 	mov	r4,r7
 2004bcc:	4821883a 	mov	r16,r9
 2004bd0:	0011883a 	mov	r8,zero
 2004bd4:	0005883a 	mov	r2,zero
 2004bd8:	003eda06 	br	2004744 <__alt_mem_epcs_flash_controller_0+0xfd003744>
 2004bdc:	0101ffc4 	movi	r4,2047
 2004be0:	49003b26 	beq	r9,r4,2004cd0 <__subdf3+0x7b4>
 2004be4:	0085c83a 	sub	r2,zero,r2
 2004be8:	18c02034 	orhi	r3,r3,128
 2004bec:	01000e04 	movi	r4,56
 2004bf0:	20806e16 	blt	r4,r2,2004dac <__subdf3+0x890>
 2004bf4:	010007c4 	movi	r4,31
 2004bf8:	20807716 	blt	r4,r2,2004dd8 <__subdf3+0x8bc>
 2004bfc:	01000804 	movi	r4,32
 2004c00:	2089c83a 	sub	r4,r4,r2
 2004c04:	1914983a 	sll	r10,r3,r4
 2004c08:	8890d83a 	srl	r8,r17,r2
 2004c0c:	8908983a 	sll	r4,r17,r4
 2004c10:	1884d83a 	srl	r2,r3,r2
 2004c14:	5222b03a 	or	r17,r10,r8
 2004c18:	2006c03a 	cmpne	r3,r4,zero
 2004c1c:	88e2b03a 	or	r17,r17,r3
 2004c20:	89a3883a 	add	r17,r17,r6
 2004c24:	1145883a 	add	r2,r2,r5
 2004c28:	898d803a 	cmpltu	r6,r17,r6
 2004c2c:	3087883a 	add	r3,r6,r2
 2004c30:	4821883a 	mov	r16,r9
 2004c34:	003ed906 	br	200479c <__alt_mem_epcs_flash_controller_0+0xfd00379c>
 2004c38:	2984b03a 	or	r2,r5,r6
 2004c3c:	10004226 	beq	r2,zero,2004d48 <__subdf3+0x82c>
 2004c40:	1808d0fa 	srli	r4,r3,3
 2004c44:	8822d0fa 	srli	r17,r17,3
 2004c48:	1806977a 	slli	r3,r3,29
 2004c4c:	2080022c 	andhi	r2,r4,8
 2004c50:	1c62b03a 	or	r17,r3,r17
 2004c54:	10000826 	beq	r2,zero,2004c78 <__subdf3+0x75c>
 2004c58:	2812d0fa 	srli	r9,r5,3
 2004c5c:	4880022c 	andhi	r2,r9,8
 2004c60:	1000051e 	bne	r2,zero,2004c78 <__subdf3+0x75c>
 2004c64:	300cd0fa 	srli	r6,r6,3
 2004c68:	2804977a 	slli	r2,r5,29
 2004c6c:	4809883a 	mov	r4,r9
 2004c70:	3825883a 	mov	r18,r7
 2004c74:	11a2b03a 	or	r17,r2,r6
 2004c78:	8806d77a 	srli	r3,r17,29
 2004c7c:	200890fa 	slli	r4,r4,3
 2004c80:	882290fa 	slli	r17,r17,3
 2004c84:	0401ffc4 	movi	r16,2047
 2004c88:	1906b03a 	or	r3,r3,r4
 2004c8c:	003e4406 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004c90:	2984b03a 	or	r2,r5,r6
 2004c94:	103e4226 	beq	r2,zero,20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004c98:	8989c83a 	sub	r4,r17,r6
 2004c9c:	8911803a 	cmpltu	r8,r17,r4
 2004ca0:	1945c83a 	sub	r2,r3,r5
 2004ca4:	1205c83a 	sub	r2,r2,r8
 2004ca8:	1200202c 	andhi	r8,r2,128
 2004cac:	403e9a26 	beq	r8,zero,2004718 <__alt_mem_epcs_flash_controller_0+0xfd003718>
 2004cb0:	3463c83a 	sub	r17,r6,r17
 2004cb4:	28c5c83a 	sub	r2,r5,r3
 2004cb8:	344d803a 	cmpltu	r6,r6,r17
 2004cbc:	1187c83a 	sub	r3,r2,r6
 2004cc0:	3825883a 	mov	r18,r7
 2004cc4:	003e3606 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004cc8:	0101ffc4 	movi	r4,2047
 2004ccc:	493fc71e 	bne	r9,r4,2004bec <__alt_mem_epcs_flash_controller_0+0xfd003bec>
 2004cd0:	2807883a 	mov	r3,r5
 2004cd4:	3023883a 	mov	r17,r6
 2004cd8:	4821883a 	mov	r16,r9
 2004cdc:	003e3006 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004ce0:	10003626 	beq	r2,zero,2004dbc <__subdf3+0x8a0>
 2004ce4:	2984b03a 	or	r2,r5,r6
 2004ce8:	10001726 	beq	r2,zero,2004d48 <__subdf3+0x82c>
 2004cec:	1808d0fa 	srli	r4,r3,3
 2004cf0:	8822d0fa 	srli	r17,r17,3
 2004cf4:	1806977a 	slli	r3,r3,29
 2004cf8:	2080022c 	andhi	r2,r4,8
 2004cfc:	1c62b03a 	or	r17,r3,r17
 2004d00:	10000726 	beq	r2,zero,2004d20 <__subdf3+0x804>
 2004d04:	2812d0fa 	srli	r9,r5,3
 2004d08:	4880022c 	andhi	r2,r9,8
 2004d0c:	1000041e 	bne	r2,zero,2004d20 <__subdf3+0x804>
 2004d10:	300cd0fa 	srli	r6,r6,3
 2004d14:	2804977a 	slli	r2,r5,29
 2004d18:	4809883a 	mov	r4,r9
 2004d1c:	11a2b03a 	or	r17,r2,r6
 2004d20:	8806d77a 	srli	r3,r17,29
 2004d24:	200890fa 	slli	r4,r4,3
 2004d28:	882290fa 	slli	r17,r17,3
 2004d2c:	3825883a 	mov	r18,r7
 2004d30:	1906b03a 	or	r3,r3,r4
 2004d34:	0401ffc4 	movi	r16,2047
 2004d38:	003e1906 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004d3c:	000b883a 	mov	r5,zero
 2004d40:	0005883a 	mov	r2,zero
 2004d44:	003e2e06 	br	2004600 <__alt_mem_epcs_flash_controller_0+0xfd003600>
 2004d48:	0401ffc4 	movi	r16,2047
 2004d4c:	003e1406 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004d50:	0005883a 	mov	r2,zero
 2004d54:	003f7506 	br	2004b2c <__alt_mem_epcs_flash_controller_0+0xfd003b2c>
 2004d58:	0005883a 	mov	r2,zero
 2004d5c:	0009883a 	mov	r4,zero
 2004d60:	003e7806 	br	2004744 <__alt_mem_epcs_flash_controller_0+0xfd003744>
 2004d64:	123ff804 	addi	r8,r2,-32
 2004d68:	01000804 	movi	r4,32
 2004d6c:	1a10d83a 	srl	r8,r3,r8
 2004d70:	11002526 	beq	r2,r4,2004e08 <__subdf3+0x8ec>
 2004d74:	01001004 	movi	r4,64
 2004d78:	2085c83a 	sub	r2,r4,r2
 2004d7c:	1884983a 	sll	r2,r3,r2
 2004d80:	1444b03a 	or	r2,r2,r17
 2004d84:	1004c03a 	cmpne	r2,r2,zero
 2004d88:	40a2b03a 	or	r17,r8,r2
 2004d8c:	0005883a 	mov	r2,zero
 2004d90:	003f1606 	br	20049ec <__alt_mem_epcs_flash_controller_0+0xfd0039ec>
 2004d94:	02000434 	movhi	r8,16
 2004d98:	0009883a 	mov	r4,zero
 2004d9c:	423fffc4 	addi	r8,r8,-1
 2004da0:	00bfffc4 	movi	r2,-1
 2004da4:	0401ffc4 	movi	r16,2047
 2004da8:	003e6606 	br	2004744 <__alt_mem_epcs_flash_controller_0+0xfd003744>
 2004dac:	1c62b03a 	or	r17,r3,r17
 2004db0:	8822c03a 	cmpne	r17,r17,zero
 2004db4:	0005883a 	mov	r2,zero
 2004db8:	003f9906 	br	2004c20 <__alt_mem_epcs_flash_controller_0+0xfd003c20>
 2004dbc:	2807883a 	mov	r3,r5
 2004dc0:	3023883a 	mov	r17,r6
 2004dc4:	0401ffc4 	movi	r16,2047
 2004dc8:	003df506 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004dcc:	2807883a 	mov	r3,r5
 2004dd0:	3023883a 	mov	r17,r6
 2004dd4:	003df206 	br	20045a0 <__alt_mem_epcs_flash_controller_0+0xfd0035a0>
 2004dd8:	123ff804 	addi	r8,r2,-32
 2004ddc:	01000804 	movi	r4,32
 2004de0:	1a10d83a 	srl	r8,r3,r8
 2004de4:	11000a26 	beq	r2,r4,2004e10 <__subdf3+0x8f4>
 2004de8:	01001004 	movi	r4,64
 2004dec:	2085c83a 	sub	r2,r4,r2
 2004df0:	1884983a 	sll	r2,r3,r2
 2004df4:	1444b03a 	or	r2,r2,r17
 2004df8:	1004c03a 	cmpne	r2,r2,zero
 2004dfc:	40a2b03a 	or	r17,r8,r2
 2004e00:	0005883a 	mov	r2,zero
 2004e04:	003f8606 	br	2004c20 <__alt_mem_epcs_flash_controller_0+0xfd003c20>
 2004e08:	0005883a 	mov	r2,zero
 2004e0c:	003fdc06 	br	2004d80 <__alt_mem_epcs_flash_controller_0+0xfd003d80>
 2004e10:	0005883a 	mov	r2,zero
 2004e14:	003ff706 	br	2004df4 <__alt_mem_epcs_flash_controller_0+0xfd003df4>

02004e18 <__fixdfsi>:
 2004e18:	280cd53a 	srli	r6,r5,20
 2004e1c:	00c00434 	movhi	r3,16
 2004e20:	18ffffc4 	addi	r3,r3,-1
 2004e24:	3181ffcc 	andi	r6,r6,2047
 2004e28:	01c0ff84 	movi	r7,1022
 2004e2c:	28c6703a 	and	r3,r5,r3
 2004e30:	280ad7fa 	srli	r5,r5,31
 2004e34:	3980120e 	bge	r7,r6,2004e80 <__fixdfsi+0x68>
 2004e38:	00810744 	movi	r2,1053
 2004e3c:	11800c16 	blt	r2,r6,2004e70 <__fixdfsi+0x58>
 2004e40:	00810cc4 	movi	r2,1075
 2004e44:	1185c83a 	sub	r2,r2,r6
 2004e48:	01c007c4 	movi	r7,31
 2004e4c:	18c00434 	orhi	r3,r3,16
 2004e50:	38800d16 	blt	r7,r2,2004e88 <__fixdfsi+0x70>
 2004e54:	31befb44 	addi	r6,r6,-1043
 2004e58:	2084d83a 	srl	r2,r4,r2
 2004e5c:	1986983a 	sll	r3,r3,r6
 2004e60:	1884b03a 	or	r2,r3,r2
 2004e64:	28000726 	beq	r5,zero,2004e84 <__fixdfsi+0x6c>
 2004e68:	0085c83a 	sub	r2,zero,r2
 2004e6c:	f800283a 	ret
 2004e70:	00a00034 	movhi	r2,32768
 2004e74:	10bfffc4 	addi	r2,r2,-1
 2004e78:	2885883a 	add	r2,r5,r2
 2004e7c:	f800283a 	ret
 2004e80:	0005883a 	mov	r2,zero
 2004e84:	f800283a 	ret
 2004e88:	008104c4 	movi	r2,1043
 2004e8c:	1185c83a 	sub	r2,r2,r6
 2004e90:	1884d83a 	srl	r2,r3,r2
 2004e94:	003ff306 	br	2004e64 <__alt_mem_epcs_flash_controller_0+0xfd003e64>

02004e98 <__floatsidf>:
 2004e98:	defffd04 	addi	sp,sp,-12
 2004e9c:	dfc00215 	stw	ra,8(sp)
 2004ea0:	dc400115 	stw	r17,4(sp)
 2004ea4:	dc000015 	stw	r16,0(sp)
 2004ea8:	20002b26 	beq	r4,zero,2004f58 <__floatsidf+0xc0>
 2004eac:	2023883a 	mov	r17,r4
 2004eb0:	2020d7fa 	srli	r16,r4,31
 2004eb4:	20002d16 	blt	r4,zero,2004f6c <__floatsidf+0xd4>
 2004eb8:	8809883a 	mov	r4,r17
 2004ebc:	2004f740 	call	2004f74 <__clzsi2>
 2004ec0:	01410784 	movi	r5,1054
 2004ec4:	288bc83a 	sub	r5,r5,r2
 2004ec8:	01010cc4 	movi	r4,1075
 2004ecc:	2149c83a 	sub	r4,r4,r5
 2004ed0:	00c007c4 	movi	r3,31
 2004ed4:	1900160e 	bge	r3,r4,2004f30 <__floatsidf+0x98>
 2004ed8:	00c104c4 	movi	r3,1043
 2004edc:	1947c83a 	sub	r3,r3,r5
 2004ee0:	88c6983a 	sll	r3,r17,r3
 2004ee4:	00800434 	movhi	r2,16
 2004ee8:	10bfffc4 	addi	r2,r2,-1
 2004eec:	1886703a 	and	r3,r3,r2
 2004ef0:	2941ffcc 	andi	r5,r5,2047
 2004ef4:	800d883a 	mov	r6,r16
 2004ef8:	0005883a 	mov	r2,zero
 2004efc:	280a953a 	slli	r5,r5,20
 2004f00:	31803fcc 	andi	r6,r6,255
 2004f04:	01000434 	movhi	r4,16
 2004f08:	300c97fa 	slli	r6,r6,31
 2004f0c:	213fffc4 	addi	r4,r4,-1
 2004f10:	1906703a 	and	r3,r3,r4
 2004f14:	1946b03a 	or	r3,r3,r5
 2004f18:	1986b03a 	or	r3,r3,r6
 2004f1c:	dfc00217 	ldw	ra,8(sp)
 2004f20:	dc400117 	ldw	r17,4(sp)
 2004f24:	dc000017 	ldw	r16,0(sp)
 2004f28:	dec00304 	addi	sp,sp,12
 2004f2c:	f800283a 	ret
 2004f30:	00c002c4 	movi	r3,11
 2004f34:	1887c83a 	sub	r3,r3,r2
 2004f38:	88c6d83a 	srl	r3,r17,r3
 2004f3c:	8904983a 	sll	r2,r17,r4
 2004f40:	01000434 	movhi	r4,16
 2004f44:	213fffc4 	addi	r4,r4,-1
 2004f48:	2941ffcc 	andi	r5,r5,2047
 2004f4c:	1906703a 	and	r3,r3,r4
 2004f50:	800d883a 	mov	r6,r16
 2004f54:	003fe906 	br	2004efc <__alt_mem_epcs_flash_controller_0+0xfd003efc>
 2004f58:	000d883a 	mov	r6,zero
 2004f5c:	000b883a 	mov	r5,zero
 2004f60:	0007883a 	mov	r3,zero
 2004f64:	0005883a 	mov	r2,zero
 2004f68:	003fe406 	br	2004efc <__alt_mem_epcs_flash_controller_0+0xfd003efc>
 2004f6c:	0123c83a 	sub	r17,zero,r4
 2004f70:	003fd106 	br	2004eb8 <__alt_mem_epcs_flash_controller_0+0xfd003eb8>

02004f74 <__clzsi2>:
 2004f74:	00bfffd4 	movui	r2,65535
 2004f78:	11000536 	bltu	r2,r4,2004f90 <__clzsi2+0x1c>
 2004f7c:	00803fc4 	movi	r2,255
 2004f80:	11000f36 	bltu	r2,r4,2004fc0 <__clzsi2+0x4c>
 2004f84:	00800804 	movi	r2,32
 2004f88:	0007883a 	mov	r3,zero
 2004f8c:	00000506 	br	2004fa4 <__clzsi2+0x30>
 2004f90:	00804034 	movhi	r2,256
 2004f94:	10bfffc4 	addi	r2,r2,-1
 2004f98:	11000c2e 	bgeu	r2,r4,2004fcc <__clzsi2+0x58>
 2004f9c:	00800204 	movi	r2,8
 2004fa0:	00c00604 	movi	r3,24
 2004fa4:	20c8d83a 	srl	r4,r4,r3
 2004fa8:	00c08134 	movhi	r3,516
 2004fac:	18f09344 	addi	r3,r3,-15795
 2004fb0:	1909883a 	add	r4,r3,r4
 2004fb4:	20c00003 	ldbu	r3,0(r4)
 2004fb8:	10c5c83a 	sub	r2,r2,r3
 2004fbc:	f800283a 	ret
 2004fc0:	00800604 	movi	r2,24
 2004fc4:	00c00204 	movi	r3,8
 2004fc8:	003ff606 	br	2004fa4 <__alt_mem_epcs_flash_controller_0+0xfd003fa4>
 2004fcc:	00800404 	movi	r2,16
 2004fd0:	1007883a 	mov	r3,r2
 2004fd4:	003ff306 	br	2004fa4 <__alt_mem_epcs_flash_controller_0+0xfd003fa4>

02004fd8 <__divsi3>:
 2004fd8:	20001b16 	blt	r4,zero,2005048 <__divsi3+0x70>
 2004fdc:	000f883a 	mov	r7,zero
 2004fe0:	28001616 	blt	r5,zero,200503c <__divsi3+0x64>
 2004fe4:	200d883a 	mov	r6,r4
 2004fe8:	29001a2e 	bgeu	r5,r4,2005054 <__divsi3+0x7c>
 2004fec:	00800804 	movi	r2,32
 2004ff0:	00c00044 	movi	r3,1
 2004ff4:	00000106 	br	2004ffc <__divsi3+0x24>
 2004ff8:	10000d26 	beq	r2,zero,2005030 <__divsi3+0x58>
 2004ffc:	294b883a 	add	r5,r5,r5
 2005000:	10bfffc4 	addi	r2,r2,-1
 2005004:	18c7883a 	add	r3,r3,r3
 2005008:	293ffb36 	bltu	r5,r4,2004ff8 <__alt_mem_epcs_flash_controller_0+0xfd003ff8>
 200500c:	0005883a 	mov	r2,zero
 2005010:	18000726 	beq	r3,zero,2005030 <__divsi3+0x58>
 2005014:	0005883a 	mov	r2,zero
 2005018:	31400236 	bltu	r6,r5,2005024 <__divsi3+0x4c>
 200501c:	314dc83a 	sub	r6,r6,r5
 2005020:	10c4b03a 	or	r2,r2,r3
 2005024:	1806d07a 	srli	r3,r3,1
 2005028:	280ad07a 	srli	r5,r5,1
 200502c:	183ffa1e 	bne	r3,zero,2005018 <__alt_mem_epcs_flash_controller_0+0xfd004018>
 2005030:	38000126 	beq	r7,zero,2005038 <__divsi3+0x60>
 2005034:	0085c83a 	sub	r2,zero,r2
 2005038:	f800283a 	ret
 200503c:	014bc83a 	sub	r5,zero,r5
 2005040:	39c0005c 	xori	r7,r7,1
 2005044:	003fe706 	br	2004fe4 <__alt_mem_epcs_flash_controller_0+0xfd003fe4>
 2005048:	0109c83a 	sub	r4,zero,r4
 200504c:	01c00044 	movi	r7,1
 2005050:	003fe306 	br	2004fe0 <__alt_mem_epcs_flash_controller_0+0xfd003fe0>
 2005054:	00c00044 	movi	r3,1
 2005058:	003fee06 	br	2005014 <__alt_mem_epcs_flash_controller_0+0xfd004014>

0200505c <__modsi3>:
 200505c:	20001716 	blt	r4,zero,20050bc <__modsi3+0x60>
 2005060:	000f883a 	mov	r7,zero
 2005064:	2005883a 	mov	r2,r4
 2005068:	28001216 	blt	r5,zero,20050b4 <__modsi3+0x58>
 200506c:	2900162e 	bgeu	r5,r4,20050c8 <__modsi3+0x6c>
 2005070:	01800804 	movi	r6,32
 2005074:	00c00044 	movi	r3,1
 2005078:	00000106 	br	2005080 <__modsi3+0x24>
 200507c:	30000a26 	beq	r6,zero,20050a8 <__modsi3+0x4c>
 2005080:	294b883a 	add	r5,r5,r5
 2005084:	31bfffc4 	addi	r6,r6,-1
 2005088:	18c7883a 	add	r3,r3,r3
 200508c:	293ffb36 	bltu	r5,r4,200507c <__alt_mem_epcs_flash_controller_0+0xfd00407c>
 2005090:	18000526 	beq	r3,zero,20050a8 <__modsi3+0x4c>
 2005094:	1806d07a 	srli	r3,r3,1
 2005098:	11400136 	bltu	r2,r5,20050a0 <__modsi3+0x44>
 200509c:	1145c83a 	sub	r2,r2,r5
 20050a0:	280ad07a 	srli	r5,r5,1
 20050a4:	183ffb1e 	bne	r3,zero,2005094 <__alt_mem_epcs_flash_controller_0+0xfd004094>
 20050a8:	38000126 	beq	r7,zero,20050b0 <__modsi3+0x54>
 20050ac:	0085c83a 	sub	r2,zero,r2
 20050b0:	f800283a 	ret
 20050b4:	014bc83a 	sub	r5,zero,r5
 20050b8:	003fec06 	br	200506c <__alt_mem_epcs_flash_controller_0+0xfd00406c>
 20050bc:	0109c83a 	sub	r4,zero,r4
 20050c0:	01c00044 	movi	r7,1
 20050c4:	003fe706 	br	2005064 <__alt_mem_epcs_flash_controller_0+0xfd004064>
 20050c8:	00c00044 	movi	r3,1
 20050cc:	003ff106 	br	2005094 <__alt_mem_epcs_flash_controller_0+0xfd004094>

020050d0 <__udivsi3>:
 20050d0:	200d883a 	mov	r6,r4
 20050d4:	2900152e 	bgeu	r5,r4,200512c <__udivsi3+0x5c>
 20050d8:	28001416 	blt	r5,zero,200512c <__udivsi3+0x5c>
 20050dc:	00800804 	movi	r2,32
 20050e0:	00c00044 	movi	r3,1
 20050e4:	00000206 	br	20050f0 <__udivsi3+0x20>
 20050e8:	10000e26 	beq	r2,zero,2005124 <__udivsi3+0x54>
 20050ec:	28000516 	blt	r5,zero,2005104 <__udivsi3+0x34>
 20050f0:	294b883a 	add	r5,r5,r5
 20050f4:	10bfffc4 	addi	r2,r2,-1
 20050f8:	18c7883a 	add	r3,r3,r3
 20050fc:	293ffa36 	bltu	r5,r4,20050e8 <__alt_mem_epcs_flash_controller_0+0xfd0040e8>
 2005100:	18000826 	beq	r3,zero,2005124 <__udivsi3+0x54>
 2005104:	0005883a 	mov	r2,zero
 2005108:	31400236 	bltu	r6,r5,2005114 <__udivsi3+0x44>
 200510c:	314dc83a 	sub	r6,r6,r5
 2005110:	10c4b03a 	or	r2,r2,r3
 2005114:	1806d07a 	srli	r3,r3,1
 2005118:	280ad07a 	srli	r5,r5,1
 200511c:	183ffa1e 	bne	r3,zero,2005108 <__alt_mem_epcs_flash_controller_0+0xfd004108>
 2005120:	f800283a 	ret
 2005124:	0005883a 	mov	r2,zero
 2005128:	f800283a 	ret
 200512c:	00c00044 	movi	r3,1
 2005130:	003ff406 	br	2005104 <__alt_mem_epcs_flash_controller_0+0xfd004104>

02005134 <__umodsi3>:
 2005134:	2005883a 	mov	r2,r4
 2005138:	2900122e 	bgeu	r5,r4,2005184 <__umodsi3+0x50>
 200513c:	28001116 	blt	r5,zero,2005184 <__umodsi3+0x50>
 2005140:	01800804 	movi	r6,32
 2005144:	00c00044 	movi	r3,1
 2005148:	00000206 	br	2005154 <__umodsi3+0x20>
 200514c:	30000c26 	beq	r6,zero,2005180 <__umodsi3+0x4c>
 2005150:	28000516 	blt	r5,zero,2005168 <__umodsi3+0x34>
 2005154:	294b883a 	add	r5,r5,r5
 2005158:	31bfffc4 	addi	r6,r6,-1
 200515c:	18c7883a 	add	r3,r3,r3
 2005160:	293ffa36 	bltu	r5,r4,200514c <__alt_mem_epcs_flash_controller_0+0xfd00414c>
 2005164:	18000626 	beq	r3,zero,2005180 <__umodsi3+0x4c>
 2005168:	1806d07a 	srli	r3,r3,1
 200516c:	11400136 	bltu	r2,r5,2005174 <__umodsi3+0x40>
 2005170:	1145c83a 	sub	r2,r2,r5
 2005174:	280ad07a 	srli	r5,r5,1
 2005178:	183ffb1e 	bne	r3,zero,2005168 <__alt_mem_epcs_flash_controller_0+0xfd004168>
 200517c:	f800283a 	ret
 2005180:	f800283a 	ret
 2005184:	00c00044 	movi	r3,1
 2005188:	003ff706 	br	2005168 <__alt_mem_epcs_flash_controller_0+0xfd004168>

0200518c <calloc>:
 200518c:	00808134 	movhi	r2,516
 2005190:	10b84a04 	addi	r2,r2,-7896
 2005194:	280d883a 	mov	r6,r5
 2005198:	200b883a 	mov	r5,r4
 200519c:	11000017 	ldw	r4,0(r2)
 20051a0:	20051a41 	jmpi	20051a4 <_calloc_r>

020051a4 <_calloc_r>:
 20051a4:	298b383a 	mul	r5,r5,r6
 20051a8:	defffe04 	addi	sp,sp,-8
 20051ac:	dfc00115 	stw	ra,4(sp)
 20051b0:	dc000015 	stw	r16,0(sp)
 20051b4:	20052780 	call	2005278 <_malloc_r>
 20051b8:	10002926 	beq	r2,zero,2005260 <_calloc_r+0xbc>
 20051bc:	11bfff17 	ldw	r6,-4(r2)
 20051c0:	1021883a 	mov	r16,r2
 20051c4:	00bfff04 	movi	r2,-4
 20051c8:	308c703a 	and	r6,r6,r2
 20051cc:	00c00904 	movi	r3,36
 20051d0:	308d883a 	add	r6,r6,r2
 20051d4:	19801636 	bltu	r3,r6,2005230 <_calloc_r+0x8c>
 20051d8:	008004c4 	movi	r2,19
 20051dc:	11800b2e 	bgeu	r2,r6,200520c <_calloc_r+0x68>
 20051e0:	80000015 	stw	zero,0(r16)
 20051e4:	80000115 	stw	zero,4(r16)
 20051e8:	008006c4 	movi	r2,27
 20051ec:	11801a2e 	bgeu	r2,r6,2005258 <_calloc_r+0xb4>
 20051f0:	80000215 	stw	zero,8(r16)
 20051f4:	80000315 	stw	zero,12(r16)
 20051f8:	30c0151e 	bne	r6,r3,2005250 <_calloc_r+0xac>
 20051fc:	80000415 	stw	zero,16(r16)
 2005200:	80800604 	addi	r2,r16,24
 2005204:	80000515 	stw	zero,20(r16)
 2005208:	00000106 	br	2005210 <_calloc_r+0x6c>
 200520c:	8005883a 	mov	r2,r16
 2005210:	10000015 	stw	zero,0(r2)
 2005214:	10000115 	stw	zero,4(r2)
 2005218:	10000215 	stw	zero,8(r2)
 200521c:	8005883a 	mov	r2,r16
 2005220:	dfc00117 	ldw	ra,4(sp)
 2005224:	dc000017 	ldw	r16,0(sp)
 2005228:	dec00204 	addi	sp,sp,8
 200522c:	f800283a 	ret
 2005230:	000b883a 	mov	r5,zero
 2005234:	8009883a 	mov	r4,r16
 2005238:	2005a840 	call	2005a84 <memset>
 200523c:	8005883a 	mov	r2,r16
 2005240:	dfc00117 	ldw	ra,4(sp)
 2005244:	dc000017 	ldw	r16,0(sp)
 2005248:	dec00204 	addi	sp,sp,8
 200524c:	f800283a 	ret
 2005250:	80800404 	addi	r2,r16,16
 2005254:	003fee06 	br	2005210 <__alt_mem_epcs_flash_controller_0+0xfd004210>
 2005258:	80800204 	addi	r2,r16,8
 200525c:	003fec06 	br	2005210 <__alt_mem_epcs_flash_controller_0+0xfd004210>
 2005260:	0005883a 	mov	r2,zero
 2005264:	003fee06 	br	2005220 <__alt_mem_epcs_flash_controller_0+0xfd004220>

02005268 <__errno>:
 2005268:	00808134 	movhi	r2,516
 200526c:	10b84a04 	addi	r2,r2,-7896
 2005270:	10800017 	ldw	r2,0(r2)
 2005274:	f800283a 	ret

02005278 <_malloc_r>:
 2005278:	defff504 	addi	sp,sp,-44
 200527c:	dc800315 	stw	r18,12(sp)
 2005280:	dfc00a15 	stw	ra,40(sp)
 2005284:	df000915 	stw	fp,36(sp)
 2005288:	ddc00815 	stw	r23,32(sp)
 200528c:	dd800715 	stw	r22,28(sp)
 2005290:	dd400615 	stw	r21,24(sp)
 2005294:	dd000515 	stw	r20,20(sp)
 2005298:	dcc00415 	stw	r19,16(sp)
 200529c:	dc400215 	stw	r17,8(sp)
 20052a0:	dc000115 	stw	r16,4(sp)
 20052a4:	288002c4 	addi	r2,r5,11
 20052a8:	00c00584 	movi	r3,22
 20052ac:	2025883a 	mov	r18,r4
 20052b0:	18807f2e 	bgeu	r3,r2,20054b0 <_malloc_r+0x238>
 20052b4:	047ffe04 	movi	r17,-8
 20052b8:	1462703a 	and	r17,r2,r17
 20052bc:	8800a316 	blt	r17,zero,200554c <_malloc_r+0x2d4>
 20052c0:	8940a236 	bltu	r17,r5,200554c <_malloc_r+0x2d4>
 20052c4:	20131880 	call	2013188 <__malloc_lock>
 20052c8:	00807dc4 	movi	r2,503
 20052cc:	1441e92e 	bgeu	r2,r17,2005a74 <_malloc_r+0x7fc>
 20052d0:	8804d27a 	srli	r2,r17,9
 20052d4:	1000a126 	beq	r2,zero,200555c <_malloc_r+0x2e4>
 20052d8:	00c00104 	movi	r3,4
 20052dc:	18811e36 	bltu	r3,r2,2005758 <_malloc_r+0x4e0>
 20052e0:	8804d1ba 	srli	r2,r17,6
 20052e4:	12000e44 	addi	r8,r2,57
 20052e8:	11c00e04 	addi	r7,r2,56
 20052ec:	4209883a 	add	r4,r8,r8
 20052f0:	04c08134 	movhi	r19,516
 20052f4:	2109883a 	add	r4,r4,r4
 20052f8:	9cf27304 	addi	r19,r19,-13876
 20052fc:	2109883a 	add	r4,r4,r4
 2005300:	9909883a 	add	r4,r19,r4
 2005304:	24000117 	ldw	r16,4(r4)
 2005308:	213ffe04 	addi	r4,r4,-8
 200530c:	24009726 	beq	r4,r16,200556c <_malloc_r+0x2f4>
 2005310:	80800117 	ldw	r2,4(r16)
 2005314:	01bfff04 	movi	r6,-4
 2005318:	014003c4 	movi	r5,15
 200531c:	1184703a 	and	r2,r2,r6
 2005320:	1447c83a 	sub	r3,r2,r17
 2005324:	28c00716 	blt	r5,r3,2005344 <_malloc_r+0xcc>
 2005328:	1800920e 	bge	r3,zero,2005574 <_malloc_r+0x2fc>
 200532c:	84000317 	ldw	r16,12(r16)
 2005330:	24008e26 	beq	r4,r16,200556c <_malloc_r+0x2f4>
 2005334:	80800117 	ldw	r2,4(r16)
 2005338:	1184703a 	and	r2,r2,r6
 200533c:	1447c83a 	sub	r3,r2,r17
 2005340:	28fff90e 	bge	r5,r3,2005328 <__alt_mem_epcs_flash_controller_0+0xfd004328>
 2005344:	3809883a 	mov	r4,r7
 2005348:	01808134 	movhi	r6,516
 200534c:	9c000417 	ldw	r16,16(r19)
 2005350:	31b27304 	addi	r6,r6,-13876
 2005354:	32000204 	addi	r8,r6,8
 2005358:	82013426 	beq	r16,r8,200582c <_malloc_r+0x5b4>
 200535c:	80c00117 	ldw	r3,4(r16)
 2005360:	00bfff04 	movi	r2,-4
 2005364:	188e703a 	and	r7,r3,r2
 2005368:	3c45c83a 	sub	r2,r7,r17
 200536c:	00c003c4 	movi	r3,15
 2005370:	18811f16 	blt	r3,r2,20057f0 <_malloc_r+0x578>
 2005374:	32000515 	stw	r8,20(r6)
 2005378:	32000415 	stw	r8,16(r6)
 200537c:	10007f0e 	bge	r2,zero,200557c <_malloc_r+0x304>
 2005380:	00807fc4 	movi	r2,511
 2005384:	11c0fd36 	bltu	r2,r7,200577c <_malloc_r+0x504>
 2005388:	3806d0fa 	srli	r3,r7,3
 200538c:	01c00044 	movi	r7,1
 2005390:	30800117 	ldw	r2,4(r6)
 2005394:	19400044 	addi	r5,r3,1
 2005398:	294b883a 	add	r5,r5,r5
 200539c:	1807d0ba 	srai	r3,r3,2
 20053a0:	294b883a 	add	r5,r5,r5
 20053a4:	294b883a 	add	r5,r5,r5
 20053a8:	298b883a 	add	r5,r5,r6
 20053ac:	38c6983a 	sll	r3,r7,r3
 20053b0:	29c00017 	ldw	r7,0(r5)
 20053b4:	2a7ffe04 	addi	r9,r5,-8
 20053b8:	1886b03a 	or	r3,r3,r2
 20053bc:	82400315 	stw	r9,12(r16)
 20053c0:	81c00215 	stw	r7,8(r16)
 20053c4:	30c00115 	stw	r3,4(r6)
 20053c8:	2c000015 	stw	r16,0(r5)
 20053cc:	3c000315 	stw	r16,12(r7)
 20053d0:	2005d0ba 	srai	r2,r4,2
 20053d4:	01400044 	movi	r5,1
 20053d8:	288a983a 	sll	r5,r5,r2
 20053dc:	19406f36 	bltu	r3,r5,200559c <_malloc_r+0x324>
 20053e0:	28c4703a 	and	r2,r5,r3
 20053e4:	10000a1e 	bne	r2,zero,2005410 <_malloc_r+0x198>
 20053e8:	00bfff04 	movi	r2,-4
 20053ec:	294b883a 	add	r5,r5,r5
 20053f0:	2088703a 	and	r4,r4,r2
 20053f4:	28c4703a 	and	r2,r5,r3
 20053f8:	21000104 	addi	r4,r4,4
 20053fc:	1000041e 	bne	r2,zero,2005410 <_malloc_r+0x198>
 2005400:	294b883a 	add	r5,r5,r5
 2005404:	28c4703a 	and	r2,r5,r3
 2005408:	21000104 	addi	r4,r4,4
 200540c:	103ffc26 	beq	r2,zero,2005400 <__alt_mem_epcs_flash_controller_0+0xfd004400>
 2005410:	02bfff04 	movi	r10,-4
 2005414:	024003c4 	movi	r9,15
 2005418:	21800044 	addi	r6,r4,1
 200541c:	318d883a 	add	r6,r6,r6
 2005420:	318d883a 	add	r6,r6,r6
 2005424:	318d883a 	add	r6,r6,r6
 2005428:	998d883a 	add	r6,r19,r6
 200542c:	333ffe04 	addi	r12,r6,-8
 2005430:	2017883a 	mov	r11,r4
 2005434:	31800104 	addi	r6,r6,4
 2005438:	34000017 	ldw	r16,0(r6)
 200543c:	31fffd04 	addi	r7,r6,-12
 2005440:	81c0041e 	bne	r16,r7,2005454 <_malloc_r+0x1dc>
 2005444:	0000fb06 	br	2005834 <_malloc_r+0x5bc>
 2005448:	1801030e 	bge	r3,zero,2005858 <_malloc_r+0x5e0>
 200544c:	84000317 	ldw	r16,12(r16)
 2005450:	81c0f826 	beq	r16,r7,2005834 <_malloc_r+0x5bc>
 2005454:	80800117 	ldw	r2,4(r16)
 2005458:	1284703a 	and	r2,r2,r10
 200545c:	1447c83a 	sub	r3,r2,r17
 2005460:	48fff90e 	bge	r9,r3,2005448 <__alt_mem_epcs_flash_controller_0+0xfd004448>
 2005464:	80800317 	ldw	r2,12(r16)
 2005468:	81000217 	ldw	r4,8(r16)
 200546c:	89400054 	ori	r5,r17,1
 2005470:	81400115 	stw	r5,4(r16)
 2005474:	20800315 	stw	r2,12(r4)
 2005478:	11000215 	stw	r4,8(r2)
 200547c:	8463883a 	add	r17,r16,r17
 2005480:	9c400515 	stw	r17,20(r19)
 2005484:	9c400415 	stw	r17,16(r19)
 2005488:	18800054 	ori	r2,r3,1
 200548c:	88800115 	stw	r2,4(r17)
 2005490:	8a000315 	stw	r8,12(r17)
 2005494:	8a000215 	stw	r8,8(r17)
 2005498:	88e3883a 	add	r17,r17,r3
 200549c:	88c00015 	stw	r3,0(r17)
 20054a0:	9009883a 	mov	r4,r18
 20054a4:	20131ac0 	call	20131ac <__malloc_unlock>
 20054a8:	80800204 	addi	r2,r16,8
 20054ac:	00001b06 	br	200551c <_malloc_r+0x2a4>
 20054b0:	04400404 	movi	r17,16
 20054b4:	89402536 	bltu	r17,r5,200554c <_malloc_r+0x2d4>
 20054b8:	20131880 	call	2013188 <__malloc_lock>
 20054bc:	00800184 	movi	r2,6
 20054c0:	01000084 	movi	r4,2
 20054c4:	04c08134 	movhi	r19,516
 20054c8:	1085883a 	add	r2,r2,r2
 20054cc:	9cf27304 	addi	r19,r19,-13876
 20054d0:	1085883a 	add	r2,r2,r2
 20054d4:	9885883a 	add	r2,r19,r2
 20054d8:	14000117 	ldw	r16,4(r2)
 20054dc:	10fffe04 	addi	r3,r2,-8
 20054e0:	80c0d926 	beq	r16,r3,2005848 <_malloc_r+0x5d0>
 20054e4:	80c00117 	ldw	r3,4(r16)
 20054e8:	81000317 	ldw	r4,12(r16)
 20054ec:	00bfff04 	movi	r2,-4
 20054f0:	1884703a 	and	r2,r3,r2
 20054f4:	81400217 	ldw	r5,8(r16)
 20054f8:	8085883a 	add	r2,r16,r2
 20054fc:	10c00117 	ldw	r3,4(r2)
 2005500:	29000315 	stw	r4,12(r5)
 2005504:	21400215 	stw	r5,8(r4)
 2005508:	18c00054 	ori	r3,r3,1
 200550c:	10c00115 	stw	r3,4(r2)
 2005510:	9009883a 	mov	r4,r18
 2005514:	20131ac0 	call	20131ac <__malloc_unlock>
 2005518:	80800204 	addi	r2,r16,8
 200551c:	dfc00a17 	ldw	ra,40(sp)
 2005520:	df000917 	ldw	fp,36(sp)
 2005524:	ddc00817 	ldw	r23,32(sp)
 2005528:	dd800717 	ldw	r22,28(sp)
 200552c:	dd400617 	ldw	r21,24(sp)
 2005530:	dd000517 	ldw	r20,20(sp)
 2005534:	dcc00417 	ldw	r19,16(sp)
 2005538:	dc800317 	ldw	r18,12(sp)
 200553c:	dc400217 	ldw	r17,8(sp)
 2005540:	dc000117 	ldw	r16,4(sp)
 2005544:	dec00b04 	addi	sp,sp,44
 2005548:	f800283a 	ret
 200554c:	00800304 	movi	r2,12
 2005550:	90800015 	stw	r2,0(r18)
 2005554:	0005883a 	mov	r2,zero
 2005558:	003ff006 	br	200551c <__alt_mem_epcs_flash_controller_0+0xfd00451c>
 200555c:	01002004 	movi	r4,128
 2005560:	02001004 	movi	r8,64
 2005564:	01c00fc4 	movi	r7,63
 2005568:	003f6106 	br	20052f0 <__alt_mem_epcs_flash_controller_0+0xfd0042f0>
 200556c:	4009883a 	mov	r4,r8
 2005570:	003f7506 	br	2005348 <__alt_mem_epcs_flash_controller_0+0xfd004348>
 2005574:	81000317 	ldw	r4,12(r16)
 2005578:	003fde06 	br	20054f4 <__alt_mem_epcs_flash_controller_0+0xfd0044f4>
 200557c:	81c5883a 	add	r2,r16,r7
 2005580:	11400117 	ldw	r5,4(r2)
 2005584:	9009883a 	mov	r4,r18
 2005588:	29400054 	ori	r5,r5,1
 200558c:	11400115 	stw	r5,4(r2)
 2005590:	20131ac0 	call	20131ac <__malloc_unlock>
 2005594:	80800204 	addi	r2,r16,8
 2005598:	003fe006 	br	200551c <__alt_mem_epcs_flash_controller_0+0xfd00451c>
 200559c:	9c000217 	ldw	r16,8(r19)
 20055a0:	00bfff04 	movi	r2,-4
 20055a4:	85800117 	ldw	r22,4(r16)
 20055a8:	b0ac703a 	and	r22,r22,r2
 20055ac:	b4400336 	bltu	r22,r17,20055bc <_malloc_r+0x344>
 20055b0:	b445c83a 	sub	r2,r22,r17
 20055b4:	00c003c4 	movi	r3,15
 20055b8:	18805d16 	blt	r3,r2,2005730 <_malloc_r+0x4b8>
 20055bc:	05c08134 	movhi	r23,516
 20055c0:	00808134 	movhi	r2,516
 20055c4:	10b85d04 	addi	r2,r2,-7820
 20055c8:	bdf84b04 	addi	r23,r23,-7892
 20055cc:	15400017 	ldw	r21,0(r2)
 20055d0:	b8c00017 	ldw	r3,0(r23)
 20055d4:	00bfffc4 	movi	r2,-1
 20055d8:	858d883a 	add	r6,r16,r22
 20055dc:	8d6b883a 	add	r21,r17,r21
 20055e0:	1880ea26 	beq	r3,r2,200598c <_malloc_r+0x714>
 20055e4:	ad4403c4 	addi	r21,r21,4111
 20055e8:	00bc0004 	movi	r2,-4096
 20055ec:	a8aa703a 	and	r21,r21,r2
 20055f0:	a80b883a 	mov	r5,r21
 20055f4:	9009883a 	mov	r4,r18
 20055f8:	d9800015 	stw	r6,0(sp)
 20055fc:	2005d680 	call	2005d68 <_sbrk_r>
 2005600:	1029883a 	mov	r20,r2
 2005604:	00bfffc4 	movi	r2,-1
 2005608:	d9800017 	ldw	r6,0(sp)
 200560c:	a080e826 	beq	r20,r2,20059b0 <_malloc_r+0x738>
 2005610:	a180a636 	bltu	r20,r6,20058ac <_malloc_r+0x634>
 2005614:	07008134 	movhi	fp,516
 2005618:	e7386904 	addi	fp,fp,-7772
 200561c:	e0800017 	ldw	r2,0(fp)
 2005620:	a887883a 	add	r3,r21,r2
 2005624:	e0c00015 	stw	r3,0(fp)
 2005628:	3500e626 	beq	r6,r20,20059c4 <_malloc_r+0x74c>
 200562c:	b9000017 	ldw	r4,0(r23)
 2005630:	00bfffc4 	movi	r2,-1
 2005634:	2080ee26 	beq	r4,r2,20059f0 <_malloc_r+0x778>
 2005638:	a185c83a 	sub	r2,r20,r6
 200563c:	10c5883a 	add	r2,r2,r3
 2005640:	e0800015 	stw	r2,0(fp)
 2005644:	a0c001cc 	andi	r3,r20,7
 2005648:	1800bc26 	beq	r3,zero,200593c <_malloc_r+0x6c4>
 200564c:	a0e9c83a 	sub	r20,r20,r3
 2005650:	00840204 	movi	r2,4104
 2005654:	a5000204 	addi	r20,r20,8
 2005658:	10c7c83a 	sub	r3,r2,r3
 200565c:	a545883a 	add	r2,r20,r21
 2005660:	1083ffcc 	andi	r2,r2,4095
 2005664:	18abc83a 	sub	r21,r3,r2
 2005668:	a80b883a 	mov	r5,r21
 200566c:	9009883a 	mov	r4,r18
 2005670:	2005d680 	call	2005d68 <_sbrk_r>
 2005674:	00ffffc4 	movi	r3,-1
 2005678:	10c0e126 	beq	r2,r3,2005a00 <_malloc_r+0x788>
 200567c:	1505c83a 	sub	r2,r2,r20
 2005680:	1545883a 	add	r2,r2,r21
 2005684:	10800054 	ori	r2,r2,1
 2005688:	e0c00017 	ldw	r3,0(fp)
 200568c:	9d000215 	stw	r20,8(r19)
 2005690:	a0800115 	stw	r2,4(r20)
 2005694:	a8c7883a 	add	r3,r21,r3
 2005698:	e0c00015 	stw	r3,0(fp)
 200569c:	84c00e26 	beq	r16,r19,20056d8 <_malloc_r+0x460>
 20056a0:	018003c4 	movi	r6,15
 20056a4:	3580a72e 	bgeu	r6,r22,2005944 <_malloc_r+0x6cc>
 20056a8:	81400117 	ldw	r5,4(r16)
 20056ac:	013ffe04 	movi	r4,-8
 20056b0:	b0bffd04 	addi	r2,r22,-12
 20056b4:	1104703a 	and	r2,r2,r4
 20056b8:	2900004c 	andi	r4,r5,1
 20056bc:	2088b03a 	or	r4,r4,r2
 20056c0:	81000115 	stw	r4,4(r16)
 20056c4:	01400144 	movi	r5,5
 20056c8:	8089883a 	add	r4,r16,r2
 20056cc:	21400115 	stw	r5,4(r4)
 20056d0:	21400215 	stw	r5,8(r4)
 20056d4:	3080cd36 	bltu	r6,r2,2005a0c <_malloc_r+0x794>
 20056d8:	00808134 	movhi	r2,516
 20056dc:	10b85c04 	addi	r2,r2,-7824
 20056e0:	11000017 	ldw	r4,0(r2)
 20056e4:	20c0012e 	bgeu	r4,r3,20056ec <_malloc_r+0x474>
 20056e8:	10c00015 	stw	r3,0(r2)
 20056ec:	00808134 	movhi	r2,516
 20056f0:	10b85b04 	addi	r2,r2,-7828
 20056f4:	11000017 	ldw	r4,0(r2)
 20056f8:	9c000217 	ldw	r16,8(r19)
 20056fc:	20c0012e 	bgeu	r4,r3,2005704 <_malloc_r+0x48c>
 2005700:	10c00015 	stw	r3,0(r2)
 2005704:	80c00117 	ldw	r3,4(r16)
 2005708:	00bfff04 	movi	r2,-4
 200570c:	1886703a 	and	r3,r3,r2
 2005710:	1c45c83a 	sub	r2,r3,r17
 2005714:	1c400236 	bltu	r3,r17,2005720 <_malloc_r+0x4a8>
 2005718:	00c003c4 	movi	r3,15
 200571c:	18800416 	blt	r3,r2,2005730 <_malloc_r+0x4b8>
 2005720:	9009883a 	mov	r4,r18
 2005724:	20131ac0 	call	20131ac <__malloc_unlock>
 2005728:	0005883a 	mov	r2,zero
 200572c:	003f7b06 	br	200551c <__alt_mem_epcs_flash_controller_0+0xfd00451c>
 2005730:	88c00054 	ori	r3,r17,1
 2005734:	80c00115 	stw	r3,4(r16)
 2005738:	8463883a 	add	r17,r16,r17
 200573c:	10800054 	ori	r2,r2,1
 2005740:	9c400215 	stw	r17,8(r19)
 2005744:	88800115 	stw	r2,4(r17)
 2005748:	9009883a 	mov	r4,r18
 200574c:	20131ac0 	call	20131ac <__malloc_unlock>
 2005750:	80800204 	addi	r2,r16,8
 2005754:	003f7106 	br	200551c <__alt_mem_epcs_flash_controller_0+0xfd00451c>
 2005758:	00c00504 	movi	r3,20
 200575c:	18804a2e 	bgeu	r3,r2,2005888 <_malloc_r+0x610>
 2005760:	00c01504 	movi	r3,84
 2005764:	18806e36 	bltu	r3,r2,2005920 <_malloc_r+0x6a8>
 2005768:	8804d33a 	srli	r2,r17,12
 200576c:	12001bc4 	addi	r8,r2,111
 2005770:	11c01b84 	addi	r7,r2,110
 2005774:	4209883a 	add	r4,r8,r8
 2005778:	003edd06 	br	20052f0 <__alt_mem_epcs_flash_controller_0+0xfd0042f0>
 200577c:	3804d27a 	srli	r2,r7,9
 2005780:	00c00104 	movi	r3,4
 2005784:	1880442e 	bgeu	r3,r2,2005898 <_malloc_r+0x620>
 2005788:	00c00504 	movi	r3,20
 200578c:	18808136 	bltu	r3,r2,2005994 <_malloc_r+0x71c>
 2005790:	11401704 	addi	r5,r2,92
 2005794:	10c016c4 	addi	r3,r2,91
 2005798:	294b883a 	add	r5,r5,r5
 200579c:	294b883a 	add	r5,r5,r5
 20057a0:	294b883a 	add	r5,r5,r5
 20057a4:	994b883a 	add	r5,r19,r5
 20057a8:	28800017 	ldw	r2,0(r5)
 20057ac:	01808134 	movhi	r6,516
 20057b0:	297ffe04 	addi	r5,r5,-8
 20057b4:	31b27304 	addi	r6,r6,-13876
 20057b8:	28806526 	beq	r5,r2,2005950 <_malloc_r+0x6d8>
 20057bc:	01bfff04 	movi	r6,-4
 20057c0:	10c00117 	ldw	r3,4(r2)
 20057c4:	1986703a 	and	r3,r3,r6
 20057c8:	38c0022e 	bgeu	r7,r3,20057d4 <_malloc_r+0x55c>
 20057cc:	10800217 	ldw	r2,8(r2)
 20057d0:	28bffb1e 	bne	r5,r2,20057c0 <__alt_mem_epcs_flash_controller_0+0xfd0047c0>
 20057d4:	11400317 	ldw	r5,12(r2)
 20057d8:	98c00117 	ldw	r3,4(r19)
 20057dc:	81400315 	stw	r5,12(r16)
 20057e0:	80800215 	stw	r2,8(r16)
 20057e4:	2c000215 	stw	r16,8(r5)
 20057e8:	14000315 	stw	r16,12(r2)
 20057ec:	003ef806 	br	20053d0 <__alt_mem_epcs_flash_controller_0+0xfd0043d0>
 20057f0:	88c00054 	ori	r3,r17,1
 20057f4:	80c00115 	stw	r3,4(r16)
 20057f8:	8463883a 	add	r17,r16,r17
 20057fc:	34400515 	stw	r17,20(r6)
 2005800:	34400415 	stw	r17,16(r6)
 2005804:	10c00054 	ori	r3,r2,1
 2005808:	8a000315 	stw	r8,12(r17)
 200580c:	8a000215 	stw	r8,8(r17)
 2005810:	88c00115 	stw	r3,4(r17)
 2005814:	88a3883a 	add	r17,r17,r2
 2005818:	88800015 	stw	r2,0(r17)
 200581c:	9009883a 	mov	r4,r18
 2005820:	20131ac0 	call	20131ac <__malloc_unlock>
 2005824:	80800204 	addi	r2,r16,8
 2005828:	003f3c06 	br	200551c <__alt_mem_epcs_flash_controller_0+0xfd00451c>
 200582c:	30c00117 	ldw	r3,4(r6)
 2005830:	003ee706 	br	20053d0 <__alt_mem_epcs_flash_controller_0+0xfd0043d0>
 2005834:	5ac00044 	addi	r11,r11,1
 2005838:	588000cc 	andi	r2,r11,3
 200583c:	31800204 	addi	r6,r6,8
 2005840:	103efd1e 	bne	r2,zero,2005438 <__alt_mem_epcs_flash_controller_0+0xfd004438>
 2005844:	00002406 	br	20058d8 <_malloc_r+0x660>
 2005848:	14000317 	ldw	r16,12(r2)
 200584c:	143f251e 	bne	r2,r16,20054e4 <__alt_mem_epcs_flash_controller_0+0xfd0044e4>
 2005850:	21000084 	addi	r4,r4,2
 2005854:	003ebc06 	br	2005348 <__alt_mem_epcs_flash_controller_0+0xfd004348>
 2005858:	8085883a 	add	r2,r16,r2
 200585c:	10c00117 	ldw	r3,4(r2)
 2005860:	81000317 	ldw	r4,12(r16)
 2005864:	81400217 	ldw	r5,8(r16)
 2005868:	18c00054 	ori	r3,r3,1
 200586c:	10c00115 	stw	r3,4(r2)
 2005870:	29000315 	stw	r4,12(r5)
 2005874:	21400215 	stw	r5,8(r4)
 2005878:	9009883a 	mov	r4,r18
 200587c:	20131ac0 	call	20131ac <__malloc_unlock>
 2005880:	80800204 	addi	r2,r16,8
 2005884:	003f2506 	br	200551c <__alt_mem_epcs_flash_controller_0+0xfd00451c>
 2005888:	12001704 	addi	r8,r2,92
 200588c:	11c016c4 	addi	r7,r2,91
 2005890:	4209883a 	add	r4,r8,r8
 2005894:	003e9606 	br	20052f0 <__alt_mem_epcs_flash_controller_0+0xfd0042f0>
 2005898:	3804d1ba 	srli	r2,r7,6
 200589c:	11400e44 	addi	r5,r2,57
 20058a0:	10c00e04 	addi	r3,r2,56
 20058a4:	294b883a 	add	r5,r5,r5
 20058a8:	003fbc06 	br	200579c <__alt_mem_epcs_flash_controller_0+0xfd00479c>
 20058ac:	84ff5926 	beq	r16,r19,2005614 <__alt_mem_epcs_flash_controller_0+0xfd004614>
 20058b0:	00808134 	movhi	r2,516
 20058b4:	10b27304 	addi	r2,r2,-13876
 20058b8:	14000217 	ldw	r16,8(r2)
 20058bc:	00bfff04 	movi	r2,-4
 20058c0:	80c00117 	ldw	r3,4(r16)
 20058c4:	1886703a 	and	r3,r3,r2
 20058c8:	003f9106 	br	2005710 <__alt_mem_epcs_flash_controller_0+0xfd004710>
 20058cc:	60800217 	ldw	r2,8(r12)
 20058d0:	213fffc4 	addi	r4,r4,-1
 20058d4:	1300651e 	bne	r2,r12,2005a6c <_malloc_r+0x7f4>
 20058d8:	208000cc 	andi	r2,r4,3
 20058dc:	633ffe04 	addi	r12,r12,-8
 20058e0:	103ffa1e 	bne	r2,zero,20058cc <__alt_mem_epcs_flash_controller_0+0xfd0048cc>
 20058e4:	98800117 	ldw	r2,4(r19)
 20058e8:	0146303a 	nor	r3,zero,r5
 20058ec:	1884703a 	and	r2,r3,r2
 20058f0:	98800115 	stw	r2,4(r19)
 20058f4:	294b883a 	add	r5,r5,r5
 20058f8:	117f2836 	bltu	r2,r5,200559c <__alt_mem_epcs_flash_controller_0+0xfd00459c>
 20058fc:	283f2726 	beq	r5,zero,200559c <__alt_mem_epcs_flash_controller_0+0xfd00459c>
 2005900:	2886703a 	and	r3,r5,r2
 2005904:	5809883a 	mov	r4,r11
 2005908:	183ec31e 	bne	r3,zero,2005418 <__alt_mem_epcs_flash_controller_0+0xfd004418>
 200590c:	294b883a 	add	r5,r5,r5
 2005910:	2886703a 	and	r3,r5,r2
 2005914:	21000104 	addi	r4,r4,4
 2005918:	183ffc26 	beq	r3,zero,200590c <__alt_mem_epcs_flash_controller_0+0xfd00490c>
 200591c:	003ebe06 	br	2005418 <__alt_mem_epcs_flash_controller_0+0xfd004418>
 2005920:	00c05504 	movi	r3,340
 2005924:	18801236 	bltu	r3,r2,2005970 <_malloc_r+0x6f8>
 2005928:	8804d3fa 	srli	r2,r17,15
 200592c:	12001e04 	addi	r8,r2,120
 2005930:	11c01dc4 	addi	r7,r2,119
 2005934:	4209883a 	add	r4,r8,r8
 2005938:	003e6d06 	br	20052f0 <__alt_mem_epcs_flash_controller_0+0xfd0042f0>
 200593c:	00c40004 	movi	r3,4096
 2005940:	003f4606 	br	200565c <__alt_mem_epcs_flash_controller_0+0xfd00465c>
 2005944:	00800044 	movi	r2,1
 2005948:	a0800115 	stw	r2,4(r20)
 200594c:	003f7406 	br	2005720 <__alt_mem_epcs_flash_controller_0+0xfd004720>
 2005950:	1805d0ba 	srai	r2,r3,2
 2005954:	01c00044 	movi	r7,1
 2005958:	30c00117 	ldw	r3,4(r6)
 200595c:	388e983a 	sll	r7,r7,r2
 2005960:	2805883a 	mov	r2,r5
 2005964:	38c6b03a 	or	r3,r7,r3
 2005968:	30c00115 	stw	r3,4(r6)
 200596c:	003f9b06 	br	20057dc <__alt_mem_epcs_flash_controller_0+0xfd0047dc>
 2005970:	00c15504 	movi	r3,1364
 2005974:	18801a36 	bltu	r3,r2,20059e0 <_malloc_r+0x768>
 2005978:	8804d4ba 	srli	r2,r17,18
 200597c:	12001f44 	addi	r8,r2,125
 2005980:	11c01f04 	addi	r7,r2,124
 2005984:	4209883a 	add	r4,r8,r8
 2005988:	003e5906 	br	20052f0 <__alt_mem_epcs_flash_controller_0+0xfd0042f0>
 200598c:	ad400404 	addi	r21,r21,16
 2005990:	003f1706 	br	20055f0 <__alt_mem_epcs_flash_controller_0+0xfd0045f0>
 2005994:	00c01504 	movi	r3,84
 2005998:	18802336 	bltu	r3,r2,2005a28 <_malloc_r+0x7b0>
 200599c:	3804d33a 	srli	r2,r7,12
 20059a0:	11401bc4 	addi	r5,r2,111
 20059a4:	10c01b84 	addi	r3,r2,110
 20059a8:	294b883a 	add	r5,r5,r5
 20059ac:	003f7b06 	br	200579c <__alt_mem_epcs_flash_controller_0+0xfd00479c>
 20059b0:	9c000217 	ldw	r16,8(r19)
 20059b4:	00bfff04 	movi	r2,-4
 20059b8:	80c00117 	ldw	r3,4(r16)
 20059bc:	1886703a 	and	r3,r3,r2
 20059c0:	003f5306 	br	2005710 <__alt_mem_epcs_flash_controller_0+0xfd004710>
 20059c4:	3083ffcc 	andi	r2,r6,4095
 20059c8:	103f181e 	bne	r2,zero,200562c <__alt_mem_epcs_flash_controller_0+0xfd00462c>
 20059cc:	99000217 	ldw	r4,8(r19)
 20059d0:	b545883a 	add	r2,r22,r21
 20059d4:	10800054 	ori	r2,r2,1
 20059d8:	20800115 	stw	r2,4(r4)
 20059dc:	003f3e06 	br	20056d8 <__alt_mem_epcs_flash_controller_0+0xfd0046d8>
 20059e0:	01003f84 	movi	r4,254
 20059e4:	02001fc4 	movi	r8,127
 20059e8:	01c01f84 	movi	r7,126
 20059ec:	003e4006 	br	20052f0 <__alt_mem_epcs_flash_controller_0+0xfd0042f0>
 20059f0:	00808134 	movhi	r2,516
 20059f4:	10b84b04 	addi	r2,r2,-7892
 20059f8:	15000015 	stw	r20,0(r2)
 20059fc:	003f1106 	br	2005644 <__alt_mem_epcs_flash_controller_0+0xfd004644>
 2005a00:	00800044 	movi	r2,1
 2005a04:	002b883a 	mov	r21,zero
 2005a08:	003f1f06 	br	2005688 <__alt_mem_epcs_flash_controller_0+0xfd004688>
 2005a0c:	81400204 	addi	r5,r16,8
 2005a10:	9009883a 	mov	r4,r18
 2005a14:	200c62c0 	call	200c62c <_free_r>
 2005a18:	00808134 	movhi	r2,516
 2005a1c:	10b86904 	addi	r2,r2,-7772
 2005a20:	10c00017 	ldw	r3,0(r2)
 2005a24:	003f2c06 	br	20056d8 <__alt_mem_epcs_flash_controller_0+0xfd0046d8>
 2005a28:	00c05504 	movi	r3,340
 2005a2c:	18800536 	bltu	r3,r2,2005a44 <_malloc_r+0x7cc>
 2005a30:	3804d3fa 	srli	r2,r7,15
 2005a34:	11401e04 	addi	r5,r2,120
 2005a38:	10c01dc4 	addi	r3,r2,119
 2005a3c:	294b883a 	add	r5,r5,r5
 2005a40:	003f5606 	br	200579c <__alt_mem_epcs_flash_controller_0+0xfd00479c>
 2005a44:	00c15504 	movi	r3,1364
 2005a48:	18800536 	bltu	r3,r2,2005a60 <_malloc_r+0x7e8>
 2005a4c:	3804d4ba 	srli	r2,r7,18
 2005a50:	11401f44 	addi	r5,r2,125
 2005a54:	10c01f04 	addi	r3,r2,124
 2005a58:	294b883a 	add	r5,r5,r5
 2005a5c:	003f4f06 	br	200579c <__alt_mem_epcs_flash_controller_0+0xfd00479c>
 2005a60:	01403f84 	movi	r5,254
 2005a64:	00c01f84 	movi	r3,126
 2005a68:	003f4c06 	br	200579c <__alt_mem_epcs_flash_controller_0+0xfd00479c>
 2005a6c:	98800117 	ldw	r2,4(r19)
 2005a70:	003fa006 	br	20058f4 <__alt_mem_epcs_flash_controller_0+0xfd0048f4>
 2005a74:	8808d0fa 	srli	r4,r17,3
 2005a78:	20800044 	addi	r2,r4,1
 2005a7c:	1085883a 	add	r2,r2,r2
 2005a80:	003e9006 	br	20054c4 <__alt_mem_epcs_flash_controller_0+0xfd0044c4>

02005a84 <memset>:
 2005a84:	20c000cc 	andi	r3,r4,3
 2005a88:	2005883a 	mov	r2,r4
 2005a8c:	18004426 	beq	r3,zero,2005ba0 <memset+0x11c>
 2005a90:	31ffffc4 	addi	r7,r6,-1
 2005a94:	30004026 	beq	r6,zero,2005b98 <memset+0x114>
 2005a98:	2813883a 	mov	r9,r5
 2005a9c:	200d883a 	mov	r6,r4
 2005aa0:	2007883a 	mov	r3,r4
 2005aa4:	00000406 	br	2005ab8 <memset+0x34>
 2005aa8:	3a3fffc4 	addi	r8,r7,-1
 2005aac:	31800044 	addi	r6,r6,1
 2005ab0:	38003926 	beq	r7,zero,2005b98 <memset+0x114>
 2005ab4:	400f883a 	mov	r7,r8
 2005ab8:	18c00044 	addi	r3,r3,1
 2005abc:	32400005 	stb	r9,0(r6)
 2005ac0:	1a0000cc 	andi	r8,r3,3
 2005ac4:	403ff81e 	bne	r8,zero,2005aa8 <__alt_mem_epcs_flash_controller_0+0xfd004aa8>
 2005ac8:	010000c4 	movi	r4,3
 2005acc:	21c02d2e 	bgeu	r4,r7,2005b84 <memset+0x100>
 2005ad0:	29003fcc 	andi	r4,r5,255
 2005ad4:	200c923a 	slli	r6,r4,8
 2005ad8:	3108b03a 	or	r4,r6,r4
 2005adc:	200c943a 	slli	r6,r4,16
 2005ae0:	218cb03a 	or	r6,r4,r6
 2005ae4:	010003c4 	movi	r4,15
 2005ae8:	21c0182e 	bgeu	r4,r7,2005b4c <memset+0xc8>
 2005aec:	3b3ffc04 	addi	r12,r7,-16
 2005af0:	6018d13a 	srli	r12,r12,4
 2005af4:	1a000104 	addi	r8,r3,4
 2005af8:	1ac00204 	addi	r11,r3,8
 2005afc:	6008913a 	slli	r4,r12,4
 2005b00:	1a800304 	addi	r10,r3,12
 2005b04:	1813883a 	mov	r9,r3
 2005b08:	21000504 	addi	r4,r4,20
 2005b0c:	1909883a 	add	r4,r3,r4
 2005b10:	49800015 	stw	r6,0(r9)
 2005b14:	41800015 	stw	r6,0(r8)
 2005b18:	59800015 	stw	r6,0(r11)
 2005b1c:	51800015 	stw	r6,0(r10)
 2005b20:	42000404 	addi	r8,r8,16
 2005b24:	4a400404 	addi	r9,r9,16
 2005b28:	5ac00404 	addi	r11,r11,16
 2005b2c:	52800404 	addi	r10,r10,16
 2005b30:	413ff71e 	bne	r8,r4,2005b10 <__alt_mem_epcs_flash_controller_0+0xfd004b10>
 2005b34:	63000044 	addi	r12,r12,1
 2005b38:	6018913a 	slli	r12,r12,4
 2005b3c:	39c003cc 	andi	r7,r7,15
 2005b40:	010000c4 	movi	r4,3
 2005b44:	1b07883a 	add	r3,r3,r12
 2005b48:	21c00e2e 	bgeu	r4,r7,2005b84 <memset+0x100>
 2005b4c:	1813883a 	mov	r9,r3
 2005b50:	3811883a 	mov	r8,r7
 2005b54:	010000c4 	movi	r4,3
 2005b58:	49800015 	stw	r6,0(r9)
 2005b5c:	423fff04 	addi	r8,r8,-4
 2005b60:	4a400104 	addi	r9,r9,4
 2005b64:	223ffc36 	bltu	r4,r8,2005b58 <__alt_mem_epcs_flash_controller_0+0xfd004b58>
 2005b68:	393fff04 	addi	r4,r7,-4
 2005b6c:	2008d0ba 	srli	r4,r4,2
 2005b70:	39c000cc 	andi	r7,r7,3
 2005b74:	21000044 	addi	r4,r4,1
 2005b78:	2109883a 	add	r4,r4,r4
 2005b7c:	2109883a 	add	r4,r4,r4
 2005b80:	1907883a 	add	r3,r3,r4
 2005b84:	38000526 	beq	r7,zero,2005b9c <memset+0x118>
 2005b88:	19cf883a 	add	r7,r3,r7
 2005b8c:	19400005 	stb	r5,0(r3)
 2005b90:	18c00044 	addi	r3,r3,1
 2005b94:	38fffd1e 	bne	r7,r3,2005b8c <__alt_mem_epcs_flash_controller_0+0xfd004b8c>
 2005b98:	f800283a 	ret
 2005b9c:	f800283a 	ret
 2005ba0:	2007883a 	mov	r3,r4
 2005ba4:	300f883a 	mov	r7,r6
 2005ba8:	003fc706 	br	2005ac8 <__alt_mem_epcs_flash_controller_0+0xfd004ac8>

02005bac <_printf_r>:
 2005bac:	defffd04 	addi	sp,sp,-12
 2005bb0:	2805883a 	mov	r2,r5
 2005bb4:	dfc00015 	stw	ra,0(sp)
 2005bb8:	d9800115 	stw	r6,4(sp)
 2005bbc:	d9c00215 	stw	r7,8(sp)
 2005bc0:	21400217 	ldw	r5,8(r4)
 2005bc4:	d9c00104 	addi	r7,sp,4
 2005bc8:	100d883a 	mov	r6,r2
 2005bcc:	20080f00 	call	20080f0 <___vfprintf_internal_r>
 2005bd0:	dfc00017 	ldw	ra,0(sp)
 2005bd4:	dec00304 	addi	sp,sp,12
 2005bd8:	f800283a 	ret

02005bdc <printf>:
 2005bdc:	defffc04 	addi	sp,sp,-16
 2005be0:	dfc00015 	stw	ra,0(sp)
 2005be4:	d9400115 	stw	r5,4(sp)
 2005be8:	d9800215 	stw	r6,8(sp)
 2005bec:	d9c00315 	stw	r7,12(sp)
 2005bf0:	00808134 	movhi	r2,516
 2005bf4:	10b84a04 	addi	r2,r2,-7896
 2005bf8:	10800017 	ldw	r2,0(r2)
 2005bfc:	200b883a 	mov	r5,r4
 2005c00:	d9800104 	addi	r6,sp,4
 2005c04:	11000217 	ldw	r4,8(r2)
 2005c08:	200a2e80 	call	200a2e8 <__vfprintf_internal>
 2005c0c:	dfc00017 	ldw	ra,0(sp)
 2005c10:	dec00404 	addi	sp,sp,16
 2005c14:	f800283a 	ret

02005c18 <_puts_r>:
 2005c18:	defff604 	addi	sp,sp,-40
 2005c1c:	dc000715 	stw	r16,28(sp)
 2005c20:	2021883a 	mov	r16,r4
 2005c24:	2809883a 	mov	r4,r5
 2005c28:	dc400815 	stw	r17,32(sp)
 2005c2c:	dfc00915 	stw	ra,36(sp)
 2005c30:	2823883a 	mov	r17,r5
 2005c34:	2005e800 	call	2005e80 <strlen>
 2005c38:	10c00044 	addi	r3,r2,1
 2005c3c:	d8800115 	stw	r2,4(sp)
 2005c40:	00808134 	movhi	r2,516
 2005c44:	10b0d504 	addi	r2,r2,-15532
 2005c48:	d8800215 	stw	r2,8(sp)
 2005c4c:	00800044 	movi	r2,1
 2005c50:	d8800315 	stw	r2,12(sp)
 2005c54:	00800084 	movi	r2,2
 2005c58:	dc400015 	stw	r17,0(sp)
 2005c5c:	d8c00615 	stw	r3,24(sp)
 2005c60:	dec00415 	stw	sp,16(sp)
 2005c64:	d8800515 	stw	r2,20(sp)
 2005c68:	80000226 	beq	r16,zero,2005c74 <_puts_r+0x5c>
 2005c6c:	80800e17 	ldw	r2,56(r16)
 2005c70:	10001426 	beq	r2,zero,2005cc4 <_puts_r+0xac>
 2005c74:	81400217 	ldw	r5,8(r16)
 2005c78:	2880030b 	ldhu	r2,12(r5)
 2005c7c:	10c8000c 	andi	r3,r2,8192
 2005c80:	1800061e 	bne	r3,zero,2005c9c <_puts_r+0x84>
 2005c84:	29001917 	ldw	r4,100(r5)
 2005c88:	00f7ffc4 	movi	r3,-8193
 2005c8c:	10880014 	ori	r2,r2,8192
 2005c90:	20c6703a 	and	r3,r4,r3
 2005c94:	2880030d 	sth	r2,12(r5)
 2005c98:	28c01915 	stw	r3,100(r5)
 2005c9c:	d9800404 	addi	r6,sp,16
 2005ca0:	8009883a 	mov	r4,r16
 2005ca4:	200c93c0 	call	200c93c <__sfvwrite_r>
 2005ca8:	1000091e 	bne	r2,zero,2005cd0 <_puts_r+0xb8>
 2005cac:	00800284 	movi	r2,10
 2005cb0:	dfc00917 	ldw	ra,36(sp)
 2005cb4:	dc400817 	ldw	r17,32(sp)
 2005cb8:	dc000717 	ldw	r16,28(sp)
 2005cbc:	dec00a04 	addi	sp,sp,40
 2005cc0:	f800283a 	ret
 2005cc4:	8009883a 	mov	r4,r16
 2005cc8:	200c4b80 	call	200c4b8 <__sinit>
 2005ccc:	003fe906 	br	2005c74 <__alt_mem_epcs_flash_controller_0+0xfd004c74>
 2005cd0:	00bfffc4 	movi	r2,-1
 2005cd4:	003ff606 	br	2005cb0 <__alt_mem_epcs_flash_controller_0+0xfd004cb0>

02005cd8 <puts>:
 2005cd8:	00808134 	movhi	r2,516
 2005cdc:	10b84a04 	addi	r2,r2,-7896
 2005ce0:	200b883a 	mov	r5,r4
 2005ce4:	11000017 	ldw	r4,0(r2)
 2005ce8:	2005c181 	jmpi	2005c18 <_puts_r>

02005cec <srand>:
 2005cec:	00808134 	movhi	r2,516
 2005cf0:	10b84a04 	addi	r2,r2,-7896
 2005cf4:	10800017 	ldw	r2,0(r2)
 2005cf8:	11002915 	stw	r4,164(r2)
 2005cfc:	10002a15 	stw	zero,168(r2)
 2005d00:	f800283a 	ret

02005d04 <rand>:
 2005d04:	00808134 	movhi	r2,516
 2005d08:	defffe04 	addi	sp,sp,-8
 2005d0c:	10b84a04 	addi	r2,r2,-7896
 2005d10:	dc000015 	stw	r16,0(sp)
 2005d14:	14000017 	ldw	r16,0(r2)
 2005d18:	dfc00115 	stw	ra,4(sp)
 2005d1c:	01932574 	movhi	r6,19605
 2005d20:	81002917 	ldw	r4,164(r16)
 2005d24:	81402a17 	ldw	r5,168(r16)
 2005d28:	01d614b4 	movhi	r7,22610
 2005d2c:	319fcb44 	addi	r6,r6,32557
 2005d30:	39fd0b44 	addi	r7,r7,-3027
 2005d34:	2011fdc0 	call	2011fdc <__muldi3>
 2005d38:	11000044 	addi	r4,r2,1
 2005d3c:	2085803a 	cmpltu	r2,r4,r2
 2005d40:	10c7883a 	add	r3,r2,r3
 2005d44:	00a00034 	movhi	r2,32768
 2005d48:	10bfffc4 	addi	r2,r2,-1
 2005d4c:	1884703a 	and	r2,r3,r2
 2005d50:	81002915 	stw	r4,164(r16)
 2005d54:	80c02a15 	stw	r3,168(r16)
 2005d58:	dfc00117 	ldw	ra,4(sp)
 2005d5c:	dc000017 	ldw	r16,0(sp)
 2005d60:	dec00204 	addi	sp,sp,8
 2005d64:	f800283a 	ret

02005d68 <_sbrk_r>:
 2005d68:	defffd04 	addi	sp,sp,-12
 2005d6c:	dc000015 	stw	r16,0(sp)
 2005d70:	04008134 	movhi	r16,516
 2005d74:	dc400115 	stw	r17,4(sp)
 2005d78:	84385e04 	addi	r16,r16,-7816
 2005d7c:	2023883a 	mov	r17,r4
 2005d80:	2809883a 	mov	r4,r5
 2005d84:	dfc00215 	stw	ra,8(sp)
 2005d88:	80000015 	stw	zero,0(r16)
 2005d8c:	201336c0 	call	201336c <sbrk>
 2005d90:	00ffffc4 	movi	r3,-1
 2005d94:	10c00526 	beq	r2,r3,2005dac <_sbrk_r+0x44>
 2005d98:	dfc00217 	ldw	ra,8(sp)
 2005d9c:	dc400117 	ldw	r17,4(sp)
 2005da0:	dc000017 	ldw	r16,0(sp)
 2005da4:	dec00304 	addi	sp,sp,12
 2005da8:	f800283a 	ret
 2005dac:	80c00017 	ldw	r3,0(r16)
 2005db0:	183ff926 	beq	r3,zero,2005d98 <__alt_mem_epcs_flash_controller_0+0xfd004d98>
 2005db4:	88c00015 	stw	r3,0(r17)
 2005db8:	003ff706 	br	2005d98 <__alt_mem_epcs_flash_controller_0+0xfd004d98>

02005dbc <_sprintf_r>:
 2005dbc:	deffe404 	addi	sp,sp,-112
 2005dc0:	2807883a 	mov	r3,r5
 2005dc4:	dfc01a15 	stw	ra,104(sp)
 2005dc8:	d9c01b15 	stw	r7,108(sp)
 2005dcc:	00a00034 	movhi	r2,32768
 2005dd0:	10bfffc4 	addi	r2,r2,-1
 2005dd4:	02008204 	movi	r8,520
 2005dd8:	d8800215 	stw	r2,8(sp)
 2005ddc:	d8800515 	stw	r2,20(sp)
 2005de0:	d9c01b04 	addi	r7,sp,108
 2005de4:	d80b883a 	mov	r5,sp
 2005de8:	00bfffc4 	movi	r2,-1
 2005dec:	d8c00015 	stw	r3,0(sp)
 2005df0:	d8c00415 	stw	r3,16(sp)
 2005df4:	da00030d 	sth	r8,12(sp)
 2005df8:	d880038d 	sth	r2,14(sp)
 2005dfc:	2005f180 	call	2005f18 <___svfprintf_internal_r>
 2005e00:	d8c00017 	ldw	r3,0(sp)
 2005e04:	18000005 	stb	zero,0(r3)
 2005e08:	dfc01a17 	ldw	ra,104(sp)
 2005e0c:	dec01c04 	addi	sp,sp,112
 2005e10:	f800283a 	ret

02005e14 <sprintf>:
 2005e14:	deffe304 	addi	sp,sp,-116
 2005e18:	2007883a 	mov	r3,r4
 2005e1c:	dfc01a15 	stw	ra,104(sp)
 2005e20:	d9801b15 	stw	r6,108(sp)
 2005e24:	d9c01c15 	stw	r7,112(sp)
 2005e28:	01008134 	movhi	r4,516
 2005e2c:	21384a04 	addi	r4,r4,-7896
 2005e30:	21000017 	ldw	r4,0(r4)
 2005e34:	00a00034 	movhi	r2,32768
 2005e38:	10bfffc4 	addi	r2,r2,-1
 2005e3c:	280d883a 	mov	r6,r5
 2005e40:	02008204 	movi	r8,520
 2005e44:	d8800215 	stw	r2,8(sp)
 2005e48:	d8800515 	stw	r2,20(sp)
 2005e4c:	d9c01b04 	addi	r7,sp,108
 2005e50:	d80b883a 	mov	r5,sp
 2005e54:	00bfffc4 	movi	r2,-1
 2005e58:	d8c00015 	stw	r3,0(sp)
 2005e5c:	d8c00415 	stw	r3,16(sp)
 2005e60:	da00030d 	sth	r8,12(sp)
 2005e64:	d880038d 	sth	r2,14(sp)
 2005e68:	2005f180 	call	2005f18 <___svfprintf_internal_r>
 2005e6c:	d8c00017 	ldw	r3,0(sp)
 2005e70:	18000005 	stb	zero,0(r3)
 2005e74:	dfc01a17 	ldw	ra,104(sp)
 2005e78:	dec01d04 	addi	sp,sp,116
 2005e7c:	f800283a 	ret

02005e80 <strlen>:
 2005e80:	208000cc 	andi	r2,r4,3
 2005e84:	10002026 	beq	r2,zero,2005f08 <strlen+0x88>
 2005e88:	20800007 	ldb	r2,0(r4)
 2005e8c:	10002026 	beq	r2,zero,2005f10 <strlen+0x90>
 2005e90:	2005883a 	mov	r2,r4
 2005e94:	00000206 	br	2005ea0 <strlen+0x20>
 2005e98:	10c00007 	ldb	r3,0(r2)
 2005e9c:	18001826 	beq	r3,zero,2005f00 <strlen+0x80>
 2005ea0:	10800044 	addi	r2,r2,1
 2005ea4:	10c000cc 	andi	r3,r2,3
 2005ea8:	183ffb1e 	bne	r3,zero,2005e98 <__alt_mem_epcs_flash_controller_0+0xfd004e98>
 2005eac:	10c00017 	ldw	r3,0(r2)
 2005eb0:	01ffbff4 	movhi	r7,65279
 2005eb4:	39ffbfc4 	addi	r7,r7,-257
 2005eb8:	00ca303a 	nor	r5,zero,r3
 2005ebc:	01a02074 	movhi	r6,32897
 2005ec0:	19c7883a 	add	r3,r3,r7
 2005ec4:	31a02004 	addi	r6,r6,-32640
 2005ec8:	1946703a 	and	r3,r3,r5
 2005ecc:	1986703a 	and	r3,r3,r6
 2005ed0:	1800091e 	bne	r3,zero,2005ef8 <strlen+0x78>
 2005ed4:	10800104 	addi	r2,r2,4
 2005ed8:	10c00017 	ldw	r3,0(r2)
 2005edc:	19cb883a 	add	r5,r3,r7
 2005ee0:	00c6303a 	nor	r3,zero,r3
 2005ee4:	28c6703a 	and	r3,r5,r3
 2005ee8:	1986703a 	and	r3,r3,r6
 2005eec:	183ff926 	beq	r3,zero,2005ed4 <__alt_mem_epcs_flash_controller_0+0xfd004ed4>
 2005ef0:	00000106 	br	2005ef8 <strlen+0x78>
 2005ef4:	10800044 	addi	r2,r2,1
 2005ef8:	10c00007 	ldb	r3,0(r2)
 2005efc:	183ffd1e 	bne	r3,zero,2005ef4 <__alt_mem_epcs_flash_controller_0+0xfd004ef4>
 2005f00:	1105c83a 	sub	r2,r2,r4
 2005f04:	f800283a 	ret
 2005f08:	2005883a 	mov	r2,r4
 2005f0c:	003fe706 	br	2005eac <__alt_mem_epcs_flash_controller_0+0xfd004eac>
 2005f10:	0005883a 	mov	r2,zero
 2005f14:	f800283a 	ret

02005f18 <___svfprintf_internal_r>:
 2005f18:	deffb704 	addi	sp,sp,-292
 2005f1c:	dfc04815 	stw	ra,288(sp)
 2005f20:	ddc04615 	stw	r23,280(sp)
 2005f24:	d9402c15 	stw	r5,176(sp)
 2005f28:	d9003915 	stw	r4,228(sp)
 2005f2c:	302f883a 	mov	r23,r6
 2005f30:	d9c02d15 	stw	r7,180(sp)
 2005f34:	df004715 	stw	fp,284(sp)
 2005f38:	dd804515 	stw	r22,276(sp)
 2005f3c:	dd404415 	stw	r21,272(sp)
 2005f40:	dd004315 	stw	r20,268(sp)
 2005f44:	dcc04215 	stw	r19,264(sp)
 2005f48:	dc804115 	stw	r18,260(sp)
 2005f4c:	dc404015 	stw	r17,256(sp)
 2005f50:	dc003f15 	stw	r16,252(sp)
 2005f54:	200d02c0 	call	200d02c <_localeconv_r>
 2005f58:	10800017 	ldw	r2,0(r2)
 2005f5c:	1009883a 	mov	r4,r2
 2005f60:	d8803415 	stw	r2,208(sp)
 2005f64:	2005e800 	call	2005e80 <strlen>
 2005f68:	d8c02c17 	ldw	r3,176(sp)
 2005f6c:	d8803815 	stw	r2,224(sp)
 2005f70:	1880030b 	ldhu	r2,12(r3)
 2005f74:	1080200c 	andi	r2,r2,128
 2005f78:	10000226 	beq	r2,zero,2005f84 <___svfprintf_internal_r+0x6c>
 2005f7c:	18800417 	ldw	r2,16(r3)
 2005f80:	10067f26 	beq	r2,zero,2007980 <___svfprintf_internal_r+0x1a68>
 2005f84:	dcc03917 	ldw	r19,228(sp)
 2005f88:	d8c00404 	addi	r3,sp,16
 2005f8c:	05408134 	movhi	r21,516
 2005f90:	d9001e04 	addi	r4,sp,120
 2005f94:	ad70e684 	addi	r21,r21,-15462
 2005f98:	d8c01e15 	stw	r3,120(sp)
 2005f9c:	d8002015 	stw	zero,128(sp)
 2005fa0:	d8001f15 	stw	zero,124(sp)
 2005fa4:	d8003315 	stw	zero,204(sp)
 2005fa8:	d8003615 	stw	zero,216(sp)
 2005fac:	d8003715 	stw	zero,220(sp)
 2005fb0:	1811883a 	mov	r8,r3
 2005fb4:	d8003a15 	stw	zero,232(sp)
 2005fb8:	d8003b15 	stw	zero,236(sp)
 2005fbc:	d8002f15 	stw	zero,188(sp)
 2005fc0:	d9002815 	stw	r4,160(sp)
 2005fc4:	b8800007 	ldb	r2,0(r23)
 2005fc8:	10026726 	beq	r2,zero,2006968 <___svfprintf_internal_r+0xa50>
 2005fcc:	00c00944 	movi	r3,37
 2005fd0:	b821883a 	mov	r16,r23
 2005fd4:	10c0021e 	bne	r2,r3,2005fe0 <___svfprintf_internal_r+0xc8>
 2005fd8:	00001406 	br	200602c <___svfprintf_internal_r+0x114>
 2005fdc:	10c00326 	beq	r2,r3,2005fec <___svfprintf_internal_r+0xd4>
 2005fe0:	84000044 	addi	r16,r16,1
 2005fe4:	80800007 	ldb	r2,0(r16)
 2005fe8:	103ffc1e 	bne	r2,zero,2005fdc <__alt_mem_epcs_flash_controller_0+0xfd004fdc>
 2005fec:	85e3c83a 	sub	r17,r16,r23
 2005ff0:	88000e26 	beq	r17,zero,200602c <___svfprintf_internal_r+0x114>
 2005ff4:	d8c02017 	ldw	r3,128(sp)
 2005ff8:	d8801f17 	ldw	r2,124(sp)
 2005ffc:	45c00015 	stw	r23,0(r8)
 2006000:	1c47883a 	add	r3,r3,r17
 2006004:	10800044 	addi	r2,r2,1
 2006008:	d8c02015 	stw	r3,128(sp)
 200600c:	44400115 	stw	r17,4(r8)
 2006010:	d8801f15 	stw	r2,124(sp)
 2006014:	00c001c4 	movi	r3,7
 2006018:	18809716 	blt	r3,r2,2006278 <___svfprintf_internal_r+0x360>
 200601c:	42000204 	addi	r8,r8,8
 2006020:	d9402f17 	ldw	r5,188(sp)
 2006024:	2c4b883a 	add	r5,r5,r17
 2006028:	d9402f15 	stw	r5,188(sp)
 200602c:	80800007 	ldb	r2,0(r16)
 2006030:	10009826 	beq	r2,zero,2006294 <___svfprintf_internal_r+0x37c>
 2006034:	84400047 	ldb	r17,1(r16)
 2006038:	00bfffc4 	movi	r2,-1
 200603c:	85c00044 	addi	r23,r16,1
 2006040:	d8002785 	stb	zero,158(sp)
 2006044:	0007883a 	mov	r3,zero
 2006048:	000f883a 	mov	r7,zero
 200604c:	d8802915 	stw	r2,164(sp)
 2006050:	d8003115 	stw	zero,196(sp)
 2006054:	0025883a 	mov	r18,zero
 2006058:	01401604 	movi	r5,88
 200605c:	01800244 	movi	r6,9
 2006060:	02800a84 	movi	r10,42
 2006064:	02401b04 	movi	r9,108
 2006068:	bdc00044 	addi	r23,r23,1
 200606c:	88bff804 	addi	r2,r17,-32
 2006070:	2882f036 	bltu	r5,r2,2006c34 <___svfprintf_internal_r+0xd1c>
 2006074:	100490ba 	slli	r2,r2,2
 2006078:	01008034 	movhi	r4,512
 200607c:	21182304 	addi	r4,r4,24716
 2006080:	1105883a 	add	r2,r2,r4
 2006084:	10800017 	ldw	r2,0(r2)
 2006088:	1000683a 	jmp	r2
 200608c:	02006b9c 	xori	r8,zero,430
 2006090:	02006c34 	movhi	r8,432
 2006094:	02006c34 	movhi	r8,432
 2006098:	02006b90 	cmplti	r8,zero,430
 200609c:	02006c34 	movhi	r8,432
 20060a0:	02006c34 	movhi	r8,432
 20060a4:	02006c34 	movhi	r8,432
 20060a8:	02006c34 	movhi	r8,432
 20060ac:	02006c34 	movhi	r8,432
 20060b0:	02006c34 	movhi	r8,432
 20060b4:	020062f0 	cmpltui	r8,zero,395
 20060b8:	02006acc 	andi	r8,zero,427
 20060bc:	02006c34 	movhi	r8,432
 20060c0:	02006200 	call	200620 <__alt_mem_sdram-0x1dff9e0>
 20060c4:	02006318 	cmpnei	r8,zero,396
 20060c8:	02006c34 	movhi	r8,432
 20060cc:	0200638c 	andi	r8,zero,398
 20060d0:	02006358 	cmpnei	r8,zero,397
 20060d4:	02006358 	cmpnei	r8,zero,397
 20060d8:	02006358 	cmpnei	r8,zero,397
 20060dc:	02006358 	cmpnei	r8,zero,397
 20060e0:	02006358 	cmpnei	r8,zero,397
 20060e4:	02006358 	cmpnei	r8,zero,397
 20060e8:	02006358 	cmpnei	r8,zero,397
 20060ec:	02006358 	cmpnei	r8,zero,397
 20060f0:	02006358 	cmpnei	r8,zero,397
 20060f4:	02006c34 	movhi	r8,432
 20060f8:	02006c34 	movhi	r8,432
 20060fc:	02006c34 	movhi	r8,432
 2006100:	02006c34 	movhi	r8,432
 2006104:	02006c34 	movhi	r8,432
 2006108:	02006c34 	movhi	r8,432
 200610c:	02006c34 	movhi	r8,432
 2006110:	02006c34 	movhi	r8,432
 2006114:	02006c34 	movhi	r8,432
 2006118:	02006c34 	movhi	r8,432
 200611c:	02006444 	movi	r8,401
 2006120:	02006398 	cmpnei	r8,zero,398
 2006124:	02006c34 	movhi	r8,432
 2006128:	02006398 	cmpnei	r8,zero,398
 200612c:	02006c34 	movhi	r8,432
 2006130:	02006c34 	movhi	r8,432
 2006134:	02006c34 	movhi	r8,432
 2006138:	02006c34 	movhi	r8,432
 200613c:	02006438 	rdprs	r8,zero,400
 2006140:	02006c34 	movhi	r8,432
 2006144:	02006c34 	movhi	r8,432
 2006148:	02006500 	call	200650 <__alt_mem_sdram-0x1dff9b0>
 200614c:	02006c34 	movhi	r8,432
 2006150:	02006c34 	movhi	r8,432
 2006154:	02006c34 	movhi	r8,432
 2006158:	02006c34 	movhi	r8,432
 200615c:	02006c34 	movhi	r8,432
 2006160:	02006970 	cmpltui	r8,zero,421
 2006164:	02006c34 	movhi	r8,432
 2006168:	02006c34 	movhi	r8,432
 200616c:	020069d0 	cmplti	r8,zero,423
 2006170:	02006c34 	movhi	r8,432
 2006174:	02006c34 	movhi	r8,432
 2006178:	02006c34 	movhi	r8,432
 200617c:	02006c34 	movhi	r8,432
 2006180:	02006c34 	movhi	r8,432
 2006184:	02006c34 	movhi	r8,432
 2006188:	02006c34 	movhi	r8,432
 200618c:	02006c34 	movhi	r8,432
 2006190:	02006c34 	movhi	r8,432
 2006194:	02006c34 	movhi	r8,432
 2006198:	02006a80 	call	2006a8 <__alt_mem_sdram-0x1dff958>
 200619c:	02006bbc 	xorhi	r8,zero,430
 20061a0:	02006398 	cmpnei	r8,zero,398
 20061a4:	02006398 	cmpnei	r8,zero,398
 20061a8:	02006398 	cmpnei	r8,zero,398
 20061ac:	02006c10 	cmplti	r8,zero,432
 20061b0:	02006bbc 	xorhi	r8,zero,430
 20061b4:	02006c34 	movhi	r8,432
 20061b8:	02006c34 	movhi	r8,432
 20061bc:	02006bcc 	andi	r8,zero,431
 20061c0:	02006c34 	movhi	r8,432
 20061c4:	02006bdc 	xori	r8,zero,431
 20061c8:	02006abc 	xorhi	r8,zero,426
 20061cc:	0200620c 	andi	r8,zero,392
 20061d0:	02006adc 	xori	r8,zero,427
 20061d4:	02006c34 	movhi	r8,432
 20061d8:	02006ae8 	cmpgeui	r8,zero,427
 20061dc:	02006c34 	movhi	r8,432
 20061e0:	02006b44 	movi	r8,429
 20061e4:	02006c34 	movhi	r8,432
 20061e8:	02006c34 	movhi	r8,432
 20061ec:	02006b54 	movui	r8,429
 20061f0:	d9003117 	ldw	r4,196(sp)
 20061f4:	d8802d15 	stw	r2,180(sp)
 20061f8:	0109c83a 	sub	r4,zero,r4
 20061fc:	d9003115 	stw	r4,196(sp)
 2006200:	94800114 	ori	r18,r18,4
 2006204:	bc400007 	ldb	r17,0(r23)
 2006208:	003f9706 	br	2006068 <__alt_mem_epcs_flash_controller_0+0xfd005068>
 200620c:	00800c04 	movi	r2,48
 2006210:	d9002d17 	ldw	r4,180(sp)
 2006214:	d9402917 	ldw	r5,164(sp)
 2006218:	d8802705 	stb	r2,156(sp)
 200621c:	00801e04 	movi	r2,120
 2006220:	d8802745 	stb	r2,157(sp)
 2006224:	d8002785 	stb	zero,158(sp)
 2006228:	20c00104 	addi	r3,r4,4
 200622c:	25000017 	ldw	r20,0(r4)
 2006230:	002d883a 	mov	r22,zero
 2006234:	90800094 	ori	r2,r18,2
 2006238:	28028616 	blt	r5,zero,2006c54 <___svfprintf_internal_r+0xd3c>
 200623c:	00bfdfc4 	movi	r2,-129
 2006240:	90a4703a 	and	r18,r18,r2
 2006244:	d8c02d15 	stw	r3,180(sp)
 2006248:	94800094 	ori	r18,r18,2
 200624c:	a002731e 	bne	r20,zero,2006c1c <___svfprintf_internal_r+0xd04>
 2006250:	00808134 	movhi	r2,516
 2006254:	10b0df04 	addi	r2,r2,-15492
 2006258:	d8803a15 	stw	r2,232(sp)
 200625c:	04401e04 	movi	r17,120
 2006260:	d8c02917 	ldw	r3,164(sp)
 2006264:	0039883a 	mov	fp,zero
 2006268:	1801d526 	beq	r3,zero,20069c0 <___svfprintf_internal_r+0xaa8>
 200626c:	0029883a 	mov	r20,zero
 2006270:	002d883a 	mov	r22,zero
 2006274:	0001f106 	br	2006a3c <___svfprintf_internal_r+0xb24>
 2006278:	d9402c17 	ldw	r5,176(sp)
 200627c:	d9801e04 	addi	r6,sp,120
 2006280:	9809883a 	mov	r4,r19
 2006284:	200ed180 	call	200ed18 <__ssprint_r>
 2006288:	1000081e 	bne	r2,zero,20062ac <___svfprintf_internal_r+0x394>
 200628c:	da000404 	addi	r8,sp,16
 2006290:	003f6306 	br	2006020 <__alt_mem_epcs_flash_controller_0+0xfd005020>
 2006294:	d8802017 	ldw	r2,128(sp)
 2006298:	10000426 	beq	r2,zero,20062ac <___svfprintf_internal_r+0x394>
 200629c:	d9402c17 	ldw	r5,176(sp)
 20062a0:	d9003917 	ldw	r4,228(sp)
 20062a4:	d9801e04 	addi	r6,sp,120
 20062a8:	200ed180 	call	200ed18 <__ssprint_r>
 20062ac:	d8802c17 	ldw	r2,176(sp)
 20062b0:	10c0030b 	ldhu	r3,12(r2)
 20062b4:	d8802f17 	ldw	r2,188(sp)
 20062b8:	18c0100c 	andi	r3,r3,64
 20062bc:	1805f51e 	bne	r3,zero,2007a94 <___svfprintf_internal_r+0x1b7c>
 20062c0:	dfc04817 	ldw	ra,288(sp)
 20062c4:	df004717 	ldw	fp,284(sp)
 20062c8:	ddc04617 	ldw	r23,280(sp)
 20062cc:	dd804517 	ldw	r22,276(sp)
 20062d0:	dd404417 	ldw	r21,272(sp)
 20062d4:	dd004317 	ldw	r20,268(sp)
 20062d8:	dcc04217 	ldw	r19,264(sp)
 20062dc:	dc804117 	ldw	r18,260(sp)
 20062e0:	dc404017 	ldw	r17,256(sp)
 20062e4:	dc003f17 	ldw	r16,252(sp)
 20062e8:	dec04904 	addi	sp,sp,292
 20062ec:	f800283a 	ret
 20062f0:	d8802d17 	ldw	r2,180(sp)
 20062f4:	d9002d17 	ldw	r4,180(sp)
 20062f8:	10800017 	ldw	r2,0(r2)
 20062fc:	d8803115 	stw	r2,196(sp)
 2006300:	20800104 	addi	r2,r4,4
 2006304:	d9003117 	ldw	r4,196(sp)
 2006308:	203fb916 	blt	r4,zero,20061f0 <__alt_mem_epcs_flash_controller_0+0xfd0051f0>
 200630c:	d8802d15 	stw	r2,180(sp)
 2006310:	bc400007 	ldb	r17,0(r23)
 2006314:	003f5406 	br	2006068 <__alt_mem_epcs_flash_controller_0+0xfd005068>
 2006318:	bc400007 	ldb	r17,0(r23)
 200631c:	bac00044 	addi	r11,r23,1
 2006320:	8a873926 	beq	r17,r10,2008008 <___svfprintf_internal_r+0x20f0>
 2006324:	88bff404 	addi	r2,r17,-48
 2006328:	0009883a 	mov	r4,zero
 200632c:	30868836 	bltu	r6,r2,2007d50 <___svfprintf_internal_r+0x1e38>
 2006330:	5c400007 	ldb	r17,0(r11)
 2006334:	210002a4 	muli	r4,r4,10
 2006338:	5dc00044 	addi	r23,r11,1
 200633c:	b817883a 	mov	r11,r23
 2006340:	2089883a 	add	r4,r4,r2
 2006344:	88bff404 	addi	r2,r17,-48
 2006348:	30bff92e 	bgeu	r6,r2,2006330 <__alt_mem_epcs_flash_controller_0+0xfd005330>
 200634c:	2005d716 	blt	r4,zero,2007aac <___svfprintf_internal_r+0x1b94>
 2006350:	d9002915 	stw	r4,164(sp)
 2006354:	003f4506 	br	200606c <__alt_mem_epcs_flash_controller_0+0xfd00506c>
 2006358:	b809883a 	mov	r4,r23
 200635c:	d8003115 	stw	zero,196(sp)
 2006360:	88bff404 	addi	r2,r17,-48
 2006364:	0017883a 	mov	r11,zero
 2006368:	24400007 	ldb	r17,0(r4)
 200636c:	5ac002a4 	muli	r11,r11,10
 2006370:	bdc00044 	addi	r23,r23,1
 2006374:	b809883a 	mov	r4,r23
 2006378:	12d7883a 	add	r11,r2,r11
 200637c:	88bff404 	addi	r2,r17,-48
 2006380:	30bff92e 	bgeu	r6,r2,2006368 <__alt_mem_epcs_flash_controller_0+0xfd005368>
 2006384:	dac03115 	stw	r11,196(sp)
 2006388:	003f3806 	br	200606c <__alt_mem_epcs_flash_controller_0+0xfd00506c>
 200638c:	94802014 	ori	r18,r18,128
 2006390:	bc400007 	ldb	r17,0(r23)
 2006394:	003f3406 	br	2006068 <__alt_mem_epcs_flash_controller_0+0xfd005068>
 2006398:	18c03fcc 	andi	r3,r3,255
 200639c:	1807471e 	bne	r3,zero,20080bc <___svfprintf_internal_r+0x21a4>
 20063a0:	9080020c 	andi	r2,r18,8
 20063a4:	10047d26 	beq	r2,zero,200759c <___svfprintf_internal_r+0x1684>
 20063a8:	d8c02d17 	ldw	r3,180(sp)
 20063ac:	d9002d17 	ldw	r4,180(sp)
 20063b0:	d9402d17 	ldw	r5,180(sp)
 20063b4:	18c00017 	ldw	r3,0(r3)
 20063b8:	21000117 	ldw	r4,4(r4)
 20063bc:	29400204 	addi	r5,r5,8
 20063c0:	d8c03615 	stw	r3,216(sp)
 20063c4:	d9003715 	stw	r4,220(sp)
 20063c8:	d9402d15 	stw	r5,180(sp)
 20063cc:	d9003617 	ldw	r4,216(sp)
 20063d0:	d9403717 	ldw	r5,220(sp)
 20063d4:	da003e15 	stw	r8,248(sp)
 20063d8:	04000044 	movi	r16,1
 20063dc:	2002b000 	call	2002b00 <__fpclassifyd>
 20063e0:	da003e17 	ldw	r8,248(sp)
 20063e4:	14044b1e 	bne	r2,r16,2007514 <___svfprintf_internal_r+0x15fc>
 20063e8:	d9003617 	ldw	r4,216(sp)
 20063ec:	d9403717 	ldw	r5,220(sp)
 20063f0:	000d883a 	mov	r6,zero
 20063f4:	000f883a 	mov	r7,zero
 20063f8:	2003d100 	call	2003d10 <__ledf2>
 20063fc:	da003e17 	ldw	r8,248(sp)
 2006400:	1005f316 	blt	r2,zero,2007bd0 <___svfprintf_internal_r+0x1cb8>
 2006404:	df002783 	ldbu	fp,158(sp)
 2006408:	008011c4 	movi	r2,71
 200640c:	1445590e 	bge	r2,r17,2007974 <___svfprintf_internal_r+0x1a5c>
 2006410:	04008134 	movhi	r16,516
 2006414:	8430d704 	addi	r16,r16,-15524
 2006418:	00c000c4 	movi	r3,3
 200641c:	00bfdfc4 	movi	r2,-129
 2006420:	d8c02a15 	stw	r3,168(sp)
 2006424:	90a4703a 	and	r18,r18,r2
 2006428:	d8c02e15 	stw	r3,184(sp)
 200642c:	d8002915 	stw	zero,164(sp)
 2006430:	d8003215 	stw	zero,200(sp)
 2006434:	00006606 	br	20065d0 <___svfprintf_internal_r+0x6b8>
 2006438:	94800214 	ori	r18,r18,8
 200643c:	bc400007 	ldb	r17,0(r23)
 2006440:	003f0906 	br	2006068 <__alt_mem_epcs_flash_controller_0+0xfd005068>
 2006444:	18c03fcc 	andi	r3,r3,255
 2006448:	1807181e 	bne	r3,zero,20080ac <___svfprintf_internal_r+0x2194>
 200644c:	94800414 	ori	r18,r18,16
 2006450:	9080080c 	andi	r2,r18,32
 2006454:	10039626 	beq	r2,zero,20072b0 <___svfprintf_internal_r+0x1398>
 2006458:	d9402d17 	ldw	r5,180(sp)
 200645c:	28800117 	ldw	r2,4(r5)
 2006460:	2d000017 	ldw	r20,0(r5)
 2006464:	29400204 	addi	r5,r5,8
 2006468:	d9402d15 	stw	r5,180(sp)
 200646c:	102d883a 	mov	r22,r2
 2006470:	10039816 	blt	r2,zero,20072d4 <___svfprintf_internal_r+0x13bc>
 2006474:	d9402917 	ldw	r5,164(sp)
 2006478:	df002783 	ldbu	fp,158(sp)
 200647c:	2803ab16 	blt	r5,zero,200732c <___svfprintf_internal_r+0x1414>
 2006480:	00ffdfc4 	movi	r3,-129
 2006484:	a584b03a 	or	r2,r20,r22
 2006488:	90e4703a 	and	r18,r18,r3
 200648c:	10014a26 	beq	r2,zero,20069b8 <___svfprintf_internal_r+0xaa0>
 2006490:	b0034b26 	beq	r22,zero,20071c0 <___svfprintf_internal_r+0x12a8>
 2006494:	dc402a15 	stw	r17,168(sp)
 2006498:	dc001e04 	addi	r16,sp,120
 200649c:	b023883a 	mov	r17,r22
 20064a0:	402d883a 	mov	r22,r8
 20064a4:	a009883a 	mov	r4,r20
 20064a8:	880b883a 	mov	r5,r17
 20064ac:	01800284 	movi	r6,10
 20064b0:	000f883a 	mov	r7,zero
 20064b4:	20125b40 	call	20125b4 <__umoddi3>
 20064b8:	10800c04 	addi	r2,r2,48
 20064bc:	843fffc4 	addi	r16,r16,-1
 20064c0:	a009883a 	mov	r4,r20
 20064c4:	880b883a 	mov	r5,r17
 20064c8:	80800005 	stb	r2,0(r16)
 20064cc:	01800284 	movi	r6,10
 20064d0:	000f883a 	mov	r7,zero
 20064d4:	201203c0 	call	201203c <__udivdi3>
 20064d8:	1029883a 	mov	r20,r2
 20064dc:	10c4b03a 	or	r2,r2,r3
 20064e0:	1823883a 	mov	r17,r3
 20064e4:	103fef1e 	bne	r2,zero,20064a4 <__alt_mem_epcs_flash_controller_0+0xfd0054a4>
 20064e8:	d8c02817 	ldw	r3,160(sp)
 20064ec:	dc402a17 	ldw	r17,168(sp)
 20064f0:	b011883a 	mov	r8,r22
 20064f4:	1c07c83a 	sub	r3,r3,r16
 20064f8:	d8c02e15 	stw	r3,184(sp)
 20064fc:	00002e06 	br	20065b8 <___svfprintf_internal_r+0x6a0>
 2006500:	18c03fcc 	andi	r3,r3,255
 2006504:	1806e71e 	bne	r3,zero,20080a4 <___svfprintf_internal_r+0x218c>
 2006508:	94800414 	ori	r18,r18,16
 200650c:	9080080c 	andi	r2,r18,32
 2006510:	1002d426 	beq	r2,zero,2007064 <___svfprintf_internal_r+0x114c>
 2006514:	d9402d17 	ldw	r5,180(sp)
 2006518:	d8c02917 	ldw	r3,164(sp)
 200651c:	d8002785 	stb	zero,158(sp)
 2006520:	28800204 	addi	r2,r5,8
 2006524:	2d000017 	ldw	r20,0(r5)
 2006528:	2d800117 	ldw	r22,4(r5)
 200652c:	18041516 	blt	r3,zero,2007584 <___svfprintf_internal_r+0x166c>
 2006530:	013fdfc4 	movi	r4,-129
 2006534:	a586b03a 	or	r3,r20,r22
 2006538:	d8802d15 	stw	r2,180(sp)
 200653c:	9124703a 	and	r18,r18,r4
 2006540:	1802d51e 	bne	r3,zero,2007098 <___svfprintf_internal_r+0x1180>
 2006544:	d9402917 	ldw	r5,164(sp)
 2006548:	0039883a 	mov	fp,zero
 200654c:	2806be26 	beq	r5,zero,2008048 <___svfprintf_internal_r+0x2130>
 2006550:	0029883a 	mov	r20,zero
 2006554:	002d883a 	mov	r22,zero
 2006558:	dc001e04 	addi	r16,sp,120
 200655c:	a006d0fa 	srli	r3,r20,3
 2006560:	b008977a 	slli	r4,r22,29
 2006564:	b02cd0fa 	srli	r22,r22,3
 2006568:	a50001cc 	andi	r20,r20,7
 200656c:	a0800c04 	addi	r2,r20,48
 2006570:	843fffc4 	addi	r16,r16,-1
 2006574:	20e8b03a 	or	r20,r4,r3
 2006578:	80800005 	stb	r2,0(r16)
 200657c:	a586b03a 	or	r3,r20,r22
 2006580:	183ff61e 	bne	r3,zero,200655c <__alt_mem_epcs_flash_controller_0+0xfd00555c>
 2006584:	90c0004c 	andi	r3,r18,1
 2006588:	18013926 	beq	r3,zero,2006a70 <___svfprintf_internal_r+0xb58>
 200658c:	10803fcc 	andi	r2,r2,255
 2006590:	1080201c 	xori	r2,r2,128
 2006594:	10bfe004 	addi	r2,r2,-128
 2006598:	00c00c04 	movi	r3,48
 200659c:	10c13426 	beq	r2,r3,2006a70 <___svfprintf_internal_r+0xb58>
 20065a0:	80ffffc5 	stb	r3,-1(r16)
 20065a4:	d8c02817 	ldw	r3,160(sp)
 20065a8:	80bfffc4 	addi	r2,r16,-1
 20065ac:	1021883a 	mov	r16,r2
 20065b0:	1887c83a 	sub	r3,r3,r2
 20065b4:	d8c02e15 	stw	r3,184(sp)
 20065b8:	d8802e17 	ldw	r2,184(sp)
 20065bc:	d9002917 	ldw	r4,164(sp)
 20065c0:	1100010e 	bge	r2,r4,20065c8 <___svfprintf_internal_r+0x6b0>
 20065c4:	2005883a 	mov	r2,r4
 20065c8:	d8802a15 	stw	r2,168(sp)
 20065cc:	d8003215 	stw	zero,200(sp)
 20065d0:	e7003fcc 	andi	fp,fp,255
 20065d4:	e700201c 	xori	fp,fp,128
 20065d8:	e73fe004 	addi	fp,fp,-128
 20065dc:	e0000326 	beq	fp,zero,20065ec <___svfprintf_internal_r+0x6d4>
 20065e0:	d8c02a17 	ldw	r3,168(sp)
 20065e4:	18c00044 	addi	r3,r3,1
 20065e8:	d8c02a15 	stw	r3,168(sp)
 20065ec:	90c0008c 	andi	r3,r18,2
 20065f0:	d8c02b15 	stw	r3,172(sp)
 20065f4:	18000326 	beq	r3,zero,2006604 <___svfprintf_internal_r+0x6ec>
 20065f8:	d8c02a17 	ldw	r3,168(sp)
 20065fc:	18c00084 	addi	r3,r3,2
 2006600:	d8c02a15 	stw	r3,168(sp)
 2006604:	90c0210c 	andi	r3,r18,132
 2006608:	d8c03015 	stw	r3,192(sp)
 200660c:	1801a11e 	bne	r3,zero,2006c94 <___svfprintf_internal_r+0xd7c>
 2006610:	d9003117 	ldw	r4,196(sp)
 2006614:	d8c02a17 	ldw	r3,168(sp)
 2006618:	20e9c83a 	sub	r20,r4,r3
 200661c:	05019d0e 	bge	zero,r20,2006c94 <___svfprintf_internal_r+0xd7c>
 2006620:	02400404 	movi	r9,16
 2006624:	d8c02017 	ldw	r3,128(sp)
 2006628:	d8801f17 	ldw	r2,124(sp)
 200662c:	4d051b0e 	bge	r9,r20,2007a9c <___svfprintf_internal_r+0x1b84>
 2006630:	01408134 	movhi	r5,516
 2006634:	2970ea84 	addi	r5,r5,-15446
 2006638:	dc403c15 	stw	r17,240(sp)
 200663c:	d9403515 	stw	r5,212(sp)
 2006640:	a023883a 	mov	r17,r20
 2006644:	482d883a 	mov	r22,r9
 2006648:	9029883a 	mov	r20,r18
 200664c:	070001c4 	movi	fp,7
 2006650:	8025883a 	mov	r18,r16
 2006654:	dc002c17 	ldw	r16,176(sp)
 2006658:	00000306 	br	2006668 <___svfprintf_internal_r+0x750>
 200665c:	8c7ffc04 	addi	r17,r17,-16
 2006660:	42000204 	addi	r8,r8,8
 2006664:	b440130e 	bge	r22,r17,20066b4 <___svfprintf_internal_r+0x79c>
 2006668:	01008134 	movhi	r4,516
 200666c:	18c00404 	addi	r3,r3,16
 2006670:	10800044 	addi	r2,r2,1
 2006674:	2130ea84 	addi	r4,r4,-15446
 2006678:	41000015 	stw	r4,0(r8)
 200667c:	45800115 	stw	r22,4(r8)
 2006680:	d8c02015 	stw	r3,128(sp)
 2006684:	d8801f15 	stw	r2,124(sp)
 2006688:	e0bff40e 	bge	fp,r2,200665c <__alt_mem_epcs_flash_controller_0+0xfd00565c>
 200668c:	d9801e04 	addi	r6,sp,120
 2006690:	800b883a 	mov	r5,r16
 2006694:	9809883a 	mov	r4,r19
 2006698:	200ed180 	call	200ed18 <__ssprint_r>
 200669c:	103f031e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 20066a0:	8c7ffc04 	addi	r17,r17,-16
 20066a4:	d8c02017 	ldw	r3,128(sp)
 20066a8:	d8801f17 	ldw	r2,124(sp)
 20066ac:	da000404 	addi	r8,sp,16
 20066b0:	b47fed16 	blt	r22,r17,2006668 <__alt_mem_epcs_flash_controller_0+0xfd005668>
 20066b4:	9021883a 	mov	r16,r18
 20066b8:	a025883a 	mov	r18,r20
 20066bc:	8829883a 	mov	r20,r17
 20066c0:	dc403c17 	ldw	r17,240(sp)
 20066c4:	d9403517 	ldw	r5,212(sp)
 20066c8:	a0c7883a 	add	r3,r20,r3
 20066cc:	10800044 	addi	r2,r2,1
 20066d0:	41400015 	stw	r5,0(r8)
 20066d4:	45000115 	stw	r20,4(r8)
 20066d8:	d8c02015 	stw	r3,128(sp)
 20066dc:	d8801f15 	stw	r2,124(sp)
 20066e0:	010001c4 	movi	r4,7
 20066e4:	20829f16 	blt	r4,r2,2007164 <___svfprintf_internal_r+0x124c>
 20066e8:	df002787 	ldb	fp,158(sp)
 20066ec:	42000204 	addi	r8,r8,8
 20066f0:	e0000c26 	beq	fp,zero,2006724 <___svfprintf_internal_r+0x80c>
 20066f4:	d8801f17 	ldw	r2,124(sp)
 20066f8:	d9002784 	addi	r4,sp,158
 20066fc:	18c00044 	addi	r3,r3,1
 2006700:	10800044 	addi	r2,r2,1
 2006704:	41000015 	stw	r4,0(r8)
 2006708:	01000044 	movi	r4,1
 200670c:	41000115 	stw	r4,4(r8)
 2006710:	d8c02015 	stw	r3,128(sp)
 2006714:	d8801f15 	stw	r2,124(sp)
 2006718:	010001c4 	movi	r4,7
 200671c:	20823816 	blt	r4,r2,2007000 <___svfprintf_internal_r+0x10e8>
 2006720:	42000204 	addi	r8,r8,8
 2006724:	d8802b17 	ldw	r2,172(sp)
 2006728:	10000c26 	beq	r2,zero,200675c <___svfprintf_internal_r+0x844>
 200672c:	d8801f17 	ldw	r2,124(sp)
 2006730:	d9002704 	addi	r4,sp,156
 2006734:	18c00084 	addi	r3,r3,2
 2006738:	10800044 	addi	r2,r2,1
 200673c:	41000015 	stw	r4,0(r8)
 2006740:	01000084 	movi	r4,2
 2006744:	41000115 	stw	r4,4(r8)
 2006748:	d8c02015 	stw	r3,128(sp)
 200674c:	d8801f15 	stw	r2,124(sp)
 2006750:	010001c4 	movi	r4,7
 2006754:	20823216 	blt	r4,r2,2007020 <___svfprintf_internal_r+0x1108>
 2006758:	42000204 	addi	r8,r8,8
 200675c:	d9003017 	ldw	r4,192(sp)
 2006760:	00802004 	movi	r2,128
 2006764:	20819726 	beq	r4,r2,2006dc4 <___svfprintf_internal_r+0xeac>
 2006768:	d9402917 	ldw	r5,164(sp)
 200676c:	d8802e17 	ldw	r2,184(sp)
 2006770:	28adc83a 	sub	r22,r5,r2
 2006774:	05802f0e 	bge	zero,r22,2006834 <___svfprintf_internal_r+0x91c>
 2006778:	07000404 	movi	fp,16
 200677c:	d8801f17 	ldw	r2,124(sp)
 2006780:	e583c00e 	bge	fp,r22,2007684 <___svfprintf_internal_r+0x176c>
 2006784:	01408134 	movhi	r5,516
 2006788:	2970e684 	addi	r5,r5,-15462
 200678c:	dc402915 	stw	r17,164(sp)
 2006790:	d9402b15 	stw	r5,172(sp)
 2006794:	b023883a 	mov	r17,r22
 2006798:	050001c4 	movi	r20,7
 200679c:	902d883a 	mov	r22,r18
 20067a0:	8025883a 	mov	r18,r16
 20067a4:	dc002c17 	ldw	r16,176(sp)
 20067a8:	00000306 	br	20067b8 <___svfprintf_internal_r+0x8a0>
 20067ac:	8c7ffc04 	addi	r17,r17,-16
 20067b0:	42000204 	addi	r8,r8,8
 20067b4:	e440110e 	bge	fp,r17,20067fc <___svfprintf_internal_r+0x8e4>
 20067b8:	18c00404 	addi	r3,r3,16
 20067bc:	10800044 	addi	r2,r2,1
 20067c0:	45400015 	stw	r21,0(r8)
 20067c4:	47000115 	stw	fp,4(r8)
 20067c8:	d8c02015 	stw	r3,128(sp)
 20067cc:	d8801f15 	stw	r2,124(sp)
 20067d0:	a0bff60e 	bge	r20,r2,20067ac <__alt_mem_epcs_flash_controller_0+0xfd0057ac>
 20067d4:	d9801e04 	addi	r6,sp,120
 20067d8:	800b883a 	mov	r5,r16
 20067dc:	9809883a 	mov	r4,r19
 20067e0:	200ed180 	call	200ed18 <__ssprint_r>
 20067e4:	103eb11e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 20067e8:	8c7ffc04 	addi	r17,r17,-16
 20067ec:	d8c02017 	ldw	r3,128(sp)
 20067f0:	d8801f17 	ldw	r2,124(sp)
 20067f4:	da000404 	addi	r8,sp,16
 20067f8:	e47fef16 	blt	fp,r17,20067b8 <__alt_mem_epcs_flash_controller_0+0xfd0057b8>
 20067fc:	9021883a 	mov	r16,r18
 2006800:	b025883a 	mov	r18,r22
 2006804:	882d883a 	mov	r22,r17
 2006808:	dc402917 	ldw	r17,164(sp)
 200680c:	d9002b17 	ldw	r4,172(sp)
 2006810:	1d87883a 	add	r3,r3,r22
 2006814:	10800044 	addi	r2,r2,1
 2006818:	41000015 	stw	r4,0(r8)
 200681c:	45800115 	stw	r22,4(r8)
 2006820:	d8c02015 	stw	r3,128(sp)
 2006824:	d8801f15 	stw	r2,124(sp)
 2006828:	010001c4 	movi	r4,7
 200682c:	2081ec16 	blt	r4,r2,2006fe0 <___svfprintf_internal_r+0x10c8>
 2006830:	42000204 	addi	r8,r8,8
 2006834:	9080400c 	andi	r2,r18,256
 2006838:	1001181e 	bne	r2,zero,2006c9c <___svfprintf_internal_r+0xd84>
 200683c:	d9402e17 	ldw	r5,184(sp)
 2006840:	d8801f17 	ldw	r2,124(sp)
 2006844:	44000015 	stw	r16,0(r8)
 2006848:	1947883a 	add	r3,r3,r5
 200684c:	10800044 	addi	r2,r2,1
 2006850:	41400115 	stw	r5,4(r8)
 2006854:	d8c02015 	stw	r3,128(sp)
 2006858:	d8801f15 	stw	r2,124(sp)
 200685c:	010001c4 	movi	r4,7
 2006860:	2081d116 	blt	r4,r2,2006fa8 <___svfprintf_internal_r+0x1090>
 2006864:	42000204 	addi	r8,r8,8
 2006868:	9480010c 	andi	r18,r18,4
 200686c:	90003226 	beq	r18,zero,2006938 <___svfprintf_internal_r+0xa20>
 2006870:	d9403117 	ldw	r5,196(sp)
 2006874:	d8802a17 	ldw	r2,168(sp)
 2006878:	28a1c83a 	sub	r16,r5,r2
 200687c:	04002e0e 	bge	zero,r16,2006938 <___svfprintf_internal_r+0xa20>
 2006880:	04400404 	movi	r17,16
 2006884:	d8801f17 	ldw	r2,124(sp)
 2006888:	8c04b90e 	bge	r17,r16,2007b70 <___svfprintf_internal_r+0x1c58>
 200688c:	01408134 	movhi	r5,516
 2006890:	2970ea84 	addi	r5,r5,-15446
 2006894:	d9403515 	stw	r5,212(sp)
 2006898:	048001c4 	movi	r18,7
 200689c:	dd002c17 	ldw	r20,176(sp)
 20068a0:	00000306 	br	20068b0 <___svfprintf_internal_r+0x998>
 20068a4:	843ffc04 	addi	r16,r16,-16
 20068a8:	42000204 	addi	r8,r8,8
 20068ac:	8c00130e 	bge	r17,r16,20068fc <___svfprintf_internal_r+0x9e4>
 20068b0:	01008134 	movhi	r4,516
 20068b4:	18c00404 	addi	r3,r3,16
 20068b8:	10800044 	addi	r2,r2,1
 20068bc:	2130ea84 	addi	r4,r4,-15446
 20068c0:	41000015 	stw	r4,0(r8)
 20068c4:	44400115 	stw	r17,4(r8)
 20068c8:	d8c02015 	stw	r3,128(sp)
 20068cc:	d8801f15 	stw	r2,124(sp)
 20068d0:	90bff40e 	bge	r18,r2,20068a4 <__alt_mem_epcs_flash_controller_0+0xfd0058a4>
 20068d4:	d9801e04 	addi	r6,sp,120
 20068d8:	a00b883a 	mov	r5,r20
 20068dc:	9809883a 	mov	r4,r19
 20068e0:	200ed180 	call	200ed18 <__ssprint_r>
 20068e4:	103e711e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 20068e8:	843ffc04 	addi	r16,r16,-16
 20068ec:	d8c02017 	ldw	r3,128(sp)
 20068f0:	d8801f17 	ldw	r2,124(sp)
 20068f4:	da000404 	addi	r8,sp,16
 20068f8:	8c3fed16 	blt	r17,r16,20068b0 <__alt_mem_epcs_flash_controller_0+0xfd0058b0>
 20068fc:	d9403517 	ldw	r5,212(sp)
 2006900:	1c07883a 	add	r3,r3,r16
 2006904:	10800044 	addi	r2,r2,1
 2006908:	41400015 	stw	r5,0(r8)
 200690c:	44000115 	stw	r16,4(r8)
 2006910:	d8c02015 	stw	r3,128(sp)
 2006914:	d8801f15 	stw	r2,124(sp)
 2006918:	010001c4 	movi	r4,7
 200691c:	2080060e 	bge	r4,r2,2006938 <___svfprintf_internal_r+0xa20>
 2006920:	d9402c17 	ldw	r5,176(sp)
 2006924:	d9801e04 	addi	r6,sp,120
 2006928:	9809883a 	mov	r4,r19
 200692c:	200ed180 	call	200ed18 <__ssprint_r>
 2006930:	103e5e1e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2006934:	d8c02017 	ldw	r3,128(sp)
 2006938:	d8803117 	ldw	r2,196(sp)
 200693c:	d9002a17 	ldw	r4,168(sp)
 2006940:	1100010e 	bge	r2,r4,2006948 <___svfprintf_internal_r+0xa30>
 2006944:	2005883a 	mov	r2,r4
 2006948:	d9402f17 	ldw	r5,188(sp)
 200694c:	288b883a 	add	r5,r5,r2
 2006950:	d9402f15 	stw	r5,188(sp)
 2006954:	18019c1e 	bne	r3,zero,2006fc8 <___svfprintf_internal_r+0x10b0>
 2006958:	b8800007 	ldb	r2,0(r23)
 200695c:	d8001f15 	stw	zero,124(sp)
 2006960:	da000404 	addi	r8,sp,16
 2006964:	103d991e 	bne	r2,zero,2005fcc <__alt_mem_epcs_flash_controller_0+0xfd004fcc>
 2006968:	b821883a 	mov	r16,r23
 200696c:	003daf06 	br	200602c <__alt_mem_epcs_flash_controller_0+0xfd00502c>
 2006970:	18c03fcc 	andi	r3,r3,255
 2006974:	1805c71e 	bne	r3,zero,2008094 <___svfprintf_internal_r+0x217c>
 2006978:	94800414 	ori	r18,r18,16
 200697c:	9080080c 	andi	r2,r18,32
 2006980:	10020126 	beq	r2,zero,2007188 <___svfprintf_internal_r+0x1270>
 2006984:	d8802d17 	ldw	r2,180(sp)
 2006988:	d9002917 	ldw	r4,164(sp)
 200698c:	d8002785 	stb	zero,158(sp)
 2006990:	10c00204 	addi	r3,r2,8
 2006994:	15000017 	ldw	r20,0(r2)
 2006998:	15800117 	ldw	r22,4(r2)
 200699c:	20038e16 	blt	r4,zero,20077d8 <___svfprintf_internal_r+0x18c0>
 20069a0:	013fdfc4 	movi	r4,-129
 20069a4:	a584b03a 	or	r2,r20,r22
 20069a8:	d8c02d15 	stw	r3,180(sp)
 20069ac:	9124703a 	and	r18,r18,r4
 20069b0:	0039883a 	mov	fp,zero
 20069b4:	103eb61e 	bne	r2,zero,2006490 <__alt_mem_epcs_flash_controller_0+0xfd005490>
 20069b8:	d8802917 	ldw	r2,164(sp)
 20069bc:	1002c81e 	bne	r2,zero,20074e0 <___svfprintf_internal_r+0x15c8>
 20069c0:	d8002915 	stw	zero,164(sp)
 20069c4:	d8002e15 	stw	zero,184(sp)
 20069c8:	dc001e04 	addi	r16,sp,120
 20069cc:	003efa06 	br	20065b8 <__alt_mem_epcs_flash_controller_0+0xfd0055b8>
 20069d0:	18c03fcc 	andi	r3,r3,255
 20069d4:	1805ad1e 	bne	r3,zero,200808c <___svfprintf_internal_r+0x2174>
 20069d8:	01408134 	movhi	r5,516
 20069dc:	2970da04 	addi	r5,r5,-15512
 20069e0:	d9403a15 	stw	r5,232(sp)
 20069e4:	9080080c 	andi	r2,r18,32
 20069e8:	10006126 	beq	r2,zero,2006b70 <___svfprintf_internal_r+0xc58>
 20069ec:	d8802d17 	ldw	r2,180(sp)
 20069f0:	15000017 	ldw	r20,0(r2)
 20069f4:	15800117 	ldw	r22,4(r2)
 20069f8:	10800204 	addi	r2,r2,8
 20069fc:	d8802d15 	stw	r2,180(sp)
 2006a00:	9080004c 	andi	r2,r18,1
 2006a04:	10018e26 	beq	r2,zero,2007040 <___svfprintf_internal_r+0x1128>
 2006a08:	a584b03a 	or	r2,r20,r22
 2006a0c:	10030926 	beq	r2,zero,2007634 <___svfprintf_internal_r+0x171c>
 2006a10:	d8c02917 	ldw	r3,164(sp)
 2006a14:	00800c04 	movi	r2,48
 2006a18:	d8802705 	stb	r2,156(sp)
 2006a1c:	dc402745 	stb	r17,157(sp)
 2006a20:	d8002785 	stb	zero,158(sp)
 2006a24:	90800094 	ori	r2,r18,2
 2006a28:	18048716 	blt	r3,zero,2007c48 <___svfprintf_internal_r+0x1d30>
 2006a2c:	00bfdfc4 	movi	r2,-129
 2006a30:	90a4703a 	and	r18,r18,r2
 2006a34:	94800094 	ori	r18,r18,2
 2006a38:	0039883a 	mov	fp,zero
 2006a3c:	d9003a17 	ldw	r4,232(sp)
 2006a40:	dc001e04 	addi	r16,sp,120
 2006a44:	a08003cc 	andi	r2,r20,15
 2006a48:	b006973a 	slli	r3,r22,28
 2006a4c:	2085883a 	add	r2,r4,r2
 2006a50:	a028d13a 	srli	r20,r20,4
 2006a54:	10800003 	ldbu	r2,0(r2)
 2006a58:	b02cd13a 	srli	r22,r22,4
 2006a5c:	843fffc4 	addi	r16,r16,-1
 2006a60:	1d28b03a 	or	r20,r3,r20
 2006a64:	80800005 	stb	r2,0(r16)
 2006a68:	a584b03a 	or	r2,r20,r22
 2006a6c:	103ff51e 	bne	r2,zero,2006a44 <__alt_mem_epcs_flash_controller_0+0xfd005a44>
 2006a70:	d8c02817 	ldw	r3,160(sp)
 2006a74:	1c07c83a 	sub	r3,r3,r16
 2006a78:	d8c02e15 	stw	r3,184(sp)
 2006a7c:	003ece06 	br	20065b8 <__alt_mem_epcs_flash_controller_0+0xfd0055b8>
 2006a80:	d8c02d17 	ldw	r3,180(sp)
 2006a84:	d9002d17 	ldw	r4,180(sp)
 2006a88:	d8002785 	stb	zero,158(sp)
 2006a8c:	18800017 	ldw	r2,0(r3)
 2006a90:	21000104 	addi	r4,r4,4
 2006a94:	00c00044 	movi	r3,1
 2006a98:	d8c02a15 	stw	r3,168(sp)
 2006a9c:	d8801405 	stb	r2,80(sp)
 2006aa0:	d9002d15 	stw	r4,180(sp)
 2006aa4:	d8c02e15 	stw	r3,184(sp)
 2006aa8:	d8002915 	stw	zero,164(sp)
 2006aac:	d8003215 	stw	zero,200(sp)
 2006ab0:	dc001404 	addi	r16,sp,80
 2006ab4:	0039883a 	mov	fp,zero
 2006ab8:	003ecc06 	br	20065ec <__alt_mem_epcs_flash_controller_0+0xfd0055ec>
 2006abc:	18c03fcc 	andi	r3,r3,255
 2006ac0:	183e9226 	beq	r3,zero,200650c <__alt_mem_epcs_flash_controller_0+0xfd00550c>
 2006ac4:	d9c02785 	stb	r7,158(sp)
 2006ac8:	003e9006 	br	200650c <__alt_mem_epcs_flash_controller_0+0xfd00550c>
 2006acc:	00c00044 	movi	r3,1
 2006ad0:	01c00ac4 	movi	r7,43
 2006ad4:	bc400007 	ldb	r17,0(r23)
 2006ad8:	003d6306 	br	2006068 <__alt_mem_epcs_flash_controller_0+0xfd005068>
 2006adc:	94800814 	ori	r18,r18,32
 2006ae0:	bc400007 	ldb	r17,0(r23)
 2006ae4:	003d6006 	br	2006068 <__alt_mem_epcs_flash_controller_0+0xfd005068>
 2006ae8:	d8c02d17 	ldw	r3,180(sp)
 2006aec:	d8002785 	stb	zero,158(sp)
 2006af0:	1c000017 	ldw	r16,0(r3)
 2006af4:	1d000104 	addi	r20,r3,4
 2006af8:	80040f26 	beq	r16,zero,2007b38 <___svfprintf_internal_r+0x1c20>
 2006afc:	d9002917 	ldw	r4,164(sp)
 2006b00:	2003dc16 	blt	r4,zero,2007a74 <___svfprintf_internal_r+0x1b5c>
 2006b04:	200d883a 	mov	r6,r4
 2006b08:	000b883a 	mov	r5,zero
 2006b0c:	8009883a 	mov	r4,r16
 2006b10:	da003e15 	stw	r8,248(sp)
 2006b14:	200d2180 	call	200d218 <memchr>
 2006b18:	da003e17 	ldw	r8,248(sp)
 2006b1c:	10045826 	beq	r2,zero,2007c80 <___svfprintf_internal_r+0x1d68>
 2006b20:	1405c83a 	sub	r2,r2,r16
 2006b24:	d8802e15 	stw	r2,184(sp)
 2006b28:	1003d816 	blt	r2,zero,2007a8c <___svfprintf_internal_r+0x1b74>
 2006b2c:	df002783 	ldbu	fp,158(sp)
 2006b30:	d8802a15 	stw	r2,168(sp)
 2006b34:	dd002d15 	stw	r20,180(sp)
 2006b38:	d8002915 	stw	zero,164(sp)
 2006b3c:	d8003215 	stw	zero,200(sp)
 2006b40:	003ea306 	br	20065d0 <__alt_mem_epcs_flash_controller_0+0xfd0055d0>
 2006b44:	18c03fcc 	andi	r3,r3,255
 2006b48:	183f8c26 	beq	r3,zero,200697c <__alt_mem_epcs_flash_controller_0+0xfd00597c>
 2006b4c:	d9c02785 	stb	r7,158(sp)
 2006b50:	003f8a06 	br	200697c <__alt_mem_epcs_flash_controller_0+0xfd00597c>
 2006b54:	18c03fcc 	andi	r3,r3,255
 2006b58:	1805631e 	bne	r3,zero,20080e8 <___svfprintf_internal_r+0x21d0>
 2006b5c:	01408134 	movhi	r5,516
 2006b60:	2970df04 	addi	r5,r5,-15492
 2006b64:	d9403a15 	stw	r5,232(sp)
 2006b68:	9080080c 	andi	r2,r18,32
 2006b6c:	103f9f1e 	bne	r2,zero,20069ec <__alt_mem_epcs_flash_controller_0+0xfd0059ec>
 2006b70:	9080040c 	andi	r2,r18,16
 2006b74:	10029c26 	beq	r2,zero,20075e8 <___svfprintf_internal_r+0x16d0>
 2006b78:	d8c02d17 	ldw	r3,180(sp)
 2006b7c:	002d883a 	mov	r22,zero
 2006b80:	1d000017 	ldw	r20,0(r3)
 2006b84:	18c00104 	addi	r3,r3,4
 2006b88:	d8c02d15 	stw	r3,180(sp)
 2006b8c:	003f9c06 	br	2006a00 <__alt_mem_epcs_flash_controller_0+0xfd005a00>
 2006b90:	94800054 	ori	r18,r18,1
 2006b94:	bc400007 	ldb	r17,0(r23)
 2006b98:	003d3306 	br	2006068 <__alt_mem_epcs_flash_controller_0+0xfd005068>
 2006b9c:	38803fcc 	andi	r2,r7,255
 2006ba0:	1080201c 	xori	r2,r2,128
 2006ba4:	10bfe004 	addi	r2,r2,-128
 2006ba8:	1002971e 	bne	r2,zero,2007608 <___svfprintf_internal_r+0x16f0>
 2006bac:	00c00044 	movi	r3,1
 2006bb0:	01c00804 	movi	r7,32
 2006bb4:	bc400007 	ldb	r17,0(r23)
 2006bb8:	003d2b06 	br	2006068 <__alt_mem_epcs_flash_controller_0+0xfd005068>
 2006bbc:	18c03fcc 	andi	r3,r3,255
 2006bc0:	183e2326 	beq	r3,zero,2006450 <__alt_mem_epcs_flash_controller_0+0xfd005450>
 2006bc4:	d9c02785 	stb	r7,158(sp)
 2006bc8:	003e2106 	br	2006450 <__alt_mem_epcs_flash_controller_0+0xfd005450>
 2006bcc:	bc400007 	ldb	r17,0(r23)
 2006bd0:	8a430426 	beq	r17,r9,20077e4 <___svfprintf_internal_r+0x18cc>
 2006bd4:	94800414 	ori	r18,r18,16
 2006bd8:	003d2306 	br	2006068 <__alt_mem_epcs_flash_controller_0+0xfd005068>
 2006bdc:	18c03fcc 	andi	r3,r3,255
 2006be0:	18053f1e 	bne	r3,zero,20080e0 <___svfprintf_internal_r+0x21c8>
 2006be4:	9080080c 	andi	r2,r18,32
 2006be8:	10028926 	beq	r2,zero,2007610 <___svfprintf_internal_r+0x16f8>
 2006bec:	d9402d17 	ldw	r5,180(sp)
 2006bf0:	d9002f17 	ldw	r4,188(sp)
 2006bf4:	28800017 	ldw	r2,0(r5)
 2006bf8:	2007d7fa 	srai	r3,r4,31
 2006bfc:	29400104 	addi	r5,r5,4
 2006c00:	d9402d15 	stw	r5,180(sp)
 2006c04:	11000015 	stw	r4,0(r2)
 2006c08:	10c00115 	stw	r3,4(r2)
 2006c0c:	003ced06 	br	2005fc4 <__alt_mem_epcs_flash_controller_0+0xfd004fc4>
 2006c10:	94801014 	ori	r18,r18,64
 2006c14:	bc400007 	ldb	r17,0(r23)
 2006c18:	003d1306 	br	2006068 <__alt_mem_epcs_flash_controller_0+0xfd005068>
 2006c1c:	01008134 	movhi	r4,516
 2006c20:	2130df04 	addi	r4,r4,-15492
 2006c24:	0039883a 	mov	fp,zero
 2006c28:	d9003a15 	stw	r4,232(sp)
 2006c2c:	04401e04 	movi	r17,120
 2006c30:	003f8206 	br	2006a3c <__alt_mem_epcs_flash_controller_0+0xfd005a3c>
 2006c34:	18c03fcc 	andi	r3,r3,255
 2006c38:	1805221e 	bne	r3,zero,20080c4 <___svfprintf_internal_r+0x21ac>
 2006c3c:	883d9526 	beq	r17,zero,2006294 <__alt_mem_epcs_flash_controller_0+0xfd005294>
 2006c40:	00c00044 	movi	r3,1
 2006c44:	d8c02a15 	stw	r3,168(sp)
 2006c48:	dc401405 	stb	r17,80(sp)
 2006c4c:	d8002785 	stb	zero,158(sp)
 2006c50:	003f9406 	br	2006aa4 <__alt_mem_epcs_flash_controller_0+0xfd005aa4>
 2006c54:	01008134 	movhi	r4,516
 2006c58:	2130df04 	addi	r4,r4,-15492
 2006c5c:	d9003a15 	stw	r4,232(sp)
 2006c60:	d8c02d15 	stw	r3,180(sp)
 2006c64:	1025883a 	mov	r18,r2
 2006c68:	04401e04 	movi	r17,120
 2006c6c:	a584b03a 	or	r2,r20,r22
 2006c70:	1000fa1e 	bne	r2,zero,200705c <___svfprintf_internal_r+0x1144>
 2006c74:	0039883a 	mov	fp,zero
 2006c78:	00800084 	movi	r2,2
 2006c7c:	10803fcc 	andi	r2,r2,255
 2006c80:	00c00044 	movi	r3,1
 2006c84:	10c21626 	beq	r2,r3,20074e0 <___svfprintf_internal_r+0x15c8>
 2006c88:	00c00084 	movi	r3,2
 2006c8c:	10fe301e 	bne	r2,r3,2006550 <__alt_mem_epcs_flash_controller_0+0xfd005550>
 2006c90:	003d7606 	br	200626c <__alt_mem_epcs_flash_controller_0+0xfd00526c>
 2006c94:	d8c02017 	ldw	r3,128(sp)
 2006c98:	003e9506 	br	20066f0 <__alt_mem_epcs_flash_controller_0+0xfd0056f0>
 2006c9c:	00801944 	movi	r2,101
 2006ca0:	14407c0e 	bge	r2,r17,2006e94 <___svfprintf_internal_r+0xf7c>
 2006ca4:	d9003617 	ldw	r4,216(sp)
 2006ca8:	d9403717 	ldw	r5,220(sp)
 2006cac:	000d883a 	mov	r6,zero
 2006cb0:	000f883a 	mov	r7,zero
 2006cb4:	d8c03d15 	stw	r3,244(sp)
 2006cb8:	da003e15 	stw	r8,248(sp)
 2006cbc:	2012aec0 	call	2012aec <__eqdf2>
 2006cc0:	d8c03d17 	ldw	r3,244(sp)
 2006cc4:	da003e17 	ldw	r8,248(sp)
 2006cc8:	1000f51e 	bne	r2,zero,20070a0 <___svfprintf_internal_r+0x1188>
 2006ccc:	d8801f17 	ldw	r2,124(sp)
 2006cd0:	01008134 	movhi	r4,516
 2006cd4:	2130e604 	addi	r4,r4,-15464
 2006cd8:	18c00044 	addi	r3,r3,1
 2006cdc:	10800044 	addi	r2,r2,1
 2006ce0:	41000015 	stw	r4,0(r8)
 2006ce4:	01000044 	movi	r4,1
 2006ce8:	41000115 	stw	r4,4(r8)
 2006cec:	d8c02015 	stw	r3,128(sp)
 2006cf0:	d8801f15 	stw	r2,124(sp)
 2006cf4:	010001c4 	movi	r4,7
 2006cf8:	20826616 	blt	r4,r2,2007694 <___svfprintf_internal_r+0x177c>
 2006cfc:	42000204 	addi	r8,r8,8
 2006d00:	d8802617 	ldw	r2,152(sp)
 2006d04:	d9403317 	ldw	r5,204(sp)
 2006d08:	11400216 	blt	r2,r5,2006d14 <___svfprintf_internal_r+0xdfc>
 2006d0c:	9080004c 	andi	r2,r18,1
 2006d10:	103ed526 	beq	r2,zero,2006868 <__alt_mem_epcs_flash_controller_0+0xfd005868>
 2006d14:	d8803817 	ldw	r2,224(sp)
 2006d18:	d9003417 	ldw	r4,208(sp)
 2006d1c:	d9403817 	ldw	r5,224(sp)
 2006d20:	1887883a 	add	r3,r3,r2
 2006d24:	d8801f17 	ldw	r2,124(sp)
 2006d28:	41000015 	stw	r4,0(r8)
 2006d2c:	41400115 	stw	r5,4(r8)
 2006d30:	10800044 	addi	r2,r2,1
 2006d34:	d8c02015 	stw	r3,128(sp)
 2006d38:	d8801f15 	stw	r2,124(sp)
 2006d3c:	010001c4 	movi	r4,7
 2006d40:	2082af16 	blt	r4,r2,2007800 <___svfprintf_internal_r+0x18e8>
 2006d44:	42000204 	addi	r8,r8,8
 2006d48:	d8803317 	ldw	r2,204(sp)
 2006d4c:	143fffc4 	addi	r16,r2,-1
 2006d50:	043ec50e 	bge	zero,r16,2006868 <__alt_mem_epcs_flash_controller_0+0xfd005868>
 2006d54:	04400404 	movi	r17,16
 2006d58:	d8801f17 	ldw	r2,124(sp)
 2006d5c:	8c00860e 	bge	r17,r16,2006f78 <___svfprintf_internal_r+0x1060>
 2006d60:	01408134 	movhi	r5,516
 2006d64:	2970e684 	addi	r5,r5,-15462
 2006d68:	d9402b15 	stw	r5,172(sp)
 2006d6c:	058001c4 	movi	r22,7
 2006d70:	dd002c17 	ldw	r20,176(sp)
 2006d74:	00000306 	br	2006d84 <___svfprintf_internal_r+0xe6c>
 2006d78:	42000204 	addi	r8,r8,8
 2006d7c:	843ffc04 	addi	r16,r16,-16
 2006d80:	8c00800e 	bge	r17,r16,2006f84 <___svfprintf_internal_r+0x106c>
 2006d84:	18c00404 	addi	r3,r3,16
 2006d88:	10800044 	addi	r2,r2,1
 2006d8c:	45400015 	stw	r21,0(r8)
 2006d90:	44400115 	stw	r17,4(r8)
 2006d94:	d8c02015 	stw	r3,128(sp)
 2006d98:	d8801f15 	stw	r2,124(sp)
 2006d9c:	b0bff60e 	bge	r22,r2,2006d78 <__alt_mem_epcs_flash_controller_0+0xfd005d78>
 2006da0:	d9801e04 	addi	r6,sp,120
 2006da4:	a00b883a 	mov	r5,r20
 2006da8:	9809883a 	mov	r4,r19
 2006dac:	200ed180 	call	200ed18 <__ssprint_r>
 2006db0:	103d3e1e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2006db4:	d8c02017 	ldw	r3,128(sp)
 2006db8:	d8801f17 	ldw	r2,124(sp)
 2006dbc:	da000404 	addi	r8,sp,16
 2006dc0:	003fee06 	br	2006d7c <__alt_mem_epcs_flash_controller_0+0xfd005d7c>
 2006dc4:	d9403117 	ldw	r5,196(sp)
 2006dc8:	d8802a17 	ldw	r2,168(sp)
 2006dcc:	28adc83a 	sub	r22,r5,r2
 2006dd0:	05be650e 	bge	zero,r22,2006768 <__alt_mem_epcs_flash_controller_0+0xfd005768>
 2006dd4:	07000404 	movi	fp,16
 2006dd8:	d8801f17 	ldw	r2,124(sp)
 2006ddc:	e583a20e 	bge	fp,r22,2007c68 <___svfprintf_internal_r+0x1d50>
 2006de0:	01408134 	movhi	r5,516
 2006de4:	2970e684 	addi	r5,r5,-15462
 2006de8:	dc403015 	stw	r17,192(sp)
 2006dec:	d9402b15 	stw	r5,172(sp)
 2006df0:	b023883a 	mov	r17,r22
 2006df4:	050001c4 	movi	r20,7
 2006df8:	902d883a 	mov	r22,r18
 2006dfc:	8025883a 	mov	r18,r16
 2006e00:	dc002c17 	ldw	r16,176(sp)
 2006e04:	00000306 	br	2006e14 <___svfprintf_internal_r+0xefc>
 2006e08:	8c7ffc04 	addi	r17,r17,-16
 2006e0c:	42000204 	addi	r8,r8,8
 2006e10:	e440110e 	bge	fp,r17,2006e58 <___svfprintf_internal_r+0xf40>
 2006e14:	18c00404 	addi	r3,r3,16
 2006e18:	10800044 	addi	r2,r2,1
 2006e1c:	45400015 	stw	r21,0(r8)
 2006e20:	47000115 	stw	fp,4(r8)
 2006e24:	d8c02015 	stw	r3,128(sp)
 2006e28:	d8801f15 	stw	r2,124(sp)
 2006e2c:	a0bff60e 	bge	r20,r2,2006e08 <__alt_mem_epcs_flash_controller_0+0xfd005e08>
 2006e30:	d9801e04 	addi	r6,sp,120
 2006e34:	800b883a 	mov	r5,r16
 2006e38:	9809883a 	mov	r4,r19
 2006e3c:	200ed180 	call	200ed18 <__ssprint_r>
 2006e40:	103d1a1e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2006e44:	8c7ffc04 	addi	r17,r17,-16
 2006e48:	d8c02017 	ldw	r3,128(sp)
 2006e4c:	d8801f17 	ldw	r2,124(sp)
 2006e50:	da000404 	addi	r8,sp,16
 2006e54:	e47fef16 	blt	fp,r17,2006e14 <__alt_mem_epcs_flash_controller_0+0xfd005e14>
 2006e58:	9021883a 	mov	r16,r18
 2006e5c:	b025883a 	mov	r18,r22
 2006e60:	882d883a 	mov	r22,r17
 2006e64:	dc403017 	ldw	r17,192(sp)
 2006e68:	d9002b17 	ldw	r4,172(sp)
 2006e6c:	1d87883a 	add	r3,r3,r22
 2006e70:	10800044 	addi	r2,r2,1
 2006e74:	41000015 	stw	r4,0(r8)
 2006e78:	45800115 	stw	r22,4(r8)
 2006e7c:	d8c02015 	stw	r3,128(sp)
 2006e80:	d8801f15 	stw	r2,124(sp)
 2006e84:	010001c4 	movi	r4,7
 2006e88:	20819a16 	blt	r4,r2,20074f4 <___svfprintf_internal_r+0x15dc>
 2006e8c:	42000204 	addi	r8,r8,8
 2006e90:	003e3506 	br	2006768 <__alt_mem_epcs_flash_controller_0+0xfd005768>
 2006e94:	d9403317 	ldw	r5,204(sp)
 2006e98:	00800044 	movi	r2,1
 2006e9c:	18c00044 	addi	r3,r3,1
 2006ea0:	1141710e 	bge	r2,r5,2007468 <___svfprintf_internal_r+0x1550>
 2006ea4:	dc401f17 	ldw	r17,124(sp)
 2006ea8:	00800044 	movi	r2,1
 2006eac:	40800115 	stw	r2,4(r8)
 2006eb0:	8c400044 	addi	r17,r17,1
 2006eb4:	44000015 	stw	r16,0(r8)
 2006eb8:	d8c02015 	stw	r3,128(sp)
 2006ebc:	dc401f15 	stw	r17,124(sp)
 2006ec0:	008001c4 	movi	r2,7
 2006ec4:	14417416 	blt	r2,r17,2007498 <___svfprintf_internal_r+0x1580>
 2006ec8:	42000204 	addi	r8,r8,8
 2006ecc:	d8803817 	ldw	r2,224(sp)
 2006ed0:	d9003417 	ldw	r4,208(sp)
 2006ed4:	8c400044 	addi	r17,r17,1
 2006ed8:	10c7883a 	add	r3,r2,r3
 2006edc:	40800115 	stw	r2,4(r8)
 2006ee0:	41000015 	stw	r4,0(r8)
 2006ee4:	d8c02015 	stw	r3,128(sp)
 2006ee8:	dc401f15 	stw	r17,124(sp)
 2006eec:	008001c4 	movi	r2,7
 2006ef0:	14417216 	blt	r2,r17,20074bc <___svfprintf_internal_r+0x15a4>
 2006ef4:	45800204 	addi	r22,r8,8
 2006ef8:	d9003617 	ldw	r4,216(sp)
 2006efc:	d9403717 	ldw	r5,220(sp)
 2006f00:	000d883a 	mov	r6,zero
 2006f04:	000f883a 	mov	r7,zero
 2006f08:	d8c03d15 	stw	r3,244(sp)
 2006f0c:	2012aec0 	call	2012aec <__eqdf2>
 2006f10:	d8c03d17 	ldw	r3,244(sp)
 2006f14:	1000b326 	beq	r2,zero,20071e4 <___svfprintf_internal_r+0x12cc>
 2006f18:	d9403317 	ldw	r5,204(sp)
 2006f1c:	84000044 	addi	r16,r16,1
 2006f20:	8c400044 	addi	r17,r17,1
 2006f24:	28bfffc4 	addi	r2,r5,-1
 2006f28:	1887883a 	add	r3,r3,r2
 2006f2c:	b0800115 	stw	r2,4(r22)
 2006f30:	b4000015 	stw	r16,0(r22)
 2006f34:	d8c02015 	stw	r3,128(sp)
 2006f38:	dc401f15 	stw	r17,124(sp)
 2006f3c:	008001c4 	movi	r2,7
 2006f40:	1440d216 	blt	r2,r17,200728c <___svfprintf_internal_r+0x1374>
 2006f44:	b5800204 	addi	r22,r22,8
 2006f48:	d9003b17 	ldw	r4,236(sp)
 2006f4c:	df0022c4 	addi	fp,sp,139
 2006f50:	8c400044 	addi	r17,r17,1
 2006f54:	20c7883a 	add	r3,r4,r3
 2006f58:	b7000015 	stw	fp,0(r22)
 2006f5c:	b1000115 	stw	r4,4(r22)
 2006f60:	d8c02015 	stw	r3,128(sp)
 2006f64:	dc401f15 	stw	r17,124(sp)
 2006f68:	008001c4 	movi	r2,7
 2006f6c:	14400e16 	blt	r2,r17,2006fa8 <___svfprintf_internal_r+0x1090>
 2006f70:	b2000204 	addi	r8,r22,8
 2006f74:	003e3c06 	br	2006868 <__alt_mem_epcs_flash_controller_0+0xfd005868>
 2006f78:	01008134 	movhi	r4,516
 2006f7c:	2130e684 	addi	r4,r4,-15462
 2006f80:	d9002b15 	stw	r4,172(sp)
 2006f84:	d9002b17 	ldw	r4,172(sp)
 2006f88:	1c07883a 	add	r3,r3,r16
 2006f8c:	44000115 	stw	r16,4(r8)
 2006f90:	41000015 	stw	r4,0(r8)
 2006f94:	10800044 	addi	r2,r2,1
 2006f98:	d8c02015 	stw	r3,128(sp)
 2006f9c:	d8801f15 	stw	r2,124(sp)
 2006fa0:	010001c4 	movi	r4,7
 2006fa4:	20be2f0e 	bge	r4,r2,2006864 <__alt_mem_epcs_flash_controller_0+0xfd005864>
 2006fa8:	d9402c17 	ldw	r5,176(sp)
 2006fac:	d9801e04 	addi	r6,sp,120
 2006fb0:	9809883a 	mov	r4,r19
 2006fb4:	200ed180 	call	200ed18 <__ssprint_r>
 2006fb8:	103cbc1e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2006fbc:	d8c02017 	ldw	r3,128(sp)
 2006fc0:	da000404 	addi	r8,sp,16
 2006fc4:	003e2806 	br	2006868 <__alt_mem_epcs_flash_controller_0+0xfd005868>
 2006fc8:	d9402c17 	ldw	r5,176(sp)
 2006fcc:	d9801e04 	addi	r6,sp,120
 2006fd0:	9809883a 	mov	r4,r19
 2006fd4:	200ed180 	call	200ed18 <__ssprint_r>
 2006fd8:	103e5f26 	beq	r2,zero,2006958 <__alt_mem_epcs_flash_controller_0+0xfd005958>
 2006fdc:	003cb306 	br	20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2006fe0:	d9402c17 	ldw	r5,176(sp)
 2006fe4:	d9801e04 	addi	r6,sp,120
 2006fe8:	9809883a 	mov	r4,r19
 2006fec:	200ed180 	call	200ed18 <__ssprint_r>
 2006ff0:	103cae1e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2006ff4:	d8c02017 	ldw	r3,128(sp)
 2006ff8:	da000404 	addi	r8,sp,16
 2006ffc:	003e0d06 	br	2006834 <__alt_mem_epcs_flash_controller_0+0xfd005834>
 2007000:	d9402c17 	ldw	r5,176(sp)
 2007004:	d9801e04 	addi	r6,sp,120
 2007008:	9809883a 	mov	r4,r19
 200700c:	200ed180 	call	200ed18 <__ssprint_r>
 2007010:	103ca61e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2007014:	d8c02017 	ldw	r3,128(sp)
 2007018:	da000404 	addi	r8,sp,16
 200701c:	003dc106 	br	2006724 <__alt_mem_epcs_flash_controller_0+0xfd005724>
 2007020:	d9402c17 	ldw	r5,176(sp)
 2007024:	d9801e04 	addi	r6,sp,120
 2007028:	9809883a 	mov	r4,r19
 200702c:	200ed180 	call	200ed18 <__ssprint_r>
 2007030:	103c9e1e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2007034:	d8c02017 	ldw	r3,128(sp)
 2007038:	da000404 	addi	r8,sp,16
 200703c:	003dc706 	br	200675c <__alt_mem_epcs_flash_controller_0+0xfd00575c>
 2007040:	d8802917 	ldw	r2,164(sp)
 2007044:	d8002785 	stb	zero,158(sp)
 2007048:	103f0816 	blt	r2,zero,2006c6c <__alt_mem_epcs_flash_controller_0+0xfd005c6c>
 200704c:	00ffdfc4 	movi	r3,-129
 2007050:	a584b03a 	or	r2,r20,r22
 2007054:	90e4703a 	and	r18,r18,r3
 2007058:	103c8126 	beq	r2,zero,2006260 <__alt_mem_epcs_flash_controller_0+0xfd005260>
 200705c:	0039883a 	mov	fp,zero
 2007060:	003e7606 	br	2006a3c <__alt_mem_epcs_flash_controller_0+0xfd005a3c>
 2007064:	9080040c 	andi	r2,r18,16
 2007068:	10013d26 	beq	r2,zero,2007560 <___svfprintf_internal_r+0x1648>
 200706c:	d9002d17 	ldw	r4,180(sp)
 2007070:	d9402917 	ldw	r5,164(sp)
 2007074:	d8002785 	stb	zero,158(sp)
 2007078:	20800104 	addi	r2,r4,4
 200707c:	25000017 	ldw	r20,0(r4)
 2007080:	002d883a 	mov	r22,zero
 2007084:	28013f16 	blt	r5,zero,2007584 <___svfprintf_internal_r+0x166c>
 2007088:	00ffdfc4 	movi	r3,-129
 200708c:	d8802d15 	stw	r2,180(sp)
 2007090:	90e4703a 	and	r18,r18,r3
 2007094:	a03d2b26 	beq	r20,zero,2006544 <__alt_mem_epcs_flash_controller_0+0xfd005544>
 2007098:	0039883a 	mov	fp,zero
 200709c:	003d2e06 	br	2006558 <__alt_mem_epcs_flash_controller_0+0xfd005558>
 20070a0:	dc402617 	ldw	r17,152(sp)
 20070a4:	0441830e 	bge	zero,r17,20076b4 <___svfprintf_internal_r+0x179c>
 20070a8:	dc403217 	ldw	r17,200(sp)
 20070ac:	d8803317 	ldw	r2,204(sp)
 20070b0:	1440010e 	bge	r2,r17,20070b8 <___svfprintf_internal_r+0x11a0>
 20070b4:	1023883a 	mov	r17,r2
 20070b8:	04400a0e 	bge	zero,r17,20070e4 <___svfprintf_internal_r+0x11cc>
 20070bc:	d8801f17 	ldw	r2,124(sp)
 20070c0:	1c47883a 	add	r3,r3,r17
 20070c4:	44000015 	stw	r16,0(r8)
 20070c8:	10800044 	addi	r2,r2,1
 20070cc:	44400115 	stw	r17,4(r8)
 20070d0:	d8c02015 	stw	r3,128(sp)
 20070d4:	d8801f15 	stw	r2,124(sp)
 20070d8:	010001c4 	movi	r4,7
 20070dc:	20827516 	blt	r4,r2,2007ab4 <___svfprintf_internal_r+0x1b9c>
 20070e0:	42000204 	addi	r8,r8,8
 20070e4:	88027b16 	blt	r17,zero,2007ad4 <___svfprintf_internal_r+0x1bbc>
 20070e8:	d9003217 	ldw	r4,200(sp)
 20070ec:	2463c83a 	sub	r17,r4,r17
 20070f0:	0440990e 	bge	zero,r17,2007358 <___svfprintf_internal_r+0x1440>
 20070f4:	05800404 	movi	r22,16
 20070f8:	d8801f17 	ldw	r2,124(sp)
 20070fc:	b441530e 	bge	r22,r17,200764c <___svfprintf_internal_r+0x1734>
 2007100:	01008134 	movhi	r4,516
 2007104:	2130e684 	addi	r4,r4,-15462
 2007108:	d9002b15 	stw	r4,172(sp)
 200710c:	070001c4 	movi	fp,7
 2007110:	dd002c17 	ldw	r20,176(sp)
 2007114:	00000306 	br	2007124 <___svfprintf_internal_r+0x120c>
 2007118:	42000204 	addi	r8,r8,8
 200711c:	8c7ffc04 	addi	r17,r17,-16
 2007120:	b4414d0e 	bge	r22,r17,2007658 <___svfprintf_internal_r+0x1740>
 2007124:	18c00404 	addi	r3,r3,16
 2007128:	10800044 	addi	r2,r2,1
 200712c:	45400015 	stw	r21,0(r8)
 2007130:	45800115 	stw	r22,4(r8)
 2007134:	d8c02015 	stw	r3,128(sp)
 2007138:	d8801f15 	stw	r2,124(sp)
 200713c:	e0bff60e 	bge	fp,r2,2007118 <__alt_mem_epcs_flash_controller_0+0xfd006118>
 2007140:	d9801e04 	addi	r6,sp,120
 2007144:	a00b883a 	mov	r5,r20
 2007148:	9809883a 	mov	r4,r19
 200714c:	200ed180 	call	200ed18 <__ssprint_r>
 2007150:	103c561e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2007154:	d8c02017 	ldw	r3,128(sp)
 2007158:	d8801f17 	ldw	r2,124(sp)
 200715c:	da000404 	addi	r8,sp,16
 2007160:	003fee06 	br	200711c <__alt_mem_epcs_flash_controller_0+0xfd00611c>
 2007164:	d9402c17 	ldw	r5,176(sp)
 2007168:	d9801e04 	addi	r6,sp,120
 200716c:	9809883a 	mov	r4,r19
 2007170:	200ed180 	call	200ed18 <__ssprint_r>
 2007174:	103c4d1e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2007178:	d8c02017 	ldw	r3,128(sp)
 200717c:	df002787 	ldb	fp,158(sp)
 2007180:	da000404 	addi	r8,sp,16
 2007184:	003d5a06 	br	20066f0 <__alt_mem_epcs_flash_controller_0+0xfd0056f0>
 2007188:	9080040c 	andi	r2,r18,16
 200718c:	10005c26 	beq	r2,zero,2007300 <___svfprintf_internal_r+0x13e8>
 2007190:	d9402d17 	ldw	r5,180(sp)
 2007194:	d8c02917 	ldw	r3,164(sp)
 2007198:	d8002785 	stb	zero,158(sp)
 200719c:	28800104 	addi	r2,r5,4
 20071a0:	2d000017 	ldw	r20,0(r5)
 20071a4:	002d883a 	mov	r22,zero
 20071a8:	18005e16 	blt	r3,zero,2007324 <___svfprintf_internal_r+0x140c>
 20071ac:	00ffdfc4 	movi	r3,-129
 20071b0:	d8802d15 	stw	r2,180(sp)
 20071b4:	90e4703a 	and	r18,r18,r3
 20071b8:	0039883a 	mov	fp,zero
 20071bc:	a03dfe26 	beq	r20,zero,20069b8 <__alt_mem_epcs_flash_controller_0+0xfd0059b8>
 20071c0:	00800244 	movi	r2,9
 20071c4:	153cb336 	bltu	r2,r20,2006494 <__alt_mem_epcs_flash_controller_0+0xfd005494>
 20071c8:	a5000c04 	addi	r20,r20,48
 20071cc:	dc001dc4 	addi	r16,sp,119
 20071d0:	dd001dc5 	stb	r20,119(sp)
 20071d4:	d8c02817 	ldw	r3,160(sp)
 20071d8:	1c07c83a 	sub	r3,r3,r16
 20071dc:	d8c02e15 	stw	r3,184(sp)
 20071e0:	003cf506 	br	20065b8 <__alt_mem_epcs_flash_controller_0+0xfd0055b8>
 20071e4:	d8803317 	ldw	r2,204(sp)
 20071e8:	143fffc4 	addi	r16,r2,-1
 20071ec:	043f560e 	bge	zero,r16,2006f48 <__alt_mem_epcs_flash_controller_0+0xfd005f48>
 20071f0:	07000404 	movi	fp,16
 20071f4:	e403530e 	bge	fp,r16,2007f44 <___svfprintf_internal_r+0x202c>
 20071f8:	01408134 	movhi	r5,516
 20071fc:	2970e684 	addi	r5,r5,-15462
 2007200:	d9402b15 	stw	r5,172(sp)
 2007204:	01c001c4 	movi	r7,7
 2007208:	dd002c17 	ldw	r20,176(sp)
 200720c:	00000306 	br	200721c <___svfprintf_internal_r+0x1304>
 2007210:	843ffc04 	addi	r16,r16,-16
 2007214:	b5800204 	addi	r22,r22,8
 2007218:	e400130e 	bge	fp,r16,2007268 <___svfprintf_internal_r+0x1350>
 200721c:	18c00404 	addi	r3,r3,16
 2007220:	8c400044 	addi	r17,r17,1
 2007224:	b5400015 	stw	r21,0(r22)
 2007228:	b7000115 	stw	fp,4(r22)
 200722c:	d8c02015 	stw	r3,128(sp)
 2007230:	dc401f15 	stw	r17,124(sp)
 2007234:	3c7ff60e 	bge	r7,r17,2007210 <__alt_mem_epcs_flash_controller_0+0xfd006210>
 2007238:	d9801e04 	addi	r6,sp,120
 200723c:	a00b883a 	mov	r5,r20
 2007240:	9809883a 	mov	r4,r19
 2007244:	d9c03d15 	stw	r7,244(sp)
 2007248:	200ed180 	call	200ed18 <__ssprint_r>
 200724c:	d9c03d17 	ldw	r7,244(sp)
 2007250:	103c161e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2007254:	843ffc04 	addi	r16,r16,-16
 2007258:	d8c02017 	ldw	r3,128(sp)
 200725c:	dc401f17 	ldw	r17,124(sp)
 2007260:	dd800404 	addi	r22,sp,16
 2007264:	e43fed16 	blt	fp,r16,200721c <__alt_mem_epcs_flash_controller_0+0xfd00621c>
 2007268:	d8802b17 	ldw	r2,172(sp)
 200726c:	1c07883a 	add	r3,r3,r16
 2007270:	8c400044 	addi	r17,r17,1
 2007274:	b0800015 	stw	r2,0(r22)
 2007278:	b4000115 	stw	r16,4(r22)
 200727c:	d8c02015 	stw	r3,128(sp)
 2007280:	dc401f15 	stw	r17,124(sp)
 2007284:	008001c4 	movi	r2,7
 2007288:	147f2e0e 	bge	r2,r17,2006f44 <__alt_mem_epcs_flash_controller_0+0xfd005f44>
 200728c:	d9402c17 	ldw	r5,176(sp)
 2007290:	d9801e04 	addi	r6,sp,120
 2007294:	9809883a 	mov	r4,r19
 2007298:	200ed180 	call	200ed18 <__ssprint_r>
 200729c:	103c031e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 20072a0:	d8c02017 	ldw	r3,128(sp)
 20072a4:	dc401f17 	ldw	r17,124(sp)
 20072a8:	dd800404 	addi	r22,sp,16
 20072ac:	003f2606 	br	2006f48 <__alt_mem_epcs_flash_controller_0+0xfd005f48>
 20072b0:	9080040c 	andi	r2,r18,16
 20072b4:	1000c326 	beq	r2,zero,20075c4 <___svfprintf_internal_r+0x16ac>
 20072b8:	d8802d17 	ldw	r2,180(sp)
 20072bc:	15000017 	ldw	r20,0(r2)
 20072c0:	10800104 	addi	r2,r2,4
 20072c4:	d8802d15 	stw	r2,180(sp)
 20072c8:	a02dd7fa 	srai	r22,r20,31
 20072cc:	b005883a 	mov	r2,r22
 20072d0:	103c680e 	bge	r2,zero,2006474 <__alt_mem_epcs_flash_controller_0+0xfd005474>
 20072d4:	0529c83a 	sub	r20,zero,r20
 20072d8:	a004c03a 	cmpne	r2,r20,zero
 20072dc:	05adc83a 	sub	r22,zero,r22
 20072e0:	b0adc83a 	sub	r22,r22,r2
 20072e4:	d8802917 	ldw	r2,164(sp)
 20072e8:	07000b44 	movi	fp,45
 20072ec:	df002785 	stb	fp,158(sp)
 20072f0:	10022e16 	blt	r2,zero,2007bac <___svfprintf_internal_r+0x1c94>
 20072f4:	00bfdfc4 	movi	r2,-129
 20072f8:	90a4703a 	and	r18,r18,r2
 20072fc:	003c6406 	br	2006490 <__alt_mem_epcs_flash_controller_0+0xfd005490>
 2007300:	9080100c 	andi	r2,r18,64
 2007304:	d8002785 	stb	zero,158(sp)
 2007308:	10012526 	beq	r2,zero,20077a0 <___svfprintf_internal_r+0x1888>
 200730c:	d9002d17 	ldw	r4,180(sp)
 2007310:	d9402917 	ldw	r5,164(sp)
 2007314:	002d883a 	mov	r22,zero
 2007318:	20800104 	addi	r2,r4,4
 200731c:	2500000b 	ldhu	r20,0(r4)
 2007320:	283fa20e 	bge	r5,zero,20071ac <__alt_mem_epcs_flash_controller_0+0xfd0061ac>
 2007324:	d8802d15 	stw	r2,180(sp)
 2007328:	0039883a 	mov	fp,zero
 200732c:	a584b03a 	or	r2,r20,r22
 2007330:	103c571e 	bne	r2,zero,2006490 <__alt_mem_epcs_flash_controller_0+0xfd005490>
 2007334:	00800044 	movi	r2,1
 2007338:	003e5006 	br	2006c7c <__alt_mem_epcs_flash_controller_0+0xfd005c7c>
 200733c:	d9402c17 	ldw	r5,176(sp)
 2007340:	d9801e04 	addi	r6,sp,120
 2007344:	9809883a 	mov	r4,r19
 2007348:	200ed180 	call	200ed18 <__ssprint_r>
 200734c:	103bd71e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2007350:	d8c02017 	ldw	r3,128(sp)
 2007354:	da000404 	addi	r8,sp,16
 2007358:	d9003217 	ldw	r4,200(sp)
 200735c:	d8802617 	ldw	r2,152(sp)
 2007360:	d9403317 	ldw	r5,204(sp)
 2007364:	8123883a 	add	r17,r16,r4
 2007368:	11400216 	blt	r2,r5,2007374 <___svfprintf_internal_r+0x145c>
 200736c:	9100004c 	andi	r4,r18,1
 2007370:	20000d26 	beq	r4,zero,20073a8 <___svfprintf_internal_r+0x1490>
 2007374:	d9003817 	ldw	r4,224(sp)
 2007378:	d9403417 	ldw	r5,208(sp)
 200737c:	1907883a 	add	r3,r3,r4
 2007380:	d9001f17 	ldw	r4,124(sp)
 2007384:	41400015 	stw	r5,0(r8)
 2007388:	d9403817 	ldw	r5,224(sp)
 200738c:	21000044 	addi	r4,r4,1
 2007390:	d8c02015 	stw	r3,128(sp)
 2007394:	41400115 	stw	r5,4(r8)
 2007398:	d9001f15 	stw	r4,124(sp)
 200739c:	014001c4 	movi	r5,7
 20073a0:	2901dc16 	blt	r5,r4,2007b14 <___svfprintf_internal_r+0x1bfc>
 20073a4:	42000204 	addi	r8,r8,8
 20073a8:	d9003317 	ldw	r4,204(sp)
 20073ac:	8121883a 	add	r16,r16,r4
 20073b0:	2085c83a 	sub	r2,r4,r2
 20073b4:	8461c83a 	sub	r16,r16,r17
 20073b8:	1400010e 	bge	r2,r16,20073c0 <___svfprintf_internal_r+0x14a8>
 20073bc:	1021883a 	mov	r16,r2
 20073c0:	04000a0e 	bge	zero,r16,20073ec <___svfprintf_internal_r+0x14d4>
 20073c4:	d9001f17 	ldw	r4,124(sp)
 20073c8:	1c07883a 	add	r3,r3,r16
 20073cc:	44400015 	stw	r17,0(r8)
 20073d0:	21000044 	addi	r4,r4,1
 20073d4:	44000115 	stw	r16,4(r8)
 20073d8:	d8c02015 	stw	r3,128(sp)
 20073dc:	d9001f15 	stw	r4,124(sp)
 20073e0:	014001c4 	movi	r5,7
 20073e4:	2901e616 	blt	r5,r4,2007b80 <___svfprintf_internal_r+0x1c68>
 20073e8:	42000204 	addi	r8,r8,8
 20073ec:	8001f616 	blt	r16,zero,2007bc8 <___svfprintf_internal_r+0x1cb0>
 20073f0:	1421c83a 	sub	r16,r2,r16
 20073f4:	043d1c0e 	bge	zero,r16,2006868 <__alt_mem_epcs_flash_controller_0+0xfd005868>
 20073f8:	04400404 	movi	r17,16
 20073fc:	d8801f17 	ldw	r2,124(sp)
 2007400:	8c3edd0e 	bge	r17,r16,2006f78 <__alt_mem_epcs_flash_controller_0+0xfd005f78>
 2007404:	01408134 	movhi	r5,516
 2007408:	2970e684 	addi	r5,r5,-15462
 200740c:	d9402b15 	stw	r5,172(sp)
 2007410:	058001c4 	movi	r22,7
 2007414:	dd002c17 	ldw	r20,176(sp)
 2007418:	00000306 	br	2007428 <___svfprintf_internal_r+0x1510>
 200741c:	42000204 	addi	r8,r8,8
 2007420:	843ffc04 	addi	r16,r16,-16
 2007424:	8c3ed70e 	bge	r17,r16,2006f84 <__alt_mem_epcs_flash_controller_0+0xfd005f84>
 2007428:	18c00404 	addi	r3,r3,16
 200742c:	10800044 	addi	r2,r2,1
 2007430:	45400015 	stw	r21,0(r8)
 2007434:	44400115 	stw	r17,4(r8)
 2007438:	d8c02015 	stw	r3,128(sp)
 200743c:	d8801f15 	stw	r2,124(sp)
 2007440:	b0bff60e 	bge	r22,r2,200741c <__alt_mem_epcs_flash_controller_0+0xfd00641c>
 2007444:	d9801e04 	addi	r6,sp,120
 2007448:	a00b883a 	mov	r5,r20
 200744c:	9809883a 	mov	r4,r19
 2007450:	200ed180 	call	200ed18 <__ssprint_r>
 2007454:	103b951e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2007458:	d8c02017 	ldw	r3,128(sp)
 200745c:	d8801f17 	ldw	r2,124(sp)
 2007460:	da000404 	addi	r8,sp,16
 2007464:	003fee06 	br	2007420 <__alt_mem_epcs_flash_controller_0+0xfd006420>
 2007468:	9088703a 	and	r4,r18,r2
 200746c:	203e8d1e 	bne	r4,zero,2006ea4 <__alt_mem_epcs_flash_controller_0+0xfd005ea4>
 2007470:	dc401f17 	ldw	r17,124(sp)
 2007474:	40800115 	stw	r2,4(r8)
 2007478:	44000015 	stw	r16,0(r8)
 200747c:	8c400044 	addi	r17,r17,1
 2007480:	d8c02015 	stw	r3,128(sp)
 2007484:	dc401f15 	stw	r17,124(sp)
 2007488:	008001c4 	movi	r2,7
 200748c:	147f7f16 	blt	r2,r17,200728c <__alt_mem_epcs_flash_controller_0+0xfd00628c>
 2007490:	45800204 	addi	r22,r8,8
 2007494:	003eac06 	br	2006f48 <__alt_mem_epcs_flash_controller_0+0xfd005f48>
 2007498:	d9402c17 	ldw	r5,176(sp)
 200749c:	d9801e04 	addi	r6,sp,120
 20074a0:	9809883a 	mov	r4,r19
 20074a4:	200ed180 	call	200ed18 <__ssprint_r>
 20074a8:	103b801e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 20074ac:	d8c02017 	ldw	r3,128(sp)
 20074b0:	dc401f17 	ldw	r17,124(sp)
 20074b4:	da000404 	addi	r8,sp,16
 20074b8:	003e8406 	br	2006ecc <__alt_mem_epcs_flash_controller_0+0xfd005ecc>
 20074bc:	d9402c17 	ldw	r5,176(sp)
 20074c0:	d9801e04 	addi	r6,sp,120
 20074c4:	9809883a 	mov	r4,r19
 20074c8:	200ed180 	call	200ed18 <__ssprint_r>
 20074cc:	103b771e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 20074d0:	d8c02017 	ldw	r3,128(sp)
 20074d4:	dc401f17 	ldw	r17,124(sp)
 20074d8:	dd800404 	addi	r22,sp,16
 20074dc:	003e8606 	br	2006ef8 <__alt_mem_epcs_flash_controller_0+0xfd005ef8>
 20074e0:	0029883a 	mov	r20,zero
 20074e4:	a5000c04 	addi	r20,r20,48
 20074e8:	dc001dc4 	addi	r16,sp,119
 20074ec:	dd001dc5 	stb	r20,119(sp)
 20074f0:	003f3806 	br	20071d4 <__alt_mem_epcs_flash_controller_0+0xfd0061d4>
 20074f4:	d9402c17 	ldw	r5,176(sp)
 20074f8:	d9801e04 	addi	r6,sp,120
 20074fc:	9809883a 	mov	r4,r19
 2007500:	200ed180 	call	200ed18 <__ssprint_r>
 2007504:	103b691e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2007508:	d8c02017 	ldw	r3,128(sp)
 200750c:	da000404 	addi	r8,sp,16
 2007510:	003c9506 	br	2006768 <__alt_mem_epcs_flash_controller_0+0xfd005768>
 2007514:	d9003617 	ldw	r4,216(sp)
 2007518:	d9403717 	ldw	r5,220(sp)
 200751c:	da003e15 	stw	r8,248(sp)
 2007520:	2002b000 	call	2002b00 <__fpclassifyd>
 2007524:	da003e17 	ldw	r8,248(sp)
 2007528:	1000bd1e 	bne	r2,zero,2007820 <___svfprintf_internal_r+0x1908>
 200752c:	008011c4 	movi	r2,71
 2007530:	14411e0e 	bge	r2,r17,20079ac <___svfprintf_internal_r+0x1a94>
 2007534:	04008134 	movhi	r16,516
 2007538:	8430d904 	addi	r16,r16,-15516
 200753c:	00c000c4 	movi	r3,3
 2007540:	00bfdfc4 	movi	r2,-129
 2007544:	d8c02a15 	stw	r3,168(sp)
 2007548:	90a4703a 	and	r18,r18,r2
 200754c:	df002783 	ldbu	fp,158(sp)
 2007550:	d8c02e15 	stw	r3,184(sp)
 2007554:	d8002915 	stw	zero,164(sp)
 2007558:	d8003215 	stw	zero,200(sp)
 200755c:	003c1c06 	br	20065d0 <__alt_mem_epcs_flash_controller_0+0xfd0055d0>
 2007560:	9080100c 	andi	r2,r18,64
 2007564:	d8002785 	stb	zero,158(sp)
 2007568:	10009426 	beq	r2,zero,20077bc <___svfprintf_internal_r+0x18a4>
 200756c:	d8c02d17 	ldw	r3,180(sp)
 2007570:	d9002917 	ldw	r4,164(sp)
 2007574:	002d883a 	mov	r22,zero
 2007578:	18800104 	addi	r2,r3,4
 200757c:	1d00000b 	ldhu	r20,0(r3)
 2007580:	203ec10e 	bge	r4,zero,2007088 <__alt_mem_epcs_flash_controller_0+0xfd006088>
 2007584:	a586b03a 	or	r3,r20,r22
 2007588:	d8802d15 	stw	r2,180(sp)
 200758c:	183ec21e 	bne	r3,zero,2007098 <__alt_mem_epcs_flash_controller_0+0xfd006098>
 2007590:	0039883a 	mov	fp,zero
 2007594:	0005883a 	mov	r2,zero
 2007598:	003db806 	br	2006c7c <__alt_mem_epcs_flash_controller_0+0xfd005c7c>
 200759c:	d8802d17 	ldw	r2,180(sp)
 20075a0:	d8c02d17 	ldw	r3,180(sp)
 20075a4:	d9002d17 	ldw	r4,180(sp)
 20075a8:	10800017 	ldw	r2,0(r2)
 20075ac:	18c00117 	ldw	r3,4(r3)
 20075b0:	21000204 	addi	r4,r4,8
 20075b4:	d8803615 	stw	r2,216(sp)
 20075b8:	d8c03715 	stw	r3,220(sp)
 20075bc:	d9002d15 	stw	r4,180(sp)
 20075c0:	003b8206 	br	20063cc <__alt_mem_epcs_flash_controller_0+0xfd0053cc>
 20075c4:	9080100c 	andi	r2,r18,64
 20075c8:	10010726 	beq	r2,zero,20079e8 <___svfprintf_internal_r+0x1ad0>
 20075cc:	d8c02d17 	ldw	r3,180(sp)
 20075d0:	1d00000f 	ldh	r20,0(r3)
 20075d4:	18c00104 	addi	r3,r3,4
 20075d8:	d8c02d15 	stw	r3,180(sp)
 20075dc:	a02dd7fa 	srai	r22,r20,31
 20075e0:	b005883a 	mov	r2,r22
 20075e4:	003ba206 	br	2006470 <__alt_mem_epcs_flash_controller_0+0xfd005470>
 20075e8:	9080100c 	andi	r2,r18,64
 20075ec:	10010526 	beq	r2,zero,2007a04 <___svfprintf_internal_r+0x1aec>
 20075f0:	d9002d17 	ldw	r4,180(sp)
 20075f4:	002d883a 	mov	r22,zero
 20075f8:	2500000b 	ldhu	r20,0(r4)
 20075fc:	21000104 	addi	r4,r4,4
 2007600:	d9002d15 	stw	r4,180(sp)
 2007604:	003cfe06 	br	2006a00 <__alt_mem_epcs_flash_controller_0+0xfd005a00>
 2007608:	bc400007 	ldb	r17,0(r23)
 200760c:	003a9606 	br	2006068 <__alt_mem_epcs_flash_controller_0+0xfd005068>
 2007610:	9080040c 	andi	r2,r18,16
 2007614:	10010126 	beq	r2,zero,2007a1c <___svfprintf_internal_r+0x1b04>
 2007618:	d9402d17 	ldw	r5,180(sp)
 200761c:	d8c02f17 	ldw	r3,188(sp)
 2007620:	28800017 	ldw	r2,0(r5)
 2007624:	29400104 	addi	r5,r5,4
 2007628:	d9402d15 	stw	r5,180(sp)
 200762c:	10c00015 	stw	r3,0(r2)
 2007630:	003a6406 	br	2005fc4 <__alt_mem_epcs_flash_controller_0+0xfd004fc4>
 2007634:	d9002917 	ldw	r4,164(sp)
 2007638:	d8002785 	stb	zero,158(sp)
 200763c:	203d8d16 	blt	r4,zero,2006c74 <__alt_mem_epcs_flash_controller_0+0xfd005c74>
 2007640:	00bfdfc4 	movi	r2,-129
 2007644:	90a4703a 	and	r18,r18,r2
 2007648:	003b0506 	br	2006260 <__alt_mem_epcs_flash_controller_0+0xfd005260>
 200764c:	01408134 	movhi	r5,516
 2007650:	2970e684 	addi	r5,r5,-15462
 2007654:	d9402b15 	stw	r5,172(sp)
 2007658:	d9402b17 	ldw	r5,172(sp)
 200765c:	1c47883a 	add	r3,r3,r17
 2007660:	10800044 	addi	r2,r2,1
 2007664:	41400015 	stw	r5,0(r8)
 2007668:	44400115 	stw	r17,4(r8)
 200766c:	d8c02015 	stw	r3,128(sp)
 2007670:	d8801f15 	stw	r2,124(sp)
 2007674:	010001c4 	movi	r4,7
 2007678:	20bf3016 	blt	r4,r2,200733c <__alt_mem_epcs_flash_controller_0+0xfd00633c>
 200767c:	42000204 	addi	r8,r8,8
 2007680:	003f3506 	br	2007358 <__alt_mem_epcs_flash_controller_0+0xfd006358>
 2007684:	01008134 	movhi	r4,516
 2007688:	2130e684 	addi	r4,r4,-15462
 200768c:	d9002b15 	stw	r4,172(sp)
 2007690:	003c5e06 	br	200680c <__alt_mem_epcs_flash_controller_0+0xfd00580c>
 2007694:	d9402c17 	ldw	r5,176(sp)
 2007698:	d9801e04 	addi	r6,sp,120
 200769c:	9809883a 	mov	r4,r19
 20076a0:	200ed180 	call	200ed18 <__ssprint_r>
 20076a4:	103b011e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 20076a8:	d8c02017 	ldw	r3,128(sp)
 20076ac:	da000404 	addi	r8,sp,16
 20076b0:	003d9306 	br	2006d00 <__alt_mem_epcs_flash_controller_0+0xfd005d00>
 20076b4:	d8801f17 	ldw	r2,124(sp)
 20076b8:	01408134 	movhi	r5,516
 20076bc:	01000044 	movi	r4,1
 20076c0:	18c00044 	addi	r3,r3,1
 20076c4:	10800044 	addi	r2,r2,1
 20076c8:	2970e604 	addi	r5,r5,-15464
 20076cc:	41000115 	stw	r4,4(r8)
 20076d0:	41400015 	stw	r5,0(r8)
 20076d4:	d8c02015 	stw	r3,128(sp)
 20076d8:	d8801f15 	stw	r2,124(sp)
 20076dc:	010001c4 	movi	r4,7
 20076e0:	2080b516 	blt	r4,r2,20079b8 <___svfprintf_internal_r+0x1aa0>
 20076e4:	42000204 	addi	r8,r8,8
 20076e8:	8800041e 	bne	r17,zero,20076fc <___svfprintf_internal_r+0x17e4>
 20076ec:	d8803317 	ldw	r2,204(sp)
 20076f0:	1000021e 	bne	r2,zero,20076fc <___svfprintf_internal_r+0x17e4>
 20076f4:	9080004c 	andi	r2,r18,1
 20076f8:	103c5b26 	beq	r2,zero,2006868 <__alt_mem_epcs_flash_controller_0+0xfd005868>
 20076fc:	d9003817 	ldw	r4,224(sp)
 2007700:	d8801f17 	ldw	r2,124(sp)
 2007704:	d9403417 	ldw	r5,208(sp)
 2007708:	20c7883a 	add	r3,r4,r3
 200770c:	10800044 	addi	r2,r2,1
 2007710:	41000115 	stw	r4,4(r8)
 2007714:	41400015 	stw	r5,0(r8)
 2007718:	d8c02015 	stw	r3,128(sp)
 200771c:	d8801f15 	stw	r2,124(sp)
 2007720:	010001c4 	movi	r4,7
 2007724:	20818016 	blt	r4,r2,2007d28 <___svfprintf_internal_r+0x1e10>
 2007728:	42000204 	addi	r8,r8,8
 200772c:	0463c83a 	sub	r17,zero,r17
 2007730:	0440cb0e 	bge	zero,r17,2007a60 <___svfprintf_internal_r+0x1b48>
 2007734:	05800404 	movi	r22,16
 2007738:	b440e80e 	bge	r22,r17,2007adc <___svfprintf_internal_r+0x1bc4>
 200773c:	01408134 	movhi	r5,516
 2007740:	2970e684 	addi	r5,r5,-15462
 2007744:	d9402b15 	stw	r5,172(sp)
 2007748:	070001c4 	movi	fp,7
 200774c:	dd002c17 	ldw	r20,176(sp)
 2007750:	00000306 	br	2007760 <___svfprintf_internal_r+0x1848>
 2007754:	42000204 	addi	r8,r8,8
 2007758:	8c7ffc04 	addi	r17,r17,-16
 200775c:	b440e20e 	bge	r22,r17,2007ae8 <___svfprintf_internal_r+0x1bd0>
 2007760:	18c00404 	addi	r3,r3,16
 2007764:	10800044 	addi	r2,r2,1
 2007768:	45400015 	stw	r21,0(r8)
 200776c:	45800115 	stw	r22,4(r8)
 2007770:	d8c02015 	stw	r3,128(sp)
 2007774:	d8801f15 	stw	r2,124(sp)
 2007778:	e0bff60e 	bge	fp,r2,2007754 <__alt_mem_epcs_flash_controller_0+0xfd006754>
 200777c:	d9801e04 	addi	r6,sp,120
 2007780:	a00b883a 	mov	r5,r20
 2007784:	9809883a 	mov	r4,r19
 2007788:	200ed180 	call	200ed18 <__ssprint_r>
 200778c:	103ac71e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2007790:	d8c02017 	ldw	r3,128(sp)
 2007794:	d8801f17 	ldw	r2,124(sp)
 2007798:	da000404 	addi	r8,sp,16
 200779c:	003fee06 	br	2007758 <__alt_mem_epcs_flash_controller_0+0xfd006758>
 20077a0:	d8c02d17 	ldw	r3,180(sp)
 20077a4:	d9002917 	ldw	r4,164(sp)
 20077a8:	002d883a 	mov	r22,zero
 20077ac:	18800104 	addi	r2,r3,4
 20077b0:	1d000017 	ldw	r20,0(r3)
 20077b4:	203e7d0e 	bge	r4,zero,20071ac <__alt_mem_epcs_flash_controller_0+0xfd0061ac>
 20077b8:	003eda06 	br	2007324 <__alt_mem_epcs_flash_controller_0+0xfd006324>
 20077bc:	d9402d17 	ldw	r5,180(sp)
 20077c0:	d8c02917 	ldw	r3,164(sp)
 20077c4:	002d883a 	mov	r22,zero
 20077c8:	28800104 	addi	r2,r5,4
 20077cc:	2d000017 	ldw	r20,0(r5)
 20077d0:	183e2d0e 	bge	r3,zero,2007088 <__alt_mem_epcs_flash_controller_0+0xfd006088>
 20077d4:	003f6b06 	br	2007584 <__alt_mem_epcs_flash_controller_0+0xfd006584>
 20077d8:	d8c02d15 	stw	r3,180(sp)
 20077dc:	0039883a 	mov	fp,zero
 20077e0:	003ed206 	br	200732c <__alt_mem_epcs_flash_controller_0+0xfd00632c>
 20077e4:	bc400043 	ldbu	r17,1(r23)
 20077e8:	94800814 	ori	r18,r18,32
 20077ec:	bdc00044 	addi	r23,r23,1
 20077f0:	8c403fcc 	andi	r17,r17,255
 20077f4:	8c40201c 	xori	r17,r17,128
 20077f8:	8c7fe004 	addi	r17,r17,-128
 20077fc:	003a1a06 	br	2006068 <__alt_mem_epcs_flash_controller_0+0xfd005068>
 2007800:	d9402c17 	ldw	r5,176(sp)
 2007804:	d9801e04 	addi	r6,sp,120
 2007808:	9809883a 	mov	r4,r19
 200780c:	200ed180 	call	200ed18 <__ssprint_r>
 2007810:	103aa61e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2007814:	d8c02017 	ldw	r3,128(sp)
 2007818:	da000404 	addi	r8,sp,16
 200781c:	003d4a06 	br	2006d48 <__alt_mem_epcs_flash_controller_0+0xfd005d48>
 2007820:	d9002917 	ldw	r4,164(sp)
 2007824:	05bff7c4 	movi	r22,-33
 2007828:	00bfffc4 	movi	r2,-1
 200782c:	8dac703a 	and	r22,r17,r22
 2007830:	20806a26 	beq	r4,r2,20079dc <___svfprintf_internal_r+0x1ac4>
 2007834:	008011c4 	movi	r2,71
 2007838:	b0813726 	beq	r22,r2,2007d18 <___svfprintf_internal_r+0x1e00>
 200783c:	d9003717 	ldw	r4,220(sp)
 2007840:	90c04014 	ori	r3,r18,256
 2007844:	d8c02b15 	stw	r3,172(sp)
 2007848:	20015d16 	blt	r4,zero,2007dc0 <___svfprintf_internal_r+0x1ea8>
 200784c:	dd003717 	ldw	r20,220(sp)
 2007850:	d8002a05 	stb	zero,168(sp)
 2007854:	00801984 	movi	r2,102
 2007858:	88814026 	beq	r17,r2,2007d5c <___svfprintf_internal_r+0x1e44>
 200785c:	00801184 	movi	r2,70
 2007860:	88817126 	beq	r17,r2,2007e28 <___svfprintf_internal_r+0x1f10>
 2007864:	00801144 	movi	r2,69
 2007868:	b0816226 	beq	r22,r2,2007df4 <___svfprintf_internal_r+0x1edc>
 200786c:	d8c02917 	ldw	r3,164(sp)
 2007870:	d8802104 	addi	r2,sp,132
 2007874:	d8800315 	stw	r2,12(sp)
 2007878:	d9403617 	ldw	r5,216(sp)
 200787c:	d8802504 	addi	r2,sp,148
 2007880:	d8800215 	stw	r2,8(sp)
 2007884:	d8802604 	addi	r2,sp,152
 2007888:	d8c00015 	stw	r3,0(sp)
 200788c:	d8800115 	stw	r2,4(sp)
 2007890:	01c00084 	movi	r7,2
 2007894:	a00d883a 	mov	r6,r20
 2007898:	9809883a 	mov	r4,r19
 200789c:	d8c03d15 	stw	r3,244(sp)
 20078a0:	da003e15 	stw	r8,248(sp)
 20078a4:	200a8380 	call	200a838 <_dtoa_r>
 20078a8:	1021883a 	mov	r16,r2
 20078ac:	008019c4 	movi	r2,103
 20078b0:	d8c03d17 	ldw	r3,244(sp)
 20078b4:	da003e17 	ldw	r8,248(sp)
 20078b8:	8880e726 	beq	r17,r2,2007c58 <___svfprintf_internal_r+0x1d40>
 20078bc:	008011c4 	movi	r2,71
 20078c0:	8880d426 	beq	r17,r2,2007c14 <___svfprintf_internal_r+0x1cfc>
 20078c4:	80f9883a 	add	fp,r16,r3
 20078c8:	d9003617 	ldw	r4,216(sp)
 20078cc:	000d883a 	mov	r6,zero
 20078d0:	000f883a 	mov	r7,zero
 20078d4:	a00b883a 	mov	r5,r20
 20078d8:	da003e15 	stw	r8,248(sp)
 20078dc:	2012aec0 	call	2012aec <__eqdf2>
 20078e0:	da003e17 	ldw	r8,248(sp)
 20078e4:	1000e426 	beq	r2,zero,2007c78 <___svfprintf_internal_r+0x1d60>
 20078e8:	d8802117 	ldw	r2,132(sp)
 20078ec:	1700062e 	bgeu	r2,fp,2007908 <___svfprintf_internal_r+0x19f0>
 20078f0:	01000c04 	movi	r4,48
 20078f4:	10c00044 	addi	r3,r2,1
 20078f8:	d8c02115 	stw	r3,132(sp)
 20078fc:	11000005 	stb	r4,0(r2)
 2007900:	d8802117 	ldw	r2,132(sp)
 2007904:	173ffb36 	bltu	r2,fp,20078f4 <__alt_mem_epcs_flash_controller_0+0xfd0068f4>
 2007908:	1405c83a 	sub	r2,r2,r16
 200790c:	d8803315 	stw	r2,204(sp)
 2007910:	008011c4 	movi	r2,71
 2007914:	b080c526 	beq	r22,r2,2007c2c <___svfprintf_internal_r+0x1d14>
 2007918:	00801944 	movi	r2,101
 200791c:	1441d90e 	bge	r2,r17,2008084 <___svfprintf_internal_r+0x216c>
 2007920:	d8c02617 	ldw	r3,152(sp)
 2007924:	00801984 	movi	r2,102
 2007928:	d8c03215 	stw	r3,200(sp)
 200792c:	88813426 	beq	r17,r2,2007e00 <___svfprintf_internal_r+0x1ee8>
 2007930:	d8c03217 	ldw	r3,200(sp)
 2007934:	d9003317 	ldw	r4,204(sp)
 2007938:	19012516 	blt	r3,r4,2007dd0 <___svfprintf_internal_r+0x1eb8>
 200793c:	9480004c 	andi	r18,r18,1
 2007940:	9001841e 	bne	r18,zero,2007f54 <___svfprintf_internal_r+0x203c>
 2007944:	1805883a 	mov	r2,r3
 2007948:	1801cc16 	blt	r3,zero,200807c <___svfprintf_internal_r+0x2164>
 200794c:	d8c03217 	ldw	r3,200(sp)
 2007950:	044019c4 	movi	r17,103
 2007954:	d8c02e15 	stw	r3,184(sp)
 2007958:	df002a07 	ldb	fp,168(sp)
 200795c:	e000a61e 	bne	fp,zero,2007bf8 <___svfprintf_internal_r+0x1ce0>
 2007960:	df002783 	ldbu	fp,158(sp)
 2007964:	d8802a15 	stw	r2,168(sp)
 2007968:	dc802b17 	ldw	r18,172(sp)
 200796c:	d8002915 	stw	zero,164(sp)
 2007970:	003b1706 	br	20065d0 <__alt_mem_epcs_flash_controller_0+0xfd0055d0>
 2007974:	04008134 	movhi	r16,516
 2007978:	8430d604 	addi	r16,r16,-15528
 200797c:	003aa606 	br	2006418 <__alt_mem_epcs_flash_controller_0+0xfd005418>
 2007980:	d9003917 	ldw	r4,228(sp)
 2007984:	04001004 	movi	r16,64
 2007988:	800b883a 	mov	r5,r16
 200798c:	20052780 	call	2005278 <_malloc_r>
 2007990:	d9002c17 	ldw	r4,176(sp)
 2007994:	20800015 	stw	r2,0(r4)
 2007998:	20800415 	stw	r2,16(r4)
 200799c:	1001cb26 	beq	r2,zero,20080cc <___svfprintf_internal_r+0x21b4>
 20079a0:	d8802c17 	ldw	r2,176(sp)
 20079a4:	14000515 	stw	r16,20(r2)
 20079a8:	00397606 	br	2005f84 <__alt_mem_epcs_flash_controller_0+0xfd004f84>
 20079ac:	04008134 	movhi	r16,516
 20079b0:	8430d804 	addi	r16,r16,-15520
 20079b4:	003ee106 	br	200753c <__alt_mem_epcs_flash_controller_0+0xfd00653c>
 20079b8:	d9402c17 	ldw	r5,176(sp)
 20079bc:	d9801e04 	addi	r6,sp,120
 20079c0:	9809883a 	mov	r4,r19
 20079c4:	200ed180 	call	200ed18 <__ssprint_r>
 20079c8:	103a381e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 20079cc:	dc402617 	ldw	r17,152(sp)
 20079d0:	d8c02017 	ldw	r3,128(sp)
 20079d4:	da000404 	addi	r8,sp,16
 20079d8:	003f4306 	br	20076e8 <__alt_mem_epcs_flash_controller_0+0xfd0066e8>
 20079dc:	01400184 	movi	r5,6
 20079e0:	d9402915 	stw	r5,164(sp)
 20079e4:	003f9506 	br	200783c <__alt_mem_epcs_flash_controller_0+0xfd00683c>
 20079e8:	d9002d17 	ldw	r4,180(sp)
 20079ec:	25000017 	ldw	r20,0(r4)
 20079f0:	21000104 	addi	r4,r4,4
 20079f4:	d9002d15 	stw	r4,180(sp)
 20079f8:	a02dd7fa 	srai	r22,r20,31
 20079fc:	b005883a 	mov	r2,r22
 2007a00:	003a9b06 	br	2006470 <__alt_mem_epcs_flash_controller_0+0xfd005470>
 2007a04:	d9402d17 	ldw	r5,180(sp)
 2007a08:	002d883a 	mov	r22,zero
 2007a0c:	2d000017 	ldw	r20,0(r5)
 2007a10:	29400104 	addi	r5,r5,4
 2007a14:	d9402d15 	stw	r5,180(sp)
 2007a18:	003bf906 	br	2006a00 <__alt_mem_epcs_flash_controller_0+0xfd005a00>
 2007a1c:	9480100c 	andi	r18,r18,64
 2007a20:	90006e26 	beq	r18,zero,2007bdc <___svfprintf_internal_r+0x1cc4>
 2007a24:	d9002d17 	ldw	r4,180(sp)
 2007a28:	d9402f17 	ldw	r5,188(sp)
 2007a2c:	20800017 	ldw	r2,0(r4)
 2007a30:	21000104 	addi	r4,r4,4
 2007a34:	d9002d15 	stw	r4,180(sp)
 2007a38:	1140000d 	sth	r5,0(r2)
 2007a3c:	00396106 	br	2005fc4 <__alt_mem_epcs_flash_controller_0+0xfd004fc4>
 2007a40:	d9402c17 	ldw	r5,176(sp)
 2007a44:	d9801e04 	addi	r6,sp,120
 2007a48:	9809883a 	mov	r4,r19
 2007a4c:	200ed180 	call	200ed18 <__ssprint_r>
 2007a50:	103a161e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2007a54:	d8c02017 	ldw	r3,128(sp)
 2007a58:	d8801f17 	ldw	r2,124(sp)
 2007a5c:	da000404 	addi	r8,sp,16
 2007a60:	d9403317 	ldw	r5,204(sp)
 2007a64:	10800044 	addi	r2,r2,1
 2007a68:	44000015 	stw	r16,0(r8)
 2007a6c:	28c7883a 	add	r3,r5,r3
 2007a70:	003b7706 	br	2006850 <__alt_mem_epcs_flash_controller_0+0xfd005850>
 2007a74:	8009883a 	mov	r4,r16
 2007a78:	da003e15 	stw	r8,248(sp)
 2007a7c:	2005e800 	call	2005e80 <strlen>
 2007a80:	d8802e15 	stw	r2,184(sp)
 2007a84:	da003e17 	ldw	r8,248(sp)
 2007a88:	103c280e 	bge	r2,zero,2006b2c <__alt_mem_epcs_flash_controller_0+0xfd005b2c>
 2007a8c:	0005883a 	mov	r2,zero
 2007a90:	003c2606 	br	2006b2c <__alt_mem_epcs_flash_controller_0+0xfd005b2c>
 2007a94:	00bfffc4 	movi	r2,-1
 2007a98:	003a0906 	br	20062c0 <__alt_mem_epcs_flash_controller_0+0xfd0052c0>
 2007a9c:	01008134 	movhi	r4,516
 2007aa0:	2130ea84 	addi	r4,r4,-15446
 2007aa4:	d9003515 	stw	r4,212(sp)
 2007aa8:	003b0606 	br	20066c4 <__alt_mem_epcs_flash_controller_0+0xfd0056c4>
 2007aac:	013fffc4 	movi	r4,-1
 2007ab0:	003a2706 	br	2006350 <__alt_mem_epcs_flash_controller_0+0xfd005350>
 2007ab4:	d9402c17 	ldw	r5,176(sp)
 2007ab8:	d9801e04 	addi	r6,sp,120
 2007abc:	9809883a 	mov	r4,r19
 2007ac0:	200ed180 	call	200ed18 <__ssprint_r>
 2007ac4:	1039f91e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2007ac8:	d8c02017 	ldw	r3,128(sp)
 2007acc:	da000404 	addi	r8,sp,16
 2007ad0:	003d8406 	br	20070e4 <__alt_mem_epcs_flash_controller_0+0xfd0060e4>
 2007ad4:	0023883a 	mov	r17,zero
 2007ad8:	003d8306 	br	20070e8 <__alt_mem_epcs_flash_controller_0+0xfd0060e8>
 2007adc:	01008134 	movhi	r4,516
 2007ae0:	2130e684 	addi	r4,r4,-15462
 2007ae4:	d9002b15 	stw	r4,172(sp)
 2007ae8:	d9002b17 	ldw	r4,172(sp)
 2007aec:	1c47883a 	add	r3,r3,r17
 2007af0:	10800044 	addi	r2,r2,1
 2007af4:	41000015 	stw	r4,0(r8)
 2007af8:	44400115 	stw	r17,4(r8)
 2007afc:	d8c02015 	stw	r3,128(sp)
 2007b00:	d8801f15 	stw	r2,124(sp)
 2007b04:	010001c4 	movi	r4,7
 2007b08:	20bfcd16 	blt	r4,r2,2007a40 <__alt_mem_epcs_flash_controller_0+0xfd006a40>
 2007b0c:	42000204 	addi	r8,r8,8
 2007b10:	003fd306 	br	2007a60 <__alt_mem_epcs_flash_controller_0+0xfd006a60>
 2007b14:	d9402c17 	ldw	r5,176(sp)
 2007b18:	d9801e04 	addi	r6,sp,120
 2007b1c:	9809883a 	mov	r4,r19
 2007b20:	200ed180 	call	200ed18 <__ssprint_r>
 2007b24:	1039e11e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2007b28:	d8802617 	ldw	r2,152(sp)
 2007b2c:	d8c02017 	ldw	r3,128(sp)
 2007b30:	da000404 	addi	r8,sp,16
 2007b34:	003e1c06 	br	20073a8 <__alt_mem_epcs_flash_controller_0+0xfd0063a8>
 2007b38:	d8802917 	ldw	r2,164(sp)
 2007b3c:	00c00184 	movi	r3,6
 2007b40:	1880012e 	bgeu	r3,r2,2007b48 <___svfprintf_internal_r+0x1c30>
 2007b44:	1805883a 	mov	r2,r3
 2007b48:	d8802e15 	stw	r2,184(sp)
 2007b4c:	1000f316 	blt	r2,zero,2007f1c <___svfprintf_internal_r+0x2004>
 2007b50:	04008134 	movhi	r16,516
 2007b54:	d8802a15 	stw	r2,168(sp)
 2007b58:	dd002d15 	stw	r20,180(sp)
 2007b5c:	d8002915 	stw	zero,164(sp)
 2007b60:	d8003215 	stw	zero,200(sp)
 2007b64:	8430e404 	addi	r16,r16,-15472
 2007b68:	0039883a 	mov	fp,zero
 2007b6c:	003a9f06 	br	20065ec <__alt_mem_epcs_flash_controller_0+0xfd0055ec>
 2007b70:	01008134 	movhi	r4,516
 2007b74:	2130ea84 	addi	r4,r4,-15446
 2007b78:	d9003515 	stw	r4,212(sp)
 2007b7c:	003b5f06 	br	20068fc <__alt_mem_epcs_flash_controller_0+0xfd0058fc>
 2007b80:	d9402c17 	ldw	r5,176(sp)
 2007b84:	d9801e04 	addi	r6,sp,120
 2007b88:	9809883a 	mov	r4,r19
 2007b8c:	200ed180 	call	200ed18 <__ssprint_r>
 2007b90:	1039c61e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2007b94:	d8802617 	ldw	r2,152(sp)
 2007b98:	d9403317 	ldw	r5,204(sp)
 2007b9c:	d8c02017 	ldw	r3,128(sp)
 2007ba0:	da000404 	addi	r8,sp,16
 2007ba4:	2885c83a 	sub	r2,r5,r2
 2007ba8:	003e1006 	br	20073ec <__alt_mem_epcs_flash_controller_0+0xfd0063ec>
 2007bac:	00800044 	movi	r2,1
 2007bb0:	10803fcc 	andi	r2,r2,255
 2007bb4:	00c00044 	movi	r3,1
 2007bb8:	10fa3526 	beq	r2,r3,2006490 <__alt_mem_epcs_flash_controller_0+0xfd005490>
 2007bbc:	00c00084 	movi	r3,2
 2007bc0:	10fb9e26 	beq	r2,r3,2006a3c <__alt_mem_epcs_flash_controller_0+0xfd005a3c>
 2007bc4:	003a6406 	br	2006558 <__alt_mem_epcs_flash_controller_0+0xfd005558>
 2007bc8:	0021883a 	mov	r16,zero
 2007bcc:	003e0806 	br	20073f0 <__alt_mem_epcs_flash_controller_0+0xfd0063f0>
 2007bd0:	07000b44 	movi	fp,45
 2007bd4:	df002785 	stb	fp,158(sp)
 2007bd8:	003a0b06 	br	2006408 <__alt_mem_epcs_flash_controller_0+0xfd005408>
 2007bdc:	d8c02d17 	ldw	r3,180(sp)
 2007be0:	d9002f17 	ldw	r4,188(sp)
 2007be4:	18800017 	ldw	r2,0(r3)
 2007be8:	18c00104 	addi	r3,r3,4
 2007bec:	d8c02d15 	stw	r3,180(sp)
 2007bf0:	11000015 	stw	r4,0(r2)
 2007bf4:	0038f306 	br	2005fc4 <__alt_mem_epcs_flash_controller_0+0xfd004fc4>
 2007bf8:	00c00b44 	movi	r3,45
 2007bfc:	d8c02785 	stb	r3,158(sp)
 2007c00:	d8802a15 	stw	r2,168(sp)
 2007c04:	dc802b17 	ldw	r18,172(sp)
 2007c08:	d8002915 	stw	zero,164(sp)
 2007c0c:	07000b44 	movi	fp,45
 2007c10:	003a7306 	br	20065e0 <__alt_mem_epcs_flash_controller_0+0xfd0055e0>
 2007c14:	9080004c 	andi	r2,r18,1
 2007c18:	1000941e 	bne	r2,zero,2007e6c <___svfprintf_internal_r+0x1f54>
 2007c1c:	d8802117 	ldw	r2,132(sp)
 2007c20:	1405c83a 	sub	r2,r2,r16
 2007c24:	d8803315 	stw	r2,204(sp)
 2007c28:	b441161e 	bne	r22,r17,2008084 <___svfprintf_internal_r+0x216c>
 2007c2c:	dd802617 	ldw	r22,152(sp)
 2007c30:	00bfff44 	movi	r2,-3
 2007c34:	b0801a16 	blt	r22,r2,2007ca0 <___svfprintf_internal_r+0x1d88>
 2007c38:	d9402917 	ldw	r5,164(sp)
 2007c3c:	2d801816 	blt	r5,r22,2007ca0 <___svfprintf_internal_r+0x1d88>
 2007c40:	dd803215 	stw	r22,200(sp)
 2007c44:	003f3a06 	br	2007930 <__alt_mem_epcs_flash_controller_0+0xfd006930>
 2007c48:	1025883a 	mov	r18,r2
 2007c4c:	0039883a 	mov	fp,zero
 2007c50:	00800084 	movi	r2,2
 2007c54:	003fd606 	br	2007bb0 <__alt_mem_epcs_flash_controller_0+0xfd006bb0>
 2007c58:	9080004c 	andi	r2,r18,1
 2007c5c:	103f191e 	bne	r2,zero,20078c4 <__alt_mem_epcs_flash_controller_0+0xfd0068c4>
 2007c60:	d8802117 	ldw	r2,132(sp)
 2007c64:	003f2806 	br	2007908 <__alt_mem_epcs_flash_controller_0+0xfd006908>
 2007c68:	01008134 	movhi	r4,516
 2007c6c:	2130e684 	addi	r4,r4,-15462
 2007c70:	d9002b15 	stw	r4,172(sp)
 2007c74:	003c7c06 	br	2006e68 <__alt_mem_epcs_flash_controller_0+0xfd005e68>
 2007c78:	e005883a 	mov	r2,fp
 2007c7c:	003f2206 	br	2007908 <__alt_mem_epcs_flash_controller_0+0xfd006908>
 2007c80:	d9402917 	ldw	r5,164(sp)
 2007c84:	df002783 	ldbu	fp,158(sp)
 2007c88:	dd002d15 	stw	r20,180(sp)
 2007c8c:	d9402a15 	stw	r5,168(sp)
 2007c90:	d9402e15 	stw	r5,184(sp)
 2007c94:	d8002915 	stw	zero,164(sp)
 2007c98:	d8003215 	stw	zero,200(sp)
 2007c9c:	003a4c06 	br	20065d0 <__alt_mem_epcs_flash_controller_0+0xfd0055d0>
 2007ca0:	8c7fff84 	addi	r17,r17,-2
 2007ca4:	b5bfffc4 	addi	r22,r22,-1
 2007ca8:	dd802615 	stw	r22,152(sp)
 2007cac:	dc4022c5 	stb	r17,139(sp)
 2007cb0:	b000c316 	blt	r22,zero,2007fc0 <___svfprintf_internal_r+0x20a8>
 2007cb4:	00800ac4 	movi	r2,43
 2007cb8:	d8802305 	stb	r2,140(sp)
 2007cbc:	00800244 	movi	r2,9
 2007cc0:	15806e16 	blt	r2,r22,2007e7c <___svfprintf_internal_r+0x1f64>
 2007cc4:	00800c04 	movi	r2,48
 2007cc8:	b5800c04 	addi	r22,r22,48
 2007ccc:	d8802345 	stb	r2,141(sp)
 2007cd0:	dd802385 	stb	r22,142(sp)
 2007cd4:	d88023c4 	addi	r2,sp,143
 2007cd8:	df0022c4 	addi	fp,sp,139
 2007cdc:	d8c03317 	ldw	r3,204(sp)
 2007ce0:	1739c83a 	sub	fp,r2,fp
 2007ce4:	d9003317 	ldw	r4,204(sp)
 2007ce8:	e0c7883a 	add	r3,fp,r3
 2007cec:	df003b15 	stw	fp,236(sp)
 2007cf0:	d8c02e15 	stw	r3,184(sp)
 2007cf4:	00800044 	movi	r2,1
 2007cf8:	1100b70e 	bge	r2,r4,2007fd8 <___svfprintf_internal_r+0x20c0>
 2007cfc:	d8c02e17 	ldw	r3,184(sp)
 2007d00:	18c00044 	addi	r3,r3,1
 2007d04:	d8c02e15 	stw	r3,184(sp)
 2007d08:	1805883a 	mov	r2,r3
 2007d0c:	1800b016 	blt	r3,zero,2007fd0 <___svfprintf_internal_r+0x20b8>
 2007d10:	d8003215 	stw	zero,200(sp)
 2007d14:	003f1006 	br	2007958 <__alt_mem_epcs_flash_controller_0+0xfd006958>
 2007d18:	d8802917 	ldw	r2,164(sp)
 2007d1c:	103ec71e 	bne	r2,zero,200783c <__alt_mem_epcs_flash_controller_0+0xfd00683c>
 2007d20:	dc002915 	stw	r16,164(sp)
 2007d24:	003ec506 	br	200783c <__alt_mem_epcs_flash_controller_0+0xfd00683c>
 2007d28:	d9402c17 	ldw	r5,176(sp)
 2007d2c:	d9801e04 	addi	r6,sp,120
 2007d30:	9809883a 	mov	r4,r19
 2007d34:	200ed180 	call	200ed18 <__ssprint_r>
 2007d38:	10395c1e 	bne	r2,zero,20062ac <__alt_mem_epcs_flash_controller_0+0xfd0052ac>
 2007d3c:	dc402617 	ldw	r17,152(sp)
 2007d40:	d8c02017 	ldw	r3,128(sp)
 2007d44:	d8801f17 	ldw	r2,124(sp)
 2007d48:	da000404 	addi	r8,sp,16
 2007d4c:	003e7706 	br	200772c <__alt_mem_epcs_flash_controller_0+0xfd00672c>
 2007d50:	582f883a 	mov	r23,r11
 2007d54:	d8002915 	stw	zero,164(sp)
 2007d58:	0038c406 	br	200606c <__alt_mem_epcs_flash_controller_0+0xfd00506c>
 2007d5c:	d8c02917 	ldw	r3,164(sp)
 2007d60:	d8802104 	addi	r2,sp,132
 2007d64:	d8800315 	stw	r2,12(sp)
 2007d68:	d9403617 	ldw	r5,216(sp)
 2007d6c:	d8802504 	addi	r2,sp,148
 2007d70:	d8800215 	stw	r2,8(sp)
 2007d74:	d8802604 	addi	r2,sp,152
 2007d78:	d8c00015 	stw	r3,0(sp)
 2007d7c:	9809883a 	mov	r4,r19
 2007d80:	d8800115 	stw	r2,4(sp)
 2007d84:	01c000c4 	movi	r7,3
 2007d88:	a00d883a 	mov	r6,r20
 2007d8c:	da003e15 	stw	r8,248(sp)
 2007d90:	200a8380 	call	200a838 <_dtoa_r>
 2007d94:	d9002917 	ldw	r4,164(sp)
 2007d98:	da003e17 	ldw	r8,248(sp)
 2007d9c:	1021883a 	mov	r16,r2
 2007da0:	1139883a 	add	fp,r2,r4
 2007da4:	2007883a 	mov	r3,r4
 2007da8:	81000007 	ldb	r4,0(r16)
 2007dac:	00800c04 	movi	r2,48
 2007db0:	20806f26 	beq	r4,r2,2007f70 <___svfprintf_internal_r+0x2058>
 2007db4:	d8c02617 	ldw	r3,152(sp)
 2007db8:	e0f9883a 	add	fp,fp,r3
 2007dbc:	003ec206 	br	20078c8 <__alt_mem_epcs_flash_controller_0+0xfd0068c8>
 2007dc0:	00c00b44 	movi	r3,45
 2007dc4:	2520003c 	xorhi	r20,r4,32768
 2007dc8:	d8c02a05 	stb	r3,168(sp)
 2007dcc:	003ea106 	br	2007854 <__alt_mem_epcs_flash_controller_0+0xfd006854>
 2007dd0:	d8c03217 	ldw	r3,200(sp)
 2007dd4:	00c0890e 	bge	zero,r3,2007ffc <___svfprintf_internal_r+0x20e4>
 2007dd8:	00800044 	movi	r2,1
 2007ddc:	d9003317 	ldw	r4,204(sp)
 2007de0:	1105883a 	add	r2,r2,r4
 2007de4:	d8802e15 	stw	r2,184(sp)
 2007de8:	10005f16 	blt	r2,zero,2007f68 <___svfprintf_internal_r+0x2050>
 2007dec:	044019c4 	movi	r17,103
 2007df0:	003ed906 	br	2007958 <__alt_mem_epcs_flash_controller_0+0xfd006958>
 2007df4:	d9002917 	ldw	r4,164(sp)
 2007df8:	20c00044 	addi	r3,r4,1
 2007dfc:	003e9c06 	br	2007870 <__alt_mem_epcs_flash_controller_0+0xfd006870>
 2007e00:	d9002917 	ldw	r4,164(sp)
 2007e04:	00c0680e 	bge	zero,r3,2007fa8 <___svfprintf_internal_r+0x2090>
 2007e08:	2000461e 	bne	r4,zero,2007f24 <___svfprintf_internal_r+0x200c>
 2007e0c:	9480004c 	andi	r18,r18,1
 2007e10:	9000441e 	bne	r18,zero,2007f24 <___svfprintf_internal_r+0x200c>
 2007e14:	1805883a 	mov	r2,r3
 2007e18:	1800a016 	blt	r3,zero,200809c <___svfprintf_internal_r+0x2184>
 2007e1c:	d8c03217 	ldw	r3,200(sp)
 2007e20:	d8c02e15 	stw	r3,184(sp)
 2007e24:	003ecc06 	br	2007958 <__alt_mem_epcs_flash_controller_0+0xfd006958>
 2007e28:	d9402917 	ldw	r5,164(sp)
 2007e2c:	d8802104 	addi	r2,sp,132
 2007e30:	d8800315 	stw	r2,12(sp)
 2007e34:	d9400015 	stw	r5,0(sp)
 2007e38:	d8802504 	addi	r2,sp,148
 2007e3c:	d9403617 	ldw	r5,216(sp)
 2007e40:	d8800215 	stw	r2,8(sp)
 2007e44:	d8802604 	addi	r2,sp,152
 2007e48:	d8800115 	stw	r2,4(sp)
 2007e4c:	01c000c4 	movi	r7,3
 2007e50:	a00d883a 	mov	r6,r20
 2007e54:	9809883a 	mov	r4,r19
 2007e58:	da003e15 	stw	r8,248(sp)
 2007e5c:	200a8380 	call	200a838 <_dtoa_r>
 2007e60:	d8c02917 	ldw	r3,164(sp)
 2007e64:	da003e17 	ldw	r8,248(sp)
 2007e68:	1021883a 	mov	r16,r2
 2007e6c:	00801184 	movi	r2,70
 2007e70:	80f9883a 	add	fp,r16,r3
 2007e74:	88bfcc26 	beq	r17,r2,2007da8 <__alt_mem_epcs_flash_controller_0+0xfd006da8>
 2007e78:	003e9306 	br	20078c8 <__alt_mem_epcs_flash_controller_0+0xfd0068c8>
 2007e7c:	df0022c4 	addi	fp,sp,139
 2007e80:	dc002915 	stw	r16,164(sp)
 2007e84:	9829883a 	mov	r20,r19
 2007e88:	e021883a 	mov	r16,fp
 2007e8c:	4027883a 	mov	r19,r8
 2007e90:	b009883a 	mov	r4,r22
 2007e94:	01400284 	movi	r5,10
 2007e98:	200505c0 	call	200505c <__modsi3>
 2007e9c:	10800c04 	addi	r2,r2,48
 2007ea0:	843fffc4 	addi	r16,r16,-1
 2007ea4:	b009883a 	mov	r4,r22
 2007ea8:	01400284 	movi	r5,10
 2007eac:	80800005 	stb	r2,0(r16)
 2007eb0:	2004fd80 	call	2004fd8 <__divsi3>
 2007eb4:	102d883a 	mov	r22,r2
 2007eb8:	00800244 	movi	r2,9
 2007ebc:	15bff416 	blt	r2,r22,2007e90 <__alt_mem_epcs_flash_controller_0+0xfd006e90>
 2007ec0:	9811883a 	mov	r8,r19
 2007ec4:	b0800c04 	addi	r2,r22,48
 2007ec8:	a027883a 	mov	r19,r20
 2007ecc:	8029883a 	mov	r20,r16
 2007ed0:	a17fffc4 	addi	r5,r20,-1
 2007ed4:	a0bfffc5 	stb	r2,-1(r20)
 2007ed8:	dc002917 	ldw	r16,164(sp)
 2007edc:	2f00752e 	bgeu	r5,fp,20080b4 <___svfprintf_internal_r+0x219c>
 2007ee0:	d9c02384 	addi	r7,sp,142
 2007ee4:	3d0fc83a 	sub	r7,r7,r20
 2007ee8:	d9002344 	addi	r4,sp,141
 2007eec:	e1cf883a 	add	r7,fp,r7
 2007ef0:	00000106 	br	2007ef8 <___svfprintf_internal_r+0x1fe0>
 2007ef4:	28800003 	ldbu	r2,0(r5)
 2007ef8:	20800005 	stb	r2,0(r4)
 2007efc:	21000044 	addi	r4,r4,1
 2007f00:	29400044 	addi	r5,r5,1
 2007f04:	21fffb1e 	bne	r4,r7,2007ef4 <__alt_mem_epcs_flash_controller_0+0xfd006ef4>
 2007f08:	d8802304 	addi	r2,sp,140
 2007f0c:	1505c83a 	sub	r2,r2,r20
 2007f10:	d8c02344 	addi	r3,sp,141
 2007f14:	1885883a 	add	r2,r3,r2
 2007f18:	003f7006 	br	2007cdc <__alt_mem_epcs_flash_controller_0+0xfd006cdc>
 2007f1c:	0005883a 	mov	r2,zero
 2007f20:	003f0b06 	br	2007b50 <__alt_mem_epcs_flash_controller_0+0xfd006b50>
 2007f24:	d9002917 	ldw	r4,164(sp)
 2007f28:	d8c03217 	ldw	r3,200(sp)
 2007f2c:	20800044 	addi	r2,r4,1
 2007f30:	1885883a 	add	r2,r3,r2
 2007f34:	d8802e15 	stw	r2,184(sp)
 2007f38:	103e870e 	bge	r2,zero,2007958 <__alt_mem_epcs_flash_controller_0+0xfd006958>
 2007f3c:	0005883a 	mov	r2,zero
 2007f40:	003e8506 	br	2007958 <__alt_mem_epcs_flash_controller_0+0xfd006958>
 2007f44:	01008134 	movhi	r4,516
 2007f48:	2130e684 	addi	r4,r4,-15462
 2007f4c:	d9002b15 	stw	r4,172(sp)
 2007f50:	003cc506 	br	2007268 <__alt_mem_epcs_flash_controller_0+0xfd006268>
 2007f54:	d8c03217 	ldw	r3,200(sp)
 2007f58:	18c00044 	addi	r3,r3,1
 2007f5c:	d8c02e15 	stw	r3,184(sp)
 2007f60:	1805883a 	mov	r2,r3
 2007f64:	183fa10e 	bge	r3,zero,2007dec <__alt_mem_epcs_flash_controller_0+0xfd006dec>
 2007f68:	0005883a 	mov	r2,zero
 2007f6c:	003f9f06 	br	2007dec <__alt_mem_epcs_flash_controller_0+0xfd006dec>
 2007f70:	d9003617 	ldw	r4,216(sp)
 2007f74:	000d883a 	mov	r6,zero
 2007f78:	000f883a 	mov	r7,zero
 2007f7c:	a00b883a 	mov	r5,r20
 2007f80:	d8c03d15 	stw	r3,244(sp)
 2007f84:	da003e15 	stw	r8,248(sp)
 2007f88:	2012aec0 	call	2012aec <__eqdf2>
 2007f8c:	d8c03d17 	ldw	r3,244(sp)
 2007f90:	da003e17 	ldw	r8,248(sp)
 2007f94:	103f8726 	beq	r2,zero,2007db4 <__alt_mem_epcs_flash_controller_0+0xfd006db4>
 2007f98:	00800044 	movi	r2,1
 2007f9c:	10c7c83a 	sub	r3,r2,r3
 2007fa0:	d8c02615 	stw	r3,152(sp)
 2007fa4:	003f8406 	br	2007db8 <__alt_mem_epcs_flash_controller_0+0xfd006db8>
 2007fa8:	20000e1e 	bne	r4,zero,2007fe4 <___svfprintf_internal_r+0x20cc>
 2007fac:	9480004c 	andi	r18,r18,1
 2007fb0:	90000c1e 	bne	r18,zero,2007fe4 <___svfprintf_internal_r+0x20cc>
 2007fb4:	00800044 	movi	r2,1
 2007fb8:	d8802e15 	stw	r2,184(sp)
 2007fbc:	003e6606 	br	2007958 <__alt_mem_epcs_flash_controller_0+0xfd006958>
 2007fc0:	00800b44 	movi	r2,45
 2007fc4:	05adc83a 	sub	r22,zero,r22
 2007fc8:	d8802305 	stb	r2,140(sp)
 2007fcc:	003f3b06 	br	2007cbc <__alt_mem_epcs_flash_controller_0+0xfd006cbc>
 2007fd0:	0005883a 	mov	r2,zero
 2007fd4:	003f4e06 	br	2007d10 <__alt_mem_epcs_flash_controller_0+0xfd006d10>
 2007fd8:	90a4703a 	and	r18,r18,r2
 2007fdc:	903f4a26 	beq	r18,zero,2007d08 <__alt_mem_epcs_flash_controller_0+0xfd006d08>
 2007fe0:	003f4606 	br	2007cfc <__alt_mem_epcs_flash_controller_0+0xfd006cfc>
 2007fe4:	d8c02917 	ldw	r3,164(sp)
 2007fe8:	18c00084 	addi	r3,r3,2
 2007fec:	d8c02e15 	stw	r3,184(sp)
 2007ff0:	1805883a 	mov	r2,r3
 2007ff4:	183e580e 	bge	r3,zero,2007958 <__alt_mem_epcs_flash_controller_0+0xfd006958>
 2007ff8:	003fd006 	br	2007f3c <__alt_mem_epcs_flash_controller_0+0xfd006f3c>
 2007ffc:	00800084 	movi	r2,2
 2008000:	10c5c83a 	sub	r2,r2,r3
 2008004:	003f7506 	br	2007ddc <__alt_mem_epcs_flash_controller_0+0xfd006ddc>
 2008008:	d8802d17 	ldw	r2,180(sp)
 200800c:	d9002d17 	ldw	r4,180(sp)
 2008010:	bc400043 	ldbu	r17,1(r23)
 2008014:	10800017 	ldw	r2,0(r2)
 2008018:	582f883a 	mov	r23,r11
 200801c:	d8802915 	stw	r2,164(sp)
 2008020:	20800104 	addi	r2,r4,4
 2008024:	d9002917 	ldw	r4,164(sp)
 2008028:	d8802d15 	stw	r2,180(sp)
 200802c:	203df00e 	bge	r4,zero,20077f0 <__alt_mem_epcs_flash_controller_0+0xfd0067f0>
 2008030:	8c403fcc 	andi	r17,r17,255
 2008034:	00bfffc4 	movi	r2,-1
 2008038:	8c40201c 	xori	r17,r17,128
 200803c:	d8802915 	stw	r2,164(sp)
 2008040:	8c7fe004 	addi	r17,r17,-128
 2008044:	00380806 	br	2006068 <__alt_mem_epcs_flash_controller_0+0xfd005068>
 2008048:	9080004c 	andi	r2,r18,1
 200804c:	0039883a 	mov	fp,zero
 2008050:	10000726 	beq	r2,zero,2008070 <___svfprintf_internal_r+0x2158>
 2008054:	d8c02817 	ldw	r3,160(sp)
 2008058:	dc001dc4 	addi	r16,sp,119
 200805c:	00800c04 	movi	r2,48
 2008060:	1c07c83a 	sub	r3,r3,r16
 2008064:	d8801dc5 	stb	r2,119(sp)
 2008068:	d8c02e15 	stw	r3,184(sp)
 200806c:	00395206 	br	20065b8 <__alt_mem_epcs_flash_controller_0+0xfd0055b8>
 2008070:	d8002e15 	stw	zero,184(sp)
 2008074:	dc001e04 	addi	r16,sp,120
 2008078:	00394f06 	br	20065b8 <__alt_mem_epcs_flash_controller_0+0xfd0055b8>
 200807c:	0005883a 	mov	r2,zero
 2008080:	003e3206 	br	200794c <__alt_mem_epcs_flash_controller_0+0xfd00694c>
 2008084:	dd802617 	ldw	r22,152(sp)
 2008088:	003f0606 	br	2007ca4 <__alt_mem_epcs_flash_controller_0+0xfd006ca4>
 200808c:	d9c02785 	stb	r7,158(sp)
 2008090:	003a5106 	br	20069d8 <__alt_mem_epcs_flash_controller_0+0xfd0059d8>
 2008094:	d9c02785 	stb	r7,158(sp)
 2008098:	003a3706 	br	2006978 <__alt_mem_epcs_flash_controller_0+0xfd005978>
 200809c:	0005883a 	mov	r2,zero
 20080a0:	003f5e06 	br	2007e1c <__alt_mem_epcs_flash_controller_0+0xfd006e1c>
 20080a4:	d9c02785 	stb	r7,158(sp)
 20080a8:	00391706 	br	2006508 <__alt_mem_epcs_flash_controller_0+0xfd005508>
 20080ac:	d9c02785 	stb	r7,158(sp)
 20080b0:	0038e606 	br	200644c <__alt_mem_epcs_flash_controller_0+0xfd00544c>
 20080b4:	d8802344 	addi	r2,sp,141
 20080b8:	003f0806 	br	2007cdc <__alt_mem_epcs_flash_controller_0+0xfd006cdc>
 20080bc:	d9c02785 	stb	r7,158(sp)
 20080c0:	0038b706 	br	20063a0 <__alt_mem_epcs_flash_controller_0+0xfd0053a0>
 20080c4:	d9c02785 	stb	r7,158(sp)
 20080c8:	003adc06 	br	2006c3c <__alt_mem_epcs_flash_controller_0+0xfd005c3c>
 20080cc:	d9403917 	ldw	r5,228(sp)
 20080d0:	00800304 	movi	r2,12
 20080d4:	28800015 	stw	r2,0(r5)
 20080d8:	00bfffc4 	movi	r2,-1
 20080dc:	00387806 	br	20062c0 <__alt_mem_epcs_flash_controller_0+0xfd0052c0>
 20080e0:	d9c02785 	stb	r7,158(sp)
 20080e4:	003abf06 	br	2006be4 <__alt_mem_epcs_flash_controller_0+0xfd005be4>
 20080e8:	d9c02785 	stb	r7,158(sp)
 20080ec:	003a9b06 	br	2006b5c <__alt_mem_epcs_flash_controller_0+0xfd005b5c>

020080f0 <___vfprintf_internal_r>:
 20080f0:	deffb804 	addi	sp,sp,-288
 20080f4:	dfc04715 	stw	ra,284(sp)
 20080f8:	ddc04515 	stw	r23,276(sp)
 20080fc:	dd404315 	stw	r21,268(sp)
 2008100:	d9002c15 	stw	r4,176(sp)
 2008104:	282f883a 	mov	r23,r5
 2008108:	302b883a 	mov	r21,r6
 200810c:	d9c02d15 	stw	r7,180(sp)
 2008110:	df004615 	stw	fp,280(sp)
 2008114:	dd804415 	stw	r22,272(sp)
 2008118:	dd004215 	stw	r20,264(sp)
 200811c:	dcc04115 	stw	r19,260(sp)
 2008120:	dc804015 	stw	r18,256(sp)
 2008124:	dc403f15 	stw	r17,252(sp)
 2008128:	dc003e15 	stw	r16,248(sp)
 200812c:	200d02c0 	call	200d02c <_localeconv_r>
 2008130:	10800017 	ldw	r2,0(r2)
 2008134:	1009883a 	mov	r4,r2
 2008138:	d8803415 	stw	r2,208(sp)
 200813c:	2005e800 	call	2005e80 <strlen>
 2008140:	d8803715 	stw	r2,220(sp)
 2008144:	d8802c17 	ldw	r2,176(sp)
 2008148:	10000226 	beq	r2,zero,2008154 <___vfprintf_internal_r+0x64>
 200814c:	10800e17 	ldw	r2,56(r2)
 2008150:	1000f926 	beq	r2,zero,2008538 <___vfprintf_internal_r+0x448>
 2008154:	b880030b 	ldhu	r2,12(r23)
 2008158:	10c8000c 	andi	r3,r2,8192
 200815c:	1800061e 	bne	r3,zero,2008178 <___vfprintf_internal_r+0x88>
 2008160:	b9001917 	ldw	r4,100(r23)
 2008164:	00f7ffc4 	movi	r3,-8193
 2008168:	10880014 	ori	r2,r2,8192
 200816c:	20c6703a 	and	r3,r4,r3
 2008170:	b880030d 	sth	r2,12(r23)
 2008174:	b8c01915 	stw	r3,100(r23)
 2008178:	10c0020c 	andi	r3,r2,8
 200817c:	1800c126 	beq	r3,zero,2008484 <___vfprintf_internal_r+0x394>
 2008180:	b8c00417 	ldw	r3,16(r23)
 2008184:	1800bf26 	beq	r3,zero,2008484 <___vfprintf_internal_r+0x394>
 2008188:	1080068c 	andi	r2,r2,26
 200818c:	00c00284 	movi	r3,10
 2008190:	10c0c426 	beq	r2,r3,20084a4 <___vfprintf_internal_r+0x3b4>
 2008194:	d8c00404 	addi	r3,sp,16
 2008198:	05008134 	movhi	r20,516
 200819c:	d9001e04 	addi	r4,sp,120
 20081a0:	a530ee84 	addi	r20,r20,-15430
 20081a4:	d8c01e15 	stw	r3,120(sp)
 20081a8:	d8002015 	stw	zero,128(sp)
 20081ac:	d8001f15 	stw	zero,124(sp)
 20081b0:	d8003315 	stw	zero,204(sp)
 20081b4:	d8003615 	stw	zero,216(sp)
 20081b8:	d8003815 	stw	zero,224(sp)
 20081bc:	1811883a 	mov	r8,r3
 20081c0:	d8003915 	stw	zero,228(sp)
 20081c4:	d8003a15 	stw	zero,232(sp)
 20081c8:	d8002f15 	stw	zero,188(sp)
 20081cc:	d9002815 	stw	r4,160(sp)
 20081d0:	a8800007 	ldb	r2,0(r21)
 20081d4:	10027b26 	beq	r2,zero,2008bc4 <___vfprintf_internal_r+0xad4>
 20081d8:	00c00944 	movi	r3,37
 20081dc:	a821883a 	mov	r16,r21
 20081e0:	10c0021e 	bne	r2,r3,20081ec <___vfprintf_internal_r+0xfc>
 20081e4:	00001406 	br	2008238 <___vfprintf_internal_r+0x148>
 20081e8:	10c00326 	beq	r2,r3,20081f8 <___vfprintf_internal_r+0x108>
 20081ec:	84000044 	addi	r16,r16,1
 20081f0:	80800007 	ldb	r2,0(r16)
 20081f4:	103ffc1e 	bne	r2,zero,20081e8 <__alt_mem_epcs_flash_controller_0+0xfd0071e8>
 20081f8:	8563c83a 	sub	r17,r16,r21
 20081fc:	88000e26 	beq	r17,zero,2008238 <___vfprintf_internal_r+0x148>
 2008200:	d8c02017 	ldw	r3,128(sp)
 2008204:	d8801f17 	ldw	r2,124(sp)
 2008208:	45400015 	stw	r21,0(r8)
 200820c:	1c47883a 	add	r3,r3,r17
 2008210:	10800044 	addi	r2,r2,1
 2008214:	d8c02015 	stw	r3,128(sp)
 2008218:	44400115 	stw	r17,4(r8)
 200821c:	d8801f15 	stw	r2,124(sp)
 2008220:	00c001c4 	movi	r3,7
 2008224:	1880a716 	blt	r3,r2,20084c4 <___vfprintf_internal_r+0x3d4>
 2008228:	42000204 	addi	r8,r8,8
 200822c:	d9402f17 	ldw	r5,188(sp)
 2008230:	2c4b883a 	add	r5,r5,r17
 2008234:	d9402f15 	stw	r5,188(sp)
 2008238:	80800007 	ldb	r2,0(r16)
 200823c:	1000a826 	beq	r2,zero,20084e0 <___vfprintf_internal_r+0x3f0>
 2008240:	84400047 	ldb	r17,1(r16)
 2008244:	00bfffc4 	movi	r2,-1
 2008248:	85400044 	addi	r21,r16,1
 200824c:	d8002785 	stb	zero,158(sp)
 2008250:	0007883a 	mov	r3,zero
 2008254:	000f883a 	mov	r7,zero
 2008258:	d8802915 	stw	r2,164(sp)
 200825c:	d8003115 	stw	zero,196(sp)
 2008260:	0025883a 	mov	r18,zero
 2008264:	01401604 	movi	r5,88
 2008268:	01800244 	movi	r6,9
 200826c:	02800a84 	movi	r10,42
 2008270:	02401b04 	movi	r9,108
 2008274:	ad400044 	addi	r21,r21,1
 2008278:	88bff804 	addi	r2,r17,-32
 200827c:	28830436 	bltu	r5,r2,2008e90 <___vfprintf_internal_r+0xda0>
 2008280:	100490ba 	slli	r2,r2,2
 2008284:	01008074 	movhi	r4,513
 2008288:	2120a604 	addi	r4,r4,-32104
 200828c:	1105883a 	add	r2,r2,r4
 2008290:	10800017 	ldw	r2,0(r2)
 2008294:	1000683a 	jmp	r2
 2008298:	02008db0 	cmpltui	r8,zero,566
 200829c:	02008e90 	cmplti	r8,zero,570
 20082a0:	02008e90 	cmplti	r8,zero,570
 20082a4:	02008dd0 	cmplti	r8,zero,567
 20082a8:	02008e90 	cmplti	r8,zero,570
 20082ac:	02008e90 	cmplti	r8,zero,570
 20082b0:	02008e90 	cmplti	r8,zero,570
 20082b4:	02008e90 	cmplti	r8,zero,570
 20082b8:	02008e90 	cmplti	r8,zero,570
 20082bc:	02008e90 	cmplti	r8,zero,570
 20082c0:	02008544 	movi	r8,533
 20082c4:	02008cec 	andhi	r8,zero,563
 20082c8:	02008e90 	cmplti	r8,zero,570
 20082cc:	0200840c 	andi	r8,zero,528
 20082d0:	0200856c 	andhi	r8,zero,533
 20082d4:	02008e90 	cmplti	r8,zero,570
 20082d8:	020085ac 	andhi	r8,zero,534
 20082dc:	020085b8 	rdprs	r8,zero,534
 20082e0:	020085b8 	rdprs	r8,zero,534
 20082e4:	020085b8 	rdprs	r8,zero,534
 20082e8:	020085b8 	rdprs	r8,zero,534
 20082ec:	020085b8 	rdprs	r8,zero,534
 20082f0:	020085b8 	rdprs	r8,zero,534
 20082f4:	020085b8 	rdprs	r8,zero,534
 20082f8:	020085b8 	rdprs	r8,zero,534
 20082fc:	020085b8 	rdprs	r8,zero,534
 2008300:	02008e90 	cmplti	r8,zero,570
 2008304:	02008e90 	cmplti	r8,zero,570
 2008308:	02008e90 	cmplti	r8,zero,570
 200830c:	02008e90 	cmplti	r8,zero,570
 2008310:	02008e90 	cmplti	r8,zero,570
 2008314:	02008e90 	cmplti	r8,zero,570
 2008318:	02008e90 	cmplti	r8,zero,570
 200831c:	02008e90 	cmplti	r8,zero,570
 2008320:	02008e90 	cmplti	r8,zero,570
 2008324:	02008e90 	cmplti	r8,zero,570
 2008328:	020085ec 	andhi	r8,zero,535
 200832c:	020086a8 	cmpgeui	r8,zero,538
 2008330:	02008e90 	cmplti	r8,zero,570
 2008334:	020086a8 	cmpgeui	r8,zero,538
 2008338:	02008e90 	cmplti	r8,zero,570
 200833c:	02008e90 	cmplti	r8,zero,570
 2008340:	02008e90 	cmplti	r8,zero,570
 2008344:	02008e90 	cmplti	r8,zero,570
 2008348:	02008748 	cmpgei	r8,zero,541
 200834c:	02008e90 	cmplti	r8,zero,570
 2008350:	02008e90 	cmplti	r8,zero,570
 2008354:	02008754 	movui	r8,541
 2008358:	02008e90 	cmplti	r8,zero,570
 200835c:	02008e90 	cmplti	r8,zero,570
 2008360:	02008e90 	cmplti	r8,zero,570
 2008364:	02008e90 	cmplti	r8,zero,570
 2008368:	02008e90 	cmplti	r8,zero,570
 200836c:	02008bcc 	andi	r8,zero,559
 2008370:	02008e90 	cmplti	r8,zero,570
 2008374:	02008e90 	cmplti	r8,zero,570
 2008378:	02008c2c 	andhi	r8,zero,560
 200837c:	02008e90 	cmplti	r8,zero,570
 2008380:	02008e90 	cmplti	r8,zero,570
 2008384:	02008e90 	cmplti	r8,zero,570
 2008388:	02008e90 	cmplti	r8,zero,570
 200838c:	02008e90 	cmplti	r8,zero,570
 2008390:	02008e90 	cmplti	r8,zero,570
 2008394:	02008e90 	cmplti	r8,zero,570
 2008398:	02008e90 	cmplti	r8,zero,570
 200839c:	02008e90 	cmplti	r8,zero,570
 20083a0:	02008e90 	cmplti	r8,zero,570
 20083a4:	02008e3c 	xorhi	r8,zero,568
 20083a8:	02008ddc 	xori	r8,zero,567
 20083ac:	020086a8 	cmpgeui	r8,zero,538
 20083b0:	020086a8 	cmpgeui	r8,zero,538
 20083b4:	020086a8 	cmpgeui	r8,zero,538
 20083b8:	02008dec 	andhi	r8,zero,567
 20083bc:	02008ddc 	xori	r8,zero,567
 20083c0:	02008e90 	cmplti	r8,zero,570
 20083c4:	02008e90 	cmplti	r8,zero,570
 20083c8:	02008df8 	rdprs	r8,zero,567
 20083cc:	02008e90 	cmplti	r8,zero,570
 20083d0:	02008e08 	cmpgei	r8,zero,568
 20083d4:	02008cdc 	xori	r8,zero,563
 20083d8:	02008418 	cmpnei	r8,zero,528
 20083dc:	02008cfc 	xorhi	r8,zero,563
 20083e0:	02008e90 	cmplti	r8,zero,570
 20083e4:	02008d08 	cmpgei	r8,zero,564
 20083e8:	02008e90 	cmplti	r8,zero,570
 20083ec:	02008d64 	muli	r8,zero,565
 20083f0:	02008e90 	cmplti	r8,zero,570
 20083f4:	02008e90 	cmplti	r8,zero,570
 20083f8:	02008d74 	movhi	r8,565
 20083fc:	d9003117 	ldw	r4,196(sp)
 2008400:	d8802d15 	stw	r2,180(sp)
 2008404:	0109c83a 	sub	r4,zero,r4
 2008408:	d9003115 	stw	r4,196(sp)
 200840c:	94800114 	ori	r18,r18,4
 2008410:	ac400007 	ldb	r17,0(r21)
 2008414:	003f9706 	br	2008274 <__alt_mem_epcs_flash_controller_0+0xfd007274>
 2008418:	00800c04 	movi	r2,48
 200841c:	d9002d17 	ldw	r4,180(sp)
 2008420:	d9402917 	ldw	r5,164(sp)
 2008424:	d8802705 	stb	r2,156(sp)
 2008428:	00801e04 	movi	r2,120
 200842c:	d8802745 	stb	r2,157(sp)
 2008430:	d8002785 	stb	zero,158(sp)
 2008434:	20c00104 	addi	r3,r4,4
 2008438:	24c00017 	ldw	r19,0(r4)
 200843c:	002d883a 	mov	r22,zero
 2008440:	90800094 	ori	r2,r18,2
 2008444:	28029a16 	blt	r5,zero,2008eb0 <___vfprintf_internal_r+0xdc0>
 2008448:	00bfdfc4 	movi	r2,-129
 200844c:	90a4703a 	and	r18,r18,r2
 2008450:	d8c02d15 	stw	r3,180(sp)
 2008454:	94800094 	ori	r18,r18,2
 2008458:	9802871e 	bne	r19,zero,2008e78 <___vfprintf_internal_r+0xd88>
 200845c:	00808134 	movhi	r2,516
 2008460:	10b0df04 	addi	r2,r2,-15492
 2008464:	d8803915 	stw	r2,228(sp)
 2008468:	04401e04 	movi	r17,120
 200846c:	d8802917 	ldw	r2,164(sp)
 2008470:	0039883a 	mov	fp,zero
 2008474:	1001e926 	beq	r2,zero,2008c1c <___vfprintf_internal_r+0xb2c>
 2008478:	0027883a 	mov	r19,zero
 200847c:	002d883a 	mov	r22,zero
 2008480:	00020506 	br	2008c98 <___vfprintf_internal_r+0xba8>
 2008484:	d9002c17 	ldw	r4,176(sp)
 2008488:	b80b883a 	mov	r5,r23
 200848c:	200a4e40 	call	200a4e4 <__swsetup_r>
 2008490:	1005ac1e 	bne	r2,zero,2009b44 <___vfprintf_internal_r+0x1a54>
 2008494:	b880030b 	ldhu	r2,12(r23)
 2008498:	00c00284 	movi	r3,10
 200849c:	1080068c 	andi	r2,r2,26
 20084a0:	10ff3c1e 	bne	r2,r3,2008194 <__alt_mem_epcs_flash_controller_0+0xfd007194>
 20084a4:	b880038f 	ldh	r2,14(r23)
 20084a8:	103f3a16 	blt	r2,zero,2008194 <__alt_mem_epcs_flash_controller_0+0xfd007194>
 20084ac:	d9c02d17 	ldw	r7,180(sp)
 20084b0:	d9002c17 	ldw	r4,176(sp)
 20084b4:	a80d883a 	mov	r6,r21
 20084b8:	b80b883a 	mov	r5,r23
 20084bc:	200a3040 	call	200a304 <__sbprintf>
 20084c0:	00001106 	br	2008508 <___vfprintf_internal_r+0x418>
 20084c4:	d9002c17 	ldw	r4,176(sp)
 20084c8:	d9801e04 	addi	r6,sp,120
 20084cc:	b80b883a 	mov	r5,r23
 20084d0:	20102200 	call	2010220 <__sprint_r>
 20084d4:	1000081e 	bne	r2,zero,20084f8 <___vfprintf_internal_r+0x408>
 20084d8:	da000404 	addi	r8,sp,16
 20084dc:	003f5306 	br	200822c <__alt_mem_epcs_flash_controller_0+0xfd00722c>
 20084e0:	d8802017 	ldw	r2,128(sp)
 20084e4:	10000426 	beq	r2,zero,20084f8 <___vfprintf_internal_r+0x408>
 20084e8:	d9002c17 	ldw	r4,176(sp)
 20084ec:	d9801e04 	addi	r6,sp,120
 20084f0:	b80b883a 	mov	r5,r23
 20084f4:	20102200 	call	2010220 <__sprint_r>
 20084f8:	b880030b 	ldhu	r2,12(r23)
 20084fc:	1080100c 	andi	r2,r2,64
 2008500:	1005901e 	bne	r2,zero,2009b44 <___vfprintf_internal_r+0x1a54>
 2008504:	d8802f17 	ldw	r2,188(sp)
 2008508:	dfc04717 	ldw	ra,284(sp)
 200850c:	df004617 	ldw	fp,280(sp)
 2008510:	ddc04517 	ldw	r23,276(sp)
 2008514:	dd804417 	ldw	r22,272(sp)
 2008518:	dd404317 	ldw	r21,268(sp)
 200851c:	dd004217 	ldw	r20,264(sp)
 2008520:	dcc04117 	ldw	r19,260(sp)
 2008524:	dc804017 	ldw	r18,256(sp)
 2008528:	dc403f17 	ldw	r17,252(sp)
 200852c:	dc003e17 	ldw	r16,248(sp)
 2008530:	dec04804 	addi	sp,sp,288
 2008534:	f800283a 	ret
 2008538:	d9002c17 	ldw	r4,176(sp)
 200853c:	200c4b80 	call	200c4b8 <__sinit>
 2008540:	003f0406 	br	2008154 <__alt_mem_epcs_flash_controller_0+0xfd007154>
 2008544:	d8802d17 	ldw	r2,180(sp)
 2008548:	d9002d17 	ldw	r4,180(sp)
 200854c:	10800017 	ldw	r2,0(r2)
 2008550:	d8803115 	stw	r2,196(sp)
 2008554:	20800104 	addi	r2,r4,4
 2008558:	d9003117 	ldw	r4,196(sp)
 200855c:	203fa716 	blt	r4,zero,20083fc <__alt_mem_epcs_flash_controller_0+0xfd0073fc>
 2008560:	d8802d15 	stw	r2,180(sp)
 2008564:	ac400007 	ldb	r17,0(r21)
 2008568:	003f4206 	br	2008274 <__alt_mem_epcs_flash_controller_0+0xfd007274>
 200856c:	ac400007 	ldb	r17,0(r21)
 2008570:	aac00044 	addi	r11,r21,1
 2008574:	8a872826 	beq	r17,r10,200a218 <___vfprintf_internal_r+0x2128>
 2008578:	88bff404 	addi	r2,r17,-48
 200857c:	0009883a 	mov	r4,zero
 2008580:	30867d36 	bltu	r6,r2,2009f78 <___vfprintf_internal_r+0x1e88>
 2008584:	5c400007 	ldb	r17,0(r11)
 2008588:	210002a4 	muli	r4,r4,10
 200858c:	5d400044 	addi	r21,r11,1
 2008590:	a817883a 	mov	r11,r21
 2008594:	2089883a 	add	r4,r4,r2
 2008598:	88bff404 	addi	r2,r17,-48
 200859c:	30bff92e 	bgeu	r6,r2,2008584 <__alt_mem_epcs_flash_controller_0+0xfd007584>
 20085a0:	2005c916 	blt	r4,zero,2009cc8 <___vfprintf_internal_r+0x1bd8>
 20085a4:	d9002915 	stw	r4,164(sp)
 20085a8:	003f3306 	br	2008278 <__alt_mem_epcs_flash_controller_0+0xfd007278>
 20085ac:	94802014 	ori	r18,r18,128
 20085b0:	ac400007 	ldb	r17,0(r21)
 20085b4:	003f2f06 	br	2008274 <__alt_mem_epcs_flash_controller_0+0xfd007274>
 20085b8:	a809883a 	mov	r4,r21
 20085bc:	d8003115 	stw	zero,196(sp)
 20085c0:	88bff404 	addi	r2,r17,-48
 20085c4:	0017883a 	mov	r11,zero
 20085c8:	24400007 	ldb	r17,0(r4)
 20085cc:	5ac002a4 	muli	r11,r11,10
 20085d0:	ad400044 	addi	r21,r21,1
 20085d4:	a809883a 	mov	r4,r21
 20085d8:	12d7883a 	add	r11,r2,r11
 20085dc:	88bff404 	addi	r2,r17,-48
 20085e0:	30bff92e 	bgeu	r6,r2,20085c8 <__alt_mem_epcs_flash_controller_0+0xfd0075c8>
 20085e4:	dac03115 	stw	r11,196(sp)
 20085e8:	003f2306 	br	2008278 <__alt_mem_epcs_flash_controller_0+0xfd007278>
 20085ec:	18c03fcc 	andi	r3,r3,255
 20085f0:	18072b1e 	bne	r3,zero,200a2a0 <___vfprintf_internal_r+0x21b0>
 20085f4:	94800414 	ori	r18,r18,16
 20085f8:	9080080c 	andi	r2,r18,32
 20085fc:	10037b26 	beq	r2,zero,20093ec <___vfprintf_internal_r+0x12fc>
 2008600:	d9402d17 	ldw	r5,180(sp)
 2008604:	28800117 	ldw	r2,4(r5)
 2008608:	2cc00017 	ldw	r19,0(r5)
 200860c:	29400204 	addi	r5,r5,8
 2008610:	d9402d15 	stw	r5,180(sp)
 2008614:	102d883a 	mov	r22,r2
 2008618:	10044b16 	blt	r2,zero,2009748 <___vfprintf_internal_r+0x1658>
 200861c:	d9402917 	ldw	r5,164(sp)
 2008620:	df002783 	ldbu	fp,158(sp)
 2008624:	2803bc16 	blt	r5,zero,2009518 <___vfprintf_internal_r+0x1428>
 2008628:	00ffdfc4 	movi	r3,-129
 200862c:	9d84b03a 	or	r2,r19,r22
 2008630:	90e4703a 	and	r18,r18,r3
 2008634:	10017726 	beq	r2,zero,2008c14 <___vfprintf_internal_r+0xb24>
 2008638:	b0038326 	beq	r22,zero,2009448 <___vfprintf_internal_r+0x1358>
 200863c:	dc402a15 	stw	r17,168(sp)
 2008640:	dc001e04 	addi	r16,sp,120
 2008644:	b023883a 	mov	r17,r22
 2008648:	402d883a 	mov	r22,r8
 200864c:	9809883a 	mov	r4,r19
 2008650:	880b883a 	mov	r5,r17
 2008654:	01800284 	movi	r6,10
 2008658:	000f883a 	mov	r7,zero
 200865c:	20125b40 	call	20125b4 <__umoddi3>
 2008660:	10800c04 	addi	r2,r2,48
 2008664:	843fffc4 	addi	r16,r16,-1
 2008668:	9809883a 	mov	r4,r19
 200866c:	880b883a 	mov	r5,r17
 2008670:	80800005 	stb	r2,0(r16)
 2008674:	01800284 	movi	r6,10
 2008678:	000f883a 	mov	r7,zero
 200867c:	201203c0 	call	201203c <__udivdi3>
 2008680:	1027883a 	mov	r19,r2
 2008684:	10c4b03a 	or	r2,r2,r3
 2008688:	1823883a 	mov	r17,r3
 200868c:	103fef1e 	bne	r2,zero,200864c <__alt_mem_epcs_flash_controller_0+0xfd00764c>
 2008690:	d8c02817 	ldw	r3,160(sp)
 2008694:	dc402a17 	ldw	r17,168(sp)
 2008698:	b011883a 	mov	r8,r22
 200869c:	1c07c83a 	sub	r3,r3,r16
 20086a0:	d8c02e15 	stw	r3,184(sp)
 20086a4:	00005906 	br	200880c <___vfprintf_internal_r+0x71c>
 20086a8:	18c03fcc 	andi	r3,r3,255
 20086ac:	1806fa1e 	bne	r3,zero,200a298 <___vfprintf_internal_r+0x21a8>
 20086b0:	9080020c 	andi	r2,r18,8
 20086b4:	10048a26 	beq	r2,zero,20098e0 <___vfprintf_internal_r+0x17f0>
 20086b8:	d8c02d17 	ldw	r3,180(sp)
 20086bc:	d9002d17 	ldw	r4,180(sp)
 20086c0:	d9402d17 	ldw	r5,180(sp)
 20086c4:	18c00017 	ldw	r3,0(r3)
 20086c8:	21000117 	ldw	r4,4(r4)
 20086cc:	29400204 	addi	r5,r5,8
 20086d0:	d8c03615 	stw	r3,216(sp)
 20086d4:	d9003815 	stw	r4,224(sp)
 20086d8:	d9402d15 	stw	r5,180(sp)
 20086dc:	d9003617 	ldw	r4,216(sp)
 20086e0:	d9403817 	ldw	r5,224(sp)
 20086e4:	da003d15 	stw	r8,244(sp)
 20086e8:	04000044 	movi	r16,1
 20086ec:	2002b000 	call	2002b00 <__fpclassifyd>
 20086f0:	da003d17 	ldw	r8,244(sp)
 20086f4:	14041f1e 	bne	r2,r16,2009774 <___vfprintf_internal_r+0x1684>
 20086f8:	d9003617 	ldw	r4,216(sp)
 20086fc:	d9403817 	ldw	r5,224(sp)
 2008700:	000d883a 	mov	r6,zero
 2008704:	000f883a 	mov	r7,zero
 2008708:	2003d100 	call	2003d10 <__ledf2>
 200870c:	da003d17 	ldw	r8,244(sp)
 2008710:	1005be16 	blt	r2,zero,2009e0c <___vfprintf_internal_r+0x1d1c>
 2008714:	df002783 	ldbu	fp,158(sp)
 2008718:	008011c4 	movi	r2,71
 200871c:	1445330e 	bge	r2,r17,2009bec <___vfprintf_internal_r+0x1afc>
 2008720:	04008134 	movhi	r16,516
 2008724:	8430d704 	addi	r16,r16,-15524
 2008728:	00c000c4 	movi	r3,3
 200872c:	00bfdfc4 	movi	r2,-129
 2008730:	d8c02a15 	stw	r3,168(sp)
 2008734:	90a4703a 	and	r18,r18,r2
 2008738:	d8c02e15 	stw	r3,184(sp)
 200873c:	d8002915 	stw	zero,164(sp)
 2008740:	d8003215 	stw	zero,200(sp)
 2008744:	00003706 	br	2008824 <___vfprintf_internal_r+0x734>
 2008748:	94800214 	ori	r18,r18,8
 200874c:	ac400007 	ldb	r17,0(r21)
 2008750:	003ec806 	br	2008274 <__alt_mem_epcs_flash_controller_0+0xfd007274>
 2008754:	18c03fcc 	andi	r3,r3,255
 2008758:	1806db1e 	bne	r3,zero,200a2c8 <___vfprintf_internal_r+0x21d8>
 200875c:	94800414 	ori	r18,r18,16
 2008760:	9080080c 	andi	r2,r18,32
 2008764:	1002d826 	beq	r2,zero,20092c8 <___vfprintf_internal_r+0x11d8>
 2008768:	d9402d17 	ldw	r5,180(sp)
 200876c:	d8c02917 	ldw	r3,164(sp)
 2008770:	d8002785 	stb	zero,158(sp)
 2008774:	28800204 	addi	r2,r5,8
 2008778:	2cc00017 	ldw	r19,0(r5)
 200877c:	2d800117 	ldw	r22,4(r5)
 2008780:	18048f16 	blt	r3,zero,20099c0 <___vfprintf_internal_r+0x18d0>
 2008784:	013fdfc4 	movi	r4,-129
 2008788:	9d86b03a 	or	r3,r19,r22
 200878c:	d8802d15 	stw	r2,180(sp)
 2008790:	9124703a 	and	r18,r18,r4
 2008794:	1802d91e 	bne	r3,zero,20092fc <___vfprintf_internal_r+0x120c>
 2008798:	d8c02917 	ldw	r3,164(sp)
 200879c:	0039883a 	mov	fp,zero
 20087a0:	1805c326 	beq	r3,zero,2009eb0 <___vfprintf_internal_r+0x1dc0>
 20087a4:	0027883a 	mov	r19,zero
 20087a8:	002d883a 	mov	r22,zero
 20087ac:	dc001e04 	addi	r16,sp,120
 20087b0:	9806d0fa 	srli	r3,r19,3
 20087b4:	b008977a 	slli	r4,r22,29
 20087b8:	b02cd0fa 	srli	r22,r22,3
 20087bc:	9cc001cc 	andi	r19,r19,7
 20087c0:	98800c04 	addi	r2,r19,48
 20087c4:	843fffc4 	addi	r16,r16,-1
 20087c8:	20e6b03a 	or	r19,r4,r3
 20087cc:	80800005 	stb	r2,0(r16)
 20087d0:	9d86b03a 	or	r3,r19,r22
 20087d4:	183ff61e 	bne	r3,zero,20087b0 <__alt_mem_epcs_flash_controller_0+0xfd0077b0>
 20087d8:	90c0004c 	andi	r3,r18,1
 20087dc:	18013b26 	beq	r3,zero,2008ccc <___vfprintf_internal_r+0xbdc>
 20087e0:	10803fcc 	andi	r2,r2,255
 20087e4:	1080201c 	xori	r2,r2,128
 20087e8:	10bfe004 	addi	r2,r2,-128
 20087ec:	00c00c04 	movi	r3,48
 20087f0:	10c13626 	beq	r2,r3,2008ccc <___vfprintf_internal_r+0xbdc>
 20087f4:	80ffffc5 	stb	r3,-1(r16)
 20087f8:	d8c02817 	ldw	r3,160(sp)
 20087fc:	80bfffc4 	addi	r2,r16,-1
 2008800:	1021883a 	mov	r16,r2
 2008804:	1887c83a 	sub	r3,r3,r2
 2008808:	d8c02e15 	stw	r3,184(sp)
 200880c:	d8802e17 	ldw	r2,184(sp)
 2008810:	d9002917 	ldw	r4,164(sp)
 2008814:	1100010e 	bge	r2,r4,200881c <___vfprintf_internal_r+0x72c>
 2008818:	2005883a 	mov	r2,r4
 200881c:	d8802a15 	stw	r2,168(sp)
 2008820:	d8003215 	stw	zero,200(sp)
 2008824:	e7003fcc 	andi	fp,fp,255
 2008828:	e700201c 	xori	fp,fp,128
 200882c:	e73fe004 	addi	fp,fp,-128
 2008830:	e0000326 	beq	fp,zero,2008840 <___vfprintf_internal_r+0x750>
 2008834:	d8c02a17 	ldw	r3,168(sp)
 2008838:	18c00044 	addi	r3,r3,1
 200883c:	d8c02a15 	stw	r3,168(sp)
 2008840:	90c0008c 	andi	r3,r18,2
 2008844:	d8c02b15 	stw	r3,172(sp)
 2008848:	18000326 	beq	r3,zero,2008858 <___vfprintf_internal_r+0x768>
 200884c:	d8c02a17 	ldw	r3,168(sp)
 2008850:	18c00084 	addi	r3,r3,2
 2008854:	d8c02a15 	stw	r3,168(sp)
 2008858:	90c0210c 	andi	r3,r18,132
 200885c:	d8c03015 	stw	r3,192(sp)
 2008860:	1801a31e 	bne	r3,zero,2008ef0 <___vfprintf_internal_r+0xe00>
 2008864:	d9003117 	ldw	r4,196(sp)
 2008868:	d8c02a17 	ldw	r3,168(sp)
 200886c:	20e7c83a 	sub	r19,r4,r3
 2008870:	04c19f0e 	bge	zero,r19,2008ef0 <___vfprintf_internal_r+0xe00>
 2008874:	02400404 	movi	r9,16
 2008878:	d8c02017 	ldw	r3,128(sp)
 200887c:	d8801f17 	ldw	r2,124(sp)
 2008880:	4cc50d0e 	bge	r9,r19,2009cb8 <___vfprintf_internal_r+0x1bc8>
 2008884:	01408134 	movhi	r5,516
 2008888:	2970f284 	addi	r5,r5,-15414
 200888c:	dc403b15 	stw	r17,236(sp)
 2008890:	d9403515 	stw	r5,212(sp)
 2008894:	9823883a 	mov	r17,r19
 2008898:	482d883a 	mov	r22,r9
 200889c:	9027883a 	mov	r19,r18
 20088a0:	070001c4 	movi	fp,7
 20088a4:	8025883a 	mov	r18,r16
 20088a8:	dc002c17 	ldw	r16,176(sp)
 20088ac:	00000306 	br	20088bc <___vfprintf_internal_r+0x7cc>
 20088b0:	8c7ffc04 	addi	r17,r17,-16
 20088b4:	42000204 	addi	r8,r8,8
 20088b8:	b440130e 	bge	r22,r17,2008908 <___vfprintf_internal_r+0x818>
 20088bc:	01008134 	movhi	r4,516
 20088c0:	18c00404 	addi	r3,r3,16
 20088c4:	10800044 	addi	r2,r2,1
 20088c8:	2130f284 	addi	r4,r4,-15414
 20088cc:	41000015 	stw	r4,0(r8)
 20088d0:	45800115 	stw	r22,4(r8)
 20088d4:	d8c02015 	stw	r3,128(sp)
 20088d8:	d8801f15 	stw	r2,124(sp)
 20088dc:	e0bff40e 	bge	fp,r2,20088b0 <__alt_mem_epcs_flash_controller_0+0xfd0078b0>
 20088e0:	d9801e04 	addi	r6,sp,120
 20088e4:	b80b883a 	mov	r5,r23
 20088e8:	8009883a 	mov	r4,r16
 20088ec:	20102200 	call	2010220 <__sprint_r>
 20088f0:	103f011e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 20088f4:	8c7ffc04 	addi	r17,r17,-16
 20088f8:	d8c02017 	ldw	r3,128(sp)
 20088fc:	d8801f17 	ldw	r2,124(sp)
 2008900:	da000404 	addi	r8,sp,16
 2008904:	b47fed16 	blt	r22,r17,20088bc <__alt_mem_epcs_flash_controller_0+0xfd0078bc>
 2008908:	9021883a 	mov	r16,r18
 200890c:	9825883a 	mov	r18,r19
 2008910:	8827883a 	mov	r19,r17
 2008914:	dc403b17 	ldw	r17,236(sp)
 2008918:	d9403517 	ldw	r5,212(sp)
 200891c:	98c7883a 	add	r3,r19,r3
 2008920:	10800044 	addi	r2,r2,1
 2008924:	41400015 	stw	r5,0(r8)
 2008928:	44c00115 	stw	r19,4(r8)
 200892c:	d8c02015 	stw	r3,128(sp)
 2008930:	d8801f15 	stw	r2,124(sp)
 2008934:	010001c4 	movi	r4,7
 2008938:	2082a316 	blt	r4,r2,20093c8 <___vfprintf_internal_r+0x12d8>
 200893c:	df002787 	ldb	fp,158(sp)
 2008940:	42000204 	addi	r8,r8,8
 2008944:	e0000c26 	beq	fp,zero,2008978 <___vfprintf_internal_r+0x888>
 2008948:	d8801f17 	ldw	r2,124(sp)
 200894c:	d9002784 	addi	r4,sp,158
 2008950:	18c00044 	addi	r3,r3,1
 2008954:	10800044 	addi	r2,r2,1
 2008958:	41000015 	stw	r4,0(r8)
 200895c:	01000044 	movi	r4,1
 2008960:	41000115 	stw	r4,4(r8)
 2008964:	d8c02015 	stw	r3,128(sp)
 2008968:	d8801f15 	stw	r2,124(sp)
 200896c:	010001c4 	movi	r4,7
 2008970:	20823c16 	blt	r4,r2,2009264 <___vfprintf_internal_r+0x1174>
 2008974:	42000204 	addi	r8,r8,8
 2008978:	d8802b17 	ldw	r2,172(sp)
 200897c:	10000c26 	beq	r2,zero,20089b0 <___vfprintf_internal_r+0x8c0>
 2008980:	d8801f17 	ldw	r2,124(sp)
 2008984:	d9002704 	addi	r4,sp,156
 2008988:	18c00084 	addi	r3,r3,2
 200898c:	10800044 	addi	r2,r2,1
 2008990:	41000015 	stw	r4,0(r8)
 2008994:	01000084 	movi	r4,2
 2008998:	41000115 	stw	r4,4(r8)
 200899c:	d8c02015 	stw	r3,128(sp)
 20089a0:	d8801f15 	stw	r2,124(sp)
 20089a4:	010001c4 	movi	r4,7
 20089a8:	20823616 	blt	r4,r2,2009284 <___vfprintf_internal_r+0x1194>
 20089ac:	42000204 	addi	r8,r8,8
 20089b0:	d9003017 	ldw	r4,192(sp)
 20089b4:	00802004 	movi	r2,128
 20089b8:	20819926 	beq	r4,r2,2009020 <___vfprintf_internal_r+0xf30>
 20089bc:	d9402917 	ldw	r5,164(sp)
 20089c0:	d8802e17 	ldw	r2,184(sp)
 20089c4:	28adc83a 	sub	r22,r5,r2
 20089c8:	0580310e 	bge	zero,r22,2008a90 <___vfprintf_internal_r+0x9a0>
 20089cc:	07000404 	movi	fp,16
 20089d0:	d8801f17 	ldw	r2,124(sp)
 20089d4:	e584140e 	bge	fp,r22,2009a28 <___vfprintf_internal_r+0x1938>
 20089d8:	01408134 	movhi	r5,516
 20089dc:	2970ee84 	addi	r5,r5,-15430
 20089e0:	dc402915 	stw	r17,164(sp)
 20089e4:	d9402b15 	stw	r5,172(sp)
 20089e8:	b023883a 	mov	r17,r22
 20089ec:	04c001c4 	movi	r19,7
 20089f0:	a82d883a 	mov	r22,r21
 20089f4:	902b883a 	mov	r21,r18
 20089f8:	8025883a 	mov	r18,r16
 20089fc:	dc002c17 	ldw	r16,176(sp)
 2008a00:	00000306 	br	2008a10 <___vfprintf_internal_r+0x920>
 2008a04:	8c7ffc04 	addi	r17,r17,-16
 2008a08:	42000204 	addi	r8,r8,8
 2008a0c:	e440110e 	bge	fp,r17,2008a54 <___vfprintf_internal_r+0x964>
 2008a10:	18c00404 	addi	r3,r3,16
 2008a14:	10800044 	addi	r2,r2,1
 2008a18:	45000015 	stw	r20,0(r8)
 2008a1c:	47000115 	stw	fp,4(r8)
 2008a20:	d8c02015 	stw	r3,128(sp)
 2008a24:	d8801f15 	stw	r2,124(sp)
 2008a28:	98bff60e 	bge	r19,r2,2008a04 <__alt_mem_epcs_flash_controller_0+0xfd007a04>
 2008a2c:	d9801e04 	addi	r6,sp,120
 2008a30:	b80b883a 	mov	r5,r23
 2008a34:	8009883a 	mov	r4,r16
 2008a38:	20102200 	call	2010220 <__sprint_r>
 2008a3c:	103eae1e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2008a40:	8c7ffc04 	addi	r17,r17,-16
 2008a44:	d8c02017 	ldw	r3,128(sp)
 2008a48:	d8801f17 	ldw	r2,124(sp)
 2008a4c:	da000404 	addi	r8,sp,16
 2008a50:	e47fef16 	blt	fp,r17,2008a10 <__alt_mem_epcs_flash_controller_0+0xfd007a10>
 2008a54:	9021883a 	mov	r16,r18
 2008a58:	a825883a 	mov	r18,r21
 2008a5c:	b02b883a 	mov	r21,r22
 2008a60:	882d883a 	mov	r22,r17
 2008a64:	dc402917 	ldw	r17,164(sp)
 2008a68:	d9002b17 	ldw	r4,172(sp)
 2008a6c:	1d87883a 	add	r3,r3,r22
 2008a70:	10800044 	addi	r2,r2,1
 2008a74:	41000015 	stw	r4,0(r8)
 2008a78:	45800115 	stw	r22,4(r8)
 2008a7c:	d8c02015 	stw	r3,128(sp)
 2008a80:	d8801f15 	stw	r2,124(sp)
 2008a84:	010001c4 	movi	r4,7
 2008a88:	2081ee16 	blt	r4,r2,2009244 <___vfprintf_internal_r+0x1154>
 2008a8c:	42000204 	addi	r8,r8,8
 2008a90:	9080400c 	andi	r2,r18,256
 2008a94:	1001181e 	bne	r2,zero,2008ef8 <___vfprintf_internal_r+0xe08>
 2008a98:	d9402e17 	ldw	r5,184(sp)
 2008a9c:	d8801f17 	ldw	r2,124(sp)
 2008aa0:	44000015 	stw	r16,0(r8)
 2008aa4:	1947883a 	add	r3,r3,r5
 2008aa8:	10800044 	addi	r2,r2,1
 2008aac:	41400115 	stw	r5,4(r8)
 2008ab0:	d8c02015 	stw	r3,128(sp)
 2008ab4:	d8801f15 	stw	r2,124(sp)
 2008ab8:	010001c4 	movi	r4,7
 2008abc:	2081d316 	blt	r4,r2,200920c <___vfprintf_internal_r+0x111c>
 2008ac0:	42000204 	addi	r8,r8,8
 2008ac4:	9480010c 	andi	r18,r18,4
 2008ac8:	90003226 	beq	r18,zero,2008b94 <___vfprintf_internal_r+0xaa4>
 2008acc:	d9403117 	ldw	r5,196(sp)
 2008ad0:	d8802a17 	ldw	r2,168(sp)
 2008ad4:	28a1c83a 	sub	r16,r5,r2
 2008ad8:	04002e0e 	bge	zero,r16,2008b94 <___vfprintf_internal_r+0xaa4>
 2008adc:	04400404 	movi	r17,16
 2008ae0:	d8801f17 	ldw	r2,124(sp)
 2008ae4:	8c04a20e 	bge	r17,r16,2009d70 <___vfprintf_internal_r+0x1c80>
 2008ae8:	01408134 	movhi	r5,516
 2008aec:	2970f284 	addi	r5,r5,-15414
 2008af0:	d9403515 	stw	r5,212(sp)
 2008af4:	048001c4 	movi	r18,7
 2008af8:	dcc02c17 	ldw	r19,176(sp)
 2008afc:	00000306 	br	2008b0c <___vfprintf_internal_r+0xa1c>
 2008b00:	843ffc04 	addi	r16,r16,-16
 2008b04:	42000204 	addi	r8,r8,8
 2008b08:	8c00130e 	bge	r17,r16,2008b58 <___vfprintf_internal_r+0xa68>
 2008b0c:	01008134 	movhi	r4,516
 2008b10:	18c00404 	addi	r3,r3,16
 2008b14:	10800044 	addi	r2,r2,1
 2008b18:	2130f284 	addi	r4,r4,-15414
 2008b1c:	41000015 	stw	r4,0(r8)
 2008b20:	44400115 	stw	r17,4(r8)
 2008b24:	d8c02015 	stw	r3,128(sp)
 2008b28:	d8801f15 	stw	r2,124(sp)
 2008b2c:	90bff40e 	bge	r18,r2,2008b00 <__alt_mem_epcs_flash_controller_0+0xfd007b00>
 2008b30:	d9801e04 	addi	r6,sp,120
 2008b34:	b80b883a 	mov	r5,r23
 2008b38:	9809883a 	mov	r4,r19
 2008b3c:	20102200 	call	2010220 <__sprint_r>
 2008b40:	103e6d1e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2008b44:	843ffc04 	addi	r16,r16,-16
 2008b48:	d8c02017 	ldw	r3,128(sp)
 2008b4c:	d8801f17 	ldw	r2,124(sp)
 2008b50:	da000404 	addi	r8,sp,16
 2008b54:	8c3fed16 	blt	r17,r16,2008b0c <__alt_mem_epcs_flash_controller_0+0xfd007b0c>
 2008b58:	d9403517 	ldw	r5,212(sp)
 2008b5c:	1c07883a 	add	r3,r3,r16
 2008b60:	10800044 	addi	r2,r2,1
 2008b64:	41400015 	stw	r5,0(r8)
 2008b68:	44000115 	stw	r16,4(r8)
 2008b6c:	d8c02015 	stw	r3,128(sp)
 2008b70:	d8801f15 	stw	r2,124(sp)
 2008b74:	010001c4 	movi	r4,7
 2008b78:	2080060e 	bge	r4,r2,2008b94 <___vfprintf_internal_r+0xaa4>
 2008b7c:	d9002c17 	ldw	r4,176(sp)
 2008b80:	d9801e04 	addi	r6,sp,120
 2008b84:	b80b883a 	mov	r5,r23
 2008b88:	20102200 	call	2010220 <__sprint_r>
 2008b8c:	103e5a1e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2008b90:	d8c02017 	ldw	r3,128(sp)
 2008b94:	d8803117 	ldw	r2,196(sp)
 2008b98:	d9002a17 	ldw	r4,168(sp)
 2008b9c:	1100010e 	bge	r2,r4,2008ba4 <___vfprintf_internal_r+0xab4>
 2008ba0:	2005883a 	mov	r2,r4
 2008ba4:	d9402f17 	ldw	r5,188(sp)
 2008ba8:	288b883a 	add	r5,r5,r2
 2008bac:	d9402f15 	stw	r5,188(sp)
 2008bb0:	18019e1e 	bne	r3,zero,200922c <___vfprintf_internal_r+0x113c>
 2008bb4:	a8800007 	ldb	r2,0(r21)
 2008bb8:	d8001f15 	stw	zero,124(sp)
 2008bbc:	da000404 	addi	r8,sp,16
 2008bc0:	103d851e 	bne	r2,zero,20081d8 <__alt_mem_epcs_flash_controller_0+0xfd0071d8>
 2008bc4:	a821883a 	mov	r16,r21
 2008bc8:	003d9b06 	br	2008238 <__alt_mem_epcs_flash_controller_0+0xfd007238>
 2008bcc:	18c03fcc 	andi	r3,r3,255
 2008bd0:	1805c11e 	bne	r3,zero,200a2d8 <___vfprintf_internal_r+0x21e8>
 2008bd4:	94800414 	ori	r18,r18,16
 2008bd8:	9080080c 	andi	r2,r18,32
 2008bdc:	10020c26 	beq	r2,zero,2009410 <___vfprintf_internal_r+0x1320>
 2008be0:	d8802d17 	ldw	r2,180(sp)
 2008be4:	d9002917 	ldw	r4,164(sp)
 2008be8:	d8002785 	stb	zero,158(sp)
 2008bec:	10c00204 	addi	r3,r2,8
 2008bf0:	14c00017 	ldw	r19,0(r2)
 2008bf4:	15800117 	ldw	r22,4(r2)
 2008bf8:	20040f16 	blt	r4,zero,2009c38 <___vfprintf_internal_r+0x1b48>
 2008bfc:	013fdfc4 	movi	r4,-129
 2008c00:	9d84b03a 	or	r2,r19,r22
 2008c04:	d8c02d15 	stw	r3,180(sp)
 2008c08:	9124703a 	and	r18,r18,r4
 2008c0c:	0039883a 	mov	fp,zero
 2008c10:	103e891e 	bne	r2,zero,2008638 <__alt_mem_epcs_flash_controller_0+0xfd007638>
 2008c14:	d9002917 	ldw	r4,164(sp)
 2008c18:	2002c11e 	bne	r4,zero,2009720 <___vfprintf_internal_r+0x1630>
 2008c1c:	d8002915 	stw	zero,164(sp)
 2008c20:	d8002e15 	stw	zero,184(sp)
 2008c24:	dc001e04 	addi	r16,sp,120
 2008c28:	003ef806 	br	200880c <__alt_mem_epcs_flash_controller_0+0xfd00780c>
 2008c2c:	18c03fcc 	andi	r3,r3,255
 2008c30:	18059d1e 	bne	r3,zero,200a2a8 <___vfprintf_internal_r+0x21b8>
 2008c34:	01408134 	movhi	r5,516
 2008c38:	2970da04 	addi	r5,r5,-15512
 2008c3c:	d9403915 	stw	r5,228(sp)
 2008c40:	9080080c 	andi	r2,r18,32
 2008c44:	10005226 	beq	r2,zero,2008d90 <___vfprintf_internal_r+0xca0>
 2008c48:	d8802d17 	ldw	r2,180(sp)
 2008c4c:	14c00017 	ldw	r19,0(r2)
 2008c50:	15800117 	ldw	r22,4(r2)
 2008c54:	10800204 	addi	r2,r2,8
 2008c58:	d8802d15 	stw	r2,180(sp)
 2008c5c:	9080004c 	andi	r2,r18,1
 2008c60:	10019026 	beq	r2,zero,20092a4 <___vfprintf_internal_r+0x11b4>
 2008c64:	9d84b03a 	or	r2,r19,r22
 2008c68:	10036926 	beq	r2,zero,2009a10 <___vfprintf_internal_r+0x1920>
 2008c6c:	d8c02917 	ldw	r3,164(sp)
 2008c70:	00800c04 	movi	r2,48
 2008c74:	d8802705 	stb	r2,156(sp)
 2008c78:	dc402745 	stb	r17,157(sp)
 2008c7c:	d8002785 	stb	zero,158(sp)
 2008c80:	90800094 	ori	r2,r18,2
 2008c84:	18045d16 	blt	r3,zero,2009dfc <___vfprintf_internal_r+0x1d0c>
 2008c88:	00bfdfc4 	movi	r2,-129
 2008c8c:	90a4703a 	and	r18,r18,r2
 2008c90:	94800094 	ori	r18,r18,2
 2008c94:	0039883a 	mov	fp,zero
 2008c98:	d9003917 	ldw	r4,228(sp)
 2008c9c:	dc001e04 	addi	r16,sp,120
 2008ca0:	988003cc 	andi	r2,r19,15
 2008ca4:	b006973a 	slli	r3,r22,28
 2008ca8:	2085883a 	add	r2,r4,r2
 2008cac:	9826d13a 	srli	r19,r19,4
 2008cb0:	10800003 	ldbu	r2,0(r2)
 2008cb4:	b02cd13a 	srli	r22,r22,4
 2008cb8:	843fffc4 	addi	r16,r16,-1
 2008cbc:	1ce6b03a 	or	r19,r3,r19
 2008cc0:	80800005 	stb	r2,0(r16)
 2008cc4:	9d84b03a 	or	r2,r19,r22
 2008cc8:	103ff51e 	bne	r2,zero,2008ca0 <__alt_mem_epcs_flash_controller_0+0xfd007ca0>
 2008ccc:	d8c02817 	ldw	r3,160(sp)
 2008cd0:	1c07c83a 	sub	r3,r3,r16
 2008cd4:	d8c02e15 	stw	r3,184(sp)
 2008cd8:	003ecc06 	br	200880c <__alt_mem_epcs_flash_controller_0+0xfd00780c>
 2008cdc:	18c03fcc 	andi	r3,r3,255
 2008ce0:	183e9f26 	beq	r3,zero,2008760 <__alt_mem_epcs_flash_controller_0+0xfd007760>
 2008ce4:	d9c02785 	stb	r7,158(sp)
 2008ce8:	003e9d06 	br	2008760 <__alt_mem_epcs_flash_controller_0+0xfd007760>
 2008cec:	00c00044 	movi	r3,1
 2008cf0:	01c00ac4 	movi	r7,43
 2008cf4:	ac400007 	ldb	r17,0(r21)
 2008cf8:	003d5e06 	br	2008274 <__alt_mem_epcs_flash_controller_0+0xfd007274>
 2008cfc:	94800814 	ori	r18,r18,32
 2008d00:	ac400007 	ldb	r17,0(r21)
 2008d04:	003d5b06 	br	2008274 <__alt_mem_epcs_flash_controller_0+0xfd007274>
 2008d08:	d8c02d17 	ldw	r3,180(sp)
 2008d0c:	d8002785 	stb	zero,158(sp)
 2008d10:	1c000017 	ldw	r16,0(r3)
 2008d14:	1cc00104 	addi	r19,r3,4
 2008d18:	80041926 	beq	r16,zero,2009d80 <___vfprintf_internal_r+0x1c90>
 2008d1c:	d9002917 	ldw	r4,164(sp)
 2008d20:	2003d016 	blt	r4,zero,2009c64 <___vfprintf_internal_r+0x1b74>
 2008d24:	200d883a 	mov	r6,r4
 2008d28:	000b883a 	mov	r5,zero
 2008d2c:	8009883a 	mov	r4,r16
 2008d30:	da003d15 	stw	r8,244(sp)
 2008d34:	200d2180 	call	200d218 <memchr>
 2008d38:	da003d17 	ldw	r8,244(sp)
 2008d3c:	10045426 	beq	r2,zero,2009e90 <___vfprintf_internal_r+0x1da0>
 2008d40:	1405c83a 	sub	r2,r2,r16
 2008d44:	d8802e15 	stw	r2,184(sp)
 2008d48:	1003cc16 	blt	r2,zero,2009c7c <___vfprintf_internal_r+0x1b8c>
 2008d4c:	df002783 	ldbu	fp,158(sp)
 2008d50:	d8802a15 	stw	r2,168(sp)
 2008d54:	dcc02d15 	stw	r19,180(sp)
 2008d58:	d8002915 	stw	zero,164(sp)
 2008d5c:	d8003215 	stw	zero,200(sp)
 2008d60:	003eb006 	br	2008824 <__alt_mem_epcs_flash_controller_0+0xfd007824>
 2008d64:	18c03fcc 	andi	r3,r3,255
 2008d68:	183f9b26 	beq	r3,zero,2008bd8 <__alt_mem_epcs_flash_controller_0+0xfd007bd8>
 2008d6c:	d9c02785 	stb	r7,158(sp)
 2008d70:	003f9906 	br	2008bd8 <__alt_mem_epcs_flash_controller_0+0xfd007bd8>
 2008d74:	18c03fcc 	andi	r3,r3,255
 2008d78:	1805551e 	bne	r3,zero,200a2d0 <___vfprintf_internal_r+0x21e0>
 2008d7c:	01408134 	movhi	r5,516
 2008d80:	2970df04 	addi	r5,r5,-15492
 2008d84:	d9403915 	stw	r5,228(sp)
 2008d88:	9080080c 	andi	r2,r18,32
 2008d8c:	103fae1e 	bne	r2,zero,2008c48 <__alt_mem_epcs_flash_controller_0+0xfd007c48>
 2008d90:	9080040c 	andi	r2,r18,16
 2008d94:	1002de26 	beq	r2,zero,2009910 <___vfprintf_internal_r+0x1820>
 2008d98:	d8c02d17 	ldw	r3,180(sp)
 2008d9c:	002d883a 	mov	r22,zero
 2008da0:	1cc00017 	ldw	r19,0(r3)
 2008da4:	18c00104 	addi	r3,r3,4
 2008da8:	d8c02d15 	stw	r3,180(sp)
 2008dac:	003fab06 	br	2008c5c <__alt_mem_epcs_flash_controller_0+0xfd007c5c>
 2008db0:	38803fcc 	andi	r2,r7,255
 2008db4:	1080201c 	xori	r2,r2,128
 2008db8:	10bfe004 	addi	r2,r2,-128
 2008dbc:	1002d21e 	bne	r2,zero,2009908 <___vfprintf_internal_r+0x1818>
 2008dc0:	00c00044 	movi	r3,1
 2008dc4:	01c00804 	movi	r7,32
 2008dc8:	ac400007 	ldb	r17,0(r21)
 2008dcc:	003d2906 	br	2008274 <__alt_mem_epcs_flash_controller_0+0xfd007274>
 2008dd0:	94800054 	ori	r18,r18,1
 2008dd4:	ac400007 	ldb	r17,0(r21)
 2008dd8:	003d2606 	br	2008274 <__alt_mem_epcs_flash_controller_0+0xfd007274>
 2008ddc:	18c03fcc 	andi	r3,r3,255
 2008de0:	183e0526 	beq	r3,zero,20085f8 <__alt_mem_epcs_flash_controller_0+0xfd0075f8>
 2008de4:	d9c02785 	stb	r7,158(sp)
 2008de8:	003e0306 	br	20085f8 <__alt_mem_epcs_flash_controller_0+0xfd0075f8>
 2008dec:	94801014 	ori	r18,r18,64
 2008df0:	ac400007 	ldb	r17,0(r21)
 2008df4:	003d1f06 	br	2008274 <__alt_mem_epcs_flash_controller_0+0xfd007274>
 2008df8:	ac400007 	ldb	r17,0(r21)
 2008dfc:	8a438726 	beq	r17,r9,2009c1c <___vfprintf_internal_r+0x1b2c>
 2008e00:	94800414 	ori	r18,r18,16
 2008e04:	003d1b06 	br	2008274 <__alt_mem_epcs_flash_controller_0+0xfd007274>
 2008e08:	18c03fcc 	andi	r3,r3,255
 2008e0c:	1805341e 	bne	r3,zero,200a2e0 <___vfprintf_internal_r+0x21f0>
 2008e10:	9080080c 	andi	r2,r18,32
 2008e14:	1002cd26 	beq	r2,zero,200994c <___vfprintf_internal_r+0x185c>
 2008e18:	d9402d17 	ldw	r5,180(sp)
 2008e1c:	d9002f17 	ldw	r4,188(sp)
 2008e20:	28800017 	ldw	r2,0(r5)
 2008e24:	2007d7fa 	srai	r3,r4,31
 2008e28:	29400104 	addi	r5,r5,4
 2008e2c:	d9402d15 	stw	r5,180(sp)
 2008e30:	11000015 	stw	r4,0(r2)
 2008e34:	10c00115 	stw	r3,4(r2)
 2008e38:	003ce506 	br	20081d0 <__alt_mem_epcs_flash_controller_0+0xfd0071d0>
 2008e3c:	d8c02d17 	ldw	r3,180(sp)
 2008e40:	d9002d17 	ldw	r4,180(sp)
 2008e44:	d8002785 	stb	zero,158(sp)
 2008e48:	18800017 	ldw	r2,0(r3)
 2008e4c:	21000104 	addi	r4,r4,4
 2008e50:	00c00044 	movi	r3,1
 2008e54:	d8c02a15 	stw	r3,168(sp)
 2008e58:	d8801405 	stb	r2,80(sp)
 2008e5c:	d9002d15 	stw	r4,180(sp)
 2008e60:	d8c02e15 	stw	r3,184(sp)
 2008e64:	d8002915 	stw	zero,164(sp)
 2008e68:	d8003215 	stw	zero,200(sp)
 2008e6c:	dc001404 	addi	r16,sp,80
 2008e70:	0039883a 	mov	fp,zero
 2008e74:	003e7206 	br	2008840 <__alt_mem_epcs_flash_controller_0+0xfd007840>
 2008e78:	01008134 	movhi	r4,516
 2008e7c:	2130df04 	addi	r4,r4,-15492
 2008e80:	0039883a 	mov	fp,zero
 2008e84:	d9003915 	stw	r4,228(sp)
 2008e88:	04401e04 	movi	r17,120
 2008e8c:	003f8206 	br	2008c98 <__alt_mem_epcs_flash_controller_0+0xfd007c98>
 2008e90:	18c03fcc 	andi	r3,r3,255
 2008e94:	1805061e 	bne	r3,zero,200a2b0 <___vfprintf_internal_r+0x21c0>
 2008e98:	883d9126 	beq	r17,zero,20084e0 <__alt_mem_epcs_flash_controller_0+0xfd0074e0>
 2008e9c:	00c00044 	movi	r3,1
 2008ea0:	d8c02a15 	stw	r3,168(sp)
 2008ea4:	dc401405 	stb	r17,80(sp)
 2008ea8:	d8002785 	stb	zero,158(sp)
 2008eac:	003fec06 	br	2008e60 <__alt_mem_epcs_flash_controller_0+0xfd007e60>
 2008eb0:	01408134 	movhi	r5,516
 2008eb4:	2970df04 	addi	r5,r5,-15492
 2008eb8:	d9403915 	stw	r5,228(sp)
 2008ebc:	d8c02d15 	stw	r3,180(sp)
 2008ec0:	1025883a 	mov	r18,r2
 2008ec4:	04401e04 	movi	r17,120
 2008ec8:	9d84b03a 	or	r2,r19,r22
 2008ecc:	1000fc1e 	bne	r2,zero,20092c0 <___vfprintf_internal_r+0x11d0>
 2008ed0:	0039883a 	mov	fp,zero
 2008ed4:	00800084 	movi	r2,2
 2008ed8:	10803fcc 	andi	r2,r2,255
 2008edc:	00c00044 	movi	r3,1
 2008ee0:	10c20f26 	beq	r2,r3,2009720 <___vfprintf_internal_r+0x1630>
 2008ee4:	00c00084 	movi	r3,2
 2008ee8:	10fd6326 	beq	r2,r3,2008478 <__alt_mem_epcs_flash_controller_0+0xfd007478>
 2008eec:	003e2d06 	br	20087a4 <__alt_mem_epcs_flash_controller_0+0xfd0077a4>
 2008ef0:	d8c02017 	ldw	r3,128(sp)
 2008ef4:	003e9306 	br	2008944 <__alt_mem_epcs_flash_controller_0+0xfd007944>
 2008ef8:	00801944 	movi	r2,101
 2008efc:	14407e0e 	bge	r2,r17,20090f8 <___vfprintf_internal_r+0x1008>
 2008f00:	d9003617 	ldw	r4,216(sp)
 2008f04:	d9403817 	ldw	r5,224(sp)
 2008f08:	000d883a 	mov	r6,zero
 2008f0c:	000f883a 	mov	r7,zero
 2008f10:	d8c03c15 	stw	r3,240(sp)
 2008f14:	da003d15 	stw	r8,244(sp)
 2008f18:	2012aec0 	call	2012aec <__eqdf2>
 2008f1c:	d8c03c17 	ldw	r3,240(sp)
 2008f20:	da003d17 	ldw	r8,244(sp)
 2008f24:	1000f71e 	bne	r2,zero,2009304 <___vfprintf_internal_r+0x1214>
 2008f28:	d8801f17 	ldw	r2,124(sp)
 2008f2c:	01008134 	movhi	r4,516
 2008f30:	2130e604 	addi	r4,r4,-15464
 2008f34:	18c00044 	addi	r3,r3,1
 2008f38:	10800044 	addi	r2,r2,1
 2008f3c:	41000015 	stw	r4,0(r8)
 2008f40:	01000044 	movi	r4,1
 2008f44:	41000115 	stw	r4,4(r8)
 2008f48:	d8c02015 	stw	r3,128(sp)
 2008f4c:	d8801f15 	stw	r2,124(sp)
 2008f50:	010001c4 	movi	r4,7
 2008f54:	2082b816 	blt	r4,r2,2009a38 <___vfprintf_internal_r+0x1948>
 2008f58:	42000204 	addi	r8,r8,8
 2008f5c:	d8802617 	ldw	r2,152(sp)
 2008f60:	d9403317 	ldw	r5,204(sp)
 2008f64:	11400216 	blt	r2,r5,2008f70 <___vfprintf_internal_r+0xe80>
 2008f68:	9080004c 	andi	r2,r18,1
 2008f6c:	103ed526 	beq	r2,zero,2008ac4 <__alt_mem_epcs_flash_controller_0+0xfd007ac4>
 2008f70:	d8803717 	ldw	r2,220(sp)
 2008f74:	d9003417 	ldw	r4,208(sp)
 2008f78:	d9403717 	ldw	r5,220(sp)
 2008f7c:	1887883a 	add	r3,r3,r2
 2008f80:	d8801f17 	ldw	r2,124(sp)
 2008f84:	41000015 	stw	r4,0(r8)
 2008f88:	41400115 	stw	r5,4(r8)
 2008f8c:	10800044 	addi	r2,r2,1
 2008f90:	d8c02015 	stw	r3,128(sp)
 2008f94:	d8801f15 	stw	r2,124(sp)
 2008f98:	010001c4 	movi	r4,7
 2008f9c:	20832916 	blt	r4,r2,2009c44 <___vfprintf_internal_r+0x1b54>
 2008fa0:	42000204 	addi	r8,r8,8
 2008fa4:	d8803317 	ldw	r2,204(sp)
 2008fa8:	143fffc4 	addi	r16,r2,-1
 2008fac:	043ec50e 	bge	zero,r16,2008ac4 <__alt_mem_epcs_flash_controller_0+0xfd007ac4>
 2008fb0:	04400404 	movi	r17,16
 2008fb4:	d8801f17 	ldw	r2,124(sp)
 2008fb8:	8c00880e 	bge	r17,r16,20091dc <___vfprintf_internal_r+0x10ec>
 2008fbc:	01408134 	movhi	r5,516
 2008fc0:	2970ee84 	addi	r5,r5,-15430
 2008fc4:	d9402b15 	stw	r5,172(sp)
 2008fc8:	058001c4 	movi	r22,7
 2008fcc:	dcc02c17 	ldw	r19,176(sp)
 2008fd0:	00000306 	br	2008fe0 <___vfprintf_internal_r+0xef0>
 2008fd4:	42000204 	addi	r8,r8,8
 2008fd8:	843ffc04 	addi	r16,r16,-16
 2008fdc:	8c00820e 	bge	r17,r16,20091e8 <___vfprintf_internal_r+0x10f8>
 2008fe0:	18c00404 	addi	r3,r3,16
 2008fe4:	10800044 	addi	r2,r2,1
 2008fe8:	45000015 	stw	r20,0(r8)
 2008fec:	44400115 	stw	r17,4(r8)
 2008ff0:	d8c02015 	stw	r3,128(sp)
 2008ff4:	d8801f15 	stw	r2,124(sp)
 2008ff8:	b0bff60e 	bge	r22,r2,2008fd4 <__alt_mem_epcs_flash_controller_0+0xfd007fd4>
 2008ffc:	d9801e04 	addi	r6,sp,120
 2009000:	b80b883a 	mov	r5,r23
 2009004:	9809883a 	mov	r4,r19
 2009008:	20102200 	call	2010220 <__sprint_r>
 200900c:	103d3a1e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009010:	d8c02017 	ldw	r3,128(sp)
 2009014:	d8801f17 	ldw	r2,124(sp)
 2009018:	da000404 	addi	r8,sp,16
 200901c:	003fee06 	br	2008fd8 <__alt_mem_epcs_flash_controller_0+0xfd007fd8>
 2009020:	d9403117 	ldw	r5,196(sp)
 2009024:	d8802a17 	ldw	r2,168(sp)
 2009028:	28adc83a 	sub	r22,r5,r2
 200902c:	05be630e 	bge	zero,r22,20089bc <__alt_mem_epcs_flash_controller_0+0xfd0079bc>
 2009030:	07000404 	movi	fp,16
 2009034:	d8801f17 	ldw	r2,124(sp)
 2009038:	e5838f0e 	bge	fp,r22,2009e78 <___vfprintf_internal_r+0x1d88>
 200903c:	01408134 	movhi	r5,516
 2009040:	2970ee84 	addi	r5,r5,-15430
 2009044:	dc403015 	stw	r17,192(sp)
 2009048:	d9402b15 	stw	r5,172(sp)
 200904c:	b023883a 	mov	r17,r22
 2009050:	04c001c4 	movi	r19,7
 2009054:	a82d883a 	mov	r22,r21
 2009058:	902b883a 	mov	r21,r18
 200905c:	8025883a 	mov	r18,r16
 2009060:	dc002c17 	ldw	r16,176(sp)
 2009064:	00000306 	br	2009074 <___vfprintf_internal_r+0xf84>
 2009068:	8c7ffc04 	addi	r17,r17,-16
 200906c:	42000204 	addi	r8,r8,8
 2009070:	e440110e 	bge	fp,r17,20090b8 <___vfprintf_internal_r+0xfc8>
 2009074:	18c00404 	addi	r3,r3,16
 2009078:	10800044 	addi	r2,r2,1
 200907c:	45000015 	stw	r20,0(r8)
 2009080:	47000115 	stw	fp,4(r8)
 2009084:	d8c02015 	stw	r3,128(sp)
 2009088:	d8801f15 	stw	r2,124(sp)
 200908c:	98bff60e 	bge	r19,r2,2009068 <__alt_mem_epcs_flash_controller_0+0xfd008068>
 2009090:	d9801e04 	addi	r6,sp,120
 2009094:	b80b883a 	mov	r5,r23
 2009098:	8009883a 	mov	r4,r16
 200909c:	20102200 	call	2010220 <__sprint_r>
 20090a0:	103d151e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 20090a4:	8c7ffc04 	addi	r17,r17,-16
 20090a8:	d8c02017 	ldw	r3,128(sp)
 20090ac:	d8801f17 	ldw	r2,124(sp)
 20090b0:	da000404 	addi	r8,sp,16
 20090b4:	e47fef16 	blt	fp,r17,2009074 <__alt_mem_epcs_flash_controller_0+0xfd008074>
 20090b8:	9021883a 	mov	r16,r18
 20090bc:	a825883a 	mov	r18,r21
 20090c0:	b02b883a 	mov	r21,r22
 20090c4:	882d883a 	mov	r22,r17
 20090c8:	dc403017 	ldw	r17,192(sp)
 20090cc:	d9002b17 	ldw	r4,172(sp)
 20090d0:	1d87883a 	add	r3,r3,r22
 20090d4:	10800044 	addi	r2,r2,1
 20090d8:	41000015 	stw	r4,0(r8)
 20090dc:	45800115 	stw	r22,4(r8)
 20090e0:	d8c02015 	stw	r3,128(sp)
 20090e4:	d8801f15 	stw	r2,124(sp)
 20090e8:	010001c4 	movi	r4,7
 20090ec:	20818e16 	blt	r4,r2,2009728 <___vfprintf_internal_r+0x1638>
 20090f0:	42000204 	addi	r8,r8,8
 20090f4:	003e3106 	br	20089bc <__alt_mem_epcs_flash_controller_0+0xfd0079bc>
 20090f8:	d9403317 	ldw	r5,204(sp)
 20090fc:	00800044 	movi	r2,1
 2009100:	18c00044 	addi	r3,r3,1
 2009104:	1141530e 	bge	r2,r5,2009654 <___vfprintf_internal_r+0x1564>
 2009108:	dc401f17 	ldw	r17,124(sp)
 200910c:	00800044 	movi	r2,1
 2009110:	40800115 	stw	r2,4(r8)
 2009114:	8c400044 	addi	r17,r17,1
 2009118:	44000015 	stw	r16,0(r8)
 200911c:	d8c02015 	stw	r3,128(sp)
 2009120:	dc401f15 	stw	r17,124(sp)
 2009124:	008001c4 	movi	r2,7
 2009128:	14416b16 	blt	r2,r17,20096d8 <___vfprintf_internal_r+0x15e8>
 200912c:	42000204 	addi	r8,r8,8
 2009130:	d8803717 	ldw	r2,220(sp)
 2009134:	d9003417 	ldw	r4,208(sp)
 2009138:	8c400044 	addi	r17,r17,1
 200913c:	10c7883a 	add	r3,r2,r3
 2009140:	40800115 	stw	r2,4(r8)
 2009144:	41000015 	stw	r4,0(r8)
 2009148:	d8c02015 	stw	r3,128(sp)
 200914c:	dc401f15 	stw	r17,124(sp)
 2009150:	008001c4 	movi	r2,7
 2009154:	14416916 	blt	r2,r17,20096fc <___vfprintf_internal_r+0x160c>
 2009158:	45800204 	addi	r22,r8,8
 200915c:	d9003617 	ldw	r4,216(sp)
 2009160:	d9403817 	ldw	r5,224(sp)
 2009164:	000d883a 	mov	r6,zero
 2009168:	000f883a 	mov	r7,zero
 200916c:	d8c03c15 	stw	r3,240(sp)
 2009170:	2012aec0 	call	2012aec <__eqdf2>
 2009174:	d8c03c17 	ldw	r3,240(sp)
 2009178:	1000bc26 	beq	r2,zero,200946c <___vfprintf_internal_r+0x137c>
 200917c:	d9403317 	ldw	r5,204(sp)
 2009180:	84000044 	addi	r16,r16,1
 2009184:	8c400044 	addi	r17,r17,1
 2009188:	28bfffc4 	addi	r2,r5,-1
 200918c:	1887883a 	add	r3,r3,r2
 2009190:	b0800115 	stw	r2,4(r22)
 2009194:	b4000015 	stw	r16,0(r22)
 2009198:	d8c02015 	stw	r3,128(sp)
 200919c:	dc401f15 	stw	r17,124(sp)
 20091a0:	008001c4 	movi	r2,7
 20091a4:	14414316 	blt	r2,r17,20096b4 <___vfprintf_internal_r+0x15c4>
 20091a8:	b5800204 	addi	r22,r22,8
 20091ac:	d9003a17 	ldw	r4,232(sp)
 20091b0:	df0022c4 	addi	fp,sp,139
 20091b4:	8c400044 	addi	r17,r17,1
 20091b8:	20c7883a 	add	r3,r4,r3
 20091bc:	b7000015 	stw	fp,0(r22)
 20091c0:	b1000115 	stw	r4,4(r22)
 20091c4:	d8c02015 	stw	r3,128(sp)
 20091c8:	dc401f15 	stw	r17,124(sp)
 20091cc:	008001c4 	movi	r2,7
 20091d0:	14400e16 	blt	r2,r17,200920c <___vfprintf_internal_r+0x111c>
 20091d4:	b2000204 	addi	r8,r22,8
 20091d8:	003e3a06 	br	2008ac4 <__alt_mem_epcs_flash_controller_0+0xfd007ac4>
 20091dc:	01008134 	movhi	r4,516
 20091e0:	2130ee84 	addi	r4,r4,-15430
 20091e4:	d9002b15 	stw	r4,172(sp)
 20091e8:	d9002b17 	ldw	r4,172(sp)
 20091ec:	1c07883a 	add	r3,r3,r16
 20091f0:	44000115 	stw	r16,4(r8)
 20091f4:	41000015 	stw	r4,0(r8)
 20091f8:	10800044 	addi	r2,r2,1
 20091fc:	d8c02015 	stw	r3,128(sp)
 2009200:	d8801f15 	stw	r2,124(sp)
 2009204:	010001c4 	movi	r4,7
 2009208:	20be2d0e 	bge	r4,r2,2008ac0 <__alt_mem_epcs_flash_controller_0+0xfd007ac0>
 200920c:	d9002c17 	ldw	r4,176(sp)
 2009210:	d9801e04 	addi	r6,sp,120
 2009214:	b80b883a 	mov	r5,r23
 2009218:	20102200 	call	2010220 <__sprint_r>
 200921c:	103cb61e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009220:	d8c02017 	ldw	r3,128(sp)
 2009224:	da000404 	addi	r8,sp,16
 2009228:	003e2606 	br	2008ac4 <__alt_mem_epcs_flash_controller_0+0xfd007ac4>
 200922c:	d9002c17 	ldw	r4,176(sp)
 2009230:	d9801e04 	addi	r6,sp,120
 2009234:	b80b883a 	mov	r5,r23
 2009238:	20102200 	call	2010220 <__sprint_r>
 200923c:	103e5d26 	beq	r2,zero,2008bb4 <__alt_mem_epcs_flash_controller_0+0xfd007bb4>
 2009240:	003cad06 	br	20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009244:	d9002c17 	ldw	r4,176(sp)
 2009248:	d9801e04 	addi	r6,sp,120
 200924c:	b80b883a 	mov	r5,r23
 2009250:	20102200 	call	2010220 <__sprint_r>
 2009254:	103ca81e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009258:	d8c02017 	ldw	r3,128(sp)
 200925c:	da000404 	addi	r8,sp,16
 2009260:	003e0b06 	br	2008a90 <__alt_mem_epcs_flash_controller_0+0xfd007a90>
 2009264:	d9002c17 	ldw	r4,176(sp)
 2009268:	d9801e04 	addi	r6,sp,120
 200926c:	b80b883a 	mov	r5,r23
 2009270:	20102200 	call	2010220 <__sprint_r>
 2009274:	103ca01e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009278:	d8c02017 	ldw	r3,128(sp)
 200927c:	da000404 	addi	r8,sp,16
 2009280:	003dbd06 	br	2008978 <__alt_mem_epcs_flash_controller_0+0xfd007978>
 2009284:	d9002c17 	ldw	r4,176(sp)
 2009288:	d9801e04 	addi	r6,sp,120
 200928c:	b80b883a 	mov	r5,r23
 2009290:	20102200 	call	2010220 <__sprint_r>
 2009294:	103c981e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009298:	d8c02017 	ldw	r3,128(sp)
 200929c:	da000404 	addi	r8,sp,16
 20092a0:	003dc306 	br	20089b0 <__alt_mem_epcs_flash_controller_0+0xfd0079b0>
 20092a4:	d8802917 	ldw	r2,164(sp)
 20092a8:	d8002785 	stb	zero,158(sp)
 20092ac:	103f0616 	blt	r2,zero,2008ec8 <__alt_mem_epcs_flash_controller_0+0xfd007ec8>
 20092b0:	00ffdfc4 	movi	r3,-129
 20092b4:	9d84b03a 	or	r2,r19,r22
 20092b8:	90e4703a 	and	r18,r18,r3
 20092bc:	103c6b26 	beq	r2,zero,200846c <__alt_mem_epcs_flash_controller_0+0xfd00746c>
 20092c0:	0039883a 	mov	fp,zero
 20092c4:	003e7406 	br	2008c98 <__alt_mem_epcs_flash_controller_0+0xfd007c98>
 20092c8:	9080040c 	andi	r2,r18,16
 20092cc:	1001b326 	beq	r2,zero,200999c <___vfprintf_internal_r+0x18ac>
 20092d0:	d9002d17 	ldw	r4,180(sp)
 20092d4:	d9402917 	ldw	r5,164(sp)
 20092d8:	d8002785 	stb	zero,158(sp)
 20092dc:	20800104 	addi	r2,r4,4
 20092e0:	24c00017 	ldw	r19,0(r4)
 20092e4:	002d883a 	mov	r22,zero
 20092e8:	2801b516 	blt	r5,zero,20099c0 <___vfprintf_internal_r+0x18d0>
 20092ec:	00ffdfc4 	movi	r3,-129
 20092f0:	d8802d15 	stw	r2,180(sp)
 20092f4:	90e4703a 	and	r18,r18,r3
 20092f8:	983d2726 	beq	r19,zero,2008798 <__alt_mem_epcs_flash_controller_0+0xfd007798>
 20092fc:	0039883a 	mov	fp,zero
 2009300:	003d2a06 	br	20087ac <__alt_mem_epcs_flash_controller_0+0xfd0077ac>
 2009304:	dc402617 	ldw	r17,152(sp)
 2009308:	0441d30e 	bge	zero,r17,2009a58 <___vfprintf_internal_r+0x1968>
 200930c:	dc403217 	ldw	r17,200(sp)
 2009310:	d8803317 	ldw	r2,204(sp)
 2009314:	1440010e 	bge	r2,r17,200931c <___vfprintf_internal_r+0x122c>
 2009318:	1023883a 	mov	r17,r2
 200931c:	04400a0e 	bge	zero,r17,2009348 <___vfprintf_internal_r+0x1258>
 2009320:	d8801f17 	ldw	r2,124(sp)
 2009324:	1c47883a 	add	r3,r3,r17
 2009328:	44000015 	stw	r16,0(r8)
 200932c:	10800044 	addi	r2,r2,1
 2009330:	44400115 	stw	r17,4(r8)
 2009334:	d8c02015 	stw	r3,128(sp)
 2009338:	d8801f15 	stw	r2,124(sp)
 200933c:	010001c4 	movi	r4,7
 2009340:	20826516 	blt	r4,r2,2009cd8 <___vfprintf_internal_r+0x1be8>
 2009344:	42000204 	addi	r8,r8,8
 2009348:	88026116 	blt	r17,zero,2009cd0 <___vfprintf_internal_r+0x1be0>
 200934c:	d9003217 	ldw	r4,200(sp)
 2009350:	2463c83a 	sub	r17,r4,r17
 2009354:	04407b0e 	bge	zero,r17,2009544 <___vfprintf_internal_r+0x1454>
 2009358:	05800404 	movi	r22,16
 200935c:	d8801f17 	ldw	r2,124(sp)
 2009360:	b4419d0e 	bge	r22,r17,20099d8 <___vfprintf_internal_r+0x18e8>
 2009364:	01008134 	movhi	r4,516
 2009368:	2130ee84 	addi	r4,r4,-15430
 200936c:	d9002b15 	stw	r4,172(sp)
 2009370:	070001c4 	movi	fp,7
 2009374:	dcc02c17 	ldw	r19,176(sp)
 2009378:	00000306 	br	2009388 <___vfprintf_internal_r+0x1298>
 200937c:	42000204 	addi	r8,r8,8
 2009380:	8c7ffc04 	addi	r17,r17,-16
 2009384:	b441970e 	bge	r22,r17,20099e4 <___vfprintf_internal_r+0x18f4>
 2009388:	18c00404 	addi	r3,r3,16
 200938c:	10800044 	addi	r2,r2,1
 2009390:	45000015 	stw	r20,0(r8)
 2009394:	45800115 	stw	r22,4(r8)
 2009398:	d8c02015 	stw	r3,128(sp)
 200939c:	d8801f15 	stw	r2,124(sp)
 20093a0:	e0bff60e 	bge	fp,r2,200937c <__alt_mem_epcs_flash_controller_0+0xfd00837c>
 20093a4:	d9801e04 	addi	r6,sp,120
 20093a8:	b80b883a 	mov	r5,r23
 20093ac:	9809883a 	mov	r4,r19
 20093b0:	20102200 	call	2010220 <__sprint_r>
 20093b4:	103c501e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 20093b8:	d8c02017 	ldw	r3,128(sp)
 20093bc:	d8801f17 	ldw	r2,124(sp)
 20093c0:	da000404 	addi	r8,sp,16
 20093c4:	003fee06 	br	2009380 <__alt_mem_epcs_flash_controller_0+0xfd008380>
 20093c8:	d9002c17 	ldw	r4,176(sp)
 20093cc:	d9801e04 	addi	r6,sp,120
 20093d0:	b80b883a 	mov	r5,r23
 20093d4:	20102200 	call	2010220 <__sprint_r>
 20093d8:	103c471e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 20093dc:	d8c02017 	ldw	r3,128(sp)
 20093e0:	df002787 	ldb	fp,158(sp)
 20093e4:	da000404 	addi	r8,sp,16
 20093e8:	003d5606 	br	2008944 <__alt_mem_epcs_flash_controller_0+0xfd007944>
 20093ec:	9080040c 	andi	r2,r18,16
 20093f0:	10016126 	beq	r2,zero,2009978 <___vfprintf_internal_r+0x1888>
 20093f4:	d8802d17 	ldw	r2,180(sp)
 20093f8:	14c00017 	ldw	r19,0(r2)
 20093fc:	10800104 	addi	r2,r2,4
 2009400:	d8802d15 	stw	r2,180(sp)
 2009404:	982dd7fa 	srai	r22,r19,31
 2009408:	b005883a 	mov	r2,r22
 200940c:	003c8206 	br	2008618 <__alt_mem_epcs_flash_controller_0+0xfd007618>
 2009410:	9080040c 	andi	r2,r18,16
 2009414:	10003526 	beq	r2,zero,20094ec <___vfprintf_internal_r+0x13fc>
 2009418:	d9402d17 	ldw	r5,180(sp)
 200941c:	d8c02917 	ldw	r3,164(sp)
 2009420:	d8002785 	stb	zero,158(sp)
 2009424:	28800104 	addi	r2,r5,4
 2009428:	2cc00017 	ldw	r19,0(r5)
 200942c:	002d883a 	mov	r22,zero
 2009430:	18003716 	blt	r3,zero,2009510 <___vfprintf_internal_r+0x1420>
 2009434:	00ffdfc4 	movi	r3,-129
 2009438:	d8802d15 	stw	r2,180(sp)
 200943c:	90e4703a 	and	r18,r18,r3
 2009440:	0039883a 	mov	fp,zero
 2009444:	983df326 	beq	r19,zero,2008c14 <__alt_mem_epcs_flash_controller_0+0xfd007c14>
 2009448:	00800244 	movi	r2,9
 200944c:	14fc7b36 	bltu	r2,r19,200863c <__alt_mem_epcs_flash_controller_0+0xfd00763c>
 2009450:	d8c02817 	ldw	r3,160(sp)
 2009454:	dc001dc4 	addi	r16,sp,119
 2009458:	9cc00c04 	addi	r19,r19,48
 200945c:	1c07c83a 	sub	r3,r3,r16
 2009460:	dcc01dc5 	stb	r19,119(sp)
 2009464:	d8c02e15 	stw	r3,184(sp)
 2009468:	003ce806 	br	200880c <__alt_mem_epcs_flash_controller_0+0xfd00780c>
 200946c:	d8803317 	ldw	r2,204(sp)
 2009470:	143fffc4 	addi	r16,r2,-1
 2009474:	043f4d0e 	bge	zero,r16,20091ac <__alt_mem_epcs_flash_controller_0+0xfd0081ac>
 2009478:	07000404 	movi	fp,16
 200947c:	e400810e 	bge	fp,r16,2009684 <___vfprintf_internal_r+0x1594>
 2009480:	01408134 	movhi	r5,516
 2009484:	2970ee84 	addi	r5,r5,-15430
 2009488:	d9402b15 	stw	r5,172(sp)
 200948c:	01c001c4 	movi	r7,7
 2009490:	dcc02c17 	ldw	r19,176(sp)
 2009494:	00000306 	br	20094a4 <___vfprintf_internal_r+0x13b4>
 2009498:	b5800204 	addi	r22,r22,8
 200949c:	843ffc04 	addi	r16,r16,-16
 20094a0:	e4007b0e 	bge	fp,r16,2009690 <___vfprintf_internal_r+0x15a0>
 20094a4:	18c00404 	addi	r3,r3,16
 20094a8:	8c400044 	addi	r17,r17,1
 20094ac:	b5000015 	stw	r20,0(r22)
 20094b0:	b7000115 	stw	fp,4(r22)
 20094b4:	d8c02015 	stw	r3,128(sp)
 20094b8:	dc401f15 	stw	r17,124(sp)
 20094bc:	3c7ff60e 	bge	r7,r17,2009498 <__alt_mem_epcs_flash_controller_0+0xfd008498>
 20094c0:	d9801e04 	addi	r6,sp,120
 20094c4:	b80b883a 	mov	r5,r23
 20094c8:	9809883a 	mov	r4,r19
 20094cc:	d9c03c15 	stw	r7,240(sp)
 20094d0:	20102200 	call	2010220 <__sprint_r>
 20094d4:	d9c03c17 	ldw	r7,240(sp)
 20094d8:	103c071e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 20094dc:	d8c02017 	ldw	r3,128(sp)
 20094e0:	dc401f17 	ldw	r17,124(sp)
 20094e4:	dd800404 	addi	r22,sp,16
 20094e8:	003fec06 	br	200949c <__alt_mem_epcs_flash_controller_0+0xfd00849c>
 20094ec:	9080100c 	andi	r2,r18,64
 20094f0:	d8002785 	stb	zero,158(sp)
 20094f4:	10010e26 	beq	r2,zero,2009930 <___vfprintf_internal_r+0x1840>
 20094f8:	d9002d17 	ldw	r4,180(sp)
 20094fc:	d9402917 	ldw	r5,164(sp)
 2009500:	002d883a 	mov	r22,zero
 2009504:	20800104 	addi	r2,r4,4
 2009508:	24c0000b 	ldhu	r19,0(r4)
 200950c:	283fc90e 	bge	r5,zero,2009434 <__alt_mem_epcs_flash_controller_0+0xfd008434>
 2009510:	d8802d15 	stw	r2,180(sp)
 2009514:	0039883a 	mov	fp,zero
 2009518:	9d84b03a 	or	r2,r19,r22
 200951c:	103c461e 	bne	r2,zero,2008638 <__alt_mem_epcs_flash_controller_0+0xfd007638>
 2009520:	00800044 	movi	r2,1
 2009524:	003e6c06 	br	2008ed8 <__alt_mem_epcs_flash_controller_0+0xfd007ed8>
 2009528:	d9002c17 	ldw	r4,176(sp)
 200952c:	d9801e04 	addi	r6,sp,120
 2009530:	b80b883a 	mov	r5,r23
 2009534:	20102200 	call	2010220 <__sprint_r>
 2009538:	103bef1e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 200953c:	d8c02017 	ldw	r3,128(sp)
 2009540:	da000404 	addi	r8,sp,16
 2009544:	d9003217 	ldw	r4,200(sp)
 2009548:	d8802617 	ldw	r2,152(sp)
 200954c:	d9403317 	ldw	r5,204(sp)
 2009550:	8123883a 	add	r17,r16,r4
 2009554:	11400216 	blt	r2,r5,2009560 <___vfprintf_internal_r+0x1470>
 2009558:	9100004c 	andi	r4,r18,1
 200955c:	20000d26 	beq	r4,zero,2009594 <___vfprintf_internal_r+0x14a4>
 2009560:	d9003717 	ldw	r4,220(sp)
 2009564:	d9403417 	ldw	r5,208(sp)
 2009568:	1907883a 	add	r3,r3,r4
 200956c:	d9001f17 	ldw	r4,124(sp)
 2009570:	41400015 	stw	r5,0(r8)
 2009574:	d9403717 	ldw	r5,220(sp)
 2009578:	21000044 	addi	r4,r4,1
 200957c:	d8c02015 	stw	r3,128(sp)
 2009580:	41400115 	stw	r5,4(r8)
 2009584:	d9001f15 	stw	r4,124(sp)
 2009588:	014001c4 	movi	r5,7
 200958c:	2901e816 	blt	r5,r4,2009d30 <___vfprintf_internal_r+0x1c40>
 2009590:	42000204 	addi	r8,r8,8
 2009594:	d9003317 	ldw	r4,204(sp)
 2009598:	8121883a 	add	r16,r16,r4
 200959c:	2085c83a 	sub	r2,r4,r2
 20095a0:	8461c83a 	sub	r16,r16,r17
 20095a4:	1400010e 	bge	r2,r16,20095ac <___vfprintf_internal_r+0x14bc>
 20095a8:	1021883a 	mov	r16,r2
 20095ac:	04000a0e 	bge	zero,r16,20095d8 <___vfprintf_internal_r+0x14e8>
 20095b0:	d9001f17 	ldw	r4,124(sp)
 20095b4:	1c07883a 	add	r3,r3,r16
 20095b8:	44400015 	stw	r17,0(r8)
 20095bc:	21000044 	addi	r4,r4,1
 20095c0:	44000115 	stw	r16,4(r8)
 20095c4:	d8c02015 	stw	r3,128(sp)
 20095c8:	d9001f15 	stw	r4,124(sp)
 20095cc:	014001c4 	movi	r5,7
 20095d0:	2901fb16 	blt	r5,r4,2009dc0 <___vfprintf_internal_r+0x1cd0>
 20095d4:	42000204 	addi	r8,r8,8
 20095d8:	8001f716 	blt	r16,zero,2009db8 <___vfprintf_internal_r+0x1cc8>
 20095dc:	1421c83a 	sub	r16,r2,r16
 20095e0:	043d380e 	bge	zero,r16,2008ac4 <__alt_mem_epcs_flash_controller_0+0xfd007ac4>
 20095e4:	04400404 	movi	r17,16
 20095e8:	d8801f17 	ldw	r2,124(sp)
 20095ec:	8c3efb0e 	bge	r17,r16,20091dc <__alt_mem_epcs_flash_controller_0+0xfd0081dc>
 20095f0:	01408134 	movhi	r5,516
 20095f4:	2970ee84 	addi	r5,r5,-15430
 20095f8:	d9402b15 	stw	r5,172(sp)
 20095fc:	058001c4 	movi	r22,7
 2009600:	dcc02c17 	ldw	r19,176(sp)
 2009604:	00000306 	br	2009614 <___vfprintf_internal_r+0x1524>
 2009608:	42000204 	addi	r8,r8,8
 200960c:	843ffc04 	addi	r16,r16,-16
 2009610:	8c3ef50e 	bge	r17,r16,20091e8 <__alt_mem_epcs_flash_controller_0+0xfd0081e8>
 2009614:	18c00404 	addi	r3,r3,16
 2009618:	10800044 	addi	r2,r2,1
 200961c:	45000015 	stw	r20,0(r8)
 2009620:	44400115 	stw	r17,4(r8)
 2009624:	d8c02015 	stw	r3,128(sp)
 2009628:	d8801f15 	stw	r2,124(sp)
 200962c:	b0bff60e 	bge	r22,r2,2009608 <__alt_mem_epcs_flash_controller_0+0xfd008608>
 2009630:	d9801e04 	addi	r6,sp,120
 2009634:	b80b883a 	mov	r5,r23
 2009638:	9809883a 	mov	r4,r19
 200963c:	20102200 	call	2010220 <__sprint_r>
 2009640:	103bad1e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009644:	d8c02017 	ldw	r3,128(sp)
 2009648:	d8801f17 	ldw	r2,124(sp)
 200964c:	da000404 	addi	r8,sp,16
 2009650:	003fee06 	br	200960c <__alt_mem_epcs_flash_controller_0+0xfd00860c>
 2009654:	9088703a 	and	r4,r18,r2
 2009658:	203eab1e 	bne	r4,zero,2009108 <__alt_mem_epcs_flash_controller_0+0xfd008108>
 200965c:	dc401f17 	ldw	r17,124(sp)
 2009660:	40800115 	stw	r2,4(r8)
 2009664:	44000015 	stw	r16,0(r8)
 2009668:	8c400044 	addi	r17,r17,1
 200966c:	d8c02015 	stw	r3,128(sp)
 2009670:	dc401f15 	stw	r17,124(sp)
 2009674:	008001c4 	movi	r2,7
 2009678:	14400e16 	blt	r2,r17,20096b4 <___vfprintf_internal_r+0x15c4>
 200967c:	45800204 	addi	r22,r8,8
 2009680:	003eca06 	br	20091ac <__alt_mem_epcs_flash_controller_0+0xfd0081ac>
 2009684:	01008134 	movhi	r4,516
 2009688:	2130ee84 	addi	r4,r4,-15430
 200968c:	d9002b15 	stw	r4,172(sp)
 2009690:	d8802b17 	ldw	r2,172(sp)
 2009694:	1c07883a 	add	r3,r3,r16
 2009698:	8c400044 	addi	r17,r17,1
 200969c:	b0800015 	stw	r2,0(r22)
 20096a0:	b4000115 	stw	r16,4(r22)
 20096a4:	d8c02015 	stw	r3,128(sp)
 20096a8:	dc401f15 	stw	r17,124(sp)
 20096ac:	008001c4 	movi	r2,7
 20096b0:	147ebd0e 	bge	r2,r17,20091a8 <__alt_mem_epcs_flash_controller_0+0xfd0081a8>
 20096b4:	d9002c17 	ldw	r4,176(sp)
 20096b8:	d9801e04 	addi	r6,sp,120
 20096bc:	b80b883a 	mov	r5,r23
 20096c0:	20102200 	call	2010220 <__sprint_r>
 20096c4:	103b8c1e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 20096c8:	d8c02017 	ldw	r3,128(sp)
 20096cc:	dc401f17 	ldw	r17,124(sp)
 20096d0:	dd800404 	addi	r22,sp,16
 20096d4:	003eb506 	br	20091ac <__alt_mem_epcs_flash_controller_0+0xfd0081ac>
 20096d8:	d9002c17 	ldw	r4,176(sp)
 20096dc:	d9801e04 	addi	r6,sp,120
 20096e0:	b80b883a 	mov	r5,r23
 20096e4:	20102200 	call	2010220 <__sprint_r>
 20096e8:	103b831e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 20096ec:	d8c02017 	ldw	r3,128(sp)
 20096f0:	dc401f17 	ldw	r17,124(sp)
 20096f4:	da000404 	addi	r8,sp,16
 20096f8:	003e8d06 	br	2009130 <__alt_mem_epcs_flash_controller_0+0xfd008130>
 20096fc:	d9002c17 	ldw	r4,176(sp)
 2009700:	d9801e04 	addi	r6,sp,120
 2009704:	b80b883a 	mov	r5,r23
 2009708:	20102200 	call	2010220 <__sprint_r>
 200970c:	103b7a1e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009710:	d8c02017 	ldw	r3,128(sp)
 2009714:	dc401f17 	ldw	r17,124(sp)
 2009718:	dd800404 	addi	r22,sp,16
 200971c:	003e8f06 	br	200915c <__alt_mem_epcs_flash_controller_0+0xfd00815c>
 2009720:	0027883a 	mov	r19,zero
 2009724:	003f4a06 	br	2009450 <__alt_mem_epcs_flash_controller_0+0xfd008450>
 2009728:	d9002c17 	ldw	r4,176(sp)
 200972c:	d9801e04 	addi	r6,sp,120
 2009730:	b80b883a 	mov	r5,r23
 2009734:	20102200 	call	2010220 <__sprint_r>
 2009738:	103b6f1e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 200973c:	d8c02017 	ldw	r3,128(sp)
 2009740:	da000404 	addi	r8,sp,16
 2009744:	003c9d06 	br	20089bc <__alt_mem_epcs_flash_controller_0+0xfd0079bc>
 2009748:	04e7c83a 	sub	r19,zero,r19
 200974c:	9804c03a 	cmpne	r2,r19,zero
 2009750:	05adc83a 	sub	r22,zero,r22
 2009754:	b0adc83a 	sub	r22,r22,r2
 2009758:	d8802917 	ldw	r2,164(sp)
 200975c:	07000b44 	movi	fp,45
 2009760:	df002785 	stb	fp,158(sp)
 2009764:	10017b16 	blt	r2,zero,2009d54 <___vfprintf_internal_r+0x1c64>
 2009768:	00bfdfc4 	movi	r2,-129
 200976c:	90a4703a 	and	r18,r18,r2
 2009770:	003bb106 	br	2008638 <__alt_mem_epcs_flash_controller_0+0xfd007638>
 2009774:	d9003617 	ldw	r4,216(sp)
 2009778:	d9403817 	ldw	r5,224(sp)
 200977c:	da003d15 	stw	r8,244(sp)
 2009780:	2002b000 	call	2002b00 <__fpclassifyd>
 2009784:	da003d17 	ldw	r8,244(sp)
 2009788:	1000f026 	beq	r2,zero,2009b4c <___vfprintf_internal_r+0x1a5c>
 200978c:	d9002917 	ldw	r4,164(sp)
 2009790:	05bff7c4 	movi	r22,-33
 2009794:	00bfffc4 	movi	r2,-1
 2009798:	8dac703a 	and	r22,r17,r22
 200979c:	20820026 	beq	r4,r2,2009fa0 <___vfprintf_internal_r+0x1eb0>
 20097a0:	008011c4 	movi	r2,71
 20097a4:	b081f726 	beq	r22,r2,2009f84 <___vfprintf_internal_r+0x1e94>
 20097a8:	d9003817 	ldw	r4,224(sp)
 20097ac:	90c04014 	ori	r3,r18,256
 20097b0:	d8c02b15 	stw	r3,172(sp)
 20097b4:	20021516 	blt	r4,zero,200a00c <___vfprintf_internal_r+0x1f1c>
 20097b8:	dcc03817 	ldw	r19,224(sp)
 20097bc:	d8002a05 	stb	zero,168(sp)
 20097c0:	00801984 	movi	r2,102
 20097c4:	8881f926 	beq	r17,r2,2009fac <___vfprintf_internal_r+0x1ebc>
 20097c8:	00801184 	movi	r2,70
 20097cc:	88821c26 	beq	r17,r2,200a040 <___vfprintf_internal_r+0x1f50>
 20097d0:	00801144 	movi	r2,69
 20097d4:	b081ef26 	beq	r22,r2,2009f94 <___vfprintf_internal_r+0x1ea4>
 20097d8:	d8c02917 	ldw	r3,164(sp)
 20097dc:	d8802104 	addi	r2,sp,132
 20097e0:	d8800315 	stw	r2,12(sp)
 20097e4:	d9403617 	ldw	r5,216(sp)
 20097e8:	d8802504 	addi	r2,sp,148
 20097ec:	d9002c17 	ldw	r4,176(sp)
 20097f0:	d8800215 	stw	r2,8(sp)
 20097f4:	d8802604 	addi	r2,sp,152
 20097f8:	d8c00015 	stw	r3,0(sp)
 20097fc:	d8800115 	stw	r2,4(sp)
 2009800:	01c00084 	movi	r7,2
 2009804:	980d883a 	mov	r6,r19
 2009808:	d8c03c15 	stw	r3,240(sp)
 200980c:	da003d15 	stw	r8,244(sp)
 2009810:	200a8380 	call	200a838 <_dtoa_r>
 2009814:	1021883a 	mov	r16,r2
 2009818:	008019c4 	movi	r2,103
 200981c:	d8c03c17 	ldw	r3,240(sp)
 2009820:	da003d17 	ldw	r8,244(sp)
 2009824:	88817126 	beq	r17,r2,2009dec <___vfprintf_internal_r+0x1cfc>
 2009828:	008011c4 	movi	r2,71
 200982c:	88829226 	beq	r17,r2,200a278 <___vfprintf_internal_r+0x2188>
 2009830:	80f9883a 	add	fp,r16,r3
 2009834:	d9003617 	ldw	r4,216(sp)
 2009838:	000d883a 	mov	r6,zero
 200983c:	000f883a 	mov	r7,zero
 2009840:	980b883a 	mov	r5,r19
 2009844:	da003d15 	stw	r8,244(sp)
 2009848:	2012aec0 	call	2012aec <__eqdf2>
 200984c:	da003d17 	ldw	r8,244(sp)
 2009850:	10018d26 	beq	r2,zero,2009e88 <___vfprintf_internal_r+0x1d98>
 2009854:	d8802117 	ldw	r2,132(sp)
 2009858:	1700062e 	bgeu	r2,fp,2009874 <___vfprintf_internal_r+0x1784>
 200985c:	01000c04 	movi	r4,48
 2009860:	10c00044 	addi	r3,r2,1
 2009864:	d8c02115 	stw	r3,132(sp)
 2009868:	11000005 	stb	r4,0(r2)
 200986c:	d8802117 	ldw	r2,132(sp)
 2009870:	173ffb36 	bltu	r2,fp,2009860 <__alt_mem_epcs_flash_controller_0+0xfd008860>
 2009874:	1405c83a 	sub	r2,r2,r16
 2009878:	d8803315 	stw	r2,204(sp)
 200987c:	008011c4 	movi	r2,71
 2009880:	b0817626 	beq	r22,r2,2009e5c <___vfprintf_internal_r+0x1d6c>
 2009884:	00801944 	movi	r2,101
 2009888:	1442810e 	bge	r2,r17,200a290 <___vfprintf_internal_r+0x21a0>
 200988c:	d8c02617 	ldw	r3,152(sp)
 2009890:	00801984 	movi	r2,102
 2009894:	d8c03215 	stw	r3,200(sp)
 2009898:	8881fe26 	beq	r17,r2,200a094 <___vfprintf_internal_r+0x1fa4>
 200989c:	d8c03217 	ldw	r3,200(sp)
 20098a0:	d9003317 	ldw	r4,204(sp)
 20098a4:	1901dd16 	blt	r3,r4,200a01c <___vfprintf_internal_r+0x1f2c>
 20098a8:	9480004c 	andi	r18,r18,1
 20098ac:	90022b1e 	bne	r18,zero,200a15c <___vfprintf_internal_r+0x206c>
 20098b0:	1805883a 	mov	r2,r3
 20098b4:	18028016 	blt	r3,zero,200a2b8 <___vfprintf_internal_r+0x21c8>
 20098b8:	d8c03217 	ldw	r3,200(sp)
 20098bc:	044019c4 	movi	r17,103
 20098c0:	d8c02e15 	stw	r3,184(sp)
 20098c4:	df002a07 	ldb	fp,168(sp)
 20098c8:	e001531e 	bne	fp,zero,2009e18 <___vfprintf_internal_r+0x1d28>
 20098cc:	df002783 	ldbu	fp,158(sp)
 20098d0:	d8802a15 	stw	r2,168(sp)
 20098d4:	dc802b17 	ldw	r18,172(sp)
 20098d8:	d8002915 	stw	zero,164(sp)
 20098dc:	003bd106 	br	2008824 <__alt_mem_epcs_flash_controller_0+0xfd007824>
 20098e0:	d8802d17 	ldw	r2,180(sp)
 20098e4:	d8c02d17 	ldw	r3,180(sp)
 20098e8:	d9002d17 	ldw	r4,180(sp)
 20098ec:	10800017 	ldw	r2,0(r2)
 20098f0:	18c00117 	ldw	r3,4(r3)
 20098f4:	21000204 	addi	r4,r4,8
 20098f8:	d8803615 	stw	r2,216(sp)
 20098fc:	d8c03815 	stw	r3,224(sp)
 2009900:	d9002d15 	stw	r4,180(sp)
 2009904:	003b7506 	br	20086dc <__alt_mem_epcs_flash_controller_0+0xfd0076dc>
 2009908:	ac400007 	ldb	r17,0(r21)
 200990c:	003a5906 	br	2008274 <__alt_mem_epcs_flash_controller_0+0xfd007274>
 2009910:	9080100c 	andi	r2,r18,64
 2009914:	1000a826 	beq	r2,zero,2009bb8 <___vfprintf_internal_r+0x1ac8>
 2009918:	d9002d17 	ldw	r4,180(sp)
 200991c:	002d883a 	mov	r22,zero
 2009920:	24c0000b 	ldhu	r19,0(r4)
 2009924:	21000104 	addi	r4,r4,4
 2009928:	d9002d15 	stw	r4,180(sp)
 200992c:	003ccb06 	br	2008c5c <__alt_mem_epcs_flash_controller_0+0xfd007c5c>
 2009930:	d8c02d17 	ldw	r3,180(sp)
 2009934:	d9002917 	ldw	r4,164(sp)
 2009938:	002d883a 	mov	r22,zero
 200993c:	18800104 	addi	r2,r3,4
 2009940:	1cc00017 	ldw	r19,0(r3)
 2009944:	203ebb0e 	bge	r4,zero,2009434 <__alt_mem_epcs_flash_controller_0+0xfd008434>
 2009948:	003ef106 	br	2009510 <__alt_mem_epcs_flash_controller_0+0xfd008510>
 200994c:	9080040c 	andi	r2,r18,16
 2009950:	1000921e 	bne	r2,zero,2009b9c <___vfprintf_internal_r+0x1aac>
 2009954:	9480100c 	andi	r18,r18,64
 2009958:	90013926 	beq	r18,zero,2009e40 <___vfprintf_internal_r+0x1d50>
 200995c:	d9002d17 	ldw	r4,180(sp)
 2009960:	d9402f17 	ldw	r5,188(sp)
 2009964:	20800017 	ldw	r2,0(r4)
 2009968:	21000104 	addi	r4,r4,4
 200996c:	d9002d15 	stw	r4,180(sp)
 2009970:	1140000d 	sth	r5,0(r2)
 2009974:	003a1606 	br	20081d0 <__alt_mem_epcs_flash_controller_0+0xfd0071d0>
 2009978:	9080100c 	andi	r2,r18,64
 200997c:	10008026 	beq	r2,zero,2009b80 <___vfprintf_internal_r+0x1a90>
 2009980:	d8c02d17 	ldw	r3,180(sp)
 2009984:	1cc0000f 	ldh	r19,0(r3)
 2009988:	18c00104 	addi	r3,r3,4
 200998c:	d8c02d15 	stw	r3,180(sp)
 2009990:	982dd7fa 	srai	r22,r19,31
 2009994:	b005883a 	mov	r2,r22
 2009998:	003b1f06 	br	2008618 <__alt_mem_epcs_flash_controller_0+0xfd007618>
 200999c:	9080100c 	andi	r2,r18,64
 20099a0:	d8002785 	stb	zero,158(sp)
 20099a4:	10008a1e 	bne	r2,zero,2009bd0 <___vfprintf_internal_r+0x1ae0>
 20099a8:	d9402d17 	ldw	r5,180(sp)
 20099ac:	d8c02917 	ldw	r3,164(sp)
 20099b0:	002d883a 	mov	r22,zero
 20099b4:	28800104 	addi	r2,r5,4
 20099b8:	2cc00017 	ldw	r19,0(r5)
 20099bc:	183e4b0e 	bge	r3,zero,20092ec <__alt_mem_epcs_flash_controller_0+0xfd0082ec>
 20099c0:	9d86b03a 	or	r3,r19,r22
 20099c4:	d8802d15 	stw	r2,180(sp)
 20099c8:	183e4c1e 	bne	r3,zero,20092fc <__alt_mem_epcs_flash_controller_0+0xfd0082fc>
 20099cc:	0039883a 	mov	fp,zero
 20099d0:	0005883a 	mov	r2,zero
 20099d4:	003d4006 	br	2008ed8 <__alt_mem_epcs_flash_controller_0+0xfd007ed8>
 20099d8:	01408134 	movhi	r5,516
 20099dc:	2970ee84 	addi	r5,r5,-15430
 20099e0:	d9402b15 	stw	r5,172(sp)
 20099e4:	d9402b17 	ldw	r5,172(sp)
 20099e8:	1c47883a 	add	r3,r3,r17
 20099ec:	10800044 	addi	r2,r2,1
 20099f0:	41400015 	stw	r5,0(r8)
 20099f4:	44400115 	stw	r17,4(r8)
 20099f8:	d8c02015 	stw	r3,128(sp)
 20099fc:	d8801f15 	stw	r2,124(sp)
 2009a00:	010001c4 	movi	r4,7
 2009a04:	20bec816 	blt	r4,r2,2009528 <__alt_mem_epcs_flash_controller_0+0xfd008528>
 2009a08:	42000204 	addi	r8,r8,8
 2009a0c:	003ecd06 	br	2009544 <__alt_mem_epcs_flash_controller_0+0xfd008544>
 2009a10:	d9002917 	ldw	r4,164(sp)
 2009a14:	d8002785 	stb	zero,158(sp)
 2009a18:	203d2d16 	blt	r4,zero,2008ed0 <__alt_mem_epcs_flash_controller_0+0xfd007ed0>
 2009a1c:	00bfdfc4 	movi	r2,-129
 2009a20:	90a4703a 	and	r18,r18,r2
 2009a24:	003a9106 	br	200846c <__alt_mem_epcs_flash_controller_0+0xfd00746c>
 2009a28:	01008134 	movhi	r4,516
 2009a2c:	2130ee84 	addi	r4,r4,-15430
 2009a30:	d9002b15 	stw	r4,172(sp)
 2009a34:	003c0c06 	br	2008a68 <__alt_mem_epcs_flash_controller_0+0xfd007a68>
 2009a38:	d9002c17 	ldw	r4,176(sp)
 2009a3c:	d9801e04 	addi	r6,sp,120
 2009a40:	b80b883a 	mov	r5,r23
 2009a44:	20102200 	call	2010220 <__sprint_r>
 2009a48:	103aab1e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009a4c:	d8c02017 	ldw	r3,128(sp)
 2009a50:	da000404 	addi	r8,sp,16
 2009a54:	003d4106 	br	2008f5c <__alt_mem_epcs_flash_controller_0+0xfd007f5c>
 2009a58:	d8801f17 	ldw	r2,124(sp)
 2009a5c:	01408134 	movhi	r5,516
 2009a60:	01000044 	movi	r4,1
 2009a64:	18c00044 	addi	r3,r3,1
 2009a68:	10800044 	addi	r2,r2,1
 2009a6c:	2970e604 	addi	r5,r5,-15464
 2009a70:	41000115 	stw	r4,4(r8)
 2009a74:	41400015 	stw	r5,0(r8)
 2009a78:	d8c02015 	stw	r3,128(sp)
 2009a7c:	d8801f15 	stw	r2,124(sp)
 2009a80:	010001c4 	movi	r4,7
 2009a84:	20805c16 	blt	r4,r2,2009bf8 <___vfprintf_internal_r+0x1b08>
 2009a88:	42000204 	addi	r8,r8,8
 2009a8c:	8800041e 	bne	r17,zero,2009aa0 <___vfprintf_internal_r+0x19b0>
 2009a90:	d8803317 	ldw	r2,204(sp)
 2009a94:	1000021e 	bne	r2,zero,2009aa0 <___vfprintf_internal_r+0x19b0>
 2009a98:	9080004c 	andi	r2,r18,1
 2009a9c:	103c0926 	beq	r2,zero,2008ac4 <__alt_mem_epcs_flash_controller_0+0xfd007ac4>
 2009aa0:	d9003717 	ldw	r4,220(sp)
 2009aa4:	d8801f17 	ldw	r2,124(sp)
 2009aa8:	d9403417 	ldw	r5,208(sp)
 2009aac:	20c7883a 	add	r3,r4,r3
 2009ab0:	10800044 	addi	r2,r2,1
 2009ab4:	41000115 	stw	r4,4(r8)
 2009ab8:	41400015 	stw	r5,0(r8)
 2009abc:	d8c02015 	stw	r3,128(sp)
 2009ac0:	d8801f15 	stw	r2,124(sp)
 2009ac4:	010001c4 	movi	r4,7
 2009ac8:	20812116 	blt	r4,r2,2009f50 <___vfprintf_internal_r+0x1e60>
 2009acc:	42000204 	addi	r8,r8,8
 2009ad0:	0463c83a 	sub	r17,zero,r17
 2009ad4:	0440730e 	bge	zero,r17,2009ca4 <___vfprintf_internal_r+0x1bb4>
 2009ad8:	05800404 	movi	r22,16
 2009adc:	b440860e 	bge	r22,r17,2009cf8 <___vfprintf_internal_r+0x1c08>
 2009ae0:	01408134 	movhi	r5,516
 2009ae4:	2970ee84 	addi	r5,r5,-15430
 2009ae8:	d9402b15 	stw	r5,172(sp)
 2009aec:	070001c4 	movi	fp,7
 2009af0:	dcc02c17 	ldw	r19,176(sp)
 2009af4:	00000306 	br	2009b04 <___vfprintf_internal_r+0x1a14>
 2009af8:	42000204 	addi	r8,r8,8
 2009afc:	8c7ffc04 	addi	r17,r17,-16
 2009b00:	b440800e 	bge	r22,r17,2009d04 <___vfprintf_internal_r+0x1c14>
 2009b04:	18c00404 	addi	r3,r3,16
 2009b08:	10800044 	addi	r2,r2,1
 2009b0c:	45000015 	stw	r20,0(r8)
 2009b10:	45800115 	stw	r22,4(r8)
 2009b14:	d8c02015 	stw	r3,128(sp)
 2009b18:	d8801f15 	stw	r2,124(sp)
 2009b1c:	e0bff60e 	bge	fp,r2,2009af8 <__alt_mem_epcs_flash_controller_0+0xfd008af8>
 2009b20:	d9801e04 	addi	r6,sp,120
 2009b24:	b80b883a 	mov	r5,r23
 2009b28:	9809883a 	mov	r4,r19
 2009b2c:	20102200 	call	2010220 <__sprint_r>
 2009b30:	103a711e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009b34:	d8c02017 	ldw	r3,128(sp)
 2009b38:	d8801f17 	ldw	r2,124(sp)
 2009b3c:	da000404 	addi	r8,sp,16
 2009b40:	003fee06 	br	2009afc <__alt_mem_epcs_flash_controller_0+0xfd008afc>
 2009b44:	00bfffc4 	movi	r2,-1
 2009b48:	003a6f06 	br	2008508 <__alt_mem_epcs_flash_controller_0+0xfd007508>
 2009b4c:	008011c4 	movi	r2,71
 2009b50:	1440b816 	blt	r2,r17,2009e34 <___vfprintf_internal_r+0x1d44>
 2009b54:	04008134 	movhi	r16,516
 2009b58:	8430d804 	addi	r16,r16,-15520
 2009b5c:	00c000c4 	movi	r3,3
 2009b60:	00bfdfc4 	movi	r2,-129
 2009b64:	d8c02a15 	stw	r3,168(sp)
 2009b68:	90a4703a 	and	r18,r18,r2
 2009b6c:	df002783 	ldbu	fp,158(sp)
 2009b70:	d8c02e15 	stw	r3,184(sp)
 2009b74:	d8002915 	stw	zero,164(sp)
 2009b78:	d8003215 	stw	zero,200(sp)
 2009b7c:	003b2906 	br	2008824 <__alt_mem_epcs_flash_controller_0+0xfd007824>
 2009b80:	d9002d17 	ldw	r4,180(sp)
 2009b84:	24c00017 	ldw	r19,0(r4)
 2009b88:	21000104 	addi	r4,r4,4
 2009b8c:	d9002d15 	stw	r4,180(sp)
 2009b90:	982dd7fa 	srai	r22,r19,31
 2009b94:	b005883a 	mov	r2,r22
 2009b98:	003a9f06 	br	2008618 <__alt_mem_epcs_flash_controller_0+0xfd007618>
 2009b9c:	d9402d17 	ldw	r5,180(sp)
 2009ba0:	d8c02f17 	ldw	r3,188(sp)
 2009ba4:	28800017 	ldw	r2,0(r5)
 2009ba8:	29400104 	addi	r5,r5,4
 2009bac:	d9402d15 	stw	r5,180(sp)
 2009bb0:	10c00015 	stw	r3,0(r2)
 2009bb4:	00398606 	br	20081d0 <__alt_mem_epcs_flash_controller_0+0xfd0071d0>
 2009bb8:	d9402d17 	ldw	r5,180(sp)
 2009bbc:	002d883a 	mov	r22,zero
 2009bc0:	2cc00017 	ldw	r19,0(r5)
 2009bc4:	29400104 	addi	r5,r5,4
 2009bc8:	d9402d15 	stw	r5,180(sp)
 2009bcc:	003c2306 	br	2008c5c <__alt_mem_epcs_flash_controller_0+0xfd007c5c>
 2009bd0:	d8c02d17 	ldw	r3,180(sp)
 2009bd4:	d9002917 	ldw	r4,164(sp)
 2009bd8:	002d883a 	mov	r22,zero
 2009bdc:	18800104 	addi	r2,r3,4
 2009be0:	1cc0000b 	ldhu	r19,0(r3)
 2009be4:	203dc10e 	bge	r4,zero,20092ec <__alt_mem_epcs_flash_controller_0+0xfd0082ec>
 2009be8:	003f7506 	br	20099c0 <__alt_mem_epcs_flash_controller_0+0xfd0089c0>
 2009bec:	04008134 	movhi	r16,516
 2009bf0:	8430d604 	addi	r16,r16,-15528
 2009bf4:	003acc06 	br	2008728 <__alt_mem_epcs_flash_controller_0+0xfd007728>
 2009bf8:	d9002c17 	ldw	r4,176(sp)
 2009bfc:	d9801e04 	addi	r6,sp,120
 2009c00:	b80b883a 	mov	r5,r23
 2009c04:	20102200 	call	2010220 <__sprint_r>
 2009c08:	103a3b1e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009c0c:	dc402617 	ldw	r17,152(sp)
 2009c10:	d8c02017 	ldw	r3,128(sp)
 2009c14:	da000404 	addi	r8,sp,16
 2009c18:	003f9c06 	br	2009a8c <__alt_mem_epcs_flash_controller_0+0xfd008a8c>
 2009c1c:	ac400043 	ldbu	r17,1(r21)
 2009c20:	94800814 	ori	r18,r18,32
 2009c24:	ad400044 	addi	r21,r21,1
 2009c28:	8c403fcc 	andi	r17,r17,255
 2009c2c:	8c40201c 	xori	r17,r17,128
 2009c30:	8c7fe004 	addi	r17,r17,-128
 2009c34:	00398f06 	br	2008274 <__alt_mem_epcs_flash_controller_0+0xfd007274>
 2009c38:	d8c02d15 	stw	r3,180(sp)
 2009c3c:	0039883a 	mov	fp,zero
 2009c40:	003e3506 	br	2009518 <__alt_mem_epcs_flash_controller_0+0xfd008518>
 2009c44:	d9002c17 	ldw	r4,176(sp)
 2009c48:	d9801e04 	addi	r6,sp,120
 2009c4c:	b80b883a 	mov	r5,r23
 2009c50:	20102200 	call	2010220 <__sprint_r>
 2009c54:	103a281e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009c58:	d8c02017 	ldw	r3,128(sp)
 2009c5c:	da000404 	addi	r8,sp,16
 2009c60:	003cd006 	br	2008fa4 <__alt_mem_epcs_flash_controller_0+0xfd007fa4>
 2009c64:	8009883a 	mov	r4,r16
 2009c68:	da003d15 	stw	r8,244(sp)
 2009c6c:	2005e800 	call	2005e80 <strlen>
 2009c70:	d8802e15 	stw	r2,184(sp)
 2009c74:	da003d17 	ldw	r8,244(sp)
 2009c78:	103c340e 	bge	r2,zero,2008d4c <__alt_mem_epcs_flash_controller_0+0xfd007d4c>
 2009c7c:	0005883a 	mov	r2,zero
 2009c80:	003c3206 	br	2008d4c <__alt_mem_epcs_flash_controller_0+0xfd007d4c>
 2009c84:	d9002c17 	ldw	r4,176(sp)
 2009c88:	d9801e04 	addi	r6,sp,120
 2009c8c:	b80b883a 	mov	r5,r23
 2009c90:	20102200 	call	2010220 <__sprint_r>
 2009c94:	103a181e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009c98:	d8c02017 	ldw	r3,128(sp)
 2009c9c:	d8801f17 	ldw	r2,124(sp)
 2009ca0:	da000404 	addi	r8,sp,16
 2009ca4:	d9403317 	ldw	r5,204(sp)
 2009ca8:	10800044 	addi	r2,r2,1
 2009cac:	44000015 	stw	r16,0(r8)
 2009cb0:	28c7883a 	add	r3,r5,r3
 2009cb4:	003b7d06 	br	2008aac <__alt_mem_epcs_flash_controller_0+0xfd007aac>
 2009cb8:	01008134 	movhi	r4,516
 2009cbc:	2130f284 	addi	r4,r4,-15414
 2009cc0:	d9003515 	stw	r4,212(sp)
 2009cc4:	003b1406 	br	2008918 <__alt_mem_epcs_flash_controller_0+0xfd007918>
 2009cc8:	013fffc4 	movi	r4,-1
 2009ccc:	003a3506 	br	20085a4 <__alt_mem_epcs_flash_controller_0+0xfd0075a4>
 2009cd0:	0023883a 	mov	r17,zero
 2009cd4:	003d9d06 	br	200934c <__alt_mem_epcs_flash_controller_0+0xfd00834c>
 2009cd8:	d9002c17 	ldw	r4,176(sp)
 2009cdc:	d9801e04 	addi	r6,sp,120
 2009ce0:	b80b883a 	mov	r5,r23
 2009ce4:	20102200 	call	2010220 <__sprint_r>
 2009ce8:	103a031e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009cec:	d8c02017 	ldw	r3,128(sp)
 2009cf0:	da000404 	addi	r8,sp,16
 2009cf4:	003d9406 	br	2009348 <__alt_mem_epcs_flash_controller_0+0xfd008348>
 2009cf8:	01008134 	movhi	r4,516
 2009cfc:	2130ee84 	addi	r4,r4,-15430
 2009d00:	d9002b15 	stw	r4,172(sp)
 2009d04:	d9002b17 	ldw	r4,172(sp)
 2009d08:	1c47883a 	add	r3,r3,r17
 2009d0c:	10800044 	addi	r2,r2,1
 2009d10:	41000015 	stw	r4,0(r8)
 2009d14:	44400115 	stw	r17,4(r8)
 2009d18:	d8c02015 	stw	r3,128(sp)
 2009d1c:	d8801f15 	stw	r2,124(sp)
 2009d20:	010001c4 	movi	r4,7
 2009d24:	20bfd716 	blt	r4,r2,2009c84 <__alt_mem_epcs_flash_controller_0+0xfd008c84>
 2009d28:	42000204 	addi	r8,r8,8
 2009d2c:	003fdd06 	br	2009ca4 <__alt_mem_epcs_flash_controller_0+0xfd008ca4>
 2009d30:	d9002c17 	ldw	r4,176(sp)
 2009d34:	d9801e04 	addi	r6,sp,120
 2009d38:	b80b883a 	mov	r5,r23
 2009d3c:	20102200 	call	2010220 <__sprint_r>
 2009d40:	1039ed1e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009d44:	d8802617 	ldw	r2,152(sp)
 2009d48:	d8c02017 	ldw	r3,128(sp)
 2009d4c:	da000404 	addi	r8,sp,16
 2009d50:	003e1006 	br	2009594 <__alt_mem_epcs_flash_controller_0+0xfd008594>
 2009d54:	00800044 	movi	r2,1
 2009d58:	10803fcc 	andi	r2,r2,255
 2009d5c:	00c00044 	movi	r3,1
 2009d60:	10fa3526 	beq	r2,r3,2008638 <__alt_mem_epcs_flash_controller_0+0xfd007638>
 2009d64:	00c00084 	movi	r3,2
 2009d68:	10fbcb26 	beq	r2,r3,2008c98 <__alt_mem_epcs_flash_controller_0+0xfd007c98>
 2009d6c:	003a8f06 	br	20087ac <__alt_mem_epcs_flash_controller_0+0xfd0077ac>
 2009d70:	01008134 	movhi	r4,516
 2009d74:	2130f284 	addi	r4,r4,-15414
 2009d78:	d9003515 	stw	r4,212(sp)
 2009d7c:	003b7606 	br	2008b58 <__alt_mem_epcs_flash_controller_0+0xfd007b58>
 2009d80:	d8802917 	ldw	r2,164(sp)
 2009d84:	00c00184 	movi	r3,6
 2009d88:	1880012e 	bgeu	r3,r2,2009d90 <___vfprintf_internal_r+0x1ca0>
 2009d8c:	1805883a 	mov	r2,r3
 2009d90:	d8802e15 	stw	r2,184(sp)
 2009d94:	1000ef16 	blt	r2,zero,200a154 <___vfprintf_internal_r+0x2064>
 2009d98:	04008134 	movhi	r16,516
 2009d9c:	d8802a15 	stw	r2,168(sp)
 2009da0:	dcc02d15 	stw	r19,180(sp)
 2009da4:	d8002915 	stw	zero,164(sp)
 2009da8:	d8003215 	stw	zero,200(sp)
 2009dac:	8430e404 	addi	r16,r16,-15472
 2009db0:	0039883a 	mov	fp,zero
 2009db4:	003aa206 	br	2008840 <__alt_mem_epcs_flash_controller_0+0xfd007840>
 2009db8:	0021883a 	mov	r16,zero
 2009dbc:	003e0706 	br	20095dc <__alt_mem_epcs_flash_controller_0+0xfd0085dc>
 2009dc0:	d9002c17 	ldw	r4,176(sp)
 2009dc4:	d9801e04 	addi	r6,sp,120
 2009dc8:	b80b883a 	mov	r5,r23
 2009dcc:	20102200 	call	2010220 <__sprint_r>
 2009dd0:	1039c91e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009dd4:	d8802617 	ldw	r2,152(sp)
 2009dd8:	d9403317 	ldw	r5,204(sp)
 2009ddc:	d8c02017 	ldw	r3,128(sp)
 2009de0:	da000404 	addi	r8,sp,16
 2009de4:	2885c83a 	sub	r2,r5,r2
 2009de8:	003dfb06 	br	20095d8 <__alt_mem_epcs_flash_controller_0+0xfd0085d8>
 2009dec:	9080004c 	andi	r2,r18,1
 2009df0:	103e8f1e 	bne	r2,zero,2009830 <__alt_mem_epcs_flash_controller_0+0xfd008830>
 2009df4:	d8802117 	ldw	r2,132(sp)
 2009df8:	003e9e06 	br	2009874 <__alt_mem_epcs_flash_controller_0+0xfd008874>
 2009dfc:	1025883a 	mov	r18,r2
 2009e00:	0039883a 	mov	fp,zero
 2009e04:	00800084 	movi	r2,2
 2009e08:	003fd306 	br	2009d58 <__alt_mem_epcs_flash_controller_0+0xfd008d58>
 2009e0c:	07000b44 	movi	fp,45
 2009e10:	df002785 	stb	fp,158(sp)
 2009e14:	003a4006 	br	2008718 <__alt_mem_epcs_flash_controller_0+0xfd007718>
 2009e18:	00c00b44 	movi	r3,45
 2009e1c:	d8c02785 	stb	r3,158(sp)
 2009e20:	d8802a15 	stw	r2,168(sp)
 2009e24:	dc802b17 	ldw	r18,172(sp)
 2009e28:	d8002915 	stw	zero,164(sp)
 2009e2c:	07000b44 	movi	fp,45
 2009e30:	003a8006 	br	2008834 <__alt_mem_epcs_flash_controller_0+0xfd007834>
 2009e34:	04008134 	movhi	r16,516
 2009e38:	8430d904 	addi	r16,r16,-15516
 2009e3c:	003f4706 	br	2009b5c <__alt_mem_epcs_flash_controller_0+0xfd008b5c>
 2009e40:	d8c02d17 	ldw	r3,180(sp)
 2009e44:	d9002f17 	ldw	r4,188(sp)
 2009e48:	18800017 	ldw	r2,0(r3)
 2009e4c:	18c00104 	addi	r3,r3,4
 2009e50:	d8c02d15 	stw	r3,180(sp)
 2009e54:	11000015 	stw	r4,0(r2)
 2009e58:	0038dd06 	br	20081d0 <__alt_mem_epcs_flash_controller_0+0xfd0071d0>
 2009e5c:	dd802617 	ldw	r22,152(sp)
 2009e60:	00bfff44 	movi	r2,-3
 2009e64:	b0801c16 	blt	r22,r2,2009ed8 <___vfprintf_internal_r+0x1de8>
 2009e68:	d9402917 	ldw	r5,164(sp)
 2009e6c:	2d801a16 	blt	r5,r22,2009ed8 <___vfprintf_internal_r+0x1de8>
 2009e70:	dd803215 	stw	r22,200(sp)
 2009e74:	003e8906 	br	200989c <__alt_mem_epcs_flash_controller_0+0xfd00889c>
 2009e78:	01008134 	movhi	r4,516
 2009e7c:	2130ee84 	addi	r4,r4,-15430
 2009e80:	d9002b15 	stw	r4,172(sp)
 2009e84:	003c9106 	br	20090cc <__alt_mem_epcs_flash_controller_0+0xfd0080cc>
 2009e88:	e005883a 	mov	r2,fp
 2009e8c:	003e7906 	br	2009874 <__alt_mem_epcs_flash_controller_0+0xfd008874>
 2009e90:	d9402917 	ldw	r5,164(sp)
 2009e94:	df002783 	ldbu	fp,158(sp)
 2009e98:	dcc02d15 	stw	r19,180(sp)
 2009e9c:	d9402a15 	stw	r5,168(sp)
 2009ea0:	d9402e15 	stw	r5,184(sp)
 2009ea4:	d8002915 	stw	zero,164(sp)
 2009ea8:	d8003215 	stw	zero,200(sp)
 2009eac:	003a5d06 	br	2008824 <__alt_mem_epcs_flash_controller_0+0xfd007824>
 2009eb0:	9080004c 	andi	r2,r18,1
 2009eb4:	0039883a 	mov	fp,zero
 2009eb8:	10000426 	beq	r2,zero,2009ecc <___vfprintf_internal_r+0x1ddc>
 2009ebc:	00800c04 	movi	r2,48
 2009ec0:	dc001dc4 	addi	r16,sp,119
 2009ec4:	d8801dc5 	stb	r2,119(sp)
 2009ec8:	003b8006 	br	2008ccc <__alt_mem_epcs_flash_controller_0+0xfd007ccc>
 2009ecc:	d8002e15 	stw	zero,184(sp)
 2009ed0:	dc001e04 	addi	r16,sp,120
 2009ed4:	003a4d06 	br	200880c <__alt_mem_epcs_flash_controller_0+0xfd00780c>
 2009ed8:	8c7fff84 	addi	r17,r17,-2
 2009edc:	b5bfffc4 	addi	r22,r22,-1
 2009ee0:	dd802615 	stw	r22,152(sp)
 2009ee4:	dc4022c5 	stb	r17,139(sp)
 2009ee8:	b000bf16 	blt	r22,zero,200a1e8 <___vfprintf_internal_r+0x20f8>
 2009eec:	00800ac4 	movi	r2,43
 2009ef0:	d8802305 	stb	r2,140(sp)
 2009ef4:	00800244 	movi	r2,9
 2009ef8:	15807016 	blt	r2,r22,200a0bc <___vfprintf_internal_r+0x1fcc>
 2009efc:	00800c04 	movi	r2,48
 2009f00:	b5800c04 	addi	r22,r22,48
 2009f04:	d8802345 	stb	r2,141(sp)
 2009f08:	dd802385 	stb	r22,142(sp)
 2009f0c:	d88023c4 	addi	r2,sp,143
 2009f10:	df0022c4 	addi	fp,sp,139
 2009f14:	d8c03317 	ldw	r3,204(sp)
 2009f18:	1739c83a 	sub	fp,r2,fp
 2009f1c:	d9003317 	ldw	r4,204(sp)
 2009f20:	e0c7883a 	add	r3,fp,r3
 2009f24:	df003a15 	stw	fp,232(sp)
 2009f28:	d8c02e15 	stw	r3,184(sp)
 2009f2c:	00800044 	movi	r2,1
 2009f30:	1100b30e 	bge	r2,r4,200a200 <___vfprintf_internal_r+0x2110>
 2009f34:	d8c02e17 	ldw	r3,184(sp)
 2009f38:	18c00044 	addi	r3,r3,1
 2009f3c:	d8c02e15 	stw	r3,184(sp)
 2009f40:	1805883a 	mov	r2,r3
 2009f44:	1800ac16 	blt	r3,zero,200a1f8 <___vfprintf_internal_r+0x2108>
 2009f48:	d8003215 	stw	zero,200(sp)
 2009f4c:	003e5d06 	br	20098c4 <__alt_mem_epcs_flash_controller_0+0xfd0088c4>
 2009f50:	d9002c17 	ldw	r4,176(sp)
 2009f54:	d9801e04 	addi	r6,sp,120
 2009f58:	b80b883a 	mov	r5,r23
 2009f5c:	20102200 	call	2010220 <__sprint_r>
 2009f60:	1039651e 	bne	r2,zero,20084f8 <__alt_mem_epcs_flash_controller_0+0xfd0074f8>
 2009f64:	dc402617 	ldw	r17,152(sp)
 2009f68:	d8c02017 	ldw	r3,128(sp)
 2009f6c:	d8801f17 	ldw	r2,124(sp)
 2009f70:	da000404 	addi	r8,sp,16
 2009f74:	003ed606 	br	2009ad0 <__alt_mem_epcs_flash_controller_0+0xfd008ad0>
 2009f78:	582b883a 	mov	r21,r11
 2009f7c:	d8002915 	stw	zero,164(sp)
 2009f80:	0038bd06 	br	2008278 <__alt_mem_epcs_flash_controller_0+0xfd007278>
 2009f84:	d8802917 	ldw	r2,164(sp)
 2009f88:	103e071e 	bne	r2,zero,20097a8 <__alt_mem_epcs_flash_controller_0+0xfd0087a8>
 2009f8c:	dc002915 	stw	r16,164(sp)
 2009f90:	003e0506 	br	20097a8 <__alt_mem_epcs_flash_controller_0+0xfd0087a8>
 2009f94:	d9002917 	ldw	r4,164(sp)
 2009f98:	20c00044 	addi	r3,r4,1
 2009f9c:	003e0f06 	br	20097dc <__alt_mem_epcs_flash_controller_0+0xfd0087dc>
 2009fa0:	01400184 	movi	r5,6
 2009fa4:	d9402915 	stw	r5,164(sp)
 2009fa8:	003dff06 	br	20097a8 <__alt_mem_epcs_flash_controller_0+0xfd0087a8>
 2009fac:	d8802104 	addi	r2,sp,132
 2009fb0:	d8800315 	stw	r2,12(sp)
 2009fb4:	d8802504 	addi	r2,sp,148
 2009fb8:	d8800215 	stw	r2,8(sp)
 2009fbc:	d8802604 	addi	r2,sp,152
 2009fc0:	d8800115 	stw	r2,4(sp)
 2009fc4:	d8802917 	ldw	r2,164(sp)
 2009fc8:	d9403617 	ldw	r5,216(sp)
 2009fcc:	d9002c17 	ldw	r4,176(sp)
 2009fd0:	d8800015 	stw	r2,0(sp)
 2009fd4:	01c000c4 	movi	r7,3
 2009fd8:	980d883a 	mov	r6,r19
 2009fdc:	da003d15 	stw	r8,244(sp)
 2009fe0:	200a8380 	call	200a838 <_dtoa_r>
 2009fe4:	d8c02917 	ldw	r3,164(sp)
 2009fe8:	da003d17 	ldw	r8,244(sp)
 2009fec:	1021883a 	mov	r16,r2
 2009ff0:	10f9883a 	add	fp,r2,r3
 2009ff4:	81000007 	ldb	r4,0(r16)
 2009ff8:	00800c04 	movi	r2,48
 2009ffc:	20805e26 	beq	r4,r2,200a178 <___vfprintf_internal_r+0x2088>
 200a000:	d8c02617 	ldw	r3,152(sp)
 200a004:	e0f9883a 	add	fp,fp,r3
 200a008:	003e0a06 	br	2009834 <__alt_mem_epcs_flash_controller_0+0xfd008834>
 200a00c:	00c00b44 	movi	r3,45
 200a010:	24e0003c 	xorhi	r19,r4,32768
 200a014:	d8c02a05 	stb	r3,168(sp)
 200a018:	003de906 	br	20097c0 <__alt_mem_epcs_flash_controller_0+0xfd0087c0>
 200a01c:	d8c03217 	ldw	r3,200(sp)
 200a020:	00c07a0e 	bge	zero,r3,200a20c <___vfprintf_internal_r+0x211c>
 200a024:	00800044 	movi	r2,1
 200a028:	d9003317 	ldw	r4,204(sp)
 200a02c:	1105883a 	add	r2,r2,r4
 200a030:	d8802e15 	stw	r2,184(sp)
 200a034:	10004e16 	blt	r2,zero,200a170 <___vfprintf_internal_r+0x2080>
 200a038:	044019c4 	movi	r17,103
 200a03c:	003e2106 	br	20098c4 <__alt_mem_epcs_flash_controller_0+0xfd0088c4>
 200a040:	d9002917 	ldw	r4,164(sp)
 200a044:	d8802104 	addi	r2,sp,132
 200a048:	d8800315 	stw	r2,12(sp)
 200a04c:	d9000015 	stw	r4,0(sp)
 200a050:	d8802504 	addi	r2,sp,148
 200a054:	d9403617 	ldw	r5,216(sp)
 200a058:	d9002c17 	ldw	r4,176(sp)
 200a05c:	d8800215 	stw	r2,8(sp)
 200a060:	d8802604 	addi	r2,sp,152
 200a064:	d8800115 	stw	r2,4(sp)
 200a068:	01c000c4 	movi	r7,3
 200a06c:	980d883a 	mov	r6,r19
 200a070:	da003d15 	stw	r8,244(sp)
 200a074:	200a8380 	call	200a838 <_dtoa_r>
 200a078:	d8c02917 	ldw	r3,164(sp)
 200a07c:	da003d17 	ldw	r8,244(sp)
 200a080:	1021883a 	mov	r16,r2
 200a084:	00801184 	movi	r2,70
 200a088:	80f9883a 	add	fp,r16,r3
 200a08c:	88bfd926 	beq	r17,r2,2009ff4 <__alt_mem_epcs_flash_controller_0+0xfd008ff4>
 200a090:	003de806 	br	2009834 <__alt_mem_epcs_flash_controller_0+0xfd008834>
 200a094:	d9002917 	ldw	r4,164(sp)
 200a098:	00c04d0e 	bge	zero,r3,200a1d0 <___vfprintf_internal_r+0x20e0>
 200a09c:	2000441e 	bne	r4,zero,200a1b0 <___vfprintf_internal_r+0x20c0>
 200a0a0:	9480004c 	andi	r18,r18,1
 200a0a4:	9000421e 	bne	r18,zero,200a1b0 <___vfprintf_internal_r+0x20c0>
 200a0a8:	1805883a 	mov	r2,r3
 200a0ac:	18007016 	blt	r3,zero,200a270 <___vfprintf_internal_r+0x2180>
 200a0b0:	d8c03217 	ldw	r3,200(sp)
 200a0b4:	d8c02e15 	stw	r3,184(sp)
 200a0b8:	003e0206 	br	20098c4 <__alt_mem_epcs_flash_controller_0+0xfd0088c4>
 200a0bc:	df0022c4 	addi	fp,sp,139
 200a0c0:	dc002915 	stw	r16,164(sp)
 200a0c4:	4027883a 	mov	r19,r8
 200a0c8:	e021883a 	mov	r16,fp
 200a0cc:	b009883a 	mov	r4,r22
 200a0d0:	01400284 	movi	r5,10
 200a0d4:	200505c0 	call	200505c <__modsi3>
 200a0d8:	10800c04 	addi	r2,r2,48
 200a0dc:	843fffc4 	addi	r16,r16,-1
 200a0e0:	b009883a 	mov	r4,r22
 200a0e4:	01400284 	movi	r5,10
 200a0e8:	80800005 	stb	r2,0(r16)
 200a0ec:	2004fd80 	call	2004fd8 <__divsi3>
 200a0f0:	102d883a 	mov	r22,r2
 200a0f4:	00800244 	movi	r2,9
 200a0f8:	15bff416 	blt	r2,r22,200a0cc <__alt_mem_epcs_flash_controller_0+0xfd0090cc>
 200a0fc:	9811883a 	mov	r8,r19
 200a100:	b0800c04 	addi	r2,r22,48
 200a104:	8027883a 	mov	r19,r16
 200a108:	997fffc4 	addi	r5,r19,-1
 200a10c:	98bfffc5 	stb	r2,-1(r19)
 200a110:	dc002917 	ldw	r16,164(sp)
 200a114:	2f006a2e 	bgeu	r5,fp,200a2c0 <___vfprintf_internal_r+0x21d0>
 200a118:	d9c02384 	addi	r7,sp,142
 200a11c:	3ccfc83a 	sub	r7,r7,r19
 200a120:	d9002344 	addi	r4,sp,141
 200a124:	e1cf883a 	add	r7,fp,r7
 200a128:	00000106 	br	200a130 <___vfprintf_internal_r+0x2040>
 200a12c:	28800003 	ldbu	r2,0(r5)
 200a130:	20800005 	stb	r2,0(r4)
 200a134:	21000044 	addi	r4,r4,1
 200a138:	29400044 	addi	r5,r5,1
 200a13c:	393ffb1e 	bne	r7,r4,200a12c <__alt_mem_epcs_flash_controller_0+0xfd00912c>
 200a140:	d8802304 	addi	r2,sp,140
 200a144:	14c5c83a 	sub	r2,r2,r19
 200a148:	d8c02344 	addi	r3,sp,141
 200a14c:	1885883a 	add	r2,r3,r2
 200a150:	003f7006 	br	2009f14 <__alt_mem_epcs_flash_controller_0+0xfd008f14>
 200a154:	0005883a 	mov	r2,zero
 200a158:	003f0f06 	br	2009d98 <__alt_mem_epcs_flash_controller_0+0xfd008d98>
 200a15c:	d8c03217 	ldw	r3,200(sp)
 200a160:	18c00044 	addi	r3,r3,1
 200a164:	d8c02e15 	stw	r3,184(sp)
 200a168:	1805883a 	mov	r2,r3
 200a16c:	183fb20e 	bge	r3,zero,200a038 <__alt_mem_epcs_flash_controller_0+0xfd009038>
 200a170:	0005883a 	mov	r2,zero
 200a174:	003fb006 	br	200a038 <__alt_mem_epcs_flash_controller_0+0xfd009038>
 200a178:	d9003617 	ldw	r4,216(sp)
 200a17c:	000d883a 	mov	r6,zero
 200a180:	000f883a 	mov	r7,zero
 200a184:	980b883a 	mov	r5,r19
 200a188:	d8c03c15 	stw	r3,240(sp)
 200a18c:	da003d15 	stw	r8,244(sp)
 200a190:	2012aec0 	call	2012aec <__eqdf2>
 200a194:	d8c03c17 	ldw	r3,240(sp)
 200a198:	da003d17 	ldw	r8,244(sp)
 200a19c:	103f9826 	beq	r2,zero,200a000 <__alt_mem_epcs_flash_controller_0+0xfd009000>
 200a1a0:	00800044 	movi	r2,1
 200a1a4:	10c7c83a 	sub	r3,r2,r3
 200a1a8:	d8c02615 	stw	r3,152(sp)
 200a1ac:	003f9506 	br	200a004 <__alt_mem_epcs_flash_controller_0+0xfd009004>
 200a1b0:	d9002917 	ldw	r4,164(sp)
 200a1b4:	d8c03217 	ldw	r3,200(sp)
 200a1b8:	20800044 	addi	r2,r4,1
 200a1bc:	1885883a 	add	r2,r3,r2
 200a1c0:	d8802e15 	stw	r2,184(sp)
 200a1c4:	103dbf0e 	bge	r2,zero,20098c4 <__alt_mem_epcs_flash_controller_0+0xfd0088c4>
 200a1c8:	0005883a 	mov	r2,zero
 200a1cc:	003dbd06 	br	20098c4 <__alt_mem_epcs_flash_controller_0+0xfd0088c4>
 200a1d0:	2000211e 	bne	r4,zero,200a258 <___vfprintf_internal_r+0x2168>
 200a1d4:	9480004c 	andi	r18,r18,1
 200a1d8:	90001f1e 	bne	r18,zero,200a258 <___vfprintf_internal_r+0x2168>
 200a1dc:	00800044 	movi	r2,1
 200a1e0:	d8802e15 	stw	r2,184(sp)
 200a1e4:	003db706 	br	20098c4 <__alt_mem_epcs_flash_controller_0+0xfd0088c4>
 200a1e8:	00800b44 	movi	r2,45
 200a1ec:	05adc83a 	sub	r22,zero,r22
 200a1f0:	d8802305 	stb	r2,140(sp)
 200a1f4:	003f3f06 	br	2009ef4 <__alt_mem_epcs_flash_controller_0+0xfd008ef4>
 200a1f8:	0005883a 	mov	r2,zero
 200a1fc:	003f5206 	br	2009f48 <__alt_mem_epcs_flash_controller_0+0xfd008f48>
 200a200:	90a4703a 	and	r18,r18,r2
 200a204:	903f4e26 	beq	r18,zero,2009f40 <__alt_mem_epcs_flash_controller_0+0xfd008f40>
 200a208:	003f4a06 	br	2009f34 <__alt_mem_epcs_flash_controller_0+0xfd008f34>
 200a20c:	00800084 	movi	r2,2
 200a210:	10c5c83a 	sub	r2,r2,r3
 200a214:	003f8406 	br	200a028 <__alt_mem_epcs_flash_controller_0+0xfd009028>
 200a218:	d8802d17 	ldw	r2,180(sp)
 200a21c:	d9002d17 	ldw	r4,180(sp)
 200a220:	ac400043 	ldbu	r17,1(r21)
 200a224:	10800017 	ldw	r2,0(r2)
 200a228:	582b883a 	mov	r21,r11
 200a22c:	d8802915 	stw	r2,164(sp)
 200a230:	20800104 	addi	r2,r4,4
 200a234:	d9002917 	ldw	r4,164(sp)
 200a238:	d8802d15 	stw	r2,180(sp)
 200a23c:	203e7a0e 	bge	r4,zero,2009c28 <__alt_mem_epcs_flash_controller_0+0xfd008c28>
 200a240:	8c403fcc 	andi	r17,r17,255
 200a244:	00bfffc4 	movi	r2,-1
 200a248:	8c40201c 	xori	r17,r17,128
 200a24c:	d8802915 	stw	r2,164(sp)
 200a250:	8c7fe004 	addi	r17,r17,-128
 200a254:	00380706 	br	2008274 <__alt_mem_epcs_flash_controller_0+0xfd007274>
 200a258:	d8c02917 	ldw	r3,164(sp)
 200a25c:	18c00084 	addi	r3,r3,2
 200a260:	d8c02e15 	stw	r3,184(sp)
 200a264:	1805883a 	mov	r2,r3
 200a268:	183d960e 	bge	r3,zero,20098c4 <__alt_mem_epcs_flash_controller_0+0xfd0088c4>
 200a26c:	003fd606 	br	200a1c8 <__alt_mem_epcs_flash_controller_0+0xfd0091c8>
 200a270:	0005883a 	mov	r2,zero
 200a274:	003f8e06 	br	200a0b0 <__alt_mem_epcs_flash_controller_0+0xfd0090b0>
 200a278:	9080004c 	andi	r2,r18,1
 200a27c:	103f811e 	bne	r2,zero,200a084 <__alt_mem_epcs_flash_controller_0+0xfd009084>
 200a280:	d8802117 	ldw	r2,132(sp)
 200a284:	1405c83a 	sub	r2,r2,r16
 200a288:	d8803315 	stw	r2,204(sp)
 200a28c:	b47ef326 	beq	r22,r17,2009e5c <__alt_mem_epcs_flash_controller_0+0xfd008e5c>
 200a290:	dd802617 	ldw	r22,152(sp)
 200a294:	003f1106 	br	2009edc <__alt_mem_epcs_flash_controller_0+0xfd008edc>
 200a298:	d9c02785 	stb	r7,158(sp)
 200a29c:	00390406 	br	20086b0 <__alt_mem_epcs_flash_controller_0+0xfd0076b0>
 200a2a0:	d9c02785 	stb	r7,158(sp)
 200a2a4:	0038d306 	br	20085f4 <__alt_mem_epcs_flash_controller_0+0xfd0075f4>
 200a2a8:	d9c02785 	stb	r7,158(sp)
 200a2ac:	003a6106 	br	2008c34 <__alt_mem_epcs_flash_controller_0+0xfd007c34>
 200a2b0:	d9c02785 	stb	r7,158(sp)
 200a2b4:	003af806 	br	2008e98 <__alt_mem_epcs_flash_controller_0+0xfd007e98>
 200a2b8:	0005883a 	mov	r2,zero
 200a2bc:	003d7e06 	br	20098b8 <__alt_mem_epcs_flash_controller_0+0xfd0088b8>
 200a2c0:	d8802344 	addi	r2,sp,141
 200a2c4:	003f1306 	br	2009f14 <__alt_mem_epcs_flash_controller_0+0xfd008f14>
 200a2c8:	d9c02785 	stb	r7,158(sp)
 200a2cc:	00392306 	br	200875c <__alt_mem_epcs_flash_controller_0+0xfd00775c>
 200a2d0:	d9c02785 	stb	r7,158(sp)
 200a2d4:	003aa906 	br	2008d7c <__alt_mem_epcs_flash_controller_0+0xfd007d7c>
 200a2d8:	d9c02785 	stb	r7,158(sp)
 200a2dc:	003a3d06 	br	2008bd4 <__alt_mem_epcs_flash_controller_0+0xfd007bd4>
 200a2e0:	d9c02785 	stb	r7,158(sp)
 200a2e4:	003aca06 	br	2008e10 <__alt_mem_epcs_flash_controller_0+0xfd007e10>

0200a2e8 <__vfprintf_internal>:
 200a2e8:	00808134 	movhi	r2,516
 200a2ec:	10b84a04 	addi	r2,r2,-7896
 200a2f0:	300f883a 	mov	r7,r6
 200a2f4:	280d883a 	mov	r6,r5
 200a2f8:	200b883a 	mov	r5,r4
 200a2fc:	11000017 	ldw	r4,0(r2)
 200a300:	20080f01 	jmpi	20080f0 <___vfprintf_internal_r>

0200a304 <__sbprintf>:
 200a304:	2880030b 	ldhu	r2,12(r5)
 200a308:	2ac01917 	ldw	r11,100(r5)
 200a30c:	2a80038b 	ldhu	r10,14(r5)
 200a310:	2a400717 	ldw	r9,28(r5)
 200a314:	2a000917 	ldw	r8,36(r5)
 200a318:	defee204 	addi	sp,sp,-1144
 200a31c:	00c10004 	movi	r3,1024
 200a320:	dc011a15 	stw	r16,1128(sp)
 200a324:	10bfff4c 	andi	r2,r2,65533
 200a328:	2821883a 	mov	r16,r5
 200a32c:	d8cb883a 	add	r5,sp,r3
 200a330:	dc811c15 	stw	r18,1136(sp)
 200a334:	dc411b15 	stw	r17,1132(sp)
 200a338:	dfc11d15 	stw	ra,1140(sp)
 200a33c:	2025883a 	mov	r18,r4
 200a340:	d881030d 	sth	r2,1036(sp)
 200a344:	dac11915 	stw	r11,1124(sp)
 200a348:	da81038d 	sth	r10,1038(sp)
 200a34c:	da410715 	stw	r9,1052(sp)
 200a350:	da010915 	stw	r8,1060(sp)
 200a354:	dec10015 	stw	sp,1024(sp)
 200a358:	dec10415 	stw	sp,1040(sp)
 200a35c:	d8c10215 	stw	r3,1032(sp)
 200a360:	d8c10515 	stw	r3,1044(sp)
 200a364:	d8010615 	stw	zero,1048(sp)
 200a368:	20080f00 	call	20080f0 <___vfprintf_internal_r>
 200a36c:	1023883a 	mov	r17,r2
 200a370:	10000416 	blt	r2,zero,200a384 <__sbprintf+0x80>
 200a374:	d9410004 	addi	r5,sp,1024
 200a378:	9009883a 	mov	r4,r18
 200a37c:	200c0dc0 	call	200c0dc <_fflush_r>
 200a380:	10000d1e 	bne	r2,zero,200a3b8 <__sbprintf+0xb4>
 200a384:	d881030b 	ldhu	r2,1036(sp)
 200a388:	1080100c 	andi	r2,r2,64
 200a38c:	10000326 	beq	r2,zero,200a39c <__sbprintf+0x98>
 200a390:	8080030b 	ldhu	r2,12(r16)
 200a394:	10801014 	ori	r2,r2,64
 200a398:	8080030d 	sth	r2,12(r16)
 200a39c:	8805883a 	mov	r2,r17
 200a3a0:	dfc11d17 	ldw	ra,1140(sp)
 200a3a4:	dc811c17 	ldw	r18,1136(sp)
 200a3a8:	dc411b17 	ldw	r17,1132(sp)
 200a3ac:	dc011a17 	ldw	r16,1128(sp)
 200a3b0:	dec11e04 	addi	sp,sp,1144
 200a3b4:	f800283a 	ret
 200a3b8:	047fffc4 	movi	r17,-1
 200a3bc:	003ff106 	br	200a384 <__alt_mem_epcs_flash_controller_0+0xfd009384>

0200a3c0 <_vsnprintf_r>:
 200a3c0:	30003716 	blt	r6,zero,200a4a0 <_vsnprintf_r+0xe0>
 200a3c4:	deffe404 	addi	sp,sp,-112
 200a3c8:	00c08204 	movi	r3,520
 200a3cc:	dc001a15 	stw	r16,104(sp)
 200a3d0:	3005883a 	mov	r2,r6
 200a3d4:	dfc01b15 	stw	ra,108(sp)
 200a3d8:	d8c0030d 	sth	r3,12(sp)
 200a3dc:	d9400015 	stw	r5,0(sp)
 200a3e0:	d9400415 	stw	r5,16(sp)
 200a3e4:	380d883a 	mov	r6,r7
 200a3e8:	2021883a 	mov	r16,r4
 200a3ec:	10001326 	beq	r2,zero,200a43c <_vsnprintf_r+0x7c>
 200a3f0:	00c08134 	movhi	r3,516
 200a3f4:	18f84a04 	addi	r3,r3,-7896
 200a3f8:	19000017 	ldw	r4,0(r3)
 200a3fc:	d9c01c17 	ldw	r7,112(sp)
 200a400:	10bfffc4 	addi	r2,r2,-1
 200a404:	d8800215 	stw	r2,8(sp)
 200a408:	d8800515 	stw	r2,20(sp)
 200a40c:	d80b883a 	mov	r5,sp
 200a410:	00bfffc4 	movi	r2,-1
 200a414:	d880038d 	sth	r2,14(sp)
 200a418:	2005f180 	call	2005f18 <___svfprintf_internal_r>
 200a41c:	00ffffc4 	movi	r3,-1
 200a420:	10c01616 	blt	r2,r3,200a47c <_vsnprintf_r+0xbc>
 200a424:	d8c00017 	ldw	r3,0(sp)
 200a428:	18000005 	stb	zero,0(r3)
 200a42c:	dfc01b17 	ldw	ra,108(sp)
 200a430:	dc001a17 	ldw	r16,104(sp)
 200a434:	dec01c04 	addi	sp,sp,112
 200a438:	f800283a 	ret
 200a43c:	00808134 	movhi	r2,516
 200a440:	10b84a04 	addi	r2,r2,-7896
 200a444:	11000017 	ldw	r4,0(r2)
 200a448:	d9c01c17 	ldw	r7,112(sp)
 200a44c:	00bfffc4 	movi	r2,-1
 200a450:	d80b883a 	mov	r5,sp
 200a454:	d8000215 	stw	zero,8(sp)
 200a458:	d8000515 	stw	zero,20(sp)
 200a45c:	d880038d 	sth	r2,14(sp)
 200a460:	2005f180 	call	2005f18 <___svfprintf_internal_r>
 200a464:	00ffffc4 	movi	r3,-1
 200a468:	10c00716 	blt	r2,r3,200a488 <_vsnprintf_r+0xc8>
 200a46c:	dfc01b17 	ldw	ra,108(sp)
 200a470:	dc001a17 	ldw	r16,104(sp)
 200a474:	dec01c04 	addi	sp,sp,112
 200a478:	f800283a 	ret
 200a47c:	00c022c4 	movi	r3,139
 200a480:	80c00015 	stw	r3,0(r16)
 200a484:	003fe706 	br	200a424 <__alt_mem_epcs_flash_controller_0+0xfd009424>
 200a488:	00c022c4 	movi	r3,139
 200a48c:	80c00015 	stw	r3,0(r16)
 200a490:	dfc01b17 	ldw	ra,108(sp)
 200a494:	dc001a17 	ldw	r16,104(sp)
 200a498:	dec01c04 	addi	sp,sp,112
 200a49c:	f800283a 	ret
 200a4a0:	008022c4 	movi	r2,139
 200a4a4:	20800015 	stw	r2,0(r4)
 200a4a8:	00bfffc4 	movi	r2,-1
 200a4ac:	f800283a 	ret

0200a4b0 <vsnprintf>:
 200a4b0:	defffe04 	addi	sp,sp,-8
 200a4b4:	00808134 	movhi	r2,516
 200a4b8:	d9c00015 	stw	r7,0(sp)
 200a4bc:	10b84a04 	addi	r2,r2,-7896
 200a4c0:	300f883a 	mov	r7,r6
 200a4c4:	280d883a 	mov	r6,r5
 200a4c8:	200b883a 	mov	r5,r4
 200a4cc:	11000017 	ldw	r4,0(r2)
 200a4d0:	dfc00115 	stw	ra,4(sp)
 200a4d4:	200a3c00 	call	200a3c0 <_vsnprintf_r>
 200a4d8:	dfc00117 	ldw	ra,4(sp)
 200a4dc:	dec00204 	addi	sp,sp,8
 200a4e0:	f800283a 	ret

0200a4e4 <__swsetup_r>:
 200a4e4:	00808134 	movhi	r2,516
 200a4e8:	defffd04 	addi	sp,sp,-12
 200a4ec:	10b84a04 	addi	r2,r2,-7896
 200a4f0:	dc400115 	stw	r17,4(sp)
 200a4f4:	2023883a 	mov	r17,r4
 200a4f8:	11000017 	ldw	r4,0(r2)
 200a4fc:	dc000015 	stw	r16,0(sp)
 200a500:	dfc00215 	stw	ra,8(sp)
 200a504:	2821883a 	mov	r16,r5
 200a508:	20000226 	beq	r4,zero,200a514 <__swsetup_r+0x30>
 200a50c:	20800e17 	ldw	r2,56(r4)
 200a510:	10003126 	beq	r2,zero,200a5d8 <__swsetup_r+0xf4>
 200a514:	8080030b 	ldhu	r2,12(r16)
 200a518:	10c0020c 	andi	r3,r2,8
 200a51c:	1009883a 	mov	r4,r2
 200a520:	18000f26 	beq	r3,zero,200a560 <__swsetup_r+0x7c>
 200a524:	80c00417 	ldw	r3,16(r16)
 200a528:	18001526 	beq	r3,zero,200a580 <__swsetup_r+0x9c>
 200a52c:	1100004c 	andi	r4,r2,1
 200a530:	20001c1e 	bne	r4,zero,200a5a4 <__swsetup_r+0xc0>
 200a534:	1080008c 	andi	r2,r2,2
 200a538:	1000291e 	bne	r2,zero,200a5e0 <__swsetup_r+0xfc>
 200a53c:	80800517 	ldw	r2,20(r16)
 200a540:	80800215 	stw	r2,8(r16)
 200a544:	18001c26 	beq	r3,zero,200a5b8 <__swsetup_r+0xd4>
 200a548:	0005883a 	mov	r2,zero
 200a54c:	dfc00217 	ldw	ra,8(sp)
 200a550:	dc400117 	ldw	r17,4(sp)
 200a554:	dc000017 	ldw	r16,0(sp)
 200a558:	dec00304 	addi	sp,sp,12
 200a55c:	f800283a 	ret
 200a560:	2080040c 	andi	r2,r4,16
 200a564:	10002e26 	beq	r2,zero,200a620 <__swsetup_r+0x13c>
 200a568:	2080010c 	andi	r2,r4,4
 200a56c:	10001e1e 	bne	r2,zero,200a5e8 <__swsetup_r+0x104>
 200a570:	80c00417 	ldw	r3,16(r16)
 200a574:	20800214 	ori	r2,r4,8
 200a578:	8080030d 	sth	r2,12(r16)
 200a57c:	183feb1e 	bne	r3,zero,200a52c <__alt_mem_epcs_flash_controller_0+0xfd00952c>
 200a580:	1100a00c 	andi	r4,r2,640
 200a584:	01408004 	movi	r5,512
 200a588:	217fe826 	beq	r4,r5,200a52c <__alt_mem_epcs_flash_controller_0+0xfd00952c>
 200a58c:	800b883a 	mov	r5,r16
 200a590:	8809883a 	mov	r4,r17
 200a594:	200d05c0 	call	200d05c <__smakebuf_r>
 200a598:	8080030b 	ldhu	r2,12(r16)
 200a59c:	80c00417 	ldw	r3,16(r16)
 200a5a0:	003fe206 	br	200a52c <__alt_mem_epcs_flash_controller_0+0xfd00952c>
 200a5a4:	80800517 	ldw	r2,20(r16)
 200a5a8:	80000215 	stw	zero,8(r16)
 200a5ac:	0085c83a 	sub	r2,zero,r2
 200a5b0:	80800615 	stw	r2,24(r16)
 200a5b4:	183fe41e 	bne	r3,zero,200a548 <__alt_mem_epcs_flash_controller_0+0xfd009548>
 200a5b8:	80c0030b 	ldhu	r3,12(r16)
 200a5bc:	0005883a 	mov	r2,zero
 200a5c0:	1900200c 	andi	r4,r3,128
 200a5c4:	203fe126 	beq	r4,zero,200a54c <__alt_mem_epcs_flash_controller_0+0xfd00954c>
 200a5c8:	18c01014 	ori	r3,r3,64
 200a5cc:	80c0030d 	sth	r3,12(r16)
 200a5d0:	00bfffc4 	movi	r2,-1
 200a5d4:	003fdd06 	br	200a54c <__alt_mem_epcs_flash_controller_0+0xfd00954c>
 200a5d8:	200c4b80 	call	200c4b8 <__sinit>
 200a5dc:	003fcd06 	br	200a514 <__alt_mem_epcs_flash_controller_0+0xfd009514>
 200a5e0:	0005883a 	mov	r2,zero
 200a5e4:	003fd606 	br	200a540 <__alt_mem_epcs_flash_controller_0+0xfd009540>
 200a5e8:	81400c17 	ldw	r5,48(r16)
 200a5ec:	28000626 	beq	r5,zero,200a608 <__swsetup_r+0x124>
 200a5f0:	80801004 	addi	r2,r16,64
 200a5f4:	28800326 	beq	r5,r2,200a604 <__swsetup_r+0x120>
 200a5f8:	8809883a 	mov	r4,r17
 200a5fc:	200c62c0 	call	200c62c <_free_r>
 200a600:	8100030b 	ldhu	r4,12(r16)
 200a604:	80000c15 	stw	zero,48(r16)
 200a608:	80c00417 	ldw	r3,16(r16)
 200a60c:	00bff6c4 	movi	r2,-37
 200a610:	1108703a 	and	r4,r2,r4
 200a614:	80000115 	stw	zero,4(r16)
 200a618:	80c00015 	stw	r3,0(r16)
 200a61c:	003fd506 	br	200a574 <__alt_mem_epcs_flash_controller_0+0xfd009574>
 200a620:	00800244 	movi	r2,9
 200a624:	88800015 	stw	r2,0(r17)
 200a628:	20801014 	ori	r2,r4,64
 200a62c:	8080030d 	sth	r2,12(r16)
 200a630:	00bfffc4 	movi	r2,-1
 200a634:	003fc506 	br	200a54c <__alt_mem_epcs_flash_controller_0+0xfd00954c>

0200a638 <quorem>:
 200a638:	defff704 	addi	sp,sp,-36
 200a63c:	dc800215 	stw	r18,8(sp)
 200a640:	20800417 	ldw	r2,16(r4)
 200a644:	2c800417 	ldw	r18,16(r5)
 200a648:	dfc00815 	stw	ra,32(sp)
 200a64c:	ddc00715 	stw	r23,28(sp)
 200a650:	dd800615 	stw	r22,24(sp)
 200a654:	dd400515 	stw	r21,20(sp)
 200a658:	dd000415 	stw	r20,16(sp)
 200a65c:	dcc00315 	stw	r19,12(sp)
 200a660:	dc400115 	stw	r17,4(sp)
 200a664:	dc000015 	stw	r16,0(sp)
 200a668:	14807116 	blt	r2,r18,200a830 <quorem+0x1f8>
 200a66c:	94bfffc4 	addi	r18,r18,-1
 200a670:	94ad883a 	add	r22,r18,r18
 200a674:	b5ad883a 	add	r22,r22,r22
 200a678:	2c400504 	addi	r17,r5,20
 200a67c:	8da9883a 	add	r20,r17,r22
 200a680:	25400504 	addi	r21,r4,20
 200a684:	282f883a 	mov	r23,r5
 200a688:	adad883a 	add	r22,r21,r22
 200a68c:	a1400017 	ldw	r5,0(r20)
 200a690:	2021883a 	mov	r16,r4
 200a694:	b1000017 	ldw	r4,0(r22)
 200a698:	29400044 	addi	r5,r5,1
 200a69c:	20050d00 	call	20050d0 <__udivsi3>
 200a6a0:	1027883a 	mov	r19,r2
 200a6a4:	10002c26 	beq	r2,zero,200a758 <quorem+0x120>
 200a6a8:	a813883a 	mov	r9,r21
 200a6ac:	880b883a 	mov	r5,r17
 200a6b0:	0009883a 	mov	r4,zero
 200a6b4:	000d883a 	mov	r6,zero
 200a6b8:	2a000017 	ldw	r8,0(r5)
 200a6bc:	49c00017 	ldw	r7,0(r9)
 200a6c0:	29400104 	addi	r5,r5,4
 200a6c4:	40bfffcc 	andi	r2,r8,65535
 200a6c8:	14c5383a 	mul	r2,r2,r19
 200a6cc:	4010d43a 	srli	r8,r8,16
 200a6d0:	38ffffcc 	andi	r3,r7,65535
 200a6d4:	1105883a 	add	r2,r2,r4
 200a6d8:	1008d43a 	srli	r4,r2,16
 200a6dc:	44d1383a 	mul	r8,r8,r19
 200a6e0:	198d883a 	add	r6,r3,r6
 200a6e4:	10ffffcc 	andi	r3,r2,65535
 200a6e8:	30c7c83a 	sub	r3,r6,r3
 200a6ec:	380ed43a 	srli	r7,r7,16
 200a6f0:	4105883a 	add	r2,r8,r4
 200a6f4:	180dd43a 	srai	r6,r3,16
 200a6f8:	113fffcc 	andi	r4,r2,65535
 200a6fc:	390fc83a 	sub	r7,r7,r4
 200a700:	398d883a 	add	r6,r7,r6
 200a704:	300e943a 	slli	r7,r6,16
 200a708:	18ffffcc 	andi	r3,r3,65535
 200a70c:	1008d43a 	srli	r4,r2,16
 200a710:	38ceb03a 	or	r7,r7,r3
 200a714:	49c00015 	stw	r7,0(r9)
 200a718:	300dd43a 	srai	r6,r6,16
 200a71c:	4a400104 	addi	r9,r9,4
 200a720:	a17fe52e 	bgeu	r20,r5,200a6b8 <__alt_mem_epcs_flash_controller_0+0xfd0096b8>
 200a724:	b0800017 	ldw	r2,0(r22)
 200a728:	10000b1e 	bne	r2,zero,200a758 <quorem+0x120>
 200a72c:	b0bfff04 	addi	r2,r22,-4
 200a730:	a880082e 	bgeu	r21,r2,200a754 <quorem+0x11c>
 200a734:	b0ffff17 	ldw	r3,-4(r22)
 200a738:	18000326 	beq	r3,zero,200a748 <quorem+0x110>
 200a73c:	00000506 	br	200a754 <quorem+0x11c>
 200a740:	10c00017 	ldw	r3,0(r2)
 200a744:	1800031e 	bne	r3,zero,200a754 <quorem+0x11c>
 200a748:	10bfff04 	addi	r2,r2,-4
 200a74c:	94bfffc4 	addi	r18,r18,-1
 200a750:	a8bffb36 	bltu	r21,r2,200a740 <__alt_mem_epcs_flash_controller_0+0xfd009740>
 200a754:	84800415 	stw	r18,16(r16)
 200a758:	b80b883a 	mov	r5,r23
 200a75c:	8009883a 	mov	r4,r16
 200a760:	200de680 	call	200de68 <__mcmp>
 200a764:	10002616 	blt	r2,zero,200a800 <quorem+0x1c8>
 200a768:	9cc00044 	addi	r19,r19,1
 200a76c:	a805883a 	mov	r2,r21
 200a770:	000b883a 	mov	r5,zero
 200a774:	11000017 	ldw	r4,0(r2)
 200a778:	89800017 	ldw	r6,0(r17)
 200a77c:	10800104 	addi	r2,r2,4
 200a780:	20ffffcc 	andi	r3,r4,65535
 200a784:	194b883a 	add	r5,r3,r5
 200a788:	30ffffcc 	andi	r3,r6,65535
 200a78c:	28c7c83a 	sub	r3,r5,r3
 200a790:	300cd43a 	srli	r6,r6,16
 200a794:	2008d43a 	srli	r4,r4,16
 200a798:	180bd43a 	srai	r5,r3,16
 200a79c:	18ffffcc 	andi	r3,r3,65535
 200a7a0:	2189c83a 	sub	r4,r4,r6
 200a7a4:	2149883a 	add	r4,r4,r5
 200a7a8:	200c943a 	slli	r6,r4,16
 200a7ac:	8c400104 	addi	r17,r17,4
 200a7b0:	200bd43a 	srai	r5,r4,16
 200a7b4:	30c6b03a 	or	r3,r6,r3
 200a7b8:	10ffff15 	stw	r3,-4(r2)
 200a7bc:	a47fed2e 	bgeu	r20,r17,200a774 <__alt_mem_epcs_flash_controller_0+0xfd009774>
 200a7c0:	9485883a 	add	r2,r18,r18
 200a7c4:	1085883a 	add	r2,r2,r2
 200a7c8:	a887883a 	add	r3,r21,r2
 200a7cc:	18800017 	ldw	r2,0(r3)
 200a7d0:	10000b1e 	bne	r2,zero,200a800 <quorem+0x1c8>
 200a7d4:	18bfff04 	addi	r2,r3,-4
 200a7d8:	a880082e 	bgeu	r21,r2,200a7fc <quorem+0x1c4>
 200a7dc:	18ffff17 	ldw	r3,-4(r3)
 200a7e0:	18000326 	beq	r3,zero,200a7f0 <quorem+0x1b8>
 200a7e4:	00000506 	br	200a7fc <quorem+0x1c4>
 200a7e8:	10c00017 	ldw	r3,0(r2)
 200a7ec:	1800031e 	bne	r3,zero,200a7fc <quorem+0x1c4>
 200a7f0:	10bfff04 	addi	r2,r2,-4
 200a7f4:	94bfffc4 	addi	r18,r18,-1
 200a7f8:	a8bffb36 	bltu	r21,r2,200a7e8 <__alt_mem_epcs_flash_controller_0+0xfd0097e8>
 200a7fc:	84800415 	stw	r18,16(r16)
 200a800:	9805883a 	mov	r2,r19
 200a804:	dfc00817 	ldw	ra,32(sp)
 200a808:	ddc00717 	ldw	r23,28(sp)
 200a80c:	dd800617 	ldw	r22,24(sp)
 200a810:	dd400517 	ldw	r21,20(sp)
 200a814:	dd000417 	ldw	r20,16(sp)
 200a818:	dcc00317 	ldw	r19,12(sp)
 200a81c:	dc800217 	ldw	r18,8(sp)
 200a820:	dc400117 	ldw	r17,4(sp)
 200a824:	dc000017 	ldw	r16,0(sp)
 200a828:	dec00904 	addi	sp,sp,36
 200a82c:	f800283a 	ret
 200a830:	0005883a 	mov	r2,zero
 200a834:	003ff306 	br	200a804 <__alt_mem_epcs_flash_controller_0+0xfd009804>

0200a838 <_dtoa_r>:
 200a838:	20801017 	ldw	r2,64(r4)
 200a83c:	deffde04 	addi	sp,sp,-136
 200a840:	df002015 	stw	fp,128(sp)
 200a844:	dcc01b15 	stw	r19,108(sp)
 200a848:	dc801a15 	stw	r18,104(sp)
 200a84c:	dc401915 	stw	r17,100(sp)
 200a850:	dc001815 	stw	r16,96(sp)
 200a854:	dfc02115 	stw	ra,132(sp)
 200a858:	ddc01f15 	stw	r23,124(sp)
 200a85c:	dd801e15 	stw	r22,120(sp)
 200a860:	dd401d15 	stw	r21,116(sp)
 200a864:	dd001c15 	stw	r20,112(sp)
 200a868:	d9c00315 	stw	r7,12(sp)
 200a86c:	2039883a 	mov	fp,r4
 200a870:	3023883a 	mov	r17,r6
 200a874:	2825883a 	mov	r18,r5
 200a878:	dc002417 	ldw	r16,144(sp)
 200a87c:	3027883a 	mov	r19,r6
 200a880:	10000826 	beq	r2,zero,200a8a4 <_dtoa_r+0x6c>
 200a884:	21801117 	ldw	r6,68(r4)
 200a888:	00c00044 	movi	r3,1
 200a88c:	100b883a 	mov	r5,r2
 200a890:	1986983a 	sll	r3,r3,r6
 200a894:	11800115 	stw	r6,4(r2)
 200a898:	10c00215 	stw	r3,8(r2)
 200a89c:	200d6480 	call	200d648 <_Bfree>
 200a8a0:	e0001015 	stw	zero,64(fp)
 200a8a4:	88002e16 	blt	r17,zero,200a960 <_dtoa_r+0x128>
 200a8a8:	80000015 	stw	zero,0(r16)
 200a8ac:	889ffc2c 	andhi	r2,r17,32752
 200a8b0:	00dffc34 	movhi	r3,32752
 200a8b4:	10c01c26 	beq	r2,r3,200a928 <_dtoa_r+0xf0>
 200a8b8:	000d883a 	mov	r6,zero
 200a8bc:	000f883a 	mov	r7,zero
 200a8c0:	9009883a 	mov	r4,r18
 200a8c4:	980b883a 	mov	r5,r19
 200a8c8:	2012aec0 	call	2012aec <__eqdf2>
 200a8cc:	10002b1e 	bne	r2,zero,200a97c <_dtoa_r+0x144>
 200a8d0:	d9c02317 	ldw	r7,140(sp)
 200a8d4:	00800044 	movi	r2,1
 200a8d8:	38800015 	stw	r2,0(r7)
 200a8dc:	d8802517 	ldw	r2,148(sp)
 200a8e0:	10019e26 	beq	r2,zero,200af5c <_dtoa_r+0x724>
 200a8e4:	d8c02517 	ldw	r3,148(sp)
 200a8e8:	00808134 	movhi	r2,516
 200a8ec:	10b0e644 	addi	r2,r2,-15463
 200a8f0:	18800015 	stw	r2,0(r3)
 200a8f4:	10bfffc4 	addi	r2,r2,-1
 200a8f8:	dfc02117 	ldw	ra,132(sp)
 200a8fc:	df002017 	ldw	fp,128(sp)
 200a900:	ddc01f17 	ldw	r23,124(sp)
 200a904:	dd801e17 	ldw	r22,120(sp)
 200a908:	dd401d17 	ldw	r21,116(sp)
 200a90c:	dd001c17 	ldw	r20,112(sp)
 200a910:	dcc01b17 	ldw	r19,108(sp)
 200a914:	dc801a17 	ldw	r18,104(sp)
 200a918:	dc401917 	ldw	r17,100(sp)
 200a91c:	dc001817 	ldw	r16,96(sp)
 200a920:	dec02204 	addi	sp,sp,136
 200a924:	f800283a 	ret
 200a928:	d8c02317 	ldw	r3,140(sp)
 200a92c:	0089c3c4 	movi	r2,9999
 200a930:	18800015 	stw	r2,0(r3)
 200a934:	90017726 	beq	r18,zero,200af14 <_dtoa_r+0x6dc>
 200a938:	00808134 	movhi	r2,516
 200a93c:	10b0fa04 	addi	r2,r2,-15384
 200a940:	d9002517 	ldw	r4,148(sp)
 200a944:	203fec26 	beq	r4,zero,200a8f8 <__alt_mem_epcs_flash_controller_0+0xfd0098f8>
 200a948:	10c000c7 	ldb	r3,3(r2)
 200a94c:	1801781e 	bne	r3,zero,200af30 <_dtoa_r+0x6f8>
 200a950:	10c000c4 	addi	r3,r2,3
 200a954:	d9802517 	ldw	r6,148(sp)
 200a958:	30c00015 	stw	r3,0(r6)
 200a95c:	003fe606 	br	200a8f8 <__alt_mem_epcs_flash_controller_0+0xfd0098f8>
 200a960:	04e00034 	movhi	r19,32768
 200a964:	9cffffc4 	addi	r19,r19,-1
 200a968:	00800044 	movi	r2,1
 200a96c:	8ce6703a 	and	r19,r17,r19
 200a970:	80800015 	stw	r2,0(r16)
 200a974:	9823883a 	mov	r17,r19
 200a978:	003fcc06 	br	200a8ac <__alt_mem_epcs_flash_controller_0+0xfd0098ac>
 200a97c:	d8800204 	addi	r2,sp,8
 200a980:	d8800015 	stw	r2,0(sp)
 200a984:	d9c00104 	addi	r7,sp,4
 200a988:	900b883a 	mov	r5,r18
 200a98c:	980d883a 	mov	r6,r19
 200a990:	e009883a 	mov	r4,fp
 200a994:	8820d53a 	srli	r16,r17,20
 200a998:	200e2340 	call	200e234 <__d2b>
 200a99c:	d8800915 	stw	r2,36(sp)
 200a9a0:	8001651e 	bne	r16,zero,200af38 <_dtoa_r+0x700>
 200a9a4:	dd800217 	ldw	r22,8(sp)
 200a9a8:	dc000117 	ldw	r16,4(sp)
 200a9ac:	00800804 	movi	r2,32
 200a9b0:	b421883a 	add	r16,r22,r16
 200a9b4:	80c10c84 	addi	r3,r16,1074
 200a9b8:	10c2d10e 	bge	r2,r3,200b500 <_dtoa_r+0xcc8>
 200a9bc:	00801004 	movi	r2,64
 200a9c0:	81010484 	addi	r4,r16,1042
 200a9c4:	10c7c83a 	sub	r3,r2,r3
 200a9c8:	9108d83a 	srl	r4,r18,r4
 200a9cc:	88e2983a 	sll	r17,r17,r3
 200a9d0:	2448b03a 	or	r4,r4,r17
 200a9d4:	2012c500 	call	2012c50 <__floatunsidf>
 200a9d8:	017f8434 	movhi	r5,65040
 200a9dc:	01800044 	movi	r6,1
 200a9e0:	1009883a 	mov	r4,r2
 200a9e4:	194b883a 	add	r5,r3,r5
 200a9e8:	843fffc4 	addi	r16,r16,-1
 200a9ec:	d9801115 	stw	r6,68(sp)
 200a9f0:	000d883a 	mov	r6,zero
 200a9f4:	01cffe34 	movhi	r7,16376
 200a9f8:	200451c0 	call	200451c <__subdf3>
 200a9fc:	0198dbf4 	movhi	r6,25455
 200aa00:	01cff4f4 	movhi	r7,16339
 200aa04:	3190d844 	addi	r6,r6,17249
 200aa08:	39e1e9c4 	addi	r7,r7,-30809
 200aa0c:	1009883a 	mov	r4,r2
 200aa10:	180b883a 	mov	r5,r3
 200aa14:	2003e040 	call	2003e04 <__muldf3>
 200aa18:	01a2d874 	movhi	r6,35681
 200aa1c:	01cff1f4 	movhi	r7,16327
 200aa20:	31b22cc4 	addi	r6,r6,-14157
 200aa24:	39e28a04 	addi	r7,r7,-30168
 200aa28:	180b883a 	mov	r5,r3
 200aa2c:	1009883a 	mov	r4,r2
 200aa30:	2002b7c0 	call	2002b7c <__adddf3>
 200aa34:	8009883a 	mov	r4,r16
 200aa38:	1029883a 	mov	r20,r2
 200aa3c:	1823883a 	mov	r17,r3
 200aa40:	2004e980 	call	2004e98 <__floatsidf>
 200aa44:	019427f4 	movhi	r6,20639
 200aa48:	01cff4f4 	movhi	r7,16339
 200aa4c:	319e7ec4 	addi	r6,r6,31227
 200aa50:	39d104c4 	addi	r7,r7,17427
 200aa54:	1009883a 	mov	r4,r2
 200aa58:	180b883a 	mov	r5,r3
 200aa5c:	2003e040 	call	2003e04 <__muldf3>
 200aa60:	100d883a 	mov	r6,r2
 200aa64:	180f883a 	mov	r7,r3
 200aa68:	a009883a 	mov	r4,r20
 200aa6c:	880b883a 	mov	r5,r17
 200aa70:	2002b7c0 	call	2002b7c <__adddf3>
 200aa74:	1009883a 	mov	r4,r2
 200aa78:	180b883a 	mov	r5,r3
 200aa7c:	1029883a 	mov	r20,r2
 200aa80:	1823883a 	mov	r17,r3
 200aa84:	2004e180 	call	2004e18 <__fixdfsi>
 200aa88:	000d883a 	mov	r6,zero
 200aa8c:	000f883a 	mov	r7,zero
 200aa90:	a009883a 	mov	r4,r20
 200aa94:	880b883a 	mov	r5,r17
 200aa98:	d8800515 	stw	r2,20(sp)
 200aa9c:	2003d100 	call	2003d10 <__ledf2>
 200aaa0:	10028716 	blt	r2,zero,200b4c0 <_dtoa_r+0xc88>
 200aaa4:	d8c00517 	ldw	r3,20(sp)
 200aaa8:	00800584 	movi	r2,22
 200aaac:	10c27536 	bltu	r2,r3,200b484 <_dtoa_r+0xc4c>
 200aab0:	180490fa 	slli	r2,r3,3
 200aab4:	00c08134 	movhi	r3,516
 200aab8:	18f11504 	addi	r3,r3,-15276
 200aabc:	1885883a 	add	r2,r3,r2
 200aac0:	11000017 	ldw	r4,0(r2)
 200aac4:	11400117 	ldw	r5,4(r2)
 200aac8:	900d883a 	mov	r6,r18
 200aacc:	980f883a 	mov	r7,r19
 200aad0:	2012b740 	call	2012b74 <__gedf2>
 200aad4:	00828d0e 	bge	zero,r2,200b50c <_dtoa_r+0xcd4>
 200aad8:	d9000517 	ldw	r4,20(sp)
 200aadc:	d8000e15 	stw	zero,56(sp)
 200aae0:	213fffc4 	addi	r4,r4,-1
 200aae4:	d9000515 	stw	r4,20(sp)
 200aae8:	b42dc83a 	sub	r22,r22,r16
 200aaec:	b5bfffc4 	addi	r22,r22,-1
 200aaf0:	b0026f16 	blt	r22,zero,200b4b0 <_dtoa_r+0xc78>
 200aaf4:	d8000815 	stw	zero,32(sp)
 200aaf8:	d9c00517 	ldw	r7,20(sp)
 200aafc:	38026416 	blt	r7,zero,200b490 <_dtoa_r+0xc58>
 200ab00:	b1ed883a 	add	r22,r22,r7
 200ab04:	d9c00d15 	stw	r7,52(sp)
 200ab08:	d8000a15 	stw	zero,40(sp)
 200ab0c:	d9800317 	ldw	r6,12(sp)
 200ab10:	00800244 	movi	r2,9
 200ab14:	11811436 	bltu	r2,r6,200af68 <_dtoa_r+0x730>
 200ab18:	00800144 	movi	r2,5
 200ab1c:	1184e10e 	bge	r2,r6,200bea4 <_dtoa_r+0x166c>
 200ab20:	31bfff04 	addi	r6,r6,-4
 200ab24:	d9800315 	stw	r6,12(sp)
 200ab28:	0023883a 	mov	r17,zero
 200ab2c:	d9800317 	ldw	r6,12(sp)
 200ab30:	008000c4 	movi	r2,3
 200ab34:	30836726 	beq	r6,r2,200b8d4 <_dtoa_r+0x109c>
 200ab38:	1183410e 	bge	r2,r6,200b840 <_dtoa_r+0x1008>
 200ab3c:	d9c00317 	ldw	r7,12(sp)
 200ab40:	00800104 	movi	r2,4
 200ab44:	38827c26 	beq	r7,r2,200b538 <_dtoa_r+0xd00>
 200ab48:	00800144 	movi	r2,5
 200ab4c:	3884c41e 	bne	r7,r2,200be60 <_dtoa_r+0x1628>
 200ab50:	00800044 	movi	r2,1
 200ab54:	d8800b15 	stw	r2,44(sp)
 200ab58:	d8c00517 	ldw	r3,20(sp)
 200ab5c:	d9002217 	ldw	r4,136(sp)
 200ab60:	1907883a 	add	r3,r3,r4
 200ab64:	19800044 	addi	r6,r3,1
 200ab68:	d8c00c15 	stw	r3,48(sp)
 200ab6c:	d9800615 	stw	r6,24(sp)
 200ab70:	0183a40e 	bge	zero,r6,200ba04 <_dtoa_r+0x11cc>
 200ab74:	d9800617 	ldw	r6,24(sp)
 200ab78:	3021883a 	mov	r16,r6
 200ab7c:	e0001115 	stw	zero,68(fp)
 200ab80:	008005c4 	movi	r2,23
 200ab84:	1184c92e 	bgeu	r2,r6,200beac <_dtoa_r+0x1674>
 200ab88:	00c00044 	movi	r3,1
 200ab8c:	00800104 	movi	r2,4
 200ab90:	1085883a 	add	r2,r2,r2
 200ab94:	11000504 	addi	r4,r2,20
 200ab98:	180b883a 	mov	r5,r3
 200ab9c:	18c00044 	addi	r3,r3,1
 200aba0:	313ffb2e 	bgeu	r6,r4,200ab90 <__alt_mem_epcs_flash_controller_0+0xfd009b90>
 200aba4:	e1401115 	stw	r5,68(fp)
 200aba8:	e009883a 	mov	r4,fp
 200abac:	200d5a00 	call	200d5a0 <_Balloc>
 200abb0:	d8800715 	stw	r2,28(sp)
 200abb4:	e0801015 	stw	r2,64(fp)
 200abb8:	00800384 	movi	r2,14
 200abbc:	1400f736 	bltu	r2,r16,200af9c <_dtoa_r+0x764>
 200abc0:	8800f626 	beq	r17,zero,200af9c <_dtoa_r+0x764>
 200abc4:	d9c00517 	ldw	r7,20(sp)
 200abc8:	01c39a0e 	bge	zero,r7,200ba34 <_dtoa_r+0x11fc>
 200abcc:	388003cc 	andi	r2,r7,15
 200abd0:	100490fa 	slli	r2,r2,3
 200abd4:	382bd13a 	srai	r21,r7,4
 200abd8:	00c08134 	movhi	r3,516
 200abdc:	18f11504 	addi	r3,r3,-15276
 200abe0:	1885883a 	add	r2,r3,r2
 200abe4:	a8c0040c 	andi	r3,r21,16
 200abe8:	12400017 	ldw	r9,0(r2)
 200abec:	12000117 	ldw	r8,4(r2)
 200abf0:	18037926 	beq	r3,zero,200b9d8 <_dtoa_r+0x11a0>
 200abf4:	00808134 	movhi	r2,516
 200abf8:	10b10b04 	addi	r2,r2,-15316
 200abfc:	11800817 	ldw	r6,32(r2)
 200ac00:	11c00917 	ldw	r7,36(r2)
 200ac04:	9009883a 	mov	r4,r18
 200ac08:	980b883a 	mov	r5,r19
 200ac0c:	da001715 	stw	r8,92(sp)
 200ac10:	da401615 	stw	r9,88(sp)
 200ac14:	20034280 	call	2003428 <__divdf3>
 200ac18:	da001717 	ldw	r8,92(sp)
 200ac1c:	da401617 	ldw	r9,88(sp)
 200ac20:	ad4003cc 	andi	r21,r21,15
 200ac24:	040000c4 	movi	r16,3
 200ac28:	1023883a 	mov	r17,r2
 200ac2c:	1829883a 	mov	r20,r3
 200ac30:	a8001126 	beq	r21,zero,200ac78 <_dtoa_r+0x440>
 200ac34:	05c08134 	movhi	r23,516
 200ac38:	bdf10b04 	addi	r23,r23,-15316
 200ac3c:	4805883a 	mov	r2,r9
 200ac40:	4007883a 	mov	r3,r8
 200ac44:	a980004c 	andi	r6,r21,1
 200ac48:	1009883a 	mov	r4,r2
 200ac4c:	a82bd07a 	srai	r21,r21,1
 200ac50:	180b883a 	mov	r5,r3
 200ac54:	30000426 	beq	r6,zero,200ac68 <_dtoa_r+0x430>
 200ac58:	b9800017 	ldw	r6,0(r23)
 200ac5c:	b9c00117 	ldw	r7,4(r23)
 200ac60:	84000044 	addi	r16,r16,1
 200ac64:	2003e040 	call	2003e04 <__muldf3>
 200ac68:	bdc00204 	addi	r23,r23,8
 200ac6c:	a83ff51e 	bne	r21,zero,200ac44 <__alt_mem_epcs_flash_controller_0+0xfd009c44>
 200ac70:	1013883a 	mov	r9,r2
 200ac74:	1811883a 	mov	r8,r3
 200ac78:	480d883a 	mov	r6,r9
 200ac7c:	400f883a 	mov	r7,r8
 200ac80:	8809883a 	mov	r4,r17
 200ac84:	a00b883a 	mov	r5,r20
 200ac88:	20034280 	call	2003428 <__divdf3>
 200ac8c:	d8800f15 	stw	r2,60(sp)
 200ac90:	d8c01015 	stw	r3,64(sp)
 200ac94:	d8c00e17 	ldw	r3,56(sp)
 200ac98:	18000626 	beq	r3,zero,200acb4 <_dtoa_r+0x47c>
 200ac9c:	d9000f17 	ldw	r4,60(sp)
 200aca0:	d9401017 	ldw	r5,64(sp)
 200aca4:	000d883a 	mov	r6,zero
 200aca8:	01cffc34 	movhi	r7,16368
 200acac:	2003d100 	call	2003d10 <__ledf2>
 200acb0:	10040b16 	blt	r2,zero,200bce0 <_dtoa_r+0x14a8>
 200acb4:	8009883a 	mov	r4,r16
 200acb8:	2004e980 	call	2004e98 <__floatsidf>
 200acbc:	d9800f17 	ldw	r6,60(sp)
 200acc0:	d9c01017 	ldw	r7,64(sp)
 200acc4:	1009883a 	mov	r4,r2
 200acc8:	180b883a 	mov	r5,r3
 200accc:	2003e040 	call	2003e04 <__muldf3>
 200acd0:	000d883a 	mov	r6,zero
 200acd4:	01d00734 	movhi	r7,16412
 200acd8:	1009883a 	mov	r4,r2
 200acdc:	180b883a 	mov	r5,r3
 200ace0:	2002b7c0 	call	2002b7c <__adddf3>
 200ace4:	1021883a 	mov	r16,r2
 200ace8:	d8800617 	ldw	r2,24(sp)
 200acec:	047f3034 	movhi	r17,64704
 200acf0:	1c63883a 	add	r17,r3,r17
 200acf4:	10031826 	beq	r2,zero,200b958 <_dtoa_r+0x1120>
 200acf8:	d8c00517 	ldw	r3,20(sp)
 200acfc:	db000617 	ldw	r12,24(sp)
 200ad00:	d8c01315 	stw	r3,76(sp)
 200ad04:	d9000b17 	ldw	r4,44(sp)
 200ad08:	20038f26 	beq	r4,zero,200bb48 <_dtoa_r+0x1310>
 200ad0c:	60bfffc4 	addi	r2,r12,-1
 200ad10:	100490fa 	slli	r2,r2,3
 200ad14:	00c08134 	movhi	r3,516
 200ad18:	18f11504 	addi	r3,r3,-15276
 200ad1c:	1885883a 	add	r2,r3,r2
 200ad20:	11800017 	ldw	r6,0(r2)
 200ad24:	11c00117 	ldw	r7,4(r2)
 200ad28:	d8800717 	ldw	r2,28(sp)
 200ad2c:	0009883a 	mov	r4,zero
 200ad30:	014ff834 	movhi	r5,16352
 200ad34:	db001615 	stw	r12,88(sp)
 200ad38:	15c00044 	addi	r23,r2,1
 200ad3c:	20034280 	call	2003428 <__divdf3>
 200ad40:	800d883a 	mov	r6,r16
 200ad44:	880f883a 	mov	r7,r17
 200ad48:	1009883a 	mov	r4,r2
 200ad4c:	180b883a 	mov	r5,r3
 200ad50:	200451c0 	call	200451c <__subdf3>
 200ad54:	d9401017 	ldw	r5,64(sp)
 200ad58:	d9000f17 	ldw	r4,60(sp)
 200ad5c:	102b883a 	mov	r21,r2
 200ad60:	d8c01215 	stw	r3,72(sp)
 200ad64:	2004e180 	call	2004e18 <__fixdfsi>
 200ad68:	1009883a 	mov	r4,r2
 200ad6c:	1029883a 	mov	r20,r2
 200ad70:	2004e980 	call	2004e98 <__floatsidf>
 200ad74:	d9000f17 	ldw	r4,60(sp)
 200ad78:	d9401017 	ldw	r5,64(sp)
 200ad7c:	100d883a 	mov	r6,r2
 200ad80:	180f883a 	mov	r7,r3
 200ad84:	200451c0 	call	200451c <__subdf3>
 200ad88:	1823883a 	mov	r17,r3
 200ad8c:	d8c00717 	ldw	r3,28(sp)
 200ad90:	d9401217 	ldw	r5,72(sp)
 200ad94:	a2000c04 	addi	r8,r20,48
 200ad98:	1021883a 	mov	r16,r2
 200ad9c:	1a000005 	stb	r8,0(r3)
 200ada0:	800d883a 	mov	r6,r16
 200ada4:	880f883a 	mov	r7,r17
 200ada8:	a809883a 	mov	r4,r21
 200adac:	4029883a 	mov	r20,r8
 200adb0:	2012b740 	call	2012b74 <__gedf2>
 200adb4:	00841d16 	blt	zero,r2,200be2c <_dtoa_r+0x15f4>
 200adb8:	800d883a 	mov	r6,r16
 200adbc:	880f883a 	mov	r7,r17
 200adc0:	0009883a 	mov	r4,zero
 200adc4:	014ffc34 	movhi	r5,16368
 200adc8:	200451c0 	call	200451c <__subdf3>
 200adcc:	d9401217 	ldw	r5,72(sp)
 200add0:	100d883a 	mov	r6,r2
 200add4:	180f883a 	mov	r7,r3
 200add8:	a809883a 	mov	r4,r21
 200addc:	2012b740 	call	2012b74 <__gedf2>
 200ade0:	db001617 	ldw	r12,88(sp)
 200ade4:	00840e16 	blt	zero,r2,200be20 <_dtoa_r+0x15e8>
 200ade8:	00800044 	movi	r2,1
 200adec:	13006b0e 	bge	r2,r12,200af9c <_dtoa_r+0x764>
 200adf0:	d9000717 	ldw	r4,28(sp)
 200adf4:	dd800f15 	stw	r22,60(sp)
 200adf8:	dcc01015 	stw	r19,64(sp)
 200adfc:	2319883a 	add	r12,r4,r12
 200ae00:	dcc01217 	ldw	r19,72(sp)
 200ae04:	602d883a 	mov	r22,r12
 200ae08:	dc801215 	stw	r18,72(sp)
 200ae0c:	b825883a 	mov	r18,r23
 200ae10:	00000906 	br	200ae38 <_dtoa_r+0x600>
 200ae14:	200451c0 	call	200451c <__subdf3>
 200ae18:	a80d883a 	mov	r6,r21
 200ae1c:	980f883a 	mov	r7,r19
 200ae20:	1009883a 	mov	r4,r2
 200ae24:	180b883a 	mov	r5,r3
 200ae28:	2003d100 	call	2003d10 <__ledf2>
 200ae2c:	1003e816 	blt	r2,zero,200bdd0 <_dtoa_r+0x1598>
 200ae30:	b825883a 	mov	r18,r23
 200ae34:	bd83e926 	beq	r23,r22,200bddc <_dtoa_r+0x15a4>
 200ae38:	a809883a 	mov	r4,r21
 200ae3c:	980b883a 	mov	r5,r19
 200ae40:	000d883a 	mov	r6,zero
 200ae44:	01d00934 	movhi	r7,16420
 200ae48:	2003e040 	call	2003e04 <__muldf3>
 200ae4c:	000d883a 	mov	r6,zero
 200ae50:	01d00934 	movhi	r7,16420
 200ae54:	8009883a 	mov	r4,r16
 200ae58:	880b883a 	mov	r5,r17
 200ae5c:	102b883a 	mov	r21,r2
 200ae60:	1827883a 	mov	r19,r3
 200ae64:	2003e040 	call	2003e04 <__muldf3>
 200ae68:	180b883a 	mov	r5,r3
 200ae6c:	1009883a 	mov	r4,r2
 200ae70:	1821883a 	mov	r16,r3
 200ae74:	1023883a 	mov	r17,r2
 200ae78:	2004e180 	call	2004e18 <__fixdfsi>
 200ae7c:	1009883a 	mov	r4,r2
 200ae80:	1029883a 	mov	r20,r2
 200ae84:	2004e980 	call	2004e98 <__floatsidf>
 200ae88:	8809883a 	mov	r4,r17
 200ae8c:	800b883a 	mov	r5,r16
 200ae90:	100d883a 	mov	r6,r2
 200ae94:	180f883a 	mov	r7,r3
 200ae98:	200451c0 	call	200451c <__subdf3>
 200ae9c:	a5000c04 	addi	r20,r20,48
 200aea0:	a80d883a 	mov	r6,r21
 200aea4:	980f883a 	mov	r7,r19
 200aea8:	1009883a 	mov	r4,r2
 200aeac:	180b883a 	mov	r5,r3
 200aeb0:	95000005 	stb	r20,0(r18)
 200aeb4:	1021883a 	mov	r16,r2
 200aeb8:	1823883a 	mov	r17,r3
 200aebc:	2003d100 	call	2003d10 <__ledf2>
 200aec0:	bdc00044 	addi	r23,r23,1
 200aec4:	800d883a 	mov	r6,r16
 200aec8:	880f883a 	mov	r7,r17
 200aecc:	0009883a 	mov	r4,zero
 200aed0:	014ffc34 	movhi	r5,16368
 200aed4:	103fcf0e 	bge	r2,zero,200ae14 <__alt_mem_epcs_flash_controller_0+0xfd009e14>
 200aed8:	d8c01317 	ldw	r3,76(sp)
 200aedc:	d8c00515 	stw	r3,20(sp)
 200aee0:	d9400917 	ldw	r5,36(sp)
 200aee4:	e009883a 	mov	r4,fp
 200aee8:	200d6480 	call	200d648 <_Bfree>
 200aeec:	d9000517 	ldw	r4,20(sp)
 200aef0:	d9802317 	ldw	r6,140(sp)
 200aef4:	d9c02517 	ldw	r7,148(sp)
 200aef8:	b8000005 	stb	zero,0(r23)
 200aefc:	20800044 	addi	r2,r4,1
 200af00:	30800015 	stw	r2,0(r6)
 200af04:	3802aa26 	beq	r7,zero,200b9b0 <_dtoa_r+0x1178>
 200af08:	3dc00015 	stw	r23,0(r7)
 200af0c:	d8800717 	ldw	r2,28(sp)
 200af10:	003e7906 	br	200a8f8 <__alt_mem_epcs_flash_controller_0+0xfd0098f8>
 200af14:	00800434 	movhi	r2,16
 200af18:	10bfffc4 	addi	r2,r2,-1
 200af1c:	88a2703a 	and	r17,r17,r2
 200af20:	883e851e 	bne	r17,zero,200a938 <__alt_mem_epcs_flash_controller_0+0xfd009938>
 200af24:	00808134 	movhi	r2,516
 200af28:	10b0f704 	addi	r2,r2,-15396
 200af2c:	003e8406 	br	200a940 <__alt_mem_epcs_flash_controller_0+0xfd009940>
 200af30:	10c00204 	addi	r3,r2,8
 200af34:	003e8706 	br	200a954 <__alt_mem_epcs_flash_controller_0+0xfd009954>
 200af38:	01400434 	movhi	r5,16
 200af3c:	297fffc4 	addi	r5,r5,-1
 200af40:	994a703a 	and	r5,r19,r5
 200af44:	9009883a 	mov	r4,r18
 200af48:	843f0044 	addi	r16,r16,-1023
 200af4c:	294ffc34 	orhi	r5,r5,16368
 200af50:	dd800217 	ldw	r22,8(sp)
 200af54:	d8001115 	stw	zero,68(sp)
 200af58:	003ea506 	br	200a9f0 <__alt_mem_epcs_flash_controller_0+0xfd0099f0>
 200af5c:	00808134 	movhi	r2,516
 200af60:	10b0e604 	addi	r2,r2,-15464
 200af64:	003e6406 	br	200a8f8 <__alt_mem_epcs_flash_controller_0+0xfd0098f8>
 200af68:	e0001115 	stw	zero,68(fp)
 200af6c:	000b883a 	mov	r5,zero
 200af70:	e009883a 	mov	r4,fp
 200af74:	200d5a00 	call	200d5a0 <_Balloc>
 200af78:	01bfffc4 	movi	r6,-1
 200af7c:	01c00044 	movi	r7,1
 200af80:	d8800715 	stw	r2,28(sp)
 200af84:	d9800c15 	stw	r6,48(sp)
 200af88:	e0801015 	stw	r2,64(fp)
 200af8c:	d8000315 	stw	zero,12(sp)
 200af90:	d9c00b15 	stw	r7,44(sp)
 200af94:	d9800615 	stw	r6,24(sp)
 200af98:	d8002215 	stw	zero,136(sp)
 200af9c:	d8800117 	ldw	r2,4(sp)
 200afa0:	10008916 	blt	r2,zero,200b1c8 <_dtoa_r+0x990>
 200afa4:	d9000517 	ldw	r4,20(sp)
 200afa8:	00c00384 	movi	r3,14
 200afac:	19008616 	blt	r3,r4,200b1c8 <_dtoa_r+0x990>
 200afb0:	200490fa 	slli	r2,r4,3
 200afb4:	00c08134 	movhi	r3,516
 200afb8:	d9802217 	ldw	r6,136(sp)
 200afbc:	18f11504 	addi	r3,r3,-15276
 200afc0:	1885883a 	add	r2,r3,r2
 200afc4:	14000017 	ldw	r16,0(r2)
 200afc8:	14400117 	ldw	r17,4(r2)
 200afcc:	30016316 	blt	r6,zero,200b55c <_dtoa_r+0xd24>
 200afd0:	800d883a 	mov	r6,r16
 200afd4:	880f883a 	mov	r7,r17
 200afd8:	9009883a 	mov	r4,r18
 200afdc:	980b883a 	mov	r5,r19
 200afe0:	20034280 	call	2003428 <__divdf3>
 200afe4:	180b883a 	mov	r5,r3
 200afe8:	1009883a 	mov	r4,r2
 200afec:	2004e180 	call	2004e18 <__fixdfsi>
 200aff0:	1009883a 	mov	r4,r2
 200aff4:	102b883a 	mov	r21,r2
 200aff8:	2004e980 	call	2004e98 <__floatsidf>
 200affc:	800d883a 	mov	r6,r16
 200b000:	880f883a 	mov	r7,r17
 200b004:	1009883a 	mov	r4,r2
 200b008:	180b883a 	mov	r5,r3
 200b00c:	2003e040 	call	2003e04 <__muldf3>
 200b010:	100d883a 	mov	r6,r2
 200b014:	180f883a 	mov	r7,r3
 200b018:	9009883a 	mov	r4,r18
 200b01c:	980b883a 	mov	r5,r19
 200b020:	200451c0 	call	200451c <__subdf3>
 200b024:	d9c00717 	ldw	r7,28(sp)
 200b028:	1009883a 	mov	r4,r2
 200b02c:	a8800c04 	addi	r2,r21,48
 200b030:	38800005 	stb	r2,0(r7)
 200b034:	3dc00044 	addi	r23,r7,1
 200b038:	d9c00617 	ldw	r7,24(sp)
 200b03c:	01800044 	movi	r6,1
 200b040:	180b883a 	mov	r5,r3
 200b044:	2005883a 	mov	r2,r4
 200b048:	39803826 	beq	r7,r6,200b12c <_dtoa_r+0x8f4>
 200b04c:	000d883a 	mov	r6,zero
 200b050:	01d00934 	movhi	r7,16420
 200b054:	2003e040 	call	2003e04 <__muldf3>
 200b058:	000d883a 	mov	r6,zero
 200b05c:	000f883a 	mov	r7,zero
 200b060:	1009883a 	mov	r4,r2
 200b064:	180b883a 	mov	r5,r3
 200b068:	1025883a 	mov	r18,r2
 200b06c:	1827883a 	mov	r19,r3
 200b070:	2012aec0 	call	2012aec <__eqdf2>
 200b074:	103f9a26 	beq	r2,zero,200aee0 <__alt_mem_epcs_flash_controller_0+0xfd009ee0>
 200b078:	d9c00617 	ldw	r7,24(sp)
 200b07c:	d8c00717 	ldw	r3,28(sp)
 200b080:	b829883a 	mov	r20,r23
 200b084:	38bfffc4 	addi	r2,r7,-1
 200b088:	18ad883a 	add	r22,r3,r2
 200b08c:	00000a06 	br	200b0b8 <_dtoa_r+0x880>
 200b090:	2003e040 	call	2003e04 <__muldf3>
 200b094:	000d883a 	mov	r6,zero
 200b098:	000f883a 	mov	r7,zero
 200b09c:	1009883a 	mov	r4,r2
 200b0a0:	180b883a 	mov	r5,r3
 200b0a4:	1025883a 	mov	r18,r2
 200b0a8:	1827883a 	mov	r19,r3
 200b0ac:	b829883a 	mov	r20,r23
 200b0b0:	2012aec0 	call	2012aec <__eqdf2>
 200b0b4:	103f8a26 	beq	r2,zero,200aee0 <__alt_mem_epcs_flash_controller_0+0xfd009ee0>
 200b0b8:	800d883a 	mov	r6,r16
 200b0bc:	880f883a 	mov	r7,r17
 200b0c0:	9009883a 	mov	r4,r18
 200b0c4:	980b883a 	mov	r5,r19
 200b0c8:	20034280 	call	2003428 <__divdf3>
 200b0cc:	180b883a 	mov	r5,r3
 200b0d0:	1009883a 	mov	r4,r2
 200b0d4:	2004e180 	call	2004e18 <__fixdfsi>
 200b0d8:	1009883a 	mov	r4,r2
 200b0dc:	102b883a 	mov	r21,r2
 200b0e0:	2004e980 	call	2004e98 <__floatsidf>
 200b0e4:	800d883a 	mov	r6,r16
 200b0e8:	880f883a 	mov	r7,r17
 200b0ec:	1009883a 	mov	r4,r2
 200b0f0:	180b883a 	mov	r5,r3
 200b0f4:	2003e040 	call	2003e04 <__muldf3>
 200b0f8:	100d883a 	mov	r6,r2
 200b0fc:	180f883a 	mov	r7,r3
 200b100:	9009883a 	mov	r4,r18
 200b104:	980b883a 	mov	r5,r19
 200b108:	200451c0 	call	200451c <__subdf3>
 200b10c:	aa000c04 	addi	r8,r21,48
 200b110:	a2000005 	stb	r8,0(r20)
 200b114:	000d883a 	mov	r6,zero
 200b118:	01d00934 	movhi	r7,16420
 200b11c:	1009883a 	mov	r4,r2
 200b120:	180b883a 	mov	r5,r3
 200b124:	a5c00044 	addi	r23,r20,1
 200b128:	b53fd91e 	bne	r22,r20,200b090 <__alt_mem_epcs_flash_controller_0+0xfd00a090>
 200b12c:	100d883a 	mov	r6,r2
 200b130:	180f883a 	mov	r7,r3
 200b134:	1009883a 	mov	r4,r2
 200b138:	180b883a 	mov	r5,r3
 200b13c:	2002b7c0 	call	2002b7c <__adddf3>
 200b140:	100d883a 	mov	r6,r2
 200b144:	180f883a 	mov	r7,r3
 200b148:	8009883a 	mov	r4,r16
 200b14c:	880b883a 	mov	r5,r17
 200b150:	1027883a 	mov	r19,r2
 200b154:	1825883a 	mov	r18,r3
 200b158:	2003d100 	call	2003d10 <__ledf2>
 200b15c:	10000816 	blt	r2,zero,200b180 <_dtoa_r+0x948>
 200b160:	980d883a 	mov	r6,r19
 200b164:	900f883a 	mov	r7,r18
 200b168:	8009883a 	mov	r4,r16
 200b16c:	880b883a 	mov	r5,r17
 200b170:	2012aec0 	call	2012aec <__eqdf2>
 200b174:	103f5a1e 	bne	r2,zero,200aee0 <__alt_mem_epcs_flash_controller_0+0xfd009ee0>
 200b178:	ad40004c 	andi	r21,r21,1
 200b17c:	a83f5826 	beq	r21,zero,200aee0 <__alt_mem_epcs_flash_controller_0+0xfd009ee0>
 200b180:	bd3fffc3 	ldbu	r20,-1(r23)
 200b184:	b8bfffc4 	addi	r2,r23,-1
 200b188:	1007883a 	mov	r3,r2
 200b18c:	01400e44 	movi	r5,57
 200b190:	d9800717 	ldw	r6,28(sp)
 200b194:	00000506 	br	200b1ac <_dtoa_r+0x974>
 200b198:	18ffffc4 	addi	r3,r3,-1
 200b19c:	11824726 	beq	r2,r6,200babc <_dtoa_r+0x1284>
 200b1a0:	1d000003 	ldbu	r20,0(r3)
 200b1a4:	102f883a 	mov	r23,r2
 200b1a8:	10bfffc4 	addi	r2,r2,-1
 200b1ac:	a1003fcc 	andi	r4,r20,255
 200b1b0:	2100201c 	xori	r4,r4,128
 200b1b4:	213fe004 	addi	r4,r4,-128
 200b1b8:	217ff726 	beq	r4,r5,200b198 <__alt_mem_epcs_flash_controller_0+0xfd00a198>
 200b1bc:	a2000044 	addi	r8,r20,1
 200b1c0:	12000005 	stb	r8,0(r2)
 200b1c4:	003f4606 	br	200aee0 <__alt_mem_epcs_flash_controller_0+0xfd009ee0>
 200b1c8:	d9000b17 	ldw	r4,44(sp)
 200b1cc:	2000c826 	beq	r4,zero,200b4f0 <_dtoa_r+0xcb8>
 200b1d0:	d9800317 	ldw	r6,12(sp)
 200b1d4:	00c00044 	movi	r3,1
 200b1d8:	1980f90e 	bge	r3,r6,200b5c0 <_dtoa_r+0xd88>
 200b1dc:	d8800617 	ldw	r2,24(sp)
 200b1e0:	d8c00a17 	ldw	r3,40(sp)
 200b1e4:	157fffc4 	addi	r21,r2,-1
 200b1e8:	1d41f316 	blt	r3,r21,200b9b8 <_dtoa_r+0x1180>
 200b1ec:	1d6bc83a 	sub	r21,r3,r21
 200b1f0:	d9c00617 	ldw	r7,24(sp)
 200b1f4:	3802aa16 	blt	r7,zero,200bca0 <_dtoa_r+0x1468>
 200b1f8:	dd000817 	ldw	r20,32(sp)
 200b1fc:	d8800617 	ldw	r2,24(sp)
 200b200:	d8c00817 	ldw	r3,32(sp)
 200b204:	01400044 	movi	r5,1
 200b208:	e009883a 	mov	r4,fp
 200b20c:	1887883a 	add	r3,r3,r2
 200b210:	d8c00815 	stw	r3,32(sp)
 200b214:	b0ad883a 	add	r22,r22,r2
 200b218:	200d9ac0 	call	200d9ac <__i2b>
 200b21c:	1023883a 	mov	r17,r2
 200b220:	a0000826 	beq	r20,zero,200b244 <_dtoa_r+0xa0c>
 200b224:	0580070e 	bge	zero,r22,200b244 <_dtoa_r+0xa0c>
 200b228:	a005883a 	mov	r2,r20
 200b22c:	b500b916 	blt	r22,r20,200b514 <_dtoa_r+0xcdc>
 200b230:	d9000817 	ldw	r4,32(sp)
 200b234:	a0a9c83a 	sub	r20,r20,r2
 200b238:	b0adc83a 	sub	r22,r22,r2
 200b23c:	2089c83a 	sub	r4,r4,r2
 200b240:	d9000815 	stw	r4,32(sp)
 200b244:	d9800a17 	ldw	r6,40(sp)
 200b248:	0181810e 	bge	zero,r6,200b850 <_dtoa_r+0x1018>
 200b24c:	d9c00b17 	ldw	r7,44(sp)
 200b250:	3800b326 	beq	r7,zero,200b520 <_dtoa_r+0xce8>
 200b254:	a800b226 	beq	r21,zero,200b520 <_dtoa_r+0xce8>
 200b258:	880b883a 	mov	r5,r17
 200b25c:	a80d883a 	mov	r6,r21
 200b260:	e009883a 	mov	r4,fp
 200b264:	200dbe00 	call	200dbe0 <__pow5mult>
 200b268:	d9800917 	ldw	r6,36(sp)
 200b26c:	100b883a 	mov	r5,r2
 200b270:	e009883a 	mov	r4,fp
 200b274:	1023883a 	mov	r17,r2
 200b278:	200d9e80 	call	200d9e8 <__multiply>
 200b27c:	1021883a 	mov	r16,r2
 200b280:	d8800a17 	ldw	r2,40(sp)
 200b284:	d9400917 	ldw	r5,36(sp)
 200b288:	e009883a 	mov	r4,fp
 200b28c:	1545c83a 	sub	r2,r2,r21
 200b290:	d8800a15 	stw	r2,40(sp)
 200b294:	200d6480 	call	200d648 <_Bfree>
 200b298:	d8c00a17 	ldw	r3,40(sp)
 200b29c:	18009f1e 	bne	r3,zero,200b51c <_dtoa_r+0xce4>
 200b2a0:	05c00044 	movi	r23,1
 200b2a4:	e009883a 	mov	r4,fp
 200b2a8:	b80b883a 	mov	r5,r23
 200b2ac:	200d9ac0 	call	200d9ac <__i2b>
 200b2b0:	d9000d17 	ldw	r4,52(sp)
 200b2b4:	102b883a 	mov	r21,r2
 200b2b8:	2000ce26 	beq	r4,zero,200b5f4 <_dtoa_r+0xdbc>
 200b2bc:	200d883a 	mov	r6,r4
 200b2c0:	100b883a 	mov	r5,r2
 200b2c4:	e009883a 	mov	r4,fp
 200b2c8:	200dbe00 	call	200dbe0 <__pow5mult>
 200b2cc:	d9800317 	ldw	r6,12(sp)
 200b2d0:	102b883a 	mov	r21,r2
 200b2d4:	b981810e 	bge	r23,r6,200b8dc <_dtoa_r+0x10a4>
 200b2d8:	0027883a 	mov	r19,zero
 200b2dc:	a8800417 	ldw	r2,16(r21)
 200b2e0:	05c00804 	movi	r23,32
 200b2e4:	10800104 	addi	r2,r2,4
 200b2e8:	1085883a 	add	r2,r2,r2
 200b2ec:	1085883a 	add	r2,r2,r2
 200b2f0:	a885883a 	add	r2,r21,r2
 200b2f4:	11000017 	ldw	r4,0(r2)
 200b2f8:	200d8940 	call	200d894 <__hi0bits>
 200b2fc:	b885c83a 	sub	r2,r23,r2
 200b300:	1585883a 	add	r2,r2,r22
 200b304:	108007cc 	andi	r2,r2,31
 200b308:	1000b326 	beq	r2,zero,200b5d8 <_dtoa_r+0xda0>
 200b30c:	00c00804 	movi	r3,32
 200b310:	1887c83a 	sub	r3,r3,r2
 200b314:	01000104 	movi	r4,4
 200b318:	20c2cd0e 	bge	r4,r3,200be50 <_dtoa_r+0x1618>
 200b31c:	00c00704 	movi	r3,28
 200b320:	1885c83a 	sub	r2,r3,r2
 200b324:	d8c00817 	ldw	r3,32(sp)
 200b328:	a0a9883a 	add	r20,r20,r2
 200b32c:	b0ad883a 	add	r22,r22,r2
 200b330:	1887883a 	add	r3,r3,r2
 200b334:	d8c00815 	stw	r3,32(sp)
 200b338:	d9800817 	ldw	r6,32(sp)
 200b33c:	0180040e 	bge	zero,r6,200b350 <_dtoa_r+0xb18>
 200b340:	800b883a 	mov	r5,r16
 200b344:	e009883a 	mov	r4,fp
 200b348:	200dd200 	call	200dd20 <__lshift>
 200b34c:	1021883a 	mov	r16,r2
 200b350:	0580050e 	bge	zero,r22,200b368 <_dtoa_r+0xb30>
 200b354:	a80b883a 	mov	r5,r21
 200b358:	b00d883a 	mov	r6,r22
 200b35c:	e009883a 	mov	r4,fp
 200b360:	200dd200 	call	200dd20 <__lshift>
 200b364:	102b883a 	mov	r21,r2
 200b368:	d9c00e17 	ldw	r7,56(sp)
 200b36c:	3801211e 	bne	r7,zero,200b7f4 <_dtoa_r+0xfbc>
 200b370:	d9800617 	ldw	r6,24(sp)
 200b374:	0181380e 	bge	zero,r6,200b858 <_dtoa_r+0x1020>
 200b378:	d8c00b17 	ldw	r3,44(sp)
 200b37c:	1800ab1e 	bne	r3,zero,200b62c <_dtoa_r+0xdf4>
 200b380:	dc800717 	ldw	r18,28(sp)
 200b384:	dcc00617 	ldw	r19,24(sp)
 200b388:	9029883a 	mov	r20,r18
 200b38c:	00000206 	br	200b398 <_dtoa_r+0xb60>
 200b390:	200d6700 	call	200d670 <__multadd>
 200b394:	1021883a 	mov	r16,r2
 200b398:	a80b883a 	mov	r5,r21
 200b39c:	8009883a 	mov	r4,r16
 200b3a0:	200a6380 	call	200a638 <quorem>
 200b3a4:	10800c04 	addi	r2,r2,48
 200b3a8:	90800005 	stb	r2,0(r18)
 200b3ac:	94800044 	addi	r18,r18,1
 200b3b0:	9507c83a 	sub	r3,r18,r20
 200b3b4:	000f883a 	mov	r7,zero
 200b3b8:	01800284 	movi	r6,10
 200b3bc:	800b883a 	mov	r5,r16
 200b3c0:	e009883a 	mov	r4,fp
 200b3c4:	1cfff216 	blt	r3,r19,200b390 <__alt_mem_epcs_flash_controller_0+0xfd00a390>
 200b3c8:	1011883a 	mov	r8,r2
 200b3cc:	d8800617 	ldw	r2,24(sp)
 200b3d0:	0082370e 	bge	zero,r2,200bcb0 <_dtoa_r+0x1478>
 200b3d4:	d9000717 	ldw	r4,28(sp)
 200b3d8:	0025883a 	mov	r18,zero
 200b3dc:	20af883a 	add	r23,r4,r2
 200b3e0:	01800044 	movi	r6,1
 200b3e4:	800b883a 	mov	r5,r16
 200b3e8:	e009883a 	mov	r4,fp
 200b3ec:	da001715 	stw	r8,92(sp)
 200b3f0:	200dd200 	call	200dd20 <__lshift>
 200b3f4:	a80b883a 	mov	r5,r21
 200b3f8:	1009883a 	mov	r4,r2
 200b3fc:	d8800915 	stw	r2,36(sp)
 200b400:	200de680 	call	200de68 <__mcmp>
 200b404:	da001717 	ldw	r8,92(sp)
 200b408:	0081800e 	bge	zero,r2,200ba0c <_dtoa_r+0x11d4>
 200b40c:	b93fffc3 	ldbu	r4,-1(r23)
 200b410:	b8bfffc4 	addi	r2,r23,-1
 200b414:	1007883a 	mov	r3,r2
 200b418:	01800e44 	movi	r6,57
 200b41c:	d9c00717 	ldw	r7,28(sp)
 200b420:	00000506 	br	200b438 <_dtoa_r+0xc00>
 200b424:	18ffffc4 	addi	r3,r3,-1
 200b428:	11c12326 	beq	r2,r7,200b8b8 <_dtoa_r+0x1080>
 200b42c:	19000003 	ldbu	r4,0(r3)
 200b430:	102f883a 	mov	r23,r2
 200b434:	10bfffc4 	addi	r2,r2,-1
 200b438:	21403fcc 	andi	r5,r4,255
 200b43c:	2940201c 	xori	r5,r5,128
 200b440:	297fe004 	addi	r5,r5,-128
 200b444:	29bff726 	beq	r5,r6,200b424 <__alt_mem_epcs_flash_controller_0+0xfd00a424>
 200b448:	21000044 	addi	r4,r4,1
 200b44c:	11000005 	stb	r4,0(r2)
 200b450:	a80b883a 	mov	r5,r21
 200b454:	e009883a 	mov	r4,fp
 200b458:	200d6480 	call	200d648 <_Bfree>
 200b45c:	883ea026 	beq	r17,zero,200aee0 <__alt_mem_epcs_flash_controller_0+0xfd009ee0>
 200b460:	90000426 	beq	r18,zero,200b474 <_dtoa_r+0xc3c>
 200b464:	94400326 	beq	r18,r17,200b474 <_dtoa_r+0xc3c>
 200b468:	900b883a 	mov	r5,r18
 200b46c:	e009883a 	mov	r4,fp
 200b470:	200d6480 	call	200d648 <_Bfree>
 200b474:	880b883a 	mov	r5,r17
 200b478:	e009883a 	mov	r4,fp
 200b47c:	200d6480 	call	200d648 <_Bfree>
 200b480:	003e9706 	br	200aee0 <__alt_mem_epcs_flash_controller_0+0xfd009ee0>
 200b484:	01800044 	movi	r6,1
 200b488:	d9800e15 	stw	r6,56(sp)
 200b48c:	003d9606 	br	200aae8 <__alt_mem_epcs_flash_controller_0+0xfd009ae8>
 200b490:	d8800817 	ldw	r2,32(sp)
 200b494:	d8c00517 	ldw	r3,20(sp)
 200b498:	d8000d15 	stw	zero,52(sp)
 200b49c:	10c5c83a 	sub	r2,r2,r3
 200b4a0:	00c9c83a 	sub	r4,zero,r3
 200b4a4:	d8800815 	stw	r2,32(sp)
 200b4a8:	d9000a15 	stw	r4,40(sp)
 200b4ac:	003d9706 	br	200ab0c <__alt_mem_epcs_flash_controller_0+0xfd009b0c>
 200b4b0:	05adc83a 	sub	r22,zero,r22
 200b4b4:	dd800815 	stw	r22,32(sp)
 200b4b8:	002d883a 	mov	r22,zero
 200b4bc:	003d8e06 	br	200aaf8 <__alt_mem_epcs_flash_controller_0+0xfd009af8>
 200b4c0:	d9000517 	ldw	r4,20(sp)
 200b4c4:	2004e980 	call	2004e98 <__floatsidf>
 200b4c8:	100d883a 	mov	r6,r2
 200b4cc:	180f883a 	mov	r7,r3
 200b4d0:	a009883a 	mov	r4,r20
 200b4d4:	880b883a 	mov	r5,r17
 200b4d8:	2012aec0 	call	2012aec <__eqdf2>
 200b4dc:	103d7126 	beq	r2,zero,200aaa4 <__alt_mem_epcs_flash_controller_0+0xfd009aa4>
 200b4e0:	d9c00517 	ldw	r7,20(sp)
 200b4e4:	39ffffc4 	addi	r7,r7,-1
 200b4e8:	d9c00515 	stw	r7,20(sp)
 200b4ec:	003d6d06 	br	200aaa4 <__alt_mem_epcs_flash_controller_0+0xfd009aa4>
 200b4f0:	dd400a17 	ldw	r21,40(sp)
 200b4f4:	dd000817 	ldw	r20,32(sp)
 200b4f8:	0023883a 	mov	r17,zero
 200b4fc:	003f4806 	br	200b220 <__alt_mem_epcs_flash_controller_0+0xfd00a220>
 200b500:	10e3c83a 	sub	r17,r2,r3
 200b504:	9448983a 	sll	r4,r18,r17
 200b508:	003d3206 	br	200a9d4 <__alt_mem_epcs_flash_controller_0+0xfd0099d4>
 200b50c:	d8000e15 	stw	zero,56(sp)
 200b510:	003d7506 	br	200aae8 <__alt_mem_epcs_flash_controller_0+0xfd009ae8>
 200b514:	b005883a 	mov	r2,r22
 200b518:	003f4506 	br	200b230 <__alt_mem_epcs_flash_controller_0+0xfd00a230>
 200b51c:	dc000915 	stw	r16,36(sp)
 200b520:	d9800a17 	ldw	r6,40(sp)
 200b524:	d9400917 	ldw	r5,36(sp)
 200b528:	e009883a 	mov	r4,fp
 200b52c:	200dbe00 	call	200dbe0 <__pow5mult>
 200b530:	1021883a 	mov	r16,r2
 200b534:	003f5a06 	br	200b2a0 <__alt_mem_epcs_flash_controller_0+0xfd00a2a0>
 200b538:	01c00044 	movi	r7,1
 200b53c:	d9c00b15 	stw	r7,44(sp)
 200b540:	d8802217 	ldw	r2,136(sp)
 200b544:	0081280e 	bge	zero,r2,200b9e8 <_dtoa_r+0x11b0>
 200b548:	100d883a 	mov	r6,r2
 200b54c:	1021883a 	mov	r16,r2
 200b550:	d8800c15 	stw	r2,48(sp)
 200b554:	d8800615 	stw	r2,24(sp)
 200b558:	003d8806 	br	200ab7c <__alt_mem_epcs_flash_controller_0+0xfd009b7c>
 200b55c:	d8800617 	ldw	r2,24(sp)
 200b560:	00be9b16 	blt	zero,r2,200afd0 <__alt_mem_epcs_flash_controller_0+0xfd009fd0>
 200b564:	10010f1e 	bne	r2,zero,200b9a4 <_dtoa_r+0x116c>
 200b568:	880b883a 	mov	r5,r17
 200b56c:	000d883a 	mov	r6,zero
 200b570:	01d00534 	movhi	r7,16404
 200b574:	8009883a 	mov	r4,r16
 200b578:	2003e040 	call	2003e04 <__muldf3>
 200b57c:	900d883a 	mov	r6,r18
 200b580:	980f883a 	mov	r7,r19
 200b584:	1009883a 	mov	r4,r2
 200b588:	180b883a 	mov	r5,r3
 200b58c:	2012b740 	call	2012b74 <__gedf2>
 200b590:	002b883a 	mov	r21,zero
 200b594:	0023883a 	mov	r17,zero
 200b598:	1000bf16 	blt	r2,zero,200b898 <_dtoa_r+0x1060>
 200b59c:	d9802217 	ldw	r6,136(sp)
 200b5a0:	ddc00717 	ldw	r23,28(sp)
 200b5a4:	018c303a 	nor	r6,zero,r6
 200b5a8:	d9800515 	stw	r6,20(sp)
 200b5ac:	a80b883a 	mov	r5,r21
 200b5b0:	e009883a 	mov	r4,fp
 200b5b4:	200d6480 	call	200d648 <_Bfree>
 200b5b8:	883e4926 	beq	r17,zero,200aee0 <__alt_mem_epcs_flash_controller_0+0xfd009ee0>
 200b5bc:	003fad06 	br	200b474 <__alt_mem_epcs_flash_controller_0+0xfd00a474>
 200b5c0:	d9c01117 	ldw	r7,68(sp)
 200b5c4:	3801bc26 	beq	r7,zero,200bcb8 <_dtoa_r+0x1480>
 200b5c8:	10810cc4 	addi	r2,r2,1075
 200b5cc:	dd400a17 	ldw	r21,40(sp)
 200b5d0:	dd000817 	ldw	r20,32(sp)
 200b5d4:	003f0a06 	br	200b200 <__alt_mem_epcs_flash_controller_0+0xfd00a200>
 200b5d8:	00800704 	movi	r2,28
 200b5dc:	d9000817 	ldw	r4,32(sp)
 200b5e0:	a0a9883a 	add	r20,r20,r2
 200b5e4:	b0ad883a 	add	r22,r22,r2
 200b5e8:	2089883a 	add	r4,r4,r2
 200b5ec:	d9000815 	stw	r4,32(sp)
 200b5f0:	003f5106 	br	200b338 <__alt_mem_epcs_flash_controller_0+0xfd00a338>
 200b5f4:	d8c00317 	ldw	r3,12(sp)
 200b5f8:	b8c1fc0e 	bge	r23,r3,200bdec <_dtoa_r+0x15b4>
 200b5fc:	0027883a 	mov	r19,zero
 200b600:	b805883a 	mov	r2,r23
 200b604:	003f3e06 	br	200b300 <__alt_mem_epcs_flash_controller_0+0xfd00a300>
 200b608:	880b883a 	mov	r5,r17
 200b60c:	e009883a 	mov	r4,fp
 200b610:	000f883a 	mov	r7,zero
 200b614:	01800284 	movi	r6,10
 200b618:	200d6700 	call	200d670 <__multadd>
 200b61c:	d9000c17 	ldw	r4,48(sp)
 200b620:	1023883a 	mov	r17,r2
 200b624:	0102040e 	bge	zero,r4,200be38 <_dtoa_r+0x1600>
 200b628:	d9000615 	stw	r4,24(sp)
 200b62c:	0500050e 	bge	zero,r20,200b644 <_dtoa_r+0xe0c>
 200b630:	880b883a 	mov	r5,r17
 200b634:	a00d883a 	mov	r6,r20
 200b638:	e009883a 	mov	r4,fp
 200b63c:	200dd200 	call	200dd20 <__lshift>
 200b640:	1023883a 	mov	r17,r2
 200b644:	9801241e 	bne	r19,zero,200bad8 <_dtoa_r+0x12a0>
 200b648:	8829883a 	mov	r20,r17
 200b64c:	d9000617 	ldw	r4,24(sp)
 200b650:	dcc00717 	ldw	r19,28(sp)
 200b654:	9480004c 	andi	r18,r18,1
 200b658:	20bfffc4 	addi	r2,r4,-1
 200b65c:	9885883a 	add	r2,r19,r2
 200b660:	d8800415 	stw	r2,16(sp)
 200b664:	dc800615 	stw	r18,24(sp)
 200b668:	a80b883a 	mov	r5,r21
 200b66c:	8009883a 	mov	r4,r16
 200b670:	200a6380 	call	200a638 <quorem>
 200b674:	880b883a 	mov	r5,r17
 200b678:	8009883a 	mov	r4,r16
 200b67c:	102f883a 	mov	r23,r2
 200b680:	200de680 	call	200de68 <__mcmp>
 200b684:	a80b883a 	mov	r5,r21
 200b688:	a00d883a 	mov	r6,r20
 200b68c:	e009883a 	mov	r4,fp
 200b690:	102d883a 	mov	r22,r2
 200b694:	200dec80 	call	200dec8 <__mdiff>
 200b698:	1007883a 	mov	r3,r2
 200b69c:	10800317 	ldw	r2,12(r2)
 200b6a0:	bc800c04 	addi	r18,r23,48
 200b6a4:	180b883a 	mov	r5,r3
 200b6a8:	10004e1e 	bne	r2,zero,200b7e4 <_dtoa_r+0xfac>
 200b6ac:	8009883a 	mov	r4,r16
 200b6b0:	d8c01615 	stw	r3,88(sp)
 200b6b4:	200de680 	call	200de68 <__mcmp>
 200b6b8:	d8c01617 	ldw	r3,88(sp)
 200b6bc:	e009883a 	mov	r4,fp
 200b6c0:	d8801615 	stw	r2,88(sp)
 200b6c4:	180b883a 	mov	r5,r3
 200b6c8:	200d6480 	call	200d648 <_Bfree>
 200b6cc:	d8801617 	ldw	r2,88(sp)
 200b6d0:	1000041e 	bne	r2,zero,200b6e4 <_dtoa_r+0xeac>
 200b6d4:	d9800317 	ldw	r6,12(sp)
 200b6d8:	3000021e 	bne	r6,zero,200b6e4 <_dtoa_r+0xeac>
 200b6dc:	d8c00617 	ldw	r3,24(sp)
 200b6e0:	18003726 	beq	r3,zero,200b7c0 <_dtoa_r+0xf88>
 200b6e4:	b0002016 	blt	r22,zero,200b768 <_dtoa_r+0xf30>
 200b6e8:	b000041e 	bne	r22,zero,200b6fc <_dtoa_r+0xec4>
 200b6ec:	d9000317 	ldw	r4,12(sp)
 200b6f0:	2000021e 	bne	r4,zero,200b6fc <_dtoa_r+0xec4>
 200b6f4:	d8c00617 	ldw	r3,24(sp)
 200b6f8:	18001b26 	beq	r3,zero,200b768 <_dtoa_r+0xf30>
 200b6fc:	00810716 	blt	zero,r2,200bb1c <_dtoa_r+0x12e4>
 200b700:	d8c00417 	ldw	r3,16(sp)
 200b704:	9d800044 	addi	r22,r19,1
 200b708:	9c800005 	stb	r18,0(r19)
 200b70c:	b02f883a 	mov	r23,r22
 200b710:	98c10626 	beq	r19,r3,200bb2c <_dtoa_r+0x12f4>
 200b714:	800b883a 	mov	r5,r16
 200b718:	000f883a 	mov	r7,zero
 200b71c:	01800284 	movi	r6,10
 200b720:	e009883a 	mov	r4,fp
 200b724:	200d6700 	call	200d670 <__multadd>
 200b728:	1021883a 	mov	r16,r2
 200b72c:	000f883a 	mov	r7,zero
 200b730:	01800284 	movi	r6,10
 200b734:	880b883a 	mov	r5,r17
 200b738:	e009883a 	mov	r4,fp
 200b73c:	8d002526 	beq	r17,r20,200b7d4 <_dtoa_r+0xf9c>
 200b740:	200d6700 	call	200d670 <__multadd>
 200b744:	a00b883a 	mov	r5,r20
 200b748:	000f883a 	mov	r7,zero
 200b74c:	01800284 	movi	r6,10
 200b750:	e009883a 	mov	r4,fp
 200b754:	1023883a 	mov	r17,r2
 200b758:	200d6700 	call	200d670 <__multadd>
 200b75c:	1029883a 	mov	r20,r2
 200b760:	b027883a 	mov	r19,r22
 200b764:	003fc006 	br	200b668 <__alt_mem_epcs_flash_controller_0+0xfd00a668>
 200b768:	9011883a 	mov	r8,r18
 200b76c:	00800e0e 	bge	zero,r2,200b7a8 <_dtoa_r+0xf70>
 200b770:	800b883a 	mov	r5,r16
 200b774:	01800044 	movi	r6,1
 200b778:	e009883a 	mov	r4,fp
 200b77c:	da001715 	stw	r8,92(sp)
 200b780:	200dd200 	call	200dd20 <__lshift>
 200b784:	a80b883a 	mov	r5,r21
 200b788:	1009883a 	mov	r4,r2
 200b78c:	1021883a 	mov	r16,r2
 200b790:	200de680 	call	200de68 <__mcmp>
 200b794:	da001717 	ldw	r8,92(sp)
 200b798:	0081960e 	bge	zero,r2,200bdf4 <_dtoa_r+0x15bc>
 200b79c:	00800e44 	movi	r2,57
 200b7a0:	40817026 	beq	r8,r2,200bd64 <_dtoa_r+0x152c>
 200b7a4:	ba000c44 	addi	r8,r23,49
 200b7a8:	8825883a 	mov	r18,r17
 200b7ac:	9dc00044 	addi	r23,r19,1
 200b7b0:	9a000005 	stb	r8,0(r19)
 200b7b4:	a023883a 	mov	r17,r20
 200b7b8:	dc000915 	stw	r16,36(sp)
 200b7bc:	003f2406 	br	200b450 <__alt_mem_epcs_flash_controller_0+0xfd00a450>
 200b7c0:	00800e44 	movi	r2,57
 200b7c4:	9011883a 	mov	r8,r18
 200b7c8:	90816626 	beq	r18,r2,200bd64 <_dtoa_r+0x152c>
 200b7cc:	05bff516 	blt	zero,r22,200b7a4 <__alt_mem_epcs_flash_controller_0+0xfd00a7a4>
 200b7d0:	003ff506 	br	200b7a8 <__alt_mem_epcs_flash_controller_0+0xfd00a7a8>
 200b7d4:	200d6700 	call	200d670 <__multadd>
 200b7d8:	1023883a 	mov	r17,r2
 200b7dc:	1029883a 	mov	r20,r2
 200b7e0:	003fdf06 	br	200b760 <__alt_mem_epcs_flash_controller_0+0xfd00a760>
 200b7e4:	e009883a 	mov	r4,fp
 200b7e8:	200d6480 	call	200d648 <_Bfree>
 200b7ec:	00800044 	movi	r2,1
 200b7f0:	003fbc06 	br	200b6e4 <__alt_mem_epcs_flash_controller_0+0xfd00a6e4>
 200b7f4:	a80b883a 	mov	r5,r21
 200b7f8:	8009883a 	mov	r4,r16
 200b7fc:	200de680 	call	200de68 <__mcmp>
 200b800:	103edb0e 	bge	r2,zero,200b370 <__alt_mem_epcs_flash_controller_0+0xfd00a370>
 200b804:	800b883a 	mov	r5,r16
 200b808:	000f883a 	mov	r7,zero
 200b80c:	01800284 	movi	r6,10
 200b810:	e009883a 	mov	r4,fp
 200b814:	200d6700 	call	200d670 <__multadd>
 200b818:	1021883a 	mov	r16,r2
 200b81c:	d8800517 	ldw	r2,20(sp)
 200b820:	d8c00b17 	ldw	r3,44(sp)
 200b824:	10bfffc4 	addi	r2,r2,-1
 200b828:	d8800515 	stw	r2,20(sp)
 200b82c:	183f761e 	bne	r3,zero,200b608 <__alt_mem_epcs_flash_controller_0+0xfd00a608>
 200b830:	d9000c17 	ldw	r4,48(sp)
 200b834:	0101730e 	bge	zero,r4,200be04 <_dtoa_r+0x15cc>
 200b838:	d9000615 	stw	r4,24(sp)
 200b83c:	003ed006 	br	200b380 <__alt_mem_epcs_flash_controller_0+0xfd00a380>
 200b840:	00800084 	movi	r2,2
 200b844:	3081861e 	bne	r6,r2,200be60 <_dtoa_r+0x1628>
 200b848:	d8000b15 	stw	zero,44(sp)
 200b84c:	003f3c06 	br	200b540 <__alt_mem_epcs_flash_controller_0+0xfd00a540>
 200b850:	dc000917 	ldw	r16,36(sp)
 200b854:	003e9206 	br	200b2a0 <__alt_mem_epcs_flash_controller_0+0xfd00a2a0>
 200b858:	d9c00317 	ldw	r7,12(sp)
 200b85c:	00800084 	movi	r2,2
 200b860:	11fec50e 	bge	r2,r7,200b378 <__alt_mem_epcs_flash_controller_0+0xfd00a378>
 200b864:	d9000617 	ldw	r4,24(sp)
 200b868:	20013c1e 	bne	r4,zero,200bd5c <_dtoa_r+0x1524>
 200b86c:	a80b883a 	mov	r5,r21
 200b870:	000f883a 	mov	r7,zero
 200b874:	01800144 	movi	r6,5
 200b878:	e009883a 	mov	r4,fp
 200b87c:	200d6700 	call	200d670 <__multadd>
 200b880:	100b883a 	mov	r5,r2
 200b884:	8009883a 	mov	r4,r16
 200b888:	102b883a 	mov	r21,r2
 200b88c:	200de680 	call	200de68 <__mcmp>
 200b890:	dc000915 	stw	r16,36(sp)
 200b894:	00bf410e 	bge	zero,r2,200b59c <__alt_mem_epcs_flash_controller_0+0xfd00a59c>
 200b898:	d9c00717 	ldw	r7,28(sp)
 200b89c:	00800c44 	movi	r2,49
 200b8a0:	38800005 	stb	r2,0(r7)
 200b8a4:	d8800517 	ldw	r2,20(sp)
 200b8a8:	3dc00044 	addi	r23,r7,1
 200b8ac:	10800044 	addi	r2,r2,1
 200b8b0:	d8800515 	stw	r2,20(sp)
 200b8b4:	003f3d06 	br	200b5ac <__alt_mem_epcs_flash_controller_0+0xfd00a5ac>
 200b8b8:	d9800517 	ldw	r6,20(sp)
 200b8bc:	d9c00717 	ldw	r7,28(sp)
 200b8c0:	00800c44 	movi	r2,49
 200b8c4:	31800044 	addi	r6,r6,1
 200b8c8:	d9800515 	stw	r6,20(sp)
 200b8cc:	38800005 	stb	r2,0(r7)
 200b8d0:	003edf06 	br	200b450 <__alt_mem_epcs_flash_controller_0+0xfd00a450>
 200b8d4:	d8000b15 	stw	zero,44(sp)
 200b8d8:	003c9f06 	br	200ab58 <__alt_mem_epcs_flash_controller_0+0xfd009b58>
 200b8dc:	903e7e1e 	bne	r18,zero,200b2d8 <__alt_mem_epcs_flash_controller_0+0xfd00a2d8>
 200b8e0:	00800434 	movhi	r2,16
 200b8e4:	10bfffc4 	addi	r2,r2,-1
 200b8e8:	9884703a 	and	r2,r19,r2
 200b8ec:	1000ea1e 	bne	r2,zero,200bc98 <_dtoa_r+0x1460>
 200b8f0:	9cdffc2c 	andhi	r19,r19,32752
 200b8f4:	9800e826 	beq	r19,zero,200bc98 <_dtoa_r+0x1460>
 200b8f8:	d9c00817 	ldw	r7,32(sp)
 200b8fc:	b5800044 	addi	r22,r22,1
 200b900:	04c00044 	movi	r19,1
 200b904:	39c00044 	addi	r7,r7,1
 200b908:	d9c00815 	stw	r7,32(sp)
 200b90c:	d8800d17 	ldw	r2,52(sp)
 200b910:	103e721e 	bne	r2,zero,200b2dc <__alt_mem_epcs_flash_controller_0+0xfd00a2dc>
 200b914:	00800044 	movi	r2,1
 200b918:	003e7906 	br	200b300 <__alt_mem_epcs_flash_controller_0+0xfd00a300>
 200b91c:	8009883a 	mov	r4,r16
 200b920:	2004e980 	call	2004e98 <__floatsidf>
 200b924:	d9800f17 	ldw	r6,60(sp)
 200b928:	d9c01017 	ldw	r7,64(sp)
 200b92c:	1009883a 	mov	r4,r2
 200b930:	180b883a 	mov	r5,r3
 200b934:	2003e040 	call	2003e04 <__muldf3>
 200b938:	000d883a 	mov	r6,zero
 200b93c:	01d00734 	movhi	r7,16412
 200b940:	1009883a 	mov	r4,r2
 200b944:	180b883a 	mov	r5,r3
 200b948:	2002b7c0 	call	2002b7c <__adddf3>
 200b94c:	047f3034 	movhi	r17,64704
 200b950:	1021883a 	mov	r16,r2
 200b954:	1c63883a 	add	r17,r3,r17
 200b958:	d9000f17 	ldw	r4,60(sp)
 200b95c:	d9401017 	ldw	r5,64(sp)
 200b960:	000d883a 	mov	r6,zero
 200b964:	01d00534 	movhi	r7,16404
 200b968:	200451c0 	call	200451c <__subdf3>
 200b96c:	800d883a 	mov	r6,r16
 200b970:	880f883a 	mov	r7,r17
 200b974:	1009883a 	mov	r4,r2
 200b978:	180b883a 	mov	r5,r3
 200b97c:	102b883a 	mov	r21,r2
 200b980:	1829883a 	mov	r20,r3
 200b984:	2012b740 	call	2012b74 <__gedf2>
 200b988:	00806c16 	blt	zero,r2,200bb3c <_dtoa_r+0x1304>
 200b98c:	89e0003c 	xorhi	r7,r17,32768
 200b990:	800d883a 	mov	r6,r16
 200b994:	a809883a 	mov	r4,r21
 200b998:	a00b883a 	mov	r5,r20
 200b99c:	2003d100 	call	2003d10 <__ledf2>
 200b9a0:	103d7e0e 	bge	r2,zero,200af9c <__alt_mem_epcs_flash_controller_0+0xfd009f9c>
 200b9a4:	002b883a 	mov	r21,zero
 200b9a8:	0023883a 	mov	r17,zero
 200b9ac:	003efb06 	br	200b59c <__alt_mem_epcs_flash_controller_0+0xfd00a59c>
 200b9b0:	d8800717 	ldw	r2,28(sp)
 200b9b4:	003bd006 	br	200a8f8 <__alt_mem_epcs_flash_controller_0+0xfd0098f8>
 200b9b8:	d9000a17 	ldw	r4,40(sp)
 200b9bc:	d9800d17 	ldw	r6,52(sp)
 200b9c0:	dd400a15 	stw	r21,40(sp)
 200b9c4:	a905c83a 	sub	r2,r21,r4
 200b9c8:	308d883a 	add	r6,r6,r2
 200b9cc:	d9800d15 	stw	r6,52(sp)
 200b9d0:	002b883a 	mov	r21,zero
 200b9d4:	003e0606 	br	200b1f0 <__alt_mem_epcs_flash_controller_0+0xfd00a1f0>
 200b9d8:	9023883a 	mov	r17,r18
 200b9dc:	9829883a 	mov	r20,r19
 200b9e0:	04000084 	movi	r16,2
 200b9e4:	003c9206 	br	200ac30 <__alt_mem_epcs_flash_controller_0+0xfd009c30>
 200b9e8:	04000044 	movi	r16,1
 200b9ec:	dc000c15 	stw	r16,48(sp)
 200b9f0:	dc000615 	stw	r16,24(sp)
 200b9f4:	dc002215 	stw	r16,136(sp)
 200b9f8:	e0001115 	stw	zero,68(fp)
 200b9fc:	000b883a 	mov	r5,zero
 200ba00:	003c6906 	br	200aba8 <__alt_mem_epcs_flash_controller_0+0xfd009ba8>
 200ba04:	3021883a 	mov	r16,r6
 200ba08:	003ffb06 	br	200b9f8 <__alt_mem_epcs_flash_controller_0+0xfd00a9f8>
 200ba0c:	1000021e 	bne	r2,zero,200ba18 <_dtoa_r+0x11e0>
 200ba10:	4200004c 	andi	r8,r8,1
 200ba14:	403e7d1e 	bne	r8,zero,200b40c <__alt_mem_epcs_flash_controller_0+0xfd00a40c>
 200ba18:	01000c04 	movi	r4,48
 200ba1c:	00000106 	br	200ba24 <_dtoa_r+0x11ec>
 200ba20:	102f883a 	mov	r23,r2
 200ba24:	b8bfffc4 	addi	r2,r23,-1
 200ba28:	10c00007 	ldb	r3,0(r2)
 200ba2c:	193ffc26 	beq	r3,r4,200ba20 <__alt_mem_epcs_flash_controller_0+0xfd00aa20>
 200ba30:	003e8706 	br	200b450 <__alt_mem_epcs_flash_controller_0+0xfd00a450>
 200ba34:	d8800517 	ldw	r2,20(sp)
 200ba38:	00a3c83a 	sub	r17,zero,r2
 200ba3c:	8800a426 	beq	r17,zero,200bcd0 <_dtoa_r+0x1498>
 200ba40:	888003cc 	andi	r2,r17,15
 200ba44:	100490fa 	slli	r2,r2,3
 200ba48:	00c08134 	movhi	r3,516
 200ba4c:	18f11504 	addi	r3,r3,-15276
 200ba50:	1885883a 	add	r2,r3,r2
 200ba54:	11800017 	ldw	r6,0(r2)
 200ba58:	11c00117 	ldw	r7,4(r2)
 200ba5c:	9009883a 	mov	r4,r18
 200ba60:	980b883a 	mov	r5,r19
 200ba64:	8823d13a 	srai	r17,r17,4
 200ba68:	2003e040 	call	2003e04 <__muldf3>
 200ba6c:	d8800f15 	stw	r2,60(sp)
 200ba70:	d8c01015 	stw	r3,64(sp)
 200ba74:	8800e826 	beq	r17,zero,200be18 <_dtoa_r+0x15e0>
 200ba78:	05008134 	movhi	r20,516
 200ba7c:	a5310b04 	addi	r20,r20,-15316
 200ba80:	04000084 	movi	r16,2
 200ba84:	8980004c 	andi	r6,r17,1
 200ba88:	1009883a 	mov	r4,r2
 200ba8c:	8823d07a 	srai	r17,r17,1
 200ba90:	180b883a 	mov	r5,r3
 200ba94:	30000426 	beq	r6,zero,200baa8 <_dtoa_r+0x1270>
 200ba98:	a1800017 	ldw	r6,0(r20)
 200ba9c:	a1c00117 	ldw	r7,4(r20)
 200baa0:	84000044 	addi	r16,r16,1
 200baa4:	2003e040 	call	2003e04 <__muldf3>
 200baa8:	a5000204 	addi	r20,r20,8
 200baac:	883ff51e 	bne	r17,zero,200ba84 <__alt_mem_epcs_flash_controller_0+0xfd00aa84>
 200bab0:	d8800f15 	stw	r2,60(sp)
 200bab4:	d8c01015 	stw	r3,64(sp)
 200bab8:	003c7606 	br	200ac94 <__alt_mem_epcs_flash_controller_0+0xfd009c94>
 200babc:	00c00c04 	movi	r3,48
 200bac0:	10c00005 	stb	r3,0(r2)
 200bac4:	d8c00517 	ldw	r3,20(sp)
 200bac8:	bd3fffc3 	ldbu	r20,-1(r23)
 200bacc:	18c00044 	addi	r3,r3,1
 200bad0:	d8c00515 	stw	r3,20(sp)
 200bad4:	003db906 	br	200b1bc <__alt_mem_epcs_flash_controller_0+0xfd00a1bc>
 200bad8:	89400117 	ldw	r5,4(r17)
 200badc:	e009883a 	mov	r4,fp
 200bae0:	200d5a00 	call	200d5a0 <_Balloc>
 200bae4:	89800417 	ldw	r6,16(r17)
 200bae8:	89400304 	addi	r5,r17,12
 200baec:	11000304 	addi	r4,r2,12
 200baf0:	31800084 	addi	r6,r6,2
 200baf4:	318d883a 	add	r6,r6,r6
 200baf8:	318d883a 	add	r6,r6,r6
 200bafc:	1027883a 	mov	r19,r2
 200bb00:	200d2fc0 	call	200d2fc <memcpy>
 200bb04:	01800044 	movi	r6,1
 200bb08:	980b883a 	mov	r5,r19
 200bb0c:	e009883a 	mov	r4,fp
 200bb10:	200dd200 	call	200dd20 <__lshift>
 200bb14:	1029883a 	mov	r20,r2
 200bb18:	003ecc06 	br	200b64c <__alt_mem_epcs_flash_controller_0+0xfd00a64c>
 200bb1c:	00800e44 	movi	r2,57
 200bb20:	90809026 	beq	r18,r2,200bd64 <_dtoa_r+0x152c>
 200bb24:	92000044 	addi	r8,r18,1
 200bb28:	003f1f06 	br	200b7a8 <__alt_mem_epcs_flash_controller_0+0xfd00a7a8>
 200bb2c:	9011883a 	mov	r8,r18
 200bb30:	8825883a 	mov	r18,r17
 200bb34:	a023883a 	mov	r17,r20
 200bb38:	003e2906 	br	200b3e0 <__alt_mem_epcs_flash_controller_0+0xfd00a3e0>
 200bb3c:	002b883a 	mov	r21,zero
 200bb40:	0023883a 	mov	r17,zero
 200bb44:	003f5406 	br	200b898 <__alt_mem_epcs_flash_controller_0+0xfd00a898>
 200bb48:	61bfffc4 	addi	r6,r12,-1
 200bb4c:	300490fa 	slli	r2,r6,3
 200bb50:	00c08134 	movhi	r3,516
 200bb54:	18f11504 	addi	r3,r3,-15276
 200bb58:	1885883a 	add	r2,r3,r2
 200bb5c:	11000017 	ldw	r4,0(r2)
 200bb60:	11400117 	ldw	r5,4(r2)
 200bb64:	d8800717 	ldw	r2,28(sp)
 200bb68:	880f883a 	mov	r7,r17
 200bb6c:	d9801215 	stw	r6,72(sp)
 200bb70:	800d883a 	mov	r6,r16
 200bb74:	db001615 	stw	r12,88(sp)
 200bb78:	15c00044 	addi	r23,r2,1
 200bb7c:	2003e040 	call	2003e04 <__muldf3>
 200bb80:	d9401017 	ldw	r5,64(sp)
 200bb84:	d9000f17 	ldw	r4,60(sp)
 200bb88:	d8c01515 	stw	r3,84(sp)
 200bb8c:	d8801415 	stw	r2,80(sp)
 200bb90:	2004e180 	call	2004e18 <__fixdfsi>
 200bb94:	1009883a 	mov	r4,r2
 200bb98:	1021883a 	mov	r16,r2
 200bb9c:	2004e980 	call	2004e98 <__floatsidf>
 200bba0:	d9000f17 	ldw	r4,60(sp)
 200bba4:	d9401017 	ldw	r5,64(sp)
 200bba8:	100d883a 	mov	r6,r2
 200bbac:	180f883a 	mov	r7,r3
 200bbb0:	200451c0 	call	200451c <__subdf3>
 200bbb4:	1829883a 	mov	r20,r3
 200bbb8:	d8c00717 	ldw	r3,28(sp)
 200bbbc:	84000c04 	addi	r16,r16,48
 200bbc0:	1023883a 	mov	r17,r2
 200bbc4:	1c000005 	stb	r16,0(r3)
 200bbc8:	db001617 	ldw	r12,88(sp)
 200bbcc:	00800044 	movi	r2,1
 200bbd0:	60802226 	beq	r12,r2,200bc5c <_dtoa_r+0x1424>
 200bbd4:	d9c00717 	ldw	r7,28(sp)
 200bbd8:	8805883a 	mov	r2,r17
 200bbdc:	b82b883a 	mov	r21,r23
 200bbe0:	3b19883a 	add	r12,r7,r12
 200bbe4:	6023883a 	mov	r17,r12
 200bbe8:	a007883a 	mov	r3,r20
 200bbec:	dc800f15 	stw	r18,60(sp)
 200bbf0:	000d883a 	mov	r6,zero
 200bbf4:	01d00934 	movhi	r7,16420
 200bbf8:	1009883a 	mov	r4,r2
 200bbfc:	180b883a 	mov	r5,r3
 200bc00:	2003e040 	call	2003e04 <__muldf3>
 200bc04:	180b883a 	mov	r5,r3
 200bc08:	1009883a 	mov	r4,r2
 200bc0c:	1829883a 	mov	r20,r3
 200bc10:	1025883a 	mov	r18,r2
 200bc14:	2004e180 	call	2004e18 <__fixdfsi>
 200bc18:	1009883a 	mov	r4,r2
 200bc1c:	1021883a 	mov	r16,r2
 200bc20:	2004e980 	call	2004e98 <__floatsidf>
 200bc24:	100d883a 	mov	r6,r2
 200bc28:	180f883a 	mov	r7,r3
 200bc2c:	9009883a 	mov	r4,r18
 200bc30:	a00b883a 	mov	r5,r20
 200bc34:	84000c04 	addi	r16,r16,48
 200bc38:	200451c0 	call	200451c <__subdf3>
 200bc3c:	ad400044 	addi	r21,r21,1
 200bc40:	ac3fffc5 	stb	r16,-1(r21)
 200bc44:	ac7fea1e 	bne	r21,r17,200bbf0 <__alt_mem_epcs_flash_controller_0+0xfd00abf0>
 200bc48:	1023883a 	mov	r17,r2
 200bc4c:	d8801217 	ldw	r2,72(sp)
 200bc50:	dc800f17 	ldw	r18,60(sp)
 200bc54:	1829883a 	mov	r20,r3
 200bc58:	b8af883a 	add	r23,r23,r2
 200bc5c:	d9001417 	ldw	r4,80(sp)
 200bc60:	d9401517 	ldw	r5,84(sp)
 200bc64:	000d883a 	mov	r6,zero
 200bc68:	01cff834 	movhi	r7,16352
 200bc6c:	2002b7c0 	call	2002b7c <__adddf3>
 200bc70:	880d883a 	mov	r6,r17
 200bc74:	a00f883a 	mov	r7,r20
 200bc78:	1009883a 	mov	r4,r2
 200bc7c:	180b883a 	mov	r5,r3
 200bc80:	2003d100 	call	2003d10 <__ledf2>
 200bc84:	10003e0e 	bge	r2,zero,200bd80 <_dtoa_r+0x1548>
 200bc88:	d9001317 	ldw	r4,76(sp)
 200bc8c:	bd3fffc3 	ldbu	r20,-1(r23)
 200bc90:	d9000515 	stw	r4,20(sp)
 200bc94:	003d3b06 	br	200b184 <__alt_mem_epcs_flash_controller_0+0xfd00a184>
 200bc98:	0027883a 	mov	r19,zero
 200bc9c:	003f1b06 	br	200b90c <__alt_mem_epcs_flash_controller_0+0xfd00a90c>
 200bca0:	d8800817 	ldw	r2,32(sp)
 200bca4:	11e9c83a 	sub	r20,r2,r7
 200bca8:	0005883a 	mov	r2,zero
 200bcac:	003d5406 	br	200b200 <__alt_mem_epcs_flash_controller_0+0xfd00a200>
 200bcb0:	00800044 	movi	r2,1
 200bcb4:	003dc706 	br	200b3d4 <__alt_mem_epcs_flash_controller_0+0xfd00a3d4>
 200bcb8:	d8c00217 	ldw	r3,8(sp)
 200bcbc:	00800d84 	movi	r2,54
 200bcc0:	dd400a17 	ldw	r21,40(sp)
 200bcc4:	10c5c83a 	sub	r2,r2,r3
 200bcc8:	dd000817 	ldw	r20,32(sp)
 200bccc:	003d4c06 	br	200b200 <__alt_mem_epcs_flash_controller_0+0xfd00a200>
 200bcd0:	dc800f15 	stw	r18,60(sp)
 200bcd4:	dcc01015 	stw	r19,64(sp)
 200bcd8:	04000084 	movi	r16,2
 200bcdc:	003bed06 	br	200ac94 <__alt_mem_epcs_flash_controller_0+0xfd009c94>
 200bce0:	d9000617 	ldw	r4,24(sp)
 200bce4:	203f0d26 	beq	r4,zero,200b91c <__alt_mem_epcs_flash_controller_0+0xfd00a91c>
 200bce8:	d9800c17 	ldw	r6,48(sp)
 200bcec:	01bcab0e 	bge	zero,r6,200af9c <__alt_mem_epcs_flash_controller_0+0xfd009f9c>
 200bcf0:	d9401017 	ldw	r5,64(sp)
 200bcf4:	d9000f17 	ldw	r4,60(sp)
 200bcf8:	000d883a 	mov	r6,zero
 200bcfc:	01d00934 	movhi	r7,16420
 200bd00:	2003e040 	call	2003e04 <__muldf3>
 200bd04:	81000044 	addi	r4,r16,1
 200bd08:	d8800f15 	stw	r2,60(sp)
 200bd0c:	d8c01015 	stw	r3,64(sp)
 200bd10:	2004e980 	call	2004e98 <__floatsidf>
 200bd14:	d9800f17 	ldw	r6,60(sp)
 200bd18:	d9c01017 	ldw	r7,64(sp)
 200bd1c:	1009883a 	mov	r4,r2
 200bd20:	180b883a 	mov	r5,r3
 200bd24:	2003e040 	call	2003e04 <__muldf3>
 200bd28:	01d00734 	movhi	r7,16412
 200bd2c:	000d883a 	mov	r6,zero
 200bd30:	1009883a 	mov	r4,r2
 200bd34:	180b883a 	mov	r5,r3
 200bd38:	2002b7c0 	call	2002b7c <__adddf3>
 200bd3c:	d9c00517 	ldw	r7,20(sp)
 200bd40:	047f3034 	movhi	r17,64704
 200bd44:	1021883a 	mov	r16,r2
 200bd48:	39ffffc4 	addi	r7,r7,-1
 200bd4c:	d9c01315 	stw	r7,76(sp)
 200bd50:	1c63883a 	add	r17,r3,r17
 200bd54:	db000c17 	ldw	r12,48(sp)
 200bd58:	003bea06 	br	200ad04 <__alt_mem_epcs_flash_controller_0+0xfd009d04>
 200bd5c:	dc000915 	stw	r16,36(sp)
 200bd60:	003e0e06 	br	200b59c <__alt_mem_epcs_flash_controller_0+0xfd00a59c>
 200bd64:	01000e44 	movi	r4,57
 200bd68:	8825883a 	mov	r18,r17
 200bd6c:	9dc00044 	addi	r23,r19,1
 200bd70:	99000005 	stb	r4,0(r19)
 200bd74:	a023883a 	mov	r17,r20
 200bd78:	dc000915 	stw	r16,36(sp)
 200bd7c:	003da406 	br	200b410 <__alt_mem_epcs_flash_controller_0+0xfd00a410>
 200bd80:	d9801417 	ldw	r6,80(sp)
 200bd84:	d9c01517 	ldw	r7,84(sp)
 200bd88:	0009883a 	mov	r4,zero
 200bd8c:	014ff834 	movhi	r5,16352
 200bd90:	200451c0 	call	200451c <__subdf3>
 200bd94:	880d883a 	mov	r6,r17
 200bd98:	a00f883a 	mov	r7,r20
 200bd9c:	1009883a 	mov	r4,r2
 200bda0:	180b883a 	mov	r5,r3
 200bda4:	2012b740 	call	2012b74 <__gedf2>
 200bda8:	00bc7c0e 	bge	zero,r2,200af9c <__alt_mem_epcs_flash_controller_0+0xfd009f9c>
 200bdac:	01000c04 	movi	r4,48
 200bdb0:	00000106 	br	200bdb8 <_dtoa_r+0x1580>
 200bdb4:	102f883a 	mov	r23,r2
 200bdb8:	b8bfffc4 	addi	r2,r23,-1
 200bdbc:	10c00007 	ldb	r3,0(r2)
 200bdc0:	193ffc26 	beq	r3,r4,200bdb4 <__alt_mem_epcs_flash_controller_0+0xfd00adb4>
 200bdc4:	d9801317 	ldw	r6,76(sp)
 200bdc8:	d9800515 	stw	r6,20(sp)
 200bdcc:	003c4406 	br	200aee0 <__alt_mem_epcs_flash_controller_0+0xfd009ee0>
 200bdd0:	d9801317 	ldw	r6,76(sp)
 200bdd4:	d9800515 	stw	r6,20(sp)
 200bdd8:	003cea06 	br	200b184 <__alt_mem_epcs_flash_controller_0+0xfd00a184>
 200bddc:	dd800f17 	ldw	r22,60(sp)
 200bde0:	dcc01017 	ldw	r19,64(sp)
 200bde4:	dc801217 	ldw	r18,72(sp)
 200bde8:	003c6c06 	br	200af9c <__alt_mem_epcs_flash_controller_0+0xfd009f9c>
 200bdec:	903e031e 	bne	r18,zero,200b5fc <__alt_mem_epcs_flash_controller_0+0xfd00a5fc>
 200bdf0:	003ebb06 	br	200b8e0 <__alt_mem_epcs_flash_controller_0+0xfd00a8e0>
 200bdf4:	103e6c1e 	bne	r2,zero,200b7a8 <__alt_mem_epcs_flash_controller_0+0xfd00a7a8>
 200bdf8:	4080004c 	andi	r2,r8,1
 200bdfc:	103e6a26 	beq	r2,zero,200b7a8 <__alt_mem_epcs_flash_controller_0+0xfd00a7a8>
 200be00:	003e6606 	br	200b79c <__alt_mem_epcs_flash_controller_0+0xfd00a79c>
 200be04:	d8c00317 	ldw	r3,12(sp)
 200be08:	00800084 	movi	r2,2
 200be0c:	10c02916 	blt	r2,r3,200beb4 <_dtoa_r+0x167c>
 200be10:	d9000c17 	ldw	r4,48(sp)
 200be14:	003e8806 	br	200b838 <__alt_mem_epcs_flash_controller_0+0xfd00a838>
 200be18:	04000084 	movi	r16,2
 200be1c:	003b9d06 	br	200ac94 <__alt_mem_epcs_flash_controller_0+0xfd009c94>
 200be20:	d9001317 	ldw	r4,76(sp)
 200be24:	d9000515 	stw	r4,20(sp)
 200be28:	003cd606 	br	200b184 <__alt_mem_epcs_flash_controller_0+0xfd00a184>
 200be2c:	d8801317 	ldw	r2,76(sp)
 200be30:	d8800515 	stw	r2,20(sp)
 200be34:	003c2a06 	br	200aee0 <__alt_mem_epcs_flash_controller_0+0xfd009ee0>
 200be38:	d9800317 	ldw	r6,12(sp)
 200be3c:	00800084 	movi	r2,2
 200be40:	11801516 	blt	r2,r6,200be98 <_dtoa_r+0x1660>
 200be44:	d9c00c17 	ldw	r7,48(sp)
 200be48:	d9c00615 	stw	r7,24(sp)
 200be4c:	003df706 	br	200b62c <__alt_mem_epcs_flash_controller_0+0xfd00a62c>
 200be50:	193d3926 	beq	r3,r4,200b338 <__alt_mem_epcs_flash_controller_0+0xfd00a338>
 200be54:	00c00f04 	movi	r3,60
 200be58:	1885c83a 	sub	r2,r3,r2
 200be5c:	003ddf06 	br	200b5dc <__alt_mem_epcs_flash_controller_0+0xfd00a5dc>
 200be60:	e009883a 	mov	r4,fp
 200be64:	e0001115 	stw	zero,68(fp)
 200be68:	000b883a 	mov	r5,zero
 200be6c:	200d5a00 	call	200d5a0 <_Balloc>
 200be70:	d8800715 	stw	r2,28(sp)
 200be74:	d8c00717 	ldw	r3,28(sp)
 200be78:	00bfffc4 	movi	r2,-1
 200be7c:	01000044 	movi	r4,1
 200be80:	d8800c15 	stw	r2,48(sp)
 200be84:	e0c01015 	stw	r3,64(fp)
 200be88:	d9000b15 	stw	r4,44(sp)
 200be8c:	d8800615 	stw	r2,24(sp)
 200be90:	d8002215 	stw	zero,136(sp)
 200be94:	003c4106 	br	200af9c <__alt_mem_epcs_flash_controller_0+0xfd009f9c>
 200be98:	d8c00c17 	ldw	r3,48(sp)
 200be9c:	d8c00615 	stw	r3,24(sp)
 200bea0:	003e7006 	br	200b864 <__alt_mem_epcs_flash_controller_0+0xfd00a864>
 200bea4:	04400044 	movi	r17,1
 200bea8:	003b2006 	br	200ab2c <__alt_mem_epcs_flash_controller_0+0xfd009b2c>
 200beac:	000b883a 	mov	r5,zero
 200beb0:	003b3d06 	br	200aba8 <__alt_mem_epcs_flash_controller_0+0xfd009ba8>
 200beb4:	d8800c17 	ldw	r2,48(sp)
 200beb8:	d8800615 	stw	r2,24(sp)
 200bebc:	003e6906 	br	200b864 <__alt_mem_epcs_flash_controller_0+0xfd00a864>

0200bec0 <__sflush_r>:
 200bec0:	2880030b 	ldhu	r2,12(r5)
 200bec4:	defffb04 	addi	sp,sp,-20
 200bec8:	dcc00315 	stw	r19,12(sp)
 200becc:	dc400115 	stw	r17,4(sp)
 200bed0:	dfc00415 	stw	ra,16(sp)
 200bed4:	dc800215 	stw	r18,8(sp)
 200bed8:	dc000015 	stw	r16,0(sp)
 200bedc:	10c0020c 	andi	r3,r2,8
 200bee0:	2823883a 	mov	r17,r5
 200bee4:	2027883a 	mov	r19,r4
 200bee8:	1800311e 	bne	r3,zero,200bfb0 <__sflush_r+0xf0>
 200beec:	28c00117 	ldw	r3,4(r5)
 200bef0:	10820014 	ori	r2,r2,2048
 200bef4:	2880030d 	sth	r2,12(r5)
 200bef8:	00c04b0e 	bge	zero,r3,200c028 <__sflush_r+0x168>
 200befc:	8a000a17 	ldw	r8,40(r17)
 200bf00:	40002326 	beq	r8,zero,200bf90 <__sflush_r+0xd0>
 200bf04:	9c000017 	ldw	r16,0(r19)
 200bf08:	10c4000c 	andi	r3,r2,4096
 200bf0c:	98000015 	stw	zero,0(r19)
 200bf10:	18004826 	beq	r3,zero,200c034 <__sflush_r+0x174>
 200bf14:	89801417 	ldw	r6,80(r17)
 200bf18:	10c0010c 	andi	r3,r2,4
 200bf1c:	18000626 	beq	r3,zero,200bf38 <__sflush_r+0x78>
 200bf20:	88c00117 	ldw	r3,4(r17)
 200bf24:	88800c17 	ldw	r2,48(r17)
 200bf28:	30cdc83a 	sub	r6,r6,r3
 200bf2c:	10000226 	beq	r2,zero,200bf38 <__sflush_r+0x78>
 200bf30:	88800f17 	ldw	r2,60(r17)
 200bf34:	308dc83a 	sub	r6,r6,r2
 200bf38:	89400717 	ldw	r5,28(r17)
 200bf3c:	000f883a 	mov	r7,zero
 200bf40:	9809883a 	mov	r4,r19
 200bf44:	403ee83a 	callr	r8
 200bf48:	00ffffc4 	movi	r3,-1
 200bf4c:	10c04426 	beq	r2,r3,200c060 <__sflush_r+0x1a0>
 200bf50:	88c0030b 	ldhu	r3,12(r17)
 200bf54:	89000417 	ldw	r4,16(r17)
 200bf58:	88000115 	stw	zero,4(r17)
 200bf5c:	197dffcc 	andi	r5,r3,63487
 200bf60:	8940030d 	sth	r5,12(r17)
 200bf64:	89000015 	stw	r4,0(r17)
 200bf68:	18c4000c 	andi	r3,r3,4096
 200bf6c:	18002c1e 	bne	r3,zero,200c020 <__sflush_r+0x160>
 200bf70:	89400c17 	ldw	r5,48(r17)
 200bf74:	9c000015 	stw	r16,0(r19)
 200bf78:	28000526 	beq	r5,zero,200bf90 <__sflush_r+0xd0>
 200bf7c:	88801004 	addi	r2,r17,64
 200bf80:	28800226 	beq	r5,r2,200bf8c <__sflush_r+0xcc>
 200bf84:	9809883a 	mov	r4,r19
 200bf88:	200c62c0 	call	200c62c <_free_r>
 200bf8c:	88000c15 	stw	zero,48(r17)
 200bf90:	0005883a 	mov	r2,zero
 200bf94:	dfc00417 	ldw	ra,16(sp)
 200bf98:	dcc00317 	ldw	r19,12(sp)
 200bf9c:	dc800217 	ldw	r18,8(sp)
 200bfa0:	dc400117 	ldw	r17,4(sp)
 200bfa4:	dc000017 	ldw	r16,0(sp)
 200bfa8:	dec00504 	addi	sp,sp,20
 200bfac:	f800283a 	ret
 200bfb0:	2c800417 	ldw	r18,16(r5)
 200bfb4:	903ff626 	beq	r18,zero,200bf90 <__alt_mem_epcs_flash_controller_0+0xfd00af90>
 200bfb8:	2c000017 	ldw	r16,0(r5)
 200bfbc:	108000cc 	andi	r2,r2,3
 200bfc0:	2c800015 	stw	r18,0(r5)
 200bfc4:	84a1c83a 	sub	r16,r16,r18
 200bfc8:	1000131e 	bne	r2,zero,200c018 <__sflush_r+0x158>
 200bfcc:	28800517 	ldw	r2,20(r5)
 200bfd0:	88800215 	stw	r2,8(r17)
 200bfd4:	04000316 	blt	zero,r16,200bfe4 <__sflush_r+0x124>
 200bfd8:	003fed06 	br	200bf90 <__alt_mem_epcs_flash_controller_0+0xfd00af90>
 200bfdc:	90a5883a 	add	r18,r18,r2
 200bfe0:	043feb0e 	bge	zero,r16,200bf90 <__alt_mem_epcs_flash_controller_0+0xfd00af90>
 200bfe4:	88800917 	ldw	r2,36(r17)
 200bfe8:	89400717 	ldw	r5,28(r17)
 200bfec:	800f883a 	mov	r7,r16
 200bff0:	900d883a 	mov	r6,r18
 200bff4:	9809883a 	mov	r4,r19
 200bff8:	103ee83a 	callr	r2
 200bffc:	80a1c83a 	sub	r16,r16,r2
 200c000:	00bff616 	blt	zero,r2,200bfdc <__alt_mem_epcs_flash_controller_0+0xfd00afdc>
 200c004:	88c0030b 	ldhu	r3,12(r17)
 200c008:	00bfffc4 	movi	r2,-1
 200c00c:	18c01014 	ori	r3,r3,64
 200c010:	88c0030d 	sth	r3,12(r17)
 200c014:	003fdf06 	br	200bf94 <__alt_mem_epcs_flash_controller_0+0xfd00af94>
 200c018:	0005883a 	mov	r2,zero
 200c01c:	003fec06 	br	200bfd0 <__alt_mem_epcs_flash_controller_0+0xfd00afd0>
 200c020:	88801415 	stw	r2,80(r17)
 200c024:	003fd206 	br	200bf70 <__alt_mem_epcs_flash_controller_0+0xfd00af70>
 200c028:	28c00f17 	ldw	r3,60(r5)
 200c02c:	00ffb316 	blt	zero,r3,200befc <__alt_mem_epcs_flash_controller_0+0xfd00aefc>
 200c030:	003fd706 	br	200bf90 <__alt_mem_epcs_flash_controller_0+0xfd00af90>
 200c034:	89400717 	ldw	r5,28(r17)
 200c038:	000d883a 	mov	r6,zero
 200c03c:	01c00044 	movi	r7,1
 200c040:	9809883a 	mov	r4,r19
 200c044:	403ee83a 	callr	r8
 200c048:	100d883a 	mov	r6,r2
 200c04c:	00bfffc4 	movi	r2,-1
 200c050:	30801426 	beq	r6,r2,200c0a4 <__sflush_r+0x1e4>
 200c054:	8880030b 	ldhu	r2,12(r17)
 200c058:	8a000a17 	ldw	r8,40(r17)
 200c05c:	003fae06 	br	200bf18 <__alt_mem_epcs_flash_controller_0+0xfd00af18>
 200c060:	98c00017 	ldw	r3,0(r19)
 200c064:	183fba26 	beq	r3,zero,200bf50 <__alt_mem_epcs_flash_controller_0+0xfd00af50>
 200c068:	01000744 	movi	r4,29
 200c06c:	19000626 	beq	r3,r4,200c088 <__sflush_r+0x1c8>
 200c070:	01000584 	movi	r4,22
 200c074:	19000426 	beq	r3,r4,200c088 <__sflush_r+0x1c8>
 200c078:	88c0030b 	ldhu	r3,12(r17)
 200c07c:	18c01014 	ori	r3,r3,64
 200c080:	88c0030d 	sth	r3,12(r17)
 200c084:	003fc306 	br	200bf94 <__alt_mem_epcs_flash_controller_0+0xfd00af94>
 200c088:	8880030b 	ldhu	r2,12(r17)
 200c08c:	88c00417 	ldw	r3,16(r17)
 200c090:	88000115 	stw	zero,4(r17)
 200c094:	10bdffcc 	andi	r2,r2,63487
 200c098:	8880030d 	sth	r2,12(r17)
 200c09c:	88c00015 	stw	r3,0(r17)
 200c0a0:	003fb306 	br	200bf70 <__alt_mem_epcs_flash_controller_0+0xfd00af70>
 200c0a4:	98800017 	ldw	r2,0(r19)
 200c0a8:	103fea26 	beq	r2,zero,200c054 <__alt_mem_epcs_flash_controller_0+0xfd00b054>
 200c0ac:	00c00744 	movi	r3,29
 200c0b0:	10c00226 	beq	r2,r3,200c0bc <__sflush_r+0x1fc>
 200c0b4:	00c00584 	movi	r3,22
 200c0b8:	10c0031e 	bne	r2,r3,200c0c8 <__sflush_r+0x208>
 200c0bc:	9c000015 	stw	r16,0(r19)
 200c0c0:	0005883a 	mov	r2,zero
 200c0c4:	003fb306 	br	200bf94 <__alt_mem_epcs_flash_controller_0+0xfd00af94>
 200c0c8:	88c0030b 	ldhu	r3,12(r17)
 200c0cc:	3005883a 	mov	r2,r6
 200c0d0:	18c01014 	ori	r3,r3,64
 200c0d4:	88c0030d 	sth	r3,12(r17)
 200c0d8:	003fae06 	br	200bf94 <__alt_mem_epcs_flash_controller_0+0xfd00af94>

0200c0dc <_fflush_r>:
 200c0dc:	defffd04 	addi	sp,sp,-12
 200c0e0:	dc000115 	stw	r16,4(sp)
 200c0e4:	dfc00215 	stw	ra,8(sp)
 200c0e8:	2021883a 	mov	r16,r4
 200c0ec:	20000226 	beq	r4,zero,200c0f8 <_fflush_r+0x1c>
 200c0f0:	20800e17 	ldw	r2,56(r4)
 200c0f4:	10000c26 	beq	r2,zero,200c128 <_fflush_r+0x4c>
 200c0f8:	2880030f 	ldh	r2,12(r5)
 200c0fc:	1000051e 	bne	r2,zero,200c114 <_fflush_r+0x38>
 200c100:	0005883a 	mov	r2,zero
 200c104:	dfc00217 	ldw	ra,8(sp)
 200c108:	dc000117 	ldw	r16,4(sp)
 200c10c:	dec00304 	addi	sp,sp,12
 200c110:	f800283a 	ret
 200c114:	8009883a 	mov	r4,r16
 200c118:	dfc00217 	ldw	ra,8(sp)
 200c11c:	dc000117 	ldw	r16,4(sp)
 200c120:	dec00304 	addi	sp,sp,12
 200c124:	200bec01 	jmpi	200bec0 <__sflush_r>
 200c128:	d9400015 	stw	r5,0(sp)
 200c12c:	200c4b80 	call	200c4b8 <__sinit>
 200c130:	d9400017 	ldw	r5,0(sp)
 200c134:	003ff006 	br	200c0f8 <__alt_mem_epcs_flash_controller_0+0xfd00b0f8>

0200c138 <fflush>:
 200c138:	20000526 	beq	r4,zero,200c150 <fflush+0x18>
 200c13c:	00808134 	movhi	r2,516
 200c140:	10b84a04 	addi	r2,r2,-7896
 200c144:	200b883a 	mov	r5,r4
 200c148:	11000017 	ldw	r4,0(r2)
 200c14c:	200c0dc1 	jmpi	200c0dc <_fflush_r>
 200c150:	00808134 	movhi	r2,516
 200c154:	10b84904 	addi	r2,r2,-7900
 200c158:	11000017 	ldw	r4,0(r2)
 200c15c:	01408074 	movhi	r5,513
 200c160:	29703704 	addi	r5,r5,-16164
 200c164:	200cebc1 	jmpi	200cebc <_fwalk_reent>

0200c168 <__fp_unlock>:
 200c168:	0005883a 	mov	r2,zero
 200c16c:	f800283a 	ret

0200c170 <_cleanup_r>:
 200c170:	01408074 	movhi	r5,513
 200c174:	29460804 	addi	r5,r5,6176
 200c178:	200cebc1 	jmpi	200cebc <_fwalk_reent>

0200c17c <__sinit.part.1>:
 200c17c:	defff704 	addi	sp,sp,-36
 200c180:	00c08074 	movhi	r3,513
 200c184:	dfc00815 	stw	ra,32(sp)
 200c188:	ddc00715 	stw	r23,28(sp)
 200c18c:	dd800615 	stw	r22,24(sp)
 200c190:	dd400515 	stw	r21,20(sp)
 200c194:	dd000415 	stw	r20,16(sp)
 200c198:	dcc00315 	stw	r19,12(sp)
 200c19c:	dc800215 	stw	r18,8(sp)
 200c1a0:	dc400115 	stw	r17,4(sp)
 200c1a4:	dc000015 	stw	r16,0(sp)
 200c1a8:	18f05c04 	addi	r3,r3,-16016
 200c1ac:	24000117 	ldw	r16,4(r4)
 200c1b0:	20c00f15 	stw	r3,60(r4)
 200c1b4:	2080bb04 	addi	r2,r4,748
 200c1b8:	00c000c4 	movi	r3,3
 200c1bc:	20c0b915 	stw	r3,740(r4)
 200c1c0:	2080ba15 	stw	r2,744(r4)
 200c1c4:	2000b815 	stw	zero,736(r4)
 200c1c8:	05c00204 	movi	r23,8
 200c1cc:	00800104 	movi	r2,4
 200c1d0:	2025883a 	mov	r18,r4
 200c1d4:	b80d883a 	mov	r6,r23
 200c1d8:	81001704 	addi	r4,r16,92
 200c1dc:	000b883a 	mov	r5,zero
 200c1e0:	80000015 	stw	zero,0(r16)
 200c1e4:	80000115 	stw	zero,4(r16)
 200c1e8:	80000215 	stw	zero,8(r16)
 200c1ec:	8080030d 	sth	r2,12(r16)
 200c1f0:	80001915 	stw	zero,100(r16)
 200c1f4:	8000038d 	sth	zero,14(r16)
 200c1f8:	80000415 	stw	zero,16(r16)
 200c1fc:	80000515 	stw	zero,20(r16)
 200c200:	80000615 	stw	zero,24(r16)
 200c204:	2005a840 	call	2005a84 <memset>
 200c208:	05808074 	movhi	r22,513
 200c20c:	94400217 	ldw	r17,8(r18)
 200c210:	05408074 	movhi	r21,513
 200c214:	05008074 	movhi	r20,513
 200c218:	04c08074 	movhi	r19,513
 200c21c:	b5bac004 	addi	r22,r22,-5376
 200c220:	ad7ad704 	addi	r21,r21,-5284
 200c224:	a53af604 	addi	r20,r20,-5160
 200c228:	9cfb0d04 	addi	r19,r19,-5068
 200c22c:	85800815 	stw	r22,32(r16)
 200c230:	85400915 	stw	r21,36(r16)
 200c234:	85000a15 	stw	r20,40(r16)
 200c238:	84c00b15 	stw	r19,44(r16)
 200c23c:	84000715 	stw	r16,28(r16)
 200c240:	00800284 	movi	r2,10
 200c244:	8880030d 	sth	r2,12(r17)
 200c248:	00800044 	movi	r2,1
 200c24c:	b80d883a 	mov	r6,r23
 200c250:	89001704 	addi	r4,r17,92
 200c254:	000b883a 	mov	r5,zero
 200c258:	88000015 	stw	zero,0(r17)
 200c25c:	88000115 	stw	zero,4(r17)
 200c260:	88000215 	stw	zero,8(r17)
 200c264:	88001915 	stw	zero,100(r17)
 200c268:	8880038d 	sth	r2,14(r17)
 200c26c:	88000415 	stw	zero,16(r17)
 200c270:	88000515 	stw	zero,20(r17)
 200c274:	88000615 	stw	zero,24(r17)
 200c278:	2005a840 	call	2005a84 <memset>
 200c27c:	94000317 	ldw	r16,12(r18)
 200c280:	00800484 	movi	r2,18
 200c284:	8c400715 	stw	r17,28(r17)
 200c288:	8d800815 	stw	r22,32(r17)
 200c28c:	8d400915 	stw	r21,36(r17)
 200c290:	8d000a15 	stw	r20,40(r17)
 200c294:	8cc00b15 	stw	r19,44(r17)
 200c298:	8080030d 	sth	r2,12(r16)
 200c29c:	00800084 	movi	r2,2
 200c2a0:	80000015 	stw	zero,0(r16)
 200c2a4:	80000115 	stw	zero,4(r16)
 200c2a8:	80000215 	stw	zero,8(r16)
 200c2ac:	80001915 	stw	zero,100(r16)
 200c2b0:	8080038d 	sth	r2,14(r16)
 200c2b4:	80000415 	stw	zero,16(r16)
 200c2b8:	80000515 	stw	zero,20(r16)
 200c2bc:	80000615 	stw	zero,24(r16)
 200c2c0:	b80d883a 	mov	r6,r23
 200c2c4:	000b883a 	mov	r5,zero
 200c2c8:	81001704 	addi	r4,r16,92
 200c2cc:	2005a840 	call	2005a84 <memset>
 200c2d0:	00800044 	movi	r2,1
 200c2d4:	84000715 	stw	r16,28(r16)
 200c2d8:	85800815 	stw	r22,32(r16)
 200c2dc:	85400915 	stw	r21,36(r16)
 200c2e0:	85000a15 	stw	r20,40(r16)
 200c2e4:	84c00b15 	stw	r19,44(r16)
 200c2e8:	90800e15 	stw	r2,56(r18)
 200c2ec:	dfc00817 	ldw	ra,32(sp)
 200c2f0:	ddc00717 	ldw	r23,28(sp)
 200c2f4:	dd800617 	ldw	r22,24(sp)
 200c2f8:	dd400517 	ldw	r21,20(sp)
 200c2fc:	dd000417 	ldw	r20,16(sp)
 200c300:	dcc00317 	ldw	r19,12(sp)
 200c304:	dc800217 	ldw	r18,8(sp)
 200c308:	dc400117 	ldw	r17,4(sp)
 200c30c:	dc000017 	ldw	r16,0(sp)
 200c310:	dec00904 	addi	sp,sp,36
 200c314:	f800283a 	ret

0200c318 <__fp_lock>:
 200c318:	0005883a 	mov	r2,zero
 200c31c:	f800283a 	ret

0200c320 <__sfmoreglue>:
 200c320:	defffc04 	addi	sp,sp,-16
 200c324:	dc400115 	stw	r17,4(sp)
 200c328:	2c7fffc4 	addi	r17,r5,-1
 200c32c:	8c401a24 	muli	r17,r17,104
 200c330:	dc800215 	stw	r18,8(sp)
 200c334:	2825883a 	mov	r18,r5
 200c338:	89401d04 	addi	r5,r17,116
 200c33c:	dc000015 	stw	r16,0(sp)
 200c340:	dfc00315 	stw	ra,12(sp)
 200c344:	20052780 	call	2005278 <_malloc_r>
 200c348:	1021883a 	mov	r16,r2
 200c34c:	10000726 	beq	r2,zero,200c36c <__sfmoreglue+0x4c>
 200c350:	11000304 	addi	r4,r2,12
 200c354:	10000015 	stw	zero,0(r2)
 200c358:	14800115 	stw	r18,4(r2)
 200c35c:	11000215 	stw	r4,8(r2)
 200c360:	89801a04 	addi	r6,r17,104
 200c364:	000b883a 	mov	r5,zero
 200c368:	2005a840 	call	2005a84 <memset>
 200c36c:	8005883a 	mov	r2,r16
 200c370:	dfc00317 	ldw	ra,12(sp)
 200c374:	dc800217 	ldw	r18,8(sp)
 200c378:	dc400117 	ldw	r17,4(sp)
 200c37c:	dc000017 	ldw	r16,0(sp)
 200c380:	dec00404 	addi	sp,sp,16
 200c384:	f800283a 	ret

0200c388 <__sfp>:
 200c388:	defffb04 	addi	sp,sp,-20
 200c38c:	dc000015 	stw	r16,0(sp)
 200c390:	04008134 	movhi	r16,516
 200c394:	84384904 	addi	r16,r16,-7900
 200c398:	dcc00315 	stw	r19,12(sp)
 200c39c:	2027883a 	mov	r19,r4
 200c3a0:	81000017 	ldw	r4,0(r16)
 200c3a4:	dfc00415 	stw	ra,16(sp)
 200c3a8:	dc800215 	stw	r18,8(sp)
 200c3ac:	20800e17 	ldw	r2,56(r4)
 200c3b0:	dc400115 	stw	r17,4(sp)
 200c3b4:	1000021e 	bne	r2,zero,200c3c0 <__sfp+0x38>
 200c3b8:	200c17c0 	call	200c17c <__sinit.part.1>
 200c3bc:	81000017 	ldw	r4,0(r16)
 200c3c0:	2480b804 	addi	r18,r4,736
 200c3c4:	047fffc4 	movi	r17,-1
 200c3c8:	91000117 	ldw	r4,4(r18)
 200c3cc:	94000217 	ldw	r16,8(r18)
 200c3d0:	213fffc4 	addi	r4,r4,-1
 200c3d4:	20000a16 	blt	r4,zero,200c400 <__sfp+0x78>
 200c3d8:	8080030f 	ldh	r2,12(r16)
 200c3dc:	10000c26 	beq	r2,zero,200c410 <__sfp+0x88>
 200c3e0:	80c01d04 	addi	r3,r16,116
 200c3e4:	00000206 	br	200c3f0 <__sfp+0x68>
 200c3e8:	18bfe60f 	ldh	r2,-104(r3)
 200c3ec:	10000826 	beq	r2,zero,200c410 <__sfp+0x88>
 200c3f0:	213fffc4 	addi	r4,r4,-1
 200c3f4:	1c3ffd04 	addi	r16,r3,-12
 200c3f8:	18c01a04 	addi	r3,r3,104
 200c3fc:	247ffa1e 	bne	r4,r17,200c3e8 <__alt_mem_epcs_flash_controller_0+0xfd00b3e8>
 200c400:	90800017 	ldw	r2,0(r18)
 200c404:	10001d26 	beq	r2,zero,200c47c <__sfp+0xf4>
 200c408:	1025883a 	mov	r18,r2
 200c40c:	003fee06 	br	200c3c8 <__alt_mem_epcs_flash_controller_0+0xfd00b3c8>
 200c410:	00bfffc4 	movi	r2,-1
 200c414:	8080038d 	sth	r2,14(r16)
 200c418:	00800044 	movi	r2,1
 200c41c:	8080030d 	sth	r2,12(r16)
 200c420:	80001915 	stw	zero,100(r16)
 200c424:	80000015 	stw	zero,0(r16)
 200c428:	80000215 	stw	zero,8(r16)
 200c42c:	80000115 	stw	zero,4(r16)
 200c430:	80000415 	stw	zero,16(r16)
 200c434:	80000515 	stw	zero,20(r16)
 200c438:	80000615 	stw	zero,24(r16)
 200c43c:	01800204 	movi	r6,8
 200c440:	000b883a 	mov	r5,zero
 200c444:	81001704 	addi	r4,r16,92
 200c448:	2005a840 	call	2005a84 <memset>
 200c44c:	8005883a 	mov	r2,r16
 200c450:	80000c15 	stw	zero,48(r16)
 200c454:	80000d15 	stw	zero,52(r16)
 200c458:	80001115 	stw	zero,68(r16)
 200c45c:	80001215 	stw	zero,72(r16)
 200c460:	dfc00417 	ldw	ra,16(sp)
 200c464:	dcc00317 	ldw	r19,12(sp)
 200c468:	dc800217 	ldw	r18,8(sp)
 200c46c:	dc400117 	ldw	r17,4(sp)
 200c470:	dc000017 	ldw	r16,0(sp)
 200c474:	dec00504 	addi	sp,sp,20
 200c478:	f800283a 	ret
 200c47c:	01400104 	movi	r5,4
 200c480:	9809883a 	mov	r4,r19
 200c484:	200c3200 	call	200c320 <__sfmoreglue>
 200c488:	90800015 	stw	r2,0(r18)
 200c48c:	103fde1e 	bne	r2,zero,200c408 <__alt_mem_epcs_flash_controller_0+0xfd00b408>
 200c490:	00800304 	movi	r2,12
 200c494:	98800015 	stw	r2,0(r19)
 200c498:	0005883a 	mov	r2,zero
 200c49c:	003ff006 	br	200c460 <__alt_mem_epcs_flash_controller_0+0xfd00b460>

0200c4a0 <_cleanup>:
 200c4a0:	00808134 	movhi	r2,516
 200c4a4:	10b84904 	addi	r2,r2,-7900
 200c4a8:	11000017 	ldw	r4,0(r2)
 200c4ac:	01408074 	movhi	r5,513
 200c4b0:	29460804 	addi	r5,r5,6176
 200c4b4:	200cebc1 	jmpi	200cebc <_fwalk_reent>

0200c4b8 <__sinit>:
 200c4b8:	20800e17 	ldw	r2,56(r4)
 200c4bc:	10000126 	beq	r2,zero,200c4c4 <__sinit+0xc>
 200c4c0:	f800283a 	ret
 200c4c4:	200c17c1 	jmpi	200c17c <__sinit.part.1>

0200c4c8 <__sfp_lock_acquire>:
 200c4c8:	f800283a 	ret

0200c4cc <__sfp_lock_release>:
 200c4cc:	f800283a 	ret

0200c4d0 <__sinit_lock_acquire>:
 200c4d0:	f800283a 	ret

0200c4d4 <__sinit_lock_release>:
 200c4d4:	f800283a 	ret

0200c4d8 <__fp_lock_all>:
 200c4d8:	00808134 	movhi	r2,516
 200c4dc:	10b84a04 	addi	r2,r2,-7896
 200c4e0:	11000017 	ldw	r4,0(r2)
 200c4e4:	01408074 	movhi	r5,513
 200c4e8:	2970c604 	addi	r5,r5,-15592
 200c4ec:	200cdf81 	jmpi	200cdf8 <_fwalk>

0200c4f0 <__fp_unlock_all>:
 200c4f0:	00808134 	movhi	r2,516
 200c4f4:	10b84a04 	addi	r2,r2,-7896
 200c4f8:	11000017 	ldw	r4,0(r2)
 200c4fc:	01408074 	movhi	r5,513
 200c500:	29705a04 	addi	r5,r5,-16024
 200c504:	200cdf81 	jmpi	200cdf8 <_fwalk>

0200c508 <_malloc_trim_r>:
 200c508:	defffb04 	addi	sp,sp,-20
 200c50c:	dcc00315 	stw	r19,12(sp)
 200c510:	04c08134 	movhi	r19,516
 200c514:	dc800215 	stw	r18,8(sp)
 200c518:	dc400115 	stw	r17,4(sp)
 200c51c:	dc000015 	stw	r16,0(sp)
 200c520:	dfc00415 	stw	ra,16(sp)
 200c524:	2821883a 	mov	r16,r5
 200c528:	9cf27304 	addi	r19,r19,-13876
 200c52c:	2025883a 	mov	r18,r4
 200c530:	20131880 	call	2013188 <__malloc_lock>
 200c534:	98800217 	ldw	r2,8(r19)
 200c538:	14400117 	ldw	r17,4(r2)
 200c53c:	00bfff04 	movi	r2,-4
 200c540:	88a2703a 	and	r17,r17,r2
 200c544:	8c21c83a 	sub	r16,r17,r16
 200c548:	8403fbc4 	addi	r16,r16,4079
 200c54c:	8020d33a 	srli	r16,r16,12
 200c550:	0083ffc4 	movi	r2,4095
 200c554:	843fffc4 	addi	r16,r16,-1
 200c558:	8020933a 	slli	r16,r16,12
 200c55c:	1400060e 	bge	r2,r16,200c578 <_malloc_trim_r+0x70>
 200c560:	000b883a 	mov	r5,zero
 200c564:	9009883a 	mov	r4,r18
 200c568:	2005d680 	call	2005d68 <_sbrk_r>
 200c56c:	98c00217 	ldw	r3,8(r19)
 200c570:	1c47883a 	add	r3,r3,r17
 200c574:	10c00a26 	beq	r2,r3,200c5a0 <_malloc_trim_r+0x98>
 200c578:	9009883a 	mov	r4,r18
 200c57c:	20131ac0 	call	20131ac <__malloc_unlock>
 200c580:	0005883a 	mov	r2,zero
 200c584:	dfc00417 	ldw	ra,16(sp)
 200c588:	dcc00317 	ldw	r19,12(sp)
 200c58c:	dc800217 	ldw	r18,8(sp)
 200c590:	dc400117 	ldw	r17,4(sp)
 200c594:	dc000017 	ldw	r16,0(sp)
 200c598:	dec00504 	addi	sp,sp,20
 200c59c:	f800283a 	ret
 200c5a0:	040bc83a 	sub	r5,zero,r16
 200c5a4:	9009883a 	mov	r4,r18
 200c5a8:	2005d680 	call	2005d68 <_sbrk_r>
 200c5ac:	00ffffc4 	movi	r3,-1
 200c5b0:	10c00d26 	beq	r2,r3,200c5e8 <_malloc_trim_r+0xe0>
 200c5b4:	00c08134 	movhi	r3,516
 200c5b8:	18f86904 	addi	r3,r3,-7772
 200c5bc:	18800017 	ldw	r2,0(r3)
 200c5c0:	99000217 	ldw	r4,8(r19)
 200c5c4:	8c23c83a 	sub	r17,r17,r16
 200c5c8:	8c400054 	ori	r17,r17,1
 200c5cc:	1421c83a 	sub	r16,r2,r16
 200c5d0:	24400115 	stw	r17,4(r4)
 200c5d4:	9009883a 	mov	r4,r18
 200c5d8:	1c000015 	stw	r16,0(r3)
 200c5dc:	20131ac0 	call	20131ac <__malloc_unlock>
 200c5e0:	00800044 	movi	r2,1
 200c5e4:	003fe706 	br	200c584 <__alt_mem_epcs_flash_controller_0+0xfd00b584>
 200c5e8:	000b883a 	mov	r5,zero
 200c5ec:	9009883a 	mov	r4,r18
 200c5f0:	2005d680 	call	2005d68 <_sbrk_r>
 200c5f4:	99000217 	ldw	r4,8(r19)
 200c5f8:	014003c4 	movi	r5,15
 200c5fc:	1107c83a 	sub	r3,r2,r4
 200c600:	28ffdd0e 	bge	r5,r3,200c578 <__alt_mem_epcs_flash_controller_0+0xfd00b578>
 200c604:	01408134 	movhi	r5,516
 200c608:	29784b04 	addi	r5,r5,-7892
 200c60c:	29400017 	ldw	r5,0(r5)
 200c610:	18c00054 	ori	r3,r3,1
 200c614:	20c00115 	stw	r3,4(r4)
 200c618:	00c08134 	movhi	r3,516
 200c61c:	1145c83a 	sub	r2,r2,r5
 200c620:	18f86904 	addi	r3,r3,-7772
 200c624:	18800015 	stw	r2,0(r3)
 200c628:	003fd306 	br	200c578 <__alt_mem_epcs_flash_controller_0+0xfd00b578>

0200c62c <_free_r>:
 200c62c:	28004126 	beq	r5,zero,200c734 <_free_r+0x108>
 200c630:	defffd04 	addi	sp,sp,-12
 200c634:	dc400115 	stw	r17,4(sp)
 200c638:	dc000015 	stw	r16,0(sp)
 200c63c:	2023883a 	mov	r17,r4
 200c640:	2821883a 	mov	r16,r5
 200c644:	dfc00215 	stw	ra,8(sp)
 200c648:	20131880 	call	2013188 <__malloc_lock>
 200c64c:	81ffff17 	ldw	r7,-4(r16)
 200c650:	00bfff84 	movi	r2,-2
 200c654:	01008134 	movhi	r4,516
 200c658:	81bffe04 	addi	r6,r16,-8
 200c65c:	3884703a 	and	r2,r7,r2
 200c660:	21327304 	addi	r4,r4,-13876
 200c664:	308b883a 	add	r5,r6,r2
 200c668:	2a400117 	ldw	r9,4(r5)
 200c66c:	22000217 	ldw	r8,8(r4)
 200c670:	00ffff04 	movi	r3,-4
 200c674:	48c6703a 	and	r3,r9,r3
 200c678:	2a005726 	beq	r5,r8,200c7d8 <_free_r+0x1ac>
 200c67c:	28c00115 	stw	r3,4(r5)
 200c680:	39c0004c 	andi	r7,r7,1
 200c684:	3800091e 	bne	r7,zero,200c6ac <_free_r+0x80>
 200c688:	823ffe17 	ldw	r8,-8(r16)
 200c68c:	22400204 	addi	r9,r4,8
 200c690:	320dc83a 	sub	r6,r6,r8
 200c694:	31c00217 	ldw	r7,8(r6)
 200c698:	1205883a 	add	r2,r2,r8
 200c69c:	3a406526 	beq	r7,r9,200c834 <_free_r+0x208>
 200c6a0:	32000317 	ldw	r8,12(r6)
 200c6a4:	3a000315 	stw	r8,12(r7)
 200c6a8:	41c00215 	stw	r7,8(r8)
 200c6ac:	28cf883a 	add	r7,r5,r3
 200c6b0:	39c00117 	ldw	r7,4(r7)
 200c6b4:	39c0004c 	andi	r7,r7,1
 200c6b8:	38003a26 	beq	r7,zero,200c7a4 <_free_r+0x178>
 200c6bc:	10c00054 	ori	r3,r2,1
 200c6c0:	30c00115 	stw	r3,4(r6)
 200c6c4:	3087883a 	add	r3,r6,r2
 200c6c8:	18800015 	stw	r2,0(r3)
 200c6cc:	00c07fc4 	movi	r3,511
 200c6d0:	18801936 	bltu	r3,r2,200c738 <_free_r+0x10c>
 200c6d4:	1004d0fa 	srli	r2,r2,3
 200c6d8:	01c00044 	movi	r7,1
 200c6dc:	21400117 	ldw	r5,4(r4)
 200c6e0:	10c00044 	addi	r3,r2,1
 200c6e4:	18c7883a 	add	r3,r3,r3
 200c6e8:	1005d0ba 	srai	r2,r2,2
 200c6ec:	18c7883a 	add	r3,r3,r3
 200c6f0:	18c7883a 	add	r3,r3,r3
 200c6f4:	1907883a 	add	r3,r3,r4
 200c6f8:	3884983a 	sll	r2,r7,r2
 200c6fc:	19c00017 	ldw	r7,0(r3)
 200c700:	1a3ffe04 	addi	r8,r3,-8
 200c704:	1144b03a 	or	r2,r2,r5
 200c708:	32000315 	stw	r8,12(r6)
 200c70c:	31c00215 	stw	r7,8(r6)
 200c710:	20800115 	stw	r2,4(r4)
 200c714:	19800015 	stw	r6,0(r3)
 200c718:	39800315 	stw	r6,12(r7)
 200c71c:	8809883a 	mov	r4,r17
 200c720:	dfc00217 	ldw	ra,8(sp)
 200c724:	dc400117 	ldw	r17,4(sp)
 200c728:	dc000017 	ldw	r16,0(sp)
 200c72c:	dec00304 	addi	sp,sp,12
 200c730:	20131ac1 	jmpi	20131ac <__malloc_unlock>
 200c734:	f800283a 	ret
 200c738:	100ad27a 	srli	r5,r2,9
 200c73c:	00c00104 	movi	r3,4
 200c740:	19404a36 	bltu	r3,r5,200c86c <_free_r+0x240>
 200c744:	100ad1ba 	srli	r5,r2,6
 200c748:	28c00e44 	addi	r3,r5,57
 200c74c:	18c7883a 	add	r3,r3,r3
 200c750:	29400e04 	addi	r5,r5,56
 200c754:	18c7883a 	add	r3,r3,r3
 200c758:	18c7883a 	add	r3,r3,r3
 200c75c:	1909883a 	add	r4,r3,r4
 200c760:	20c00017 	ldw	r3,0(r4)
 200c764:	01c08134 	movhi	r7,516
 200c768:	213ffe04 	addi	r4,r4,-8
 200c76c:	39f27304 	addi	r7,r7,-13876
 200c770:	20c04426 	beq	r4,r3,200c884 <_free_r+0x258>
 200c774:	01ffff04 	movi	r7,-4
 200c778:	19400117 	ldw	r5,4(r3)
 200c77c:	29ca703a 	and	r5,r5,r7
 200c780:	1140022e 	bgeu	r2,r5,200c78c <_free_r+0x160>
 200c784:	18c00217 	ldw	r3,8(r3)
 200c788:	20fffb1e 	bne	r4,r3,200c778 <__alt_mem_epcs_flash_controller_0+0xfd00b778>
 200c78c:	19000317 	ldw	r4,12(r3)
 200c790:	31000315 	stw	r4,12(r6)
 200c794:	30c00215 	stw	r3,8(r6)
 200c798:	21800215 	stw	r6,8(r4)
 200c79c:	19800315 	stw	r6,12(r3)
 200c7a0:	003fde06 	br	200c71c <__alt_mem_epcs_flash_controller_0+0xfd00b71c>
 200c7a4:	29c00217 	ldw	r7,8(r5)
 200c7a8:	10c5883a 	add	r2,r2,r3
 200c7ac:	00c08134 	movhi	r3,516
 200c7b0:	18f27504 	addi	r3,r3,-13868
 200c7b4:	38c03b26 	beq	r7,r3,200c8a4 <_free_r+0x278>
 200c7b8:	2a000317 	ldw	r8,12(r5)
 200c7bc:	11400054 	ori	r5,r2,1
 200c7c0:	3087883a 	add	r3,r6,r2
 200c7c4:	3a000315 	stw	r8,12(r7)
 200c7c8:	41c00215 	stw	r7,8(r8)
 200c7cc:	31400115 	stw	r5,4(r6)
 200c7d0:	18800015 	stw	r2,0(r3)
 200c7d4:	003fbd06 	br	200c6cc <__alt_mem_epcs_flash_controller_0+0xfd00b6cc>
 200c7d8:	39c0004c 	andi	r7,r7,1
 200c7dc:	10c5883a 	add	r2,r2,r3
 200c7e0:	3800071e 	bne	r7,zero,200c800 <_free_r+0x1d4>
 200c7e4:	81fffe17 	ldw	r7,-8(r16)
 200c7e8:	31cdc83a 	sub	r6,r6,r7
 200c7ec:	30c00317 	ldw	r3,12(r6)
 200c7f0:	31400217 	ldw	r5,8(r6)
 200c7f4:	11c5883a 	add	r2,r2,r7
 200c7f8:	28c00315 	stw	r3,12(r5)
 200c7fc:	19400215 	stw	r5,8(r3)
 200c800:	10c00054 	ori	r3,r2,1
 200c804:	30c00115 	stw	r3,4(r6)
 200c808:	00c08134 	movhi	r3,516
 200c80c:	18f84c04 	addi	r3,r3,-7888
 200c810:	18c00017 	ldw	r3,0(r3)
 200c814:	21800215 	stw	r6,8(r4)
 200c818:	10ffc036 	bltu	r2,r3,200c71c <__alt_mem_epcs_flash_controller_0+0xfd00b71c>
 200c81c:	00808134 	movhi	r2,516
 200c820:	10b85d04 	addi	r2,r2,-7820
 200c824:	11400017 	ldw	r5,0(r2)
 200c828:	8809883a 	mov	r4,r17
 200c82c:	200c5080 	call	200c508 <_malloc_trim_r>
 200c830:	003fba06 	br	200c71c <__alt_mem_epcs_flash_controller_0+0xfd00b71c>
 200c834:	28c9883a 	add	r4,r5,r3
 200c838:	21000117 	ldw	r4,4(r4)
 200c83c:	2100004c 	andi	r4,r4,1
 200c840:	2000391e 	bne	r4,zero,200c928 <_free_r+0x2fc>
 200c844:	29c00217 	ldw	r7,8(r5)
 200c848:	29000317 	ldw	r4,12(r5)
 200c84c:	1885883a 	add	r2,r3,r2
 200c850:	10c00054 	ori	r3,r2,1
 200c854:	39000315 	stw	r4,12(r7)
 200c858:	21c00215 	stw	r7,8(r4)
 200c85c:	30c00115 	stw	r3,4(r6)
 200c860:	308d883a 	add	r6,r6,r2
 200c864:	30800015 	stw	r2,0(r6)
 200c868:	003fac06 	br	200c71c <__alt_mem_epcs_flash_controller_0+0xfd00b71c>
 200c86c:	00c00504 	movi	r3,20
 200c870:	19401536 	bltu	r3,r5,200c8c8 <_free_r+0x29c>
 200c874:	28c01704 	addi	r3,r5,92
 200c878:	18c7883a 	add	r3,r3,r3
 200c87c:	294016c4 	addi	r5,r5,91
 200c880:	003fb406 	br	200c754 <__alt_mem_epcs_flash_controller_0+0xfd00b754>
 200c884:	280bd0ba 	srai	r5,r5,2
 200c888:	00c00044 	movi	r3,1
 200c88c:	38800117 	ldw	r2,4(r7)
 200c890:	194a983a 	sll	r5,r3,r5
 200c894:	2007883a 	mov	r3,r4
 200c898:	2884b03a 	or	r2,r5,r2
 200c89c:	38800115 	stw	r2,4(r7)
 200c8a0:	003fbb06 	br	200c790 <__alt_mem_epcs_flash_controller_0+0xfd00b790>
 200c8a4:	21800515 	stw	r6,20(r4)
 200c8a8:	21800415 	stw	r6,16(r4)
 200c8ac:	10c00054 	ori	r3,r2,1
 200c8b0:	31c00315 	stw	r7,12(r6)
 200c8b4:	31c00215 	stw	r7,8(r6)
 200c8b8:	30c00115 	stw	r3,4(r6)
 200c8bc:	308d883a 	add	r6,r6,r2
 200c8c0:	30800015 	stw	r2,0(r6)
 200c8c4:	003f9506 	br	200c71c <__alt_mem_epcs_flash_controller_0+0xfd00b71c>
 200c8c8:	00c01504 	movi	r3,84
 200c8cc:	19400536 	bltu	r3,r5,200c8e4 <_free_r+0x2b8>
 200c8d0:	100ad33a 	srli	r5,r2,12
 200c8d4:	28c01bc4 	addi	r3,r5,111
 200c8d8:	18c7883a 	add	r3,r3,r3
 200c8dc:	29401b84 	addi	r5,r5,110
 200c8e0:	003f9c06 	br	200c754 <__alt_mem_epcs_flash_controller_0+0xfd00b754>
 200c8e4:	00c05504 	movi	r3,340
 200c8e8:	19400536 	bltu	r3,r5,200c900 <_free_r+0x2d4>
 200c8ec:	100ad3fa 	srli	r5,r2,15
 200c8f0:	28c01e04 	addi	r3,r5,120
 200c8f4:	18c7883a 	add	r3,r3,r3
 200c8f8:	29401dc4 	addi	r5,r5,119
 200c8fc:	003f9506 	br	200c754 <__alt_mem_epcs_flash_controller_0+0xfd00b754>
 200c900:	00c15504 	movi	r3,1364
 200c904:	19400536 	bltu	r3,r5,200c91c <_free_r+0x2f0>
 200c908:	100ad4ba 	srli	r5,r2,18
 200c90c:	28c01f44 	addi	r3,r5,125
 200c910:	18c7883a 	add	r3,r3,r3
 200c914:	29401f04 	addi	r5,r5,124
 200c918:	003f8e06 	br	200c754 <__alt_mem_epcs_flash_controller_0+0xfd00b754>
 200c91c:	00c03f84 	movi	r3,254
 200c920:	01401f84 	movi	r5,126
 200c924:	003f8b06 	br	200c754 <__alt_mem_epcs_flash_controller_0+0xfd00b754>
 200c928:	10c00054 	ori	r3,r2,1
 200c92c:	30c00115 	stw	r3,4(r6)
 200c930:	308d883a 	add	r6,r6,r2
 200c934:	30800015 	stw	r2,0(r6)
 200c938:	003f7806 	br	200c71c <__alt_mem_epcs_flash_controller_0+0xfd00b71c>

0200c93c <__sfvwrite_r>:
 200c93c:	30800217 	ldw	r2,8(r6)
 200c940:	10006726 	beq	r2,zero,200cae0 <__sfvwrite_r+0x1a4>
 200c944:	28c0030b 	ldhu	r3,12(r5)
 200c948:	defff404 	addi	sp,sp,-48
 200c94c:	dd400715 	stw	r21,28(sp)
 200c950:	dd000615 	stw	r20,24(sp)
 200c954:	dc000215 	stw	r16,8(sp)
 200c958:	dfc00b15 	stw	ra,44(sp)
 200c95c:	df000a15 	stw	fp,40(sp)
 200c960:	ddc00915 	stw	r23,36(sp)
 200c964:	dd800815 	stw	r22,32(sp)
 200c968:	dcc00515 	stw	r19,20(sp)
 200c96c:	dc800415 	stw	r18,16(sp)
 200c970:	dc400315 	stw	r17,12(sp)
 200c974:	1880020c 	andi	r2,r3,8
 200c978:	2821883a 	mov	r16,r5
 200c97c:	202b883a 	mov	r21,r4
 200c980:	3029883a 	mov	r20,r6
 200c984:	10002726 	beq	r2,zero,200ca24 <__sfvwrite_r+0xe8>
 200c988:	28800417 	ldw	r2,16(r5)
 200c98c:	10002526 	beq	r2,zero,200ca24 <__sfvwrite_r+0xe8>
 200c990:	1880008c 	andi	r2,r3,2
 200c994:	a4400017 	ldw	r17,0(r20)
 200c998:	10002a26 	beq	r2,zero,200ca44 <__sfvwrite_r+0x108>
 200c99c:	05a00034 	movhi	r22,32768
 200c9a0:	0027883a 	mov	r19,zero
 200c9a4:	0025883a 	mov	r18,zero
 200c9a8:	b5bf0004 	addi	r22,r22,-1024
 200c9ac:	980d883a 	mov	r6,r19
 200c9b0:	a809883a 	mov	r4,r21
 200c9b4:	90004626 	beq	r18,zero,200cad0 <__sfvwrite_r+0x194>
 200c9b8:	900f883a 	mov	r7,r18
 200c9bc:	b480022e 	bgeu	r22,r18,200c9c8 <__sfvwrite_r+0x8c>
 200c9c0:	01e00034 	movhi	r7,32768
 200c9c4:	39ff0004 	addi	r7,r7,-1024
 200c9c8:	80800917 	ldw	r2,36(r16)
 200c9cc:	81400717 	ldw	r5,28(r16)
 200c9d0:	103ee83a 	callr	r2
 200c9d4:	0080570e 	bge	zero,r2,200cb34 <__sfvwrite_r+0x1f8>
 200c9d8:	a0c00217 	ldw	r3,8(r20)
 200c9dc:	98a7883a 	add	r19,r19,r2
 200c9e0:	90a5c83a 	sub	r18,r18,r2
 200c9e4:	1885c83a 	sub	r2,r3,r2
 200c9e8:	a0800215 	stw	r2,8(r20)
 200c9ec:	103fef1e 	bne	r2,zero,200c9ac <__alt_mem_epcs_flash_controller_0+0xfd00b9ac>
 200c9f0:	0005883a 	mov	r2,zero
 200c9f4:	dfc00b17 	ldw	ra,44(sp)
 200c9f8:	df000a17 	ldw	fp,40(sp)
 200c9fc:	ddc00917 	ldw	r23,36(sp)
 200ca00:	dd800817 	ldw	r22,32(sp)
 200ca04:	dd400717 	ldw	r21,28(sp)
 200ca08:	dd000617 	ldw	r20,24(sp)
 200ca0c:	dcc00517 	ldw	r19,20(sp)
 200ca10:	dc800417 	ldw	r18,16(sp)
 200ca14:	dc400317 	ldw	r17,12(sp)
 200ca18:	dc000217 	ldw	r16,8(sp)
 200ca1c:	dec00c04 	addi	sp,sp,48
 200ca20:	f800283a 	ret
 200ca24:	800b883a 	mov	r5,r16
 200ca28:	a809883a 	mov	r4,r21
 200ca2c:	200a4e40 	call	200a4e4 <__swsetup_r>
 200ca30:	1000eb1e 	bne	r2,zero,200cde0 <__sfvwrite_r+0x4a4>
 200ca34:	80c0030b 	ldhu	r3,12(r16)
 200ca38:	a4400017 	ldw	r17,0(r20)
 200ca3c:	1880008c 	andi	r2,r3,2
 200ca40:	103fd61e 	bne	r2,zero,200c99c <__alt_mem_epcs_flash_controller_0+0xfd00b99c>
 200ca44:	1880004c 	andi	r2,r3,1
 200ca48:	10003f1e 	bne	r2,zero,200cb48 <__sfvwrite_r+0x20c>
 200ca4c:	0039883a 	mov	fp,zero
 200ca50:	0025883a 	mov	r18,zero
 200ca54:	90001a26 	beq	r18,zero,200cac0 <__sfvwrite_r+0x184>
 200ca58:	1880800c 	andi	r2,r3,512
 200ca5c:	84c00217 	ldw	r19,8(r16)
 200ca60:	10002126 	beq	r2,zero,200cae8 <__sfvwrite_r+0x1ac>
 200ca64:	982f883a 	mov	r23,r19
 200ca68:	94c09336 	bltu	r18,r19,200ccb8 <__sfvwrite_r+0x37c>
 200ca6c:	1881200c 	andi	r2,r3,1152
 200ca70:	10009e1e 	bne	r2,zero,200ccec <__sfvwrite_r+0x3b0>
 200ca74:	81000017 	ldw	r4,0(r16)
 200ca78:	b80d883a 	mov	r6,r23
 200ca7c:	e00b883a 	mov	r5,fp
 200ca80:	200d4440 	call	200d444 <memmove>
 200ca84:	80c00217 	ldw	r3,8(r16)
 200ca88:	81000017 	ldw	r4,0(r16)
 200ca8c:	9005883a 	mov	r2,r18
 200ca90:	1ce7c83a 	sub	r19,r3,r19
 200ca94:	25cf883a 	add	r7,r4,r23
 200ca98:	84c00215 	stw	r19,8(r16)
 200ca9c:	81c00015 	stw	r7,0(r16)
 200caa0:	a0c00217 	ldw	r3,8(r20)
 200caa4:	e0b9883a 	add	fp,fp,r2
 200caa8:	90a5c83a 	sub	r18,r18,r2
 200caac:	18a7c83a 	sub	r19,r3,r2
 200cab0:	a4c00215 	stw	r19,8(r20)
 200cab4:	983fce26 	beq	r19,zero,200c9f0 <__alt_mem_epcs_flash_controller_0+0xfd00b9f0>
 200cab8:	80c0030b 	ldhu	r3,12(r16)
 200cabc:	903fe61e 	bne	r18,zero,200ca58 <__alt_mem_epcs_flash_controller_0+0xfd00ba58>
 200cac0:	8f000017 	ldw	fp,0(r17)
 200cac4:	8c800117 	ldw	r18,4(r17)
 200cac8:	8c400204 	addi	r17,r17,8
 200cacc:	003fe106 	br	200ca54 <__alt_mem_epcs_flash_controller_0+0xfd00ba54>
 200cad0:	8cc00017 	ldw	r19,0(r17)
 200cad4:	8c800117 	ldw	r18,4(r17)
 200cad8:	8c400204 	addi	r17,r17,8
 200cadc:	003fb306 	br	200c9ac <__alt_mem_epcs_flash_controller_0+0xfd00b9ac>
 200cae0:	0005883a 	mov	r2,zero
 200cae4:	f800283a 	ret
 200cae8:	81000017 	ldw	r4,0(r16)
 200caec:	80800417 	ldw	r2,16(r16)
 200caf0:	11005736 	bltu	r2,r4,200cc50 <__sfvwrite_r+0x314>
 200caf4:	85c00517 	ldw	r23,20(r16)
 200caf8:	95c05536 	bltu	r18,r23,200cc50 <__sfvwrite_r+0x314>
 200cafc:	00a00034 	movhi	r2,32768
 200cb00:	10bfffc4 	addi	r2,r2,-1
 200cb04:	9009883a 	mov	r4,r18
 200cb08:	1480012e 	bgeu	r2,r18,200cb10 <__sfvwrite_r+0x1d4>
 200cb0c:	1009883a 	mov	r4,r2
 200cb10:	b80b883a 	mov	r5,r23
 200cb14:	2004fd80 	call	2004fd8 <__divsi3>
 200cb18:	15cf383a 	mul	r7,r2,r23
 200cb1c:	81400717 	ldw	r5,28(r16)
 200cb20:	80800917 	ldw	r2,36(r16)
 200cb24:	e00d883a 	mov	r6,fp
 200cb28:	a809883a 	mov	r4,r21
 200cb2c:	103ee83a 	callr	r2
 200cb30:	00bfdb16 	blt	zero,r2,200caa0 <__alt_mem_epcs_flash_controller_0+0xfd00baa0>
 200cb34:	8080030b 	ldhu	r2,12(r16)
 200cb38:	10801014 	ori	r2,r2,64
 200cb3c:	8080030d 	sth	r2,12(r16)
 200cb40:	00bfffc4 	movi	r2,-1
 200cb44:	003fab06 	br	200c9f4 <__alt_mem_epcs_flash_controller_0+0xfd00b9f4>
 200cb48:	0027883a 	mov	r19,zero
 200cb4c:	0011883a 	mov	r8,zero
 200cb50:	0039883a 	mov	fp,zero
 200cb54:	0025883a 	mov	r18,zero
 200cb58:	90001f26 	beq	r18,zero,200cbd8 <__sfvwrite_r+0x29c>
 200cb5c:	40005a26 	beq	r8,zero,200ccc8 <__sfvwrite_r+0x38c>
 200cb60:	982d883a 	mov	r22,r19
 200cb64:	94c0012e 	bgeu	r18,r19,200cb6c <__sfvwrite_r+0x230>
 200cb68:	902d883a 	mov	r22,r18
 200cb6c:	81000017 	ldw	r4,0(r16)
 200cb70:	80800417 	ldw	r2,16(r16)
 200cb74:	b02f883a 	mov	r23,r22
 200cb78:	81c00517 	ldw	r7,20(r16)
 200cb7c:	1100032e 	bgeu	r2,r4,200cb8c <__sfvwrite_r+0x250>
 200cb80:	80c00217 	ldw	r3,8(r16)
 200cb84:	38c7883a 	add	r3,r7,r3
 200cb88:	1d801816 	blt	r3,r22,200cbec <__sfvwrite_r+0x2b0>
 200cb8c:	b1c03e16 	blt	r22,r7,200cc88 <__sfvwrite_r+0x34c>
 200cb90:	80800917 	ldw	r2,36(r16)
 200cb94:	81400717 	ldw	r5,28(r16)
 200cb98:	e00d883a 	mov	r6,fp
 200cb9c:	da000115 	stw	r8,4(sp)
 200cba0:	a809883a 	mov	r4,r21
 200cba4:	103ee83a 	callr	r2
 200cba8:	102f883a 	mov	r23,r2
 200cbac:	da000117 	ldw	r8,4(sp)
 200cbb0:	00bfe00e 	bge	zero,r2,200cb34 <__alt_mem_epcs_flash_controller_0+0xfd00bb34>
 200cbb4:	9de7c83a 	sub	r19,r19,r23
 200cbb8:	98001f26 	beq	r19,zero,200cc38 <__sfvwrite_r+0x2fc>
 200cbbc:	a0800217 	ldw	r2,8(r20)
 200cbc0:	e5f9883a 	add	fp,fp,r23
 200cbc4:	95e5c83a 	sub	r18,r18,r23
 200cbc8:	15efc83a 	sub	r23,r2,r23
 200cbcc:	a5c00215 	stw	r23,8(r20)
 200cbd0:	b83f8726 	beq	r23,zero,200c9f0 <__alt_mem_epcs_flash_controller_0+0xfd00b9f0>
 200cbd4:	903fe11e 	bne	r18,zero,200cb5c <__alt_mem_epcs_flash_controller_0+0xfd00bb5c>
 200cbd8:	8f000017 	ldw	fp,0(r17)
 200cbdc:	8c800117 	ldw	r18,4(r17)
 200cbe0:	0011883a 	mov	r8,zero
 200cbe4:	8c400204 	addi	r17,r17,8
 200cbe8:	003fdb06 	br	200cb58 <__alt_mem_epcs_flash_controller_0+0xfd00bb58>
 200cbec:	180d883a 	mov	r6,r3
 200cbf0:	e00b883a 	mov	r5,fp
 200cbf4:	da000115 	stw	r8,4(sp)
 200cbf8:	d8c00015 	stw	r3,0(sp)
 200cbfc:	200d4440 	call	200d444 <memmove>
 200cc00:	d8c00017 	ldw	r3,0(sp)
 200cc04:	80800017 	ldw	r2,0(r16)
 200cc08:	800b883a 	mov	r5,r16
 200cc0c:	a809883a 	mov	r4,r21
 200cc10:	10c5883a 	add	r2,r2,r3
 200cc14:	80800015 	stw	r2,0(r16)
 200cc18:	d8c00015 	stw	r3,0(sp)
 200cc1c:	200c0dc0 	call	200c0dc <_fflush_r>
 200cc20:	d8c00017 	ldw	r3,0(sp)
 200cc24:	da000117 	ldw	r8,4(sp)
 200cc28:	103fc21e 	bne	r2,zero,200cb34 <__alt_mem_epcs_flash_controller_0+0xfd00bb34>
 200cc2c:	182f883a 	mov	r23,r3
 200cc30:	9de7c83a 	sub	r19,r19,r23
 200cc34:	983fe11e 	bne	r19,zero,200cbbc <__alt_mem_epcs_flash_controller_0+0xfd00bbbc>
 200cc38:	800b883a 	mov	r5,r16
 200cc3c:	a809883a 	mov	r4,r21
 200cc40:	200c0dc0 	call	200c0dc <_fflush_r>
 200cc44:	103fbb1e 	bne	r2,zero,200cb34 <__alt_mem_epcs_flash_controller_0+0xfd00bb34>
 200cc48:	0011883a 	mov	r8,zero
 200cc4c:	003fdb06 	br	200cbbc <__alt_mem_epcs_flash_controller_0+0xfd00bbbc>
 200cc50:	94c0012e 	bgeu	r18,r19,200cc58 <__sfvwrite_r+0x31c>
 200cc54:	9027883a 	mov	r19,r18
 200cc58:	980d883a 	mov	r6,r19
 200cc5c:	e00b883a 	mov	r5,fp
 200cc60:	200d4440 	call	200d444 <memmove>
 200cc64:	80800217 	ldw	r2,8(r16)
 200cc68:	80c00017 	ldw	r3,0(r16)
 200cc6c:	14c5c83a 	sub	r2,r2,r19
 200cc70:	1cc7883a 	add	r3,r3,r19
 200cc74:	80800215 	stw	r2,8(r16)
 200cc78:	80c00015 	stw	r3,0(r16)
 200cc7c:	10004326 	beq	r2,zero,200cd8c <__sfvwrite_r+0x450>
 200cc80:	9805883a 	mov	r2,r19
 200cc84:	003f8606 	br	200caa0 <__alt_mem_epcs_flash_controller_0+0xfd00baa0>
 200cc88:	b00d883a 	mov	r6,r22
 200cc8c:	e00b883a 	mov	r5,fp
 200cc90:	da000115 	stw	r8,4(sp)
 200cc94:	200d4440 	call	200d444 <memmove>
 200cc98:	80800217 	ldw	r2,8(r16)
 200cc9c:	80c00017 	ldw	r3,0(r16)
 200cca0:	da000117 	ldw	r8,4(sp)
 200cca4:	1585c83a 	sub	r2,r2,r22
 200cca8:	1dad883a 	add	r22,r3,r22
 200ccac:	80800215 	stw	r2,8(r16)
 200ccb0:	85800015 	stw	r22,0(r16)
 200ccb4:	003fbf06 	br	200cbb4 <__alt_mem_epcs_flash_controller_0+0xfd00bbb4>
 200ccb8:	81000017 	ldw	r4,0(r16)
 200ccbc:	9027883a 	mov	r19,r18
 200ccc0:	902f883a 	mov	r23,r18
 200ccc4:	003f6c06 	br	200ca78 <__alt_mem_epcs_flash_controller_0+0xfd00ba78>
 200ccc8:	900d883a 	mov	r6,r18
 200cccc:	01400284 	movi	r5,10
 200ccd0:	e009883a 	mov	r4,fp
 200ccd4:	200d2180 	call	200d218 <memchr>
 200ccd8:	10003e26 	beq	r2,zero,200cdd4 <__sfvwrite_r+0x498>
 200ccdc:	10800044 	addi	r2,r2,1
 200cce0:	1727c83a 	sub	r19,r2,fp
 200cce4:	02000044 	movi	r8,1
 200cce8:	003f9d06 	br	200cb60 <__alt_mem_epcs_flash_controller_0+0xfd00bb60>
 200ccec:	80800517 	ldw	r2,20(r16)
 200ccf0:	81400417 	ldw	r5,16(r16)
 200ccf4:	81c00017 	ldw	r7,0(r16)
 200ccf8:	10a7883a 	add	r19,r2,r2
 200ccfc:	9885883a 	add	r2,r19,r2
 200cd00:	1026d7fa 	srli	r19,r2,31
 200cd04:	396dc83a 	sub	r22,r7,r5
 200cd08:	b1000044 	addi	r4,r22,1
 200cd0c:	9885883a 	add	r2,r19,r2
 200cd10:	1027d07a 	srai	r19,r2,1
 200cd14:	2485883a 	add	r2,r4,r18
 200cd18:	980d883a 	mov	r6,r19
 200cd1c:	9880022e 	bgeu	r19,r2,200cd28 <__sfvwrite_r+0x3ec>
 200cd20:	1027883a 	mov	r19,r2
 200cd24:	100d883a 	mov	r6,r2
 200cd28:	18c1000c 	andi	r3,r3,1024
 200cd2c:	18001c26 	beq	r3,zero,200cda0 <__sfvwrite_r+0x464>
 200cd30:	300b883a 	mov	r5,r6
 200cd34:	a809883a 	mov	r4,r21
 200cd38:	20052780 	call	2005278 <_malloc_r>
 200cd3c:	102f883a 	mov	r23,r2
 200cd40:	10002926 	beq	r2,zero,200cde8 <__sfvwrite_r+0x4ac>
 200cd44:	81400417 	ldw	r5,16(r16)
 200cd48:	b00d883a 	mov	r6,r22
 200cd4c:	1009883a 	mov	r4,r2
 200cd50:	200d2fc0 	call	200d2fc <memcpy>
 200cd54:	8080030b 	ldhu	r2,12(r16)
 200cd58:	00fedfc4 	movi	r3,-1153
 200cd5c:	10c4703a 	and	r2,r2,r3
 200cd60:	10802014 	ori	r2,r2,128
 200cd64:	8080030d 	sth	r2,12(r16)
 200cd68:	bd89883a 	add	r4,r23,r22
 200cd6c:	9d8fc83a 	sub	r7,r19,r22
 200cd70:	85c00415 	stw	r23,16(r16)
 200cd74:	84c00515 	stw	r19,20(r16)
 200cd78:	81000015 	stw	r4,0(r16)
 200cd7c:	9027883a 	mov	r19,r18
 200cd80:	81c00215 	stw	r7,8(r16)
 200cd84:	902f883a 	mov	r23,r18
 200cd88:	003f3b06 	br	200ca78 <__alt_mem_epcs_flash_controller_0+0xfd00ba78>
 200cd8c:	800b883a 	mov	r5,r16
 200cd90:	a809883a 	mov	r4,r21
 200cd94:	200c0dc0 	call	200c0dc <_fflush_r>
 200cd98:	103fb926 	beq	r2,zero,200cc80 <__alt_mem_epcs_flash_controller_0+0xfd00bc80>
 200cd9c:	003f6506 	br	200cb34 <__alt_mem_epcs_flash_controller_0+0xfd00bb34>
 200cda0:	a809883a 	mov	r4,r21
 200cda4:	200e59c0 	call	200e59c <_realloc_r>
 200cda8:	102f883a 	mov	r23,r2
 200cdac:	103fee1e 	bne	r2,zero,200cd68 <__alt_mem_epcs_flash_controller_0+0xfd00bd68>
 200cdb0:	81400417 	ldw	r5,16(r16)
 200cdb4:	a809883a 	mov	r4,r21
 200cdb8:	200c62c0 	call	200c62c <_free_r>
 200cdbc:	8080030b 	ldhu	r2,12(r16)
 200cdc0:	00ffdfc4 	movi	r3,-129
 200cdc4:	1884703a 	and	r2,r3,r2
 200cdc8:	00c00304 	movi	r3,12
 200cdcc:	a8c00015 	stw	r3,0(r21)
 200cdd0:	003f5906 	br	200cb38 <__alt_mem_epcs_flash_controller_0+0xfd00bb38>
 200cdd4:	94c00044 	addi	r19,r18,1
 200cdd8:	02000044 	movi	r8,1
 200cddc:	003f6006 	br	200cb60 <__alt_mem_epcs_flash_controller_0+0xfd00bb60>
 200cde0:	00bfffc4 	movi	r2,-1
 200cde4:	003f0306 	br	200c9f4 <__alt_mem_epcs_flash_controller_0+0xfd00b9f4>
 200cde8:	00800304 	movi	r2,12
 200cdec:	a8800015 	stw	r2,0(r21)
 200cdf0:	8080030b 	ldhu	r2,12(r16)
 200cdf4:	003f5006 	br	200cb38 <__alt_mem_epcs_flash_controller_0+0xfd00bb38>

0200cdf8 <_fwalk>:
 200cdf8:	defff704 	addi	sp,sp,-36
 200cdfc:	dd000415 	stw	r20,16(sp)
 200ce00:	dfc00815 	stw	ra,32(sp)
 200ce04:	ddc00715 	stw	r23,28(sp)
 200ce08:	dd800615 	stw	r22,24(sp)
 200ce0c:	dd400515 	stw	r21,20(sp)
 200ce10:	dcc00315 	stw	r19,12(sp)
 200ce14:	dc800215 	stw	r18,8(sp)
 200ce18:	dc400115 	stw	r17,4(sp)
 200ce1c:	dc000015 	stw	r16,0(sp)
 200ce20:	2500b804 	addi	r20,r4,736
 200ce24:	a0002326 	beq	r20,zero,200ceb4 <_fwalk+0xbc>
 200ce28:	282b883a 	mov	r21,r5
 200ce2c:	002f883a 	mov	r23,zero
 200ce30:	05800044 	movi	r22,1
 200ce34:	04ffffc4 	movi	r19,-1
 200ce38:	a4400117 	ldw	r17,4(r20)
 200ce3c:	a4800217 	ldw	r18,8(r20)
 200ce40:	8c7fffc4 	addi	r17,r17,-1
 200ce44:	88000d16 	blt	r17,zero,200ce7c <_fwalk+0x84>
 200ce48:	94000304 	addi	r16,r18,12
 200ce4c:	94800384 	addi	r18,r18,14
 200ce50:	8080000b 	ldhu	r2,0(r16)
 200ce54:	8c7fffc4 	addi	r17,r17,-1
 200ce58:	813ffd04 	addi	r4,r16,-12
 200ce5c:	b080042e 	bgeu	r22,r2,200ce70 <_fwalk+0x78>
 200ce60:	9080000f 	ldh	r2,0(r18)
 200ce64:	14c00226 	beq	r2,r19,200ce70 <_fwalk+0x78>
 200ce68:	a83ee83a 	callr	r21
 200ce6c:	b8aeb03a 	or	r23,r23,r2
 200ce70:	84001a04 	addi	r16,r16,104
 200ce74:	94801a04 	addi	r18,r18,104
 200ce78:	8cfff51e 	bne	r17,r19,200ce50 <__alt_mem_epcs_flash_controller_0+0xfd00be50>
 200ce7c:	a5000017 	ldw	r20,0(r20)
 200ce80:	a03fed1e 	bne	r20,zero,200ce38 <__alt_mem_epcs_flash_controller_0+0xfd00be38>
 200ce84:	b805883a 	mov	r2,r23
 200ce88:	dfc00817 	ldw	ra,32(sp)
 200ce8c:	ddc00717 	ldw	r23,28(sp)
 200ce90:	dd800617 	ldw	r22,24(sp)
 200ce94:	dd400517 	ldw	r21,20(sp)
 200ce98:	dd000417 	ldw	r20,16(sp)
 200ce9c:	dcc00317 	ldw	r19,12(sp)
 200cea0:	dc800217 	ldw	r18,8(sp)
 200cea4:	dc400117 	ldw	r17,4(sp)
 200cea8:	dc000017 	ldw	r16,0(sp)
 200ceac:	dec00904 	addi	sp,sp,36
 200ceb0:	f800283a 	ret
 200ceb4:	002f883a 	mov	r23,zero
 200ceb8:	003ff206 	br	200ce84 <__alt_mem_epcs_flash_controller_0+0xfd00be84>

0200cebc <_fwalk_reent>:
 200cebc:	defff704 	addi	sp,sp,-36
 200cec0:	dd000415 	stw	r20,16(sp)
 200cec4:	dfc00815 	stw	ra,32(sp)
 200cec8:	ddc00715 	stw	r23,28(sp)
 200cecc:	dd800615 	stw	r22,24(sp)
 200ced0:	dd400515 	stw	r21,20(sp)
 200ced4:	dcc00315 	stw	r19,12(sp)
 200ced8:	dc800215 	stw	r18,8(sp)
 200cedc:	dc400115 	stw	r17,4(sp)
 200cee0:	dc000015 	stw	r16,0(sp)
 200cee4:	2500b804 	addi	r20,r4,736
 200cee8:	a0002326 	beq	r20,zero,200cf78 <_fwalk_reent+0xbc>
 200ceec:	282b883a 	mov	r21,r5
 200cef0:	2027883a 	mov	r19,r4
 200cef4:	002f883a 	mov	r23,zero
 200cef8:	05800044 	movi	r22,1
 200cefc:	04bfffc4 	movi	r18,-1
 200cf00:	a4400117 	ldw	r17,4(r20)
 200cf04:	a4000217 	ldw	r16,8(r20)
 200cf08:	8c7fffc4 	addi	r17,r17,-1
 200cf0c:	88000c16 	blt	r17,zero,200cf40 <_fwalk_reent+0x84>
 200cf10:	84000304 	addi	r16,r16,12
 200cf14:	8080000b 	ldhu	r2,0(r16)
 200cf18:	8c7fffc4 	addi	r17,r17,-1
 200cf1c:	817ffd04 	addi	r5,r16,-12
 200cf20:	b080052e 	bgeu	r22,r2,200cf38 <_fwalk_reent+0x7c>
 200cf24:	8080008f 	ldh	r2,2(r16)
 200cf28:	9809883a 	mov	r4,r19
 200cf2c:	14800226 	beq	r2,r18,200cf38 <_fwalk_reent+0x7c>
 200cf30:	a83ee83a 	callr	r21
 200cf34:	b8aeb03a 	or	r23,r23,r2
 200cf38:	84001a04 	addi	r16,r16,104
 200cf3c:	8cbff51e 	bne	r17,r18,200cf14 <__alt_mem_epcs_flash_controller_0+0xfd00bf14>
 200cf40:	a5000017 	ldw	r20,0(r20)
 200cf44:	a03fee1e 	bne	r20,zero,200cf00 <__alt_mem_epcs_flash_controller_0+0xfd00bf00>
 200cf48:	b805883a 	mov	r2,r23
 200cf4c:	dfc00817 	ldw	ra,32(sp)
 200cf50:	ddc00717 	ldw	r23,28(sp)
 200cf54:	dd800617 	ldw	r22,24(sp)
 200cf58:	dd400517 	ldw	r21,20(sp)
 200cf5c:	dd000417 	ldw	r20,16(sp)
 200cf60:	dcc00317 	ldw	r19,12(sp)
 200cf64:	dc800217 	ldw	r18,8(sp)
 200cf68:	dc400117 	ldw	r17,4(sp)
 200cf6c:	dc000017 	ldw	r16,0(sp)
 200cf70:	dec00904 	addi	sp,sp,36
 200cf74:	f800283a 	ret
 200cf78:	002f883a 	mov	r23,zero
 200cf7c:	003ff206 	br	200cf48 <__alt_mem_epcs_flash_controller_0+0xfd00bf48>

0200cf80 <_setlocale_r>:
 200cf80:	30001b26 	beq	r6,zero,200cff0 <_setlocale_r+0x70>
 200cf84:	01408134 	movhi	r5,516
 200cf88:	defffe04 	addi	sp,sp,-8
 200cf8c:	2970fb04 	addi	r5,r5,-15380
 200cf90:	3009883a 	mov	r4,r6
 200cf94:	dc000015 	stw	r16,0(sp)
 200cf98:	dfc00115 	stw	ra,4(sp)
 200cf9c:	3021883a 	mov	r16,r6
 200cfa0:	200ec3c0 	call	200ec3c <strcmp>
 200cfa4:	1000061e 	bne	r2,zero,200cfc0 <_setlocale_r+0x40>
 200cfa8:	00808134 	movhi	r2,516
 200cfac:	10b0d404 	addi	r2,r2,-15536
 200cfb0:	dfc00117 	ldw	ra,4(sp)
 200cfb4:	dc000017 	ldw	r16,0(sp)
 200cfb8:	dec00204 	addi	sp,sp,8
 200cfbc:	f800283a 	ret
 200cfc0:	01408134 	movhi	r5,516
 200cfc4:	2970d404 	addi	r5,r5,-15536
 200cfc8:	8009883a 	mov	r4,r16
 200cfcc:	200ec3c0 	call	200ec3c <strcmp>
 200cfd0:	103ff526 	beq	r2,zero,200cfa8 <__alt_mem_epcs_flash_controller_0+0xfd00bfa8>
 200cfd4:	01408134 	movhi	r5,516
 200cfd8:	2970de04 	addi	r5,r5,-15496
 200cfdc:	8009883a 	mov	r4,r16
 200cfe0:	200ec3c0 	call	200ec3c <strcmp>
 200cfe4:	103ff026 	beq	r2,zero,200cfa8 <__alt_mem_epcs_flash_controller_0+0xfd00bfa8>
 200cfe8:	0005883a 	mov	r2,zero
 200cfec:	003ff006 	br	200cfb0 <__alt_mem_epcs_flash_controller_0+0xfd00bfb0>
 200cff0:	00808134 	movhi	r2,516
 200cff4:	10b0d404 	addi	r2,r2,-15536
 200cff8:	f800283a 	ret

0200cffc <__locale_charset>:
 200cffc:	00808134 	movhi	r2,516
 200d000:	10b37d04 	addi	r2,r2,-12812
 200d004:	f800283a 	ret

0200d008 <__locale_mb_cur_max>:
 200d008:	00808134 	movhi	r2,516
 200d00c:	10b84d04 	addi	r2,r2,-7884
 200d010:	10800017 	ldw	r2,0(r2)
 200d014:	f800283a 	ret

0200d018 <__locale_msgcharset>:
 200d018:	00808134 	movhi	r2,516
 200d01c:	10b37504 	addi	r2,r2,-12844
 200d020:	f800283a 	ret

0200d024 <__locale_cjk_lang>:
 200d024:	0005883a 	mov	r2,zero
 200d028:	f800283a 	ret

0200d02c <_localeconv_r>:
 200d02c:	00808134 	movhi	r2,516
 200d030:	10b38504 	addi	r2,r2,-12780
 200d034:	f800283a 	ret

0200d038 <setlocale>:
 200d038:	00808134 	movhi	r2,516
 200d03c:	10b84a04 	addi	r2,r2,-7896
 200d040:	280d883a 	mov	r6,r5
 200d044:	200b883a 	mov	r5,r4
 200d048:	11000017 	ldw	r4,0(r2)
 200d04c:	200cf801 	jmpi	200cf80 <_setlocale_r>

0200d050 <localeconv>:
 200d050:	00808134 	movhi	r2,516
 200d054:	10b38504 	addi	r2,r2,-12780
 200d058:	f800283a 	ret

0200d05c <__smakebuf_r>:
 200d05c:	2880030b 	ldhu	r2,12(r5)
 200d060:	10c0008c 	andi	r3,r2,2
 200d064:	1800411e 	bne	r3,zero,200d16c <__smakebuf_r+0x110>
 200d068:	deffec04 	addi	sp,sp,-80
 200d06c:	dc000f15 	stw	r16,60(sp)
 200d070:	2821883a 	mov	r16,r5
 200d074:	2940038f 	ldh	r5,14(r5)
 200d078:	dc401015 	stw	r17,64(sp)
 200d07c:	dfc01315 	stw	ra,76(sp)
 200d080:	dcc01215 	stw	r19,72(sp)
 200d084:	dc801115 	stw	r18,68(sp)
 200d088:	2023883a 	mov	r17,r4
 200d08c:	28001c16 	blt	r5,zero,200d100 <__smakebuf_r+0xa4>
 200d090:	d80d883a 	mov	r6,sp
 200d094:	2011b2c0 	call	2011b2c <_fstat_r>
 200d098:	10001816 	blt	r2,zero,200d0fc <__smakebuf_r+0xa0>
 200d09c:	d8800117 	ldw	r2,4(sp)
 200d0a0:	00e00014 	movui	r3,32768
 200d0a4:	10bc000c 	andi	r2,r2,61440
 200d0a8:	14c80020 	cmpeqi	r19,r2,8192
 200d0ac:	10c03726 	beq	r2,r3,200d18c <__smakebuf_r+0x130>
 200d0b0:	80c0030b 	ldhu	r3,12(r16)
 200d0b4:	18c20014 	ori	r3,r3,2048
 200d0b8:	80c0030d 	sth	r3,12(r16)
 200d0bc:	00c80004 	movi	r3,8192
 200d0c0:	10c0521e 	bne	r2,r3,200d20c <__smakebuf_r+0x1b0>
 200d0c4:	8140038f 	ldh	r5,14(r16)
 200d0c8:	8809883a 	mov	r4,r17
 200d0cc:	2011b880 	call	2011b88 <_isatty_r>
 200d0d0:	10004c26 	beq	r2,zero,200d204 <__smakebuf_r+0x1a8>
 200d0d4:	8080030b 	ldhu	r2,12(r16)
 200d0d8:	80c010c4 	addi	r3,r16,67
 200d0dc:	80c00015 	stw	r3,0(r16)
 200d0e0:	10800054 	ori	r2,r2,1
 200d0e4:	8080030d 	sth	r2,12(r16)
 200d0e8:	00800044 	movi	r2,1
 200d0ec:	80c00415 	stw	r3,16(r16)
 200d0f0:	80800515 	stw	r2,20(r16)
 200d0f4:	04810004 	movi	r18,1024
 200d0f8:	00000706 	br	200d118 <__smakebuf_r+0xbc>
 200d0fc:	8080030b 	ldhu	r2,12(r16)
 200d100:	10c0200c 	andi	r3,r2,128
 200d104:	18001f1e 	bne	r3,zero,200d184 <__smakebuf_r+0x128>
 200d108:	04810004 	movi	r18,1024
 200d10c:	10820014 	ori	r2,r2,2048
 200d110:	8080030d 	sth	r2,12(r16)
 200d114:	0027883a 	mov	r19,zero
 200d118:	900b883a 	mov	r5,r18
 200d11c:	8809883a 	mov	r4,r17
 200d120:	20052780 	call	2005278 <_malloc_r>
 200d124:	10002c26 	beq	r2,zero,200d1d8 <__smakebuf_r+0x17c>
 200d128:	80c0030b 	ldhu	r3,12(r16)
 200d12c:	01008074 	movhi	r4,513
 200d130:	21305c04 	addi	r4,r4,-16016
 200d134:	89000f15 	stw	r4,60(r17)
 200d138:	18c02014 	ori	r3,r3,128
 200d13c:	80c0030d 	sth	r3,12(r16)
 200d140:	80800015 	stw	r2,0(r16)
 200d144:	80800415 	stw	r2,16(r16)
 200d148:	84800515 	stw	r18,20(r16)
 200d14c:	98001a1e 	bne	r19,zero,200d1b8 <__smakebuf_r+0x15c>
 200d150:	dfc01317 	ldw	ra,76(sp)
 200d154:	dcc01217 	ldw	r19,72(sp)
 200d158:	dc801117 	ldw	r18,68(sp)
 200d15c:	dc401017 	ldw	r17,64(sp)
 200d160:	dc000f17 	ldw	r16,60(sp)
 200d164:	dec01404 	addi	sp,sp,80
 200d168:	f800283a 	ret
 200d16c:	288010c4 	addi	r2,r5,67
 200d170:	28800015 	stw	r2,0(r5)
 200d174:	28800415 	stw	r2,16(r5)
 200d178:	00800044 	movi	r2,1
 200d17c:	28800515 	stw	r2,20(r5)
 200d180:	f800283a 	ret
 200d184:	04801004 	movi	r18,64
 200d188:	003fe006 	br	200d10c <__alt_mem_epcs_flash_controller_0+0xfd00c10c>
 200d18c:	81000a17 	ldw	r4,40(r16)
 200d190:	00c08074 	movhi	r3,513
 200d194:	18faf604 	addi	r3,r3,-5160
 200d198:	20ffc51e 	bne	r4,r3,200d0b0 <__alt_mem_epcs_flash_controller_0+0xfd00c0b0>
 200d19c:	8080030b 	ldhu	r2,12(r16)
 200d1a0:	04810004 	movi	r18,1024
 200d1a4:	84801315 	stw	r18,76(r16)
 200d1a8:	1484b03a 	or	r2,r2,r18
 200d1ac:	8080030d 	sth	r2,12(r16)
 200d1b0:	0027883a 	mov	r19,zero
 200d1b4:	003fd806 	br	200d118 <__alt_mem_epcs_flash_controller_0+0xfd00c118>
 200d1b8:	8140038f 	ldh	r5,14(r16)
 200d1bc:	8809883a 	mov	r4,r17
 200d1c0:	2011b880 	call	2011b88 <_isatty_r>
 200d1c4:	103fe226 	beq	r2,zero,200d150 <__alt_mem_epcs_flash_controller_0+0xfd00c150>
 200d1c8:	8080030b 	ldhu	r2,12(r16)
 200d1cc:	10800054 	ori	r2,r2,1
 200d1d0:	8080030d 	sth	r2,12(r16)
 200d1d4:	003fde06 	br	200d150 <__alt_mem_epcs_flash_controller_0+0xfd00c150>
 200d1d8:	8080030b 	ldhu	r2,12(r16)
 200d1dc:	10c0800c 	andi	r3,r2,512
 200d1e0:	183fdb1e 	bne	r3,zero,200d150 <__alt_mem_epcs_flash_controller_0+0xfd00c150>
 200d1e4:	10800094 	ori	r2,r2,2
 200d1e8:	80c010c4 	addi	r3,r16,67
 200d1ec:	8080030d 	sth	r2,12(r16)
 200d1f0:	00800044 	movi	r2,1
 200d1f4:	80c00015 	stw	r3,0(r16)
 200d1f8:	80c00415 	stw	r3,16(r16)
 200d1fc:	80800515 	stw	r2,20(r16)
 200d200:	003fd306 	br	200d150 <__alt_mem_epcs_flash_controller_0+0xfd00c150>
 200d204:	04810004 	movi	r18,1024
 200d208:	003fc306 	br	200d118 <__alt_mem_epcs_flash_controller_0+0xfd00c118>
 200d20c:	0027883a 	mov	r19,zero
 200d210:	04810004 	movi	r18,1024
 200d214:	003fc006 	br	200d118 <__alt_mem_epcs_flash_controller_0+0xfd00c118>

0200d218 <memchr>:
 200d218:	208000cc 	andi	r2,r4,3
 200d21c:	280f883a 	mov	r7,r5
 200d220:	10003426 	beq	r2,zero,200d2f4 <memchr+0xdc>
 200d224:	30bfffc4 	addi	r2,r6,-1
 200d228:	30001a26 	beq	r6,zero,200d294 <memchr+0x7c>
 200d22c:	20c00003 	ldbu	r3,0(r4)
 200d230:	29803fcc 	andi	r6,r5,255
 200d234:	30c0051e 	bne	r6,r3,200d24c <memchr+0x34>
 200d238:	00001806 	br	200d29c <memchr+0x84>
 200d23c:	10001526 	beq	r2,zero,200d294 <memchr+0x7c>
 200d240:	20c00003 	ldbu	r3,0(r4)
 200d244:	10bfffc4 	addi	r2,r2,-1
 200d248:	30c01426 	beq	r6,r3,200d29c <memchr+0x84>
 200d24c:	21000044 	addi	r4,r4,1
 200d250:	20c000cc 	andi	r3,r4,3
 200d254:	183ff91e 	bne	r3,zero,200d23c <__alt_mem_epcs_flash_controller_0+0xfd00c23c>
 200d258:	020000c4 	movi	r8,3
 200d25c:	40801136 	bltu	r8,r2,200d2a4 <memchr+0x8c>
 200d260:	10000c26 	beq	r2,zero,200d294 <memchr+0x7c>
 200d264:	20c00003 	ldbu	r3,0(r4)
 200d268:	29403fcc 	andi	r5,r5,255
 200d26c:	28c00b26 	beq	r5,r3,200d29c <memchr+0x84>
 200d270:	20c00044 	addi	r3,r4,1
 200d274:	39803fcc 	andi	r6,r7,255
 200d278:	2089883a 	add	r4,r4,r2
 200d27c:	00000306 	br	200d28c <memchr+0x74>
 200d280:	18c00044 	addi	r3,r3,1
 200d284:	197fffc3 	ldbu	r5,-1(r3)
 200d288:	31400526 	beq	r6,r5,200d2a0 <memchr+0x88>
 200d28c:	1805883a 	mov	r2,r3
 200d290:	20fffb1e 	bne	r4,r3,200d280 <__alt_mem_epcs_flash_controller_0+0xfd00c280>
 200d294:	0005883a 	mov	r2,zero
 200d298:	f800283a 	ret
 200d29c:	2005883a 	mov	r2,r4
 200d2a0:	f800283a 	ret
 200d2a4:	28c03fcc 	andi	r3,r5,255
 200d2a8:	1812923a 	slli	r9,r3,8
 200d2ac:	02ffbff4 	movhi	r11,65279
 200d2b0:	02a02074 	movhi	r10,32897
 200d2b4:	48d2b03a 	or	r9,r9,r3
 200d2b8:	4806943a 	slli	r3,r9,16
 200d2bc:	5affbfc4 	addi	r11,r11,-257
 200d2c0:	52a02004 	addi	r10,r10,-32640
 200d2c4:	48d2b03a 	or	r9,r9,r3
 200d2c8:	20c00017 	ldw	r3,0(r4)
 200d2cc:	48c6f03a 	xor	r3,r9,r3
 200d2d0:	1acd883a 	add	r6,r3,r11
 200d2d4:	00c6303a 	nor	r3,zero,r3
 200d2d8:	30c6703a 	and	r3,r6,r3
 200d2dc:	1a86703a 	and	r3,r3,r10
 200d2e0:	183fe01e 	bne	r3,zero,200d264 <__alt_mem_epcs_flash_controller_0+0xfd00c264>
 200d2e4:	10bfff04 	addi	r2,r2,-4
 200d2e8:	21000104 	addi	r4,r4,4
 200d2ec:	40bff636 	bltu	r8,r2,200d2c8 <__alt_mem_epcs_flash_controller_0+0xfd00c2c8>
 200d2f0:	003fdb06 	br	200d260 <__alt_mem_epcs_flash_controller_0+0xfd00c260>
 200d2f4:	3005883a 	mov	r2,r6
 200d2f8:	003fd706 	br	200d258 <__alt_mem_epcs_flash_controller_0+0xfd00c258>

0200d2fc <memcpy>:
 200d2fc:	defffd04 	addi	sp,sp,-12
 200d300:	dfc00215 	stw	ra,8(sp)
 200d304:	dc400115 	stw	r17,4(sp)
 200d308:	dc000015 	stw	r16,0(sp)
 200d30c:	00c003c4 	movi	r3,15
 200d310:	2005883a 	mov	r2,r4
 200d314:	1980452e 	bgeu	r3,r6,200d42c <memcpy+0x130>
 200d318:	2906b03a 	or	r3,r5,r4
 200d31c:	18c000cc 	andi	r3,r3,3
 200d320:	1800441e 	bne	r3,zero,200d434 <memcpy+0x138>
 200d324:	347ffc04 	addi	r17,r6,-16
 200d328:	8822d13a 	srli	r17,r17,4
 200d32c:	28c00104 	addi	r3,r5,4
 200d330:	23400104 	addi	r13,r4,4
 200d334:	8820913a 	slli	r16,r17,4
 200d338:	2b000204 	addi	r12,r5,8
 200d33c:	22c00204 	addi	r11,r4,8
 200d340:	84000504 	addi	r16,r16,20
 200d344:	2a800304 	addi	r10,r5,12
 200d348:	22400304 	addi	r9,r4,12
 200d34c:	2c21883a 	add	r16,r5,r16
 200d350:	2811883a 	mov	r8,r5
 200d354:	200f883a 	mov	r7,r4
 200d358:	41000017 	ldw	r4,0(r8)
 200d35c:	1fc00017 	ldw	ra,0(r3)
 200d360:	63c00017 	ldw	r15,0(r12)
 200d364:	39000015 	stw	r4,0(r7)
 200d368:	53800017 	ldw	r14,0(r10)
 200d36c:	6fc00015 	stw	ra,0(r13)
 200d370:	5bc00015 	stw	r15,0(r11)
 200d374:	4b800015 	stw	r14,0(r9)
 200d378:	18c00404 	addi	r3,r3,16
 200d37c:	39c00404 	addi	r7,r7,16
 200d380:	42000404 	addi	r8,r8,16
 200d384:	6b400404 	addi	r13,r13,16
 200d388:	63000404 	addi	r12,r12,16
 200d38c:	5ac00404 	addi	r11,r11,16
 200d390:	52800404 	addi	r10,r10,16
 200d394:	4a400404 	addi	r9,r9,16
 200d398:	1c3fef1e 	bne	r3,r16,200d358 <__alt_mem_epcs_flash_controller_0+0xfd00c358>
 200d39c:	89c00044 	addi	r7,r17,1
 200d3a0:	380e913a 	slli	r7,r7,4
 200d3a4:	310003cc 	andi	r4,r6,15
 200d3a8:	02c000c4 	movi	r11,3
 200d3ac:	11c7883a 	add	r3,r2,r7
 200d3b0:	29cb883a 	add	r5,r5,r7
 200d3b4:	5900212e 	bgeu	r11,r4,200d43c <memcpy+0x140>
 200d3b8:	1813883a 	mov	r9,r3
 200d3bc:	2811883a 	mov	r8,r5
 200d3c0:	200f883a 	mov	r7,r4
 200d3c4:	42800017 	ldw	r10,0(r8)
 200d3c8:	4a400104 	addi	r9,r9,4
 200d3cc:	39ffff04 	addi	r7,r7,-4
 200d3d0:	4abfff15 	stw	r10,-4(r9)
 200d3d4:	42000104 	addi	r8,r8,4
 200d3d8:	59fffa36 	bltu	r11,r7,200d3c4 <__alt_mem_epcs_flash_controller_0+0xfd00c3c4>
 200d3dc:	213fff04 	addi	r4,r4,-4
 200d3e0:	2008d0ba 	srli	r4,r4,2
 200d3e4:	318000cc 	andi	r6,r6,3
 200d3e8:	21000044 	addi	r4,r4,1
 200d3ec:	2109883a 	add	r4,r4,r4
 200d3f0:	2109883a 	add	r4,r4,r4
 200d3f4:	1907883a 	add	r3,r3,r4
 200d3f8:	290b883a 	add	r5,r5,r4
 200d3fc:	30000626 	beq	r6,zero,200d418 <memcpy+0x11c>
 200d400:	198d883a 	add	r6,r3,r6
 200d404:	29c00003 	ldbu	r7,0(r5)
 200d408:	18c00044 	addi	r3,r3,1
 200d40c:	29400044 	addi	r5,r5,1
 200d410:	19ffffc5 	stb	r7,-1(r3)
 200d414:	19bffb1e 	bne	r3,r6,200d404 <__alt_mem_epcs_flash_controller_0+0xfd00c404>
 200d418:	dfc00217 	ldw	ra,8(sp)
 200d41c:	dc400117 	ldw	r17,4(sp)
 200d420:	dc000017 	ldw	r16,0(sp)
 200d424:	dec00304 	addi	sp,sp,12
 200d428:	f800283a 	ret
 200d42c:	2007883a 	mov	r3,r4
 200d430:	003ff206 	br	200d3fc <__alt_mem_epcs_flash_controller_0+0xfd00c3fc>
 200d434:	2007883a 	mov	r3,r4
 200d438:	003ff106 	br	200d400 <__alt_mem_epcs_flash_controller_0+0xfd00c400>
 200d43c:	200d883a 	mov	r6,r4
 200d440:	003fee06 	br	200d3fc <__alt_mem_epcs_flash_controller_0+0xfd00c3fc>

0200d444 <memmove>:
 200d444:	2005883a 	mov	r2,r4
 200d448:	29000b2e 	bgeu	r5,r4,200d478 <memmove+0x34>
 200d44c:	298f883a 	add	r7,r5,r6
 200d450:	21c0092e 	bgeu	r4,r7,200d478 <memmove+0x34>
 200d454:	2187883a 	add	r3,r4,r6
 200d458:	198bc83a 	sub	r5,r3,r6
 200d45c:	30004826 	beq	r6,zero,200d580 <memmove+0x13c>
 200d460:	39ffffc4 	addi	r7,r7,-1
 200d464:	39000003 	ldbu	r4,0(r7)
 200d468:	18ffffc4 	addi	r3,r3,-1
 200d46c:	19000005 	stb	r4,0(r3)
 200d470:	28fffb1e 	bne	r5,r3,200d460 <__alt_mem_epcs_flash_controller_0+0xfd00c460>
 200d474:	f800283a 	ret
 200d478:	00c003c4 	movi	r3,15
 200d47c:	1980412e 	bgeu	r3,r6,200d584 <memmove+0x140>
 200d480:	2886b03a 	or	r3,r5,r2
 200d484:	18c000cc 	andi	r3,r3,3
 200d488:	1800401e 	bne	r3,zero,200d58c <memmove+0x148>
 200d48c:	33fffc04 	addi	r15,r6,-16
 200d490:	781ed13a 	srli	r15,r15,4
 200d494:	28c00104 	addi	r3,r5,4
 200d498:	13400104 	addi	r13,r2,4
 200d49c:	781c913a 	slli	r14,r15,4
 200d4a0:	2b000204 	addi	r12,r5,8
 200d4a4:	12c00204 	addi	r11,r2,8
 200d4a8:	73800504 	addi	r14,r14,20
 200d4ac:	2a800304 	addi	r10,r5,12
 200d4b0:	12400304 	addi	r9,r2,12
 200d4b4:	2b9d883a 	add	r14,r5,r14
 200d4b8:	2811883a 	mov	r8,r5
 200d4bc:	100f883a 	mov	r7,r2
 200d4c0:	41000017 	ldw	r4,0(r8)
 200d4c4:	39c00404 	addi	r7,r7,16
 200d4c8:	18c00404 	addi	r3,r3,16
 200d4cc:	393ffc15 	stw	r4,-16(r7)
 200d4d0:	193ffc17 	ldw	r4,-16(r3)
 200d4d4:	6b400404 	addi	r13,r13,16
 200d4d8:	5ac00404 	addi	r11,r11,16
 200d4dc:	693ffc15 	stw	r4,-16(r13)
 200d4e0:	61000017 	ldw	r4,0(r12)
 200d4e4:	4a400404 	addi	r9,r9,16
 200d4e8:	42000404 	addi	r8,r8,16
 200d4ec:	593ffc15 	stw	r4,-16(r11)
 200d4f0:	51000017 	ldw	r4,0(r10)
 200d4f4:	63000404 	addi	r12,r12,16
 200d4f8:	52800404 	addi	r10,r10,16
 200d4fc:	493ffc15 	stw	r4,-16(r9)
 200d500:	1bbfef1e 	bne	r3,r14,200d4c0 <__alt_mem_epcs_flash_controller_0+0xfd00c4c0>
 200d504:	79000044 	addi	r4,r15,1
 200d508:	2008913a 	slli	r4,r4,4
 200d50c:	328003cc 	andi	r10,r6,15
 200d510:	02c000c4 	movi	r11,3
 200d514:	1107883a 	add	r3,r2,r4
 200d518:	290b883a 	add	r5,r5,r4
 200d51c:	5a801e2e 	bgeu	r11,r10,200d598 <memmove+0x154>
 200d520:	1813883a 	mov	r9,r3
 200d524:	2811883a 	mov	r8,r5
 200d528:	500f883a 	mov	r7,r10
 200d52c:	41000017 	ldw	r4,0(r8)
 200d530:	4a400104 	addi	r9,r9,4
 200d534:	39ffff04 	addi	r7,r7,-4
 200d538:	493fff15 	stw	r4,-4(r9)
 200d53c:	42000104 	addi	r8,r8,4
 200d540:	59fffa36 	bltu	r11,r7,200d52c <__alt_mem_epcs_flash_controller_0+0xfd00c52c>
 200d544:	513fff04 	addi	r4,r10,-4
 200d548:	2008d0ba 	srli	r4,r4,2
 200d54c:	318000cc 	andi	r6,r6,3
 200d550:	21000044 	addi	r4,r4,1
 200d554:	2109883a 	add	r4,r4,r4
 200d558:	2109883a 	add	r4,r4,r4
 200d55c:	1907883a 	add	r3,r3,r4
 200d560:	290b883a 	add	r5,r5,r4
 200d564:	30000b26 	beq	r6,zero,200d594 <memmove+0x150>
 200d568:	198d883a 	add	r6,r3,r6
 200d56c:	29c00003 	ldbu	r7,0(r5)
 200d570:	18c00044 	addi	r3,r3,1
 200d574:	29400044 	addi	r5,r5,1
 200d578:	19ffffc5 	stb	r7,-1(r3)
 200d57c:	19bffb1e 	bne	r3,r6,200d56c <__alt_mem_epcs_flash_controller_0+0xfd00c56c>
 200d580:	f800283a 	ret
 200d584:	1007883a 	mov	r3,r2
 200d588:	003ff606 	br	200d564 <__alt_mem_epcs_flash_controller_0+0xfd00c564>
 200d58c:	1007883a 	mov	r3,r2
 200d590:	003ff506 	br	200d568 <__alt_mem_epcs_flash_controller_0+0xfd00c568>
 200d594:	f800283a 	ret
 200d598:	500d883a 	mov	r6,r10
 200d59c:	003ff106 	br	200d564 <__alt_mem_epcs_flash_controller_0+0xfd00c564>

0200d5a0 <_Balloc>:
 200d5a0:	20801317 	ldw	r2,76(r4)
 200d5a4:	defffc04 	addi	sp,sp,-16
 200d5a8:	dc400115 	stw	r17,4(sp)
 200d5ac:	dc000015 	stw	r16,0(sp)
 200d5b0:	dfc00315 	stw	ra,12(sp)
 200d5b4:	dc800215 	stw	r18,8(sp)
 200d5b8:	2023883a 	mov	r17,r4
 200d5bc:	2821883a 	mov	r16,r5
 200d5c0:	10000f26 	beq	r2,zero,200d600 <_Balloc+0x60>
 200d5c4:	8407883a 	add	r3,r16,r16
 200d5c8:	18c7883a 	add	r3,r3,r3
 200d5cc:	10c7883a 	add	r3,r2,r3
 200d5d0:	18800017 	ldw	r2,0(r3)
 200d5d4:	10001126 	beq	r2,zero,200d61c <_Balloc+0x7c>
 200d5d8:	11000017 	ldw	r4,0(r2)
 200d5dc:	19000015 	stw	r4,0(r3)
 200d5e0:	10000415 	stw	zero,16(r2)
 200d5e4:	10000315 	stw	zero,12(r2)
 200d5e8:	dfc00317 	ldw	ra,12(sp)
 200d5ec:	dc800217 	ldw	r18,8(sp)
 200d5f0:	dc400117 	ldw	r17,4(sp)
 200d5f4:	dc000017 	ldw	r16,0(sp)
 200d5f8:	dec00404 	addi	sp,sp,16
 200d5fc:	f800283a 	ret
 200d600:	01800844 	movi	r6,33
 200d604:	01400104 	movi	r5,4
 200d608:	20051a40 	call	20051a4 <_calloc_r>
 200d60c:	88801315 	stw	r2,76(r17)
 200d610:	103fec1e 	bne	r2,zero,200d5c4 <__alt_mem_epcs_flash_controller_0+0xfd00c5c4>
 200d614:	0005883a 	mov	r2,zero
 200d618:	003ff306 	br	200d5e8 <__alt_mem_epcs_flash_controller_0+0xfd00c5e8>
 200d61c:	01400044 	movi	r5,1
 200d620:	2c24983a 	sll	r18,r5,r16
 200d624:	8809883a 	mov	r4,r17
 200d628:	91800144 	addi	r6,r18,5
 200d62c:	318d883a 	add	r6,r6,r6
 200d630:	318d883a 	add	r6,r6,r6
 200d634:	20051a40 	call	20051a4 <_calloc_r>
 200d638:	103ff626 	beq	r2,zero,200d614 <__alt_mem_epcs_flash_controller_0+0xfd00c614>
 200d63c:	14000115 	stw	r16,4(r2)
 200d640:	14800215 	stw	r18,8(r2)
 200d644:	003fe606 	br	200d5e0 <__alt_mem_epcs_flash_controller_0+0xfd00c5e0>

0200d648 <_Bfree>:
 200d648:	28000826 	beq	r5,zero,200d66c <_Bfree+0x24>
 200d64c:	28c00117 	ldw	r3,4(r5)
 200d650:	20801317 	ldw	r2,76(r4)
 200d654:	18c7883a 	add	r3,r3,r3
 200d658:	18c7883a 	add	r3,r3,r3
 200d65c:	10c5883a 	add	r2,r2,r3
 200d660:	10c00017 	ldw	r3,0(r2)
 200d664:	28c00015 	stw	r3,0(r5)
 200d668:	11400015 	stw	r5,0(r2)
 200d66c:	f800283a 	ret

0200d670 <__multadd>:
 200d670:	defffa04 	addi	sp,sp,-24
 200d674:	dc800315 	stw	r18,12(sp)
 200d678:	dc400215 	stw	r17,8(sp)
 200d67c:	dc000115 	stw	r16,4(sp)
 200d680:	2823883a 	mov	r17,r5
 200d684:	2c000417 	ldw	r16,16(r5)
 200d688:	dfc00515 	stw	ra,20(sp)
 200d68c:	dcc00415 	stw	r19,16(sp)
 200d690:	2025883a 	mov	r18,r4
 200d694:	29400504 	addi	r5,r5,20
 200d698:	0011883a 	mov	r8,zero
 200d69c:	28c00017 	ldw	r3,0(r5)
 200d6a0:	29400104 	addi	r5,r5,4
 200d6a4:	42000044 	addi	r8,r8,1
 200d6a8:	18bfffcc 	andi	r2,r3,65535
 200d6ac:	1185383a 	mul	r2,r2,r6
 200d6b0:	1806d43a 	srli	r3,r3,16
 200d6b4:	11cf883a 	add	r7,r2,r7
 200d6b8:	3808d43a 	srli	r4,r7,16
 200d6bc:	1987383a 	mul	r3,r3,r6
 200d6c0:	38bfffcc 	andi	r2,r7,65535
 200d6c4:	1907883a 	add	r3,r3,r4
 200d6c8:	1808943a 	slli	r4,r3,16
 200d6cc:	180ed43a 	srli	r7,r3,16
 200d6d0:	2085883a 	add	r2,r4,r2
 200d6d4:	28bfff15 	stw	r2,-4(r5)
 200d6d8:	443ff016 	blt	r8,r16,200d69c <__alt_mem_epcs_flash_controller_0+0xfd00c69c>
 200d6dc:	38000926 	beq	r7,zero,200d704 <__multadd+0x94>
 200d6e0:	88800217 	ldw	r2,8(r17)
 200d6e4:	80800f0e 	bge	r16,r2,200d724 <__multadd+0xb4>
 200d6e8:	80800144 	addi	r2,r16,5
 200d6ec:	1085883a 	add	r2,r2,r2
 200d6f0:	1085883a 	add	r2,r2,r2
 200d6f4:	8885883a 	add	r2,r17,r2
 200d6f8:	11c00015 	stw	r7,0(r2)
 200d6fc:	84000044 	addi	r16,r16,1
 200d700:	8c000415 	stw	r16,16(r17)
 200d704:	8805883a 	mov	r2,r17
 200d708:	dfc00517 	ldw	ra,20(sp)
 200d70c:	dcc00417 	ldw	r19,16(sp)
 200d710:	dc800317 	ldw	r18,12(sp)
 200d714:	dc400217 	ldw	r17,8(sp)
 200d718:	dc000117 	ldw	r16,4(sp)
 200d71c:	dec00604 	addi	sp,sp,24
 200d720:	f800283a 	ret
 200d724:	89400117 	ldw	r5,4(r17)
 200d728:	9009883a 	mov	r4,r18
 200d72c:	d9c00015 	stw	r7,0(sp)
 200d730:	29400044 	addi	r5,r5,1
 200d734:	200d5a00 	call	200d5a0 <_Balloc>
 200d738:	89800417 	ldw	r6,16(r17)
 200d73c:	89400304 	addi	r5,r17,12
 200d740:	11000304 	addi	r4,r2,12
 200d744:	31800084 	addi	r6,r6,2
 200d748:	318d883a 	add	r6,r6,r6
 200d74c:	318d883a 	add	r6,r6,r6
 200d750:	1027883a 	mov	r19,r2
 200d754:	200d2fc0 	call	200d2fc <memcpy>
 200d758:	d9c00017 	ldw	r7,0(sp)
 200d75c:	88000a26 	beq	r17,zero,200d788 <__multadd+0x118>
 200d760:	88c00117 	ldw	r3,4(r17)
 200d764:	90801317 	ldw	r2,76(r18)
 200d768:	18c7883a 	add	r3,r3,r3
 200d76c:	18c7883a 	add	r3,r3,r3
 200d770:	10c5883a 	add	r2,r2,r3
 200d774:	10c00017 	ldw	r3,0(r2)
 200d778:	88c00015 	stw	r3,0(r17)
 200d77c:	14400015 	stw	r17,0(r2)
 200d780:	9823883a 	mov	r17,r19
 200d784:	003fd806 	br	200d6e8 <__alt_mem_epcs_flash_controller_0+0xfd00c6e8>
 200d788:	9823883a 	mov	r17,r19
 200d78c:	003fd606 	br	200d6e8 <__alt_mem_epcs_flash_controller_0+0xfd00c6e8>

0200d790 <__s2b>:
 200d790:	defff904 	addi	sp,sp,-28
 200d794:	dc400115 	stw	r17,4(sp)
 200d798:	dc000015 	stw	r16,0(sp)
 200d79c:	2023883a 	mov	r17,r4
 200d7a0:	2821883a 	mov	r16,r5
 200d7a4:	39000204 	addi	r4,r7,8
 200d7a8:	01400244 	movi	r5,9
 200d7ac:	dcc00315 	stw	r19,12(sp)
 200d7b0:	dc800215 	stw	r18,8(sp)
 200d7b4:	dfc00615 	stw	ra,24(sp)
 200d7b8:	dd400515 	stw	r21,20(sp)
 200d7bc:	dd000415 	stw	r20,16(sp)
 200d7c0:	3825883a 	mov	r18,r7
 200d7c4:	3027883a 	mov	r19,r6
 200d7c8:	2004fd80 	call	2004fd8 <__divsi3>
 200d7cc:	00c00044 	movi	r3,1
 200d7d0:	000b883a 	mov	r5,zero
 200d7d4:	1880030e 	bge	r3,r2,200d7e4 <__s2b+0x54>
 200d7d8:	18c7883a 	add	r3,r3,r3
 200d7dc:	29400044 	addi	r5,r5,1
 200d7e0:	18bffd16 	blt	r3,r2,200d7d8 <__alt_mem_epcs_flash_controller_0+0xfd00c7d8>
 200d7e4:	8809883a 	mov	r4,r17
 200d7e8:	200d5a00 	call	200d5a0 <_Balloc>
 200d7ec:	d8c00717 	ldw	r3,28(sp)
 200d7f0:	10c00515 	stw	r3,20(r2)
 200d7f4:	00c00044 	movi	r3,1
 200d7f8:	10c00415 	stw	r3,16(r2)
 200d7fc:	00c00244 	movi	r3,9
 200d800:	1cc0210e 	bge	r3,r19,200d888 <__s2b+0xf8>
 200d804:	80eb883a 	add	r21,r16,r3
 200d808:	a829883a 	mov	r20,r21
 200d80c:	84e1883a 	add	r16,r16,r19
 200d810:	a1c00007 	ldb	r7,0(r20)
 200d814:	01800284 	movi	r6,10
 200d818:	a5000044 	addi	r20,r20,1
 200d81c:	100b883a 	mov	r5,r2
 200d820:	39fff404 	addi	r7,r7,-48
 200d824:	8809883a 	mov	r4,r17
 200d828:	200d6700 	call	200d670 <__multadd>
 200d82c:	a43ff81e 	bne	r20,r16,200d810 <__alt_mem_epcs_flash_controller_0+0xfd00c810>
 200d830:	ace1883a 	add	r16,r21,r19
 200d834:	843ffe04 	addi	r16,r16,-8
 200d838:	9c800a0e 	bge	r19,r18,200d864 <__s2b+0xd4>
 200d83c:	94e5c83a 	sub	r18,r18,r19
 200d840:	84a5883a 	add	r18,r16,r18
 200d844:	81c00007 	ldb	r7,0(r16)
 200d848:	01800284 	movi	r6,10
 200d84c:	84000044 	addi	r16,r16,1
 200d850:	100b883a 	mov	r5,r2
 200d854:	39fff404 	addi	r7,r7,-48
 200d858:	8809883a 	mov	r4,r17
 200d85c:	200d6700 	call	200d670 <__multadd>
 200d860:	84bff81e 	bne	r16,r18,200d844 <__alt_mem_epcs_flash_controller_0+0xfd00c844>
 200d864:	dfc00617 	ldw	ra,24(sp)
 200d868:	dd400517 	ldw	r21,20(sp)
 200d86c:	dd000417 	ldw	r20,16(sp)
 200d870:	dcc00317 	ldw	r19,12(sp)
 200d874:	dc800217 	ldw	r18,8(sp)
 200d878:	dc400117 	ldw	r17,4(sp)
 200d87c:	dc000017 	ldw	r16,0(sp)
 200d880:	dec00704 	addi	sp,sp,28
 200d884:	f800283a 	ret
 200d888:	84000284 	addi	r16,r16,10
 200d88c:	1827883a 	mov	r19,r3
 200d890:	003fe906 	br	200d838 <__alt_mem_epcs_flash_controller_0+0xfd00c838>

0200d894 <__hi0bits>:
 200d894:	20bfffec 	andhi	r2,r4,65535
 200d898:	1000141e 	bne	r2,zero,200d8ec <__hi0bits+0x58>
 200d89c:	2008943a 	slli	r4,r4,16
 200d8a0:	00800404 	movi	r2,16
 200d8a4:	20ffc02c 	andhi	r3,r4,65280
 200d8a8:	1800021e 	bne	r3,zero,200d8b4 <__hi0bits+0x20>
 200d8ac:	2008923a 	slli	r4,r4,8
 200d8b0:	10800204 	addi	r2,r2,8
 200d8b4:	20fc002c 	andhi	r3,r4,61440
 200d8b8:	1800021e 	bne	r3,zero,200d8c4 <__hi0bits+0x30>
 200d8bc:	2008913a 	slli	r4,r4,4
 200d8c0:	10800104 	addi	r2,r2,4
 200d8c4:	20f0002c 	andhi	r3,r4,49152
 200d8c8:	1800031e 	bne	r3,zero,200d8d8 <__hi0bits+0x44>
 200d8cc:	2109883a 	add	r4,r4,r4
 200d8d0:	10800084 	addi	r2,r2,2
 200d8d4:	2109883a 	add	r4,r4,r4
 200d8d8:	20000316 	blt	r4,zero,200d8e8 <__hi0bits+0x54>
 200d8dc:	2110002c 	andhi	r4,r4,16384
 200d8e0:	2000041e 	bne	r4,zero,200d8f4 <__hi0bits+0x60>
 200d8e4:	00800804 	movi	r2,32
 200d8e8:	f800283a 	ret
 200d8ec:	0005883a 	mov	r2,zero
 200d8f0:	003fec06 	br	200d8a4 <__alt_mem_epcs_flash_controller_0+0xfd00c8a4>
 200d8f4:	10800044 	addi	r2,r2,1
 200d8f8:	f800283a 	ret

0200d8fc <__lo0bits>:
 200d8fc:	20c00017 	ldw	r3,0(r4)
 200d900:	188001cc 	andi	r2,r3,7
 200d904:	10000826 	beq	r2,zero,200d928 <__lo0bits+0x2c>
 200d908:	1880004c 	andi	r2,r3,1
 200d90c:	1000211e 	bne	r2,zero,200d994 <__lo0bits+0x98>
 200d910:	1880008c 	andi	r2,r3,2
 200d914:	1000211e 	bne	r2,zero,200d99c <__lo0bits+0xa0>
 200d918:	1806d0ba 	srli	r3,r3,2
 200d91c:	00800084 	movi	r2,2
 200d920:	20c00015 	stw	r3,0(r4)
 200d924:	f800283a 	ret
 200d928:	18bfffcc 	andi	r2,r3,65535
 200d92c:	10001326 	beq	r2,zero,200d97c <__lo0bits+0x80>
 200d930:	0005883a 	mov	r2,zero
 200d934:	19403fcc 	andi	r5,r3,255
 200d938:	2800021e 	bne	r5,zero,200d944 <__lo0bits+0x48>
 200d93c:	1806d23a 	srli	r3,r3,8
 200d940:	10800204 	addi	r2,r2,8
 200d944:	194003cc 	andi	r5,r3,15
 200d948:	2800021e 	bne	r5,zero,200d954 <__lo0bits+0x58>
 200d94c:	1806d13a 	srli	r3,r3,4
 200d950:	10800104 	addi	r2,r2,4
 200d954:	194000cc 	andi	r5,r3,3
 200d958:	2800021e 	bne	r5,zero,200d964 <__lo0bits+0x68>
 200d95c:	1806d0ba 	srli	r3,r3,2
 200d960:	10800084 	addi	r2,r2,2
 200d964:	1940004c 	andi	r5,r3,1
 200d968:	2800081e 	bne	r5,zero,200d98c <__lo0bits+0x90>
 200d96c:	1806d07a 	srli	r3,r3,1
 200d970:	1800051e 	bne	r3,zero,200d988 <__lo0bits+0x8c>
 200d974:	00800804 	movi	r2,32
 200d978:	f800283a 	ret
 200d97c:	1806d43a 	srli	r3,r3,16
 200d980:	00800404 	movi	r2,16
 200d984:	003feb06 	br	200d934 <__alt_mem_epcs_flash_controller_0+0xfd00c934>
 200d988:	10800044 	addi	r2,r2,1
 200d98c:	20c00015 	stw	r3,0(r4)
 200d990:	f800283a 	ret
 200d994:	0005883a 	mov	r2,zero
 200d998:	f800283a 	ret
 200d99c:	1806d07a 	srli	r3,r3,1
 200d9a0:	00800044 	movi	r2,1
 200d9a4:	20c00015 	stw	r3,0(r4)
 200d9a8:	f800283a 	ret

0200d9ac <__i2b>:
 200d9ac:	defffd04 	addi	sp,sp,-12
 200d9b0:	dc000015 	stw	r16,0(sp)
 200d9b4:	04000044 	movi	r16,1
 200d9b8:	dc400115 	stw	r17,4(sp)
 200d9bc:	2823883a 	mov	r17,r5
 200d9c0:	800b883a 	mov	r5,r16
 200d9c4:	dfc00215 	stw	ra,8(sp)
 200d9c8:	200d5a00 	call	200d5a0 <_Balloc>
 200d9cc:	14400515 	stw	r17,20(r2)
 200d9d0:	14000415 	stw	r16,16(r2)
 200d9d4:	dfc00217 	ldw	ra,8(sp)
 200d9d8:	dc400117 	ldw	r17,4(sp)
 200d9dc:	dc000017 	ldw	r16,0(sp)
 200d9e0:	dec00304 	addi	sp,sp,12
 200d9e4:	f800283a 	ret

0200d9e8 <__multiply>:
 200d9e8:	defffa04 	addi	sp,sp,-24
 200d9ec:	dcc00315 	stw	r19,12(sp)
 200d9f0:	dc800215 	stw	r18,8(sp)
 200d9f4:	34c00417 	ldw	r19,16(r6)
 200d9f8:	2c800417 	ldw	r18,16(r5)
 200d9fc:	dd000415 	stw	r20,16(sp)
 200da00:	dc400115 	stw	r17,4(sp)
 200da04:	dfc00515 	stw	ra,20(sp)
 200da08:	dc000015 	stw	r16,0(sp)
 200da0c:	2829883a 	mov	r20,r5
 200da10:	3023883a 	mov	r17,r6
 200da14:	94c0050e 	bge	r18,r19,200da2c <__multiply+0x44>
 200da18:	9007883a 	mov	r3,r18
 200da1c:	3029883a 	mov	r20,r6
 200da20:	9825883a 	mov	r18,r19
 200da24:	2823883a 	mov	r17,r5
 200da28:	1827883a 	mov	r19,r3
 200da2c:	a0800217 	ldw	r2,8(r20)
 200da30:	94e1883a 	add	r16,r18,r19
 200da34:	a1400117 	ldw	r5,4(r20)
 200da38:	1400010e 	bge	r2,r16,200da40 <__multiply+0x58>
 200da3c:	29400044 	addi	r5,r5,1
 200da40:	200d5a00 	call	200d5a0 <_Balloc>
 200da44:	8415883a 	add	r10,r16,r16
 200da48:	12c00504 	addi	r11,r2,20
 200da4c:	5295883a 	add	r10,r10,r10
 200da50:	5a95883a 	add	r10,r11,r10
 200da54:	5807883a 	mov	r3,r11
 200da58:	5a80032e 	bgeu	r11,r10,200da68 <__multiply+0x80>
 200da5c:	18000015 	stw	zero,0(r3)
 200da60:	18c00104 	addi	r3,r3,4
 200da64:	1abffd36 	bltu	r3,r10,200da5c <__alt_mem_epcs_flash_controller_0+0xfd00ca5c>
 200da68:	9ce7883a 	add	r19,r19,r19
 200da6c:	94a5883a 	add	r18,r18,r18
 200da70:	89800504 	addi	r6,r17,20
 200da74:	9ce7883a 	add	r19,r19,r19
 200da78:	a3400504 	addi	r13,r20,20
 200da7c:	94a5883a 	add	r18,r18,r18
 200da80:	34d9883a 	add	r12,r6,r19
 200da84:	6c93883a 	add	r9,r13,r18
 200da88:	3300422e 	bgeu	r6,r12,200db94 <__multiply+0x1ac>
 200da8c:	37c00017 	ldw	ra,0(r6)
 200da90:	fbffffcc 	andi	r15,ra,65535
 200da94:	78001b26 	beq	r15,zero,200db04 <__multiply+0x11c>
 200da98:	5811883a 	mov	r8,r11
 200da9c:	681d883a 	mov	r14,r13
 200daa0:	000f883a 	mov	r7,zero
 200daa4:	71000017 	ldw	r4,0(r14)
 200daa8:	40c00017 	ldw	r3,0(r8)
 200daac:	73800104 	addi	r14,r14,4
 200dab0:	217fffcc 	andi	r5,r4,65535
 200dab4:	2bcb383a 	mul	r5,r5,r15
 200dab8:	2008d43a 	srli	r4,r4,16
 200dabc:	1c7fffcc 	andi	r17,r3,65535
 200dac0:	2c4b883a 	add	r5,r5,r17
 200dac4:	29cb883a 	add	r5,r5,r7
 200dac8:	23c9383a 	mul	r4,r4,r15
 200dacc:	1806d43a 	srli	r3,r3,16
 200dad0:	280ed43a 	srli	r7,r5,16
 200dad4:	297fffcc 	andi	r5,r5,65535
 200dad8:	20c7883a 	add	r3,r4,r3
 200dadc:	19c7883a 	add	r3,r3,r7
 200dae0:	1808943a 	slli	r4,r3,16
 200dae4:	4023883a 	mov	r17,r8
 200dae8:	180ed43a 	srli	r7,r3,16
 200daec:	214ab03a 	or	r5,r4,r5
 200daf0:	41400015 	stw	r5,0(r8)
 200daf4:	42000104 	addi	r8,r8,4
 200daf8:	727fea36 	bltu	r14,r9,200daa4 <__alt_mem_epcs_flash_controller_0+0xfd00caa4>
 200dafc:	89c00115 	stw	r7,4(r17)
 200db00:	37c00017 	ldw	ra,0(r6)
 200db04:	f83ed43a 	srli	ra,ra,16
 200db08:	f8001f26 	beq	ra,zero,200db88 <__multiply+0x1a0>
 200db0c:	58c00017 	ldw	r3,0(r11)
 200db10:	681d883a 	mov	r14,r13
 200db14:	581f883a 	mov	r15,r11
 200db18:	1811883a 	mov	r8,r3
 200db1c:	5825883a 	mov	r18,r11
 200db20:	000f883a 	mov	r7,zero
 200db24:	00000106 	br	200db2c <__multiply+0x144>
 200db28:	8825883a 	mov	r18,r17
 200db2c:	7140000b 	ldhu	r5,0(r14)
 200db30:	4010d43a 	srli	r8,r8,16
 200db34:	193fffcc 	andi	r4,r3,65535
 200db38:	2fcb383a 	mul	r5,r5,ra
 200db3c:	7bc00104 	addi	r15,r15,4
 200db40:	73800104 	addi	r14,r14,4
 200db44:	2a0b883a 	add	r5,r5,r8
 200db48:	29cb883a 	add	r5,r5,r7
 200db4c:	2806943a 	slli	r3,r5,16
 200db50:	94400104 	addi	r17,r18,4
 200db54:	280ad43a 	srli	r5,r5,16
 200db58:	1908b03a 	or	r4,r3,r4
 200db5c:	793fff15 	stw	r4,-4(r15)
 200db60:	70ffff17 	ldw	r3,-4(r14)
 200db64:	8a000017 	ldw	r8,0(r17)
 200db68:	1806d43a 	srli	r3,r3,16
 200db6c:	413fffcc 	andi	r4,r8,65535
 200db70:	1fc7383a 	mul	r3,r3,ra
 200db74:	1907883a 	add	r3,r3,r4
 200db78:	1947883a 	add	r3,r3,r5
 200db7c:	180ed43a 	srli	r7,r3,16
 200db80:	727fe936 	bltu	r14,r9,200db28 <__alt_mem_epcs_flash_controller_0+0xfd00cb28>
 200db84:	90c00115 	stw	r3,4(r18)
 200db88:	31800104 	addi	r6,r6,4
 200db8c:	5ac00104 	addi	r11,r11,4
 200db90:	333fbe36 	bltu	r6,r12,200da8c <__alt_mem_epcs_flash_controller_0+0xfd00ca8c>
 200db94:	0400090e 	bge	zero,r16,200dbbc <__multiply+0x1d4>
 200db98:	50ffff17 	ldw	r3,-4(r10)
 200db9c:	52bfff04 	addi	r10,r10,-4
 200dba0:	18000326 	beq	r3,zero,200dbb0 <__multiply+0x1c8>
 200dba4:	00000506 	br	200dbbc <__multiply+0x1d4>
 200dba8:	50c00017 	ldw	r3,0(r10)
 200dbac:	1800031e 	bne	r3,zero,200dbbc <__multiply+0x1d4>
 200dbb0:	843fffc4 	addi	r16,r16,-1
 200dbb4:	52bfff04 	addi	r10,r10,-4
 200dbb8:	803ffb1e 	bne	r16,zero,200dba8 <__alt_mem_epcs_flash_controller_0+0xfd00cba8>
 200dbbc:	14000415 	stw	r16,16(r2)
 200dbc0:	dfc00517 	ldw	ra,20(sp)
 200dbc4:	dd000417 	ldw	r20,16(sp)
 200dbc8:	dcc00317 	ldw	r19,12(sp)
 200dbcc:	dc800217 	ldw	r18,8(sp)
 200dbd0:	dc400117 	ldw	r17,4(sp)
 200dbd4:	dc000017 	ldw	r16,0(sp)
 200dbd8:	dec00604 	addi	sp,sp,24
 200dbdc:	f800283a 	ret

0200dbe0 <__pow5mult>:
 200dbe0:	defffa04 	addi	sp,sp,-24
 200dbe4:	dcc00315 	stw	r19,12(sp)
 200dbe8:	dc000015 	stw	r16,0(sp)
 200dbec:	dfc00515 	stw	ra,20(sp)
 200dbf0:	dd000415 	stw	r20,16(sp)
 200dbf4:	dc800215 	stw	r18,8(sp)
 200dbf8:	dc400115 	stw	r17,4(sp)
 200dbfc:	308000cc 	andi	r2,r6,3
 200dc00:	3021883a 	mov	r16,r6
 200dc04:	2027883a 	mov	r19,r4
 200dc08:	10002f1e 	bne	r2,zero,200dcc8 <__pow5mult+0xe8>
 200dc0c:	2825883a 	mov	r18,r5
 200dc10:	8021d0ba 	srai	r16,r16,2
 200dc14:	80001a26 	beq	r16,zero,200dc80 <__pow5mult+0xa0>
 200dc18:	9c401217 	ldw	r17,72(r19)
 200dc1c:	8800061e 	bne	r17,zero,200dc38 <__pow5mult+0x58>
 200dc20:	00003406 	br	200dcf4 <__pow5mult+0x114>
 200dc24:	8021d07a 	srai	r16,r16,1
 200dc28:	80001526 	beq	r16,zero,200dc80 <__pow5mult+0xa0>
 200dc2c:	88800017 	ldw	r2,0(r17)
 200dc30:	10001c26 	beq	r2,zero,200dca4 <__pow5mult+0xc4>
 200dc34:	1023883a 	mov	r17,r2
 200dc38:	8080004c 	andi	r2,r16,1
 200dc3c:	103ff926 	beq	r2,zero,200dc24 <__alt_mem_epcs_flash_controller_0+0xfd00cc24>
 200dc40:	880d883a 	mov	r6,r17
 200dc44:	900b883a 	mov	r5,r18
 200dc48:	9809883a 	mov	r4,r19
 200dc4c:	200d9e80 	call	200d9e8 <__multiply>
 200dc50:	90001b26 	beq	r18,zero,200dcc0 <__pow5mult+0xe0>
 200dc54:	91000117 	ldw	r4,4(r18)
 200dc58:	98c01317 	ldw	r3,76(r19)
 200dc5c:	8021d07a 	srai	r16,r16,1
 200dc60:	2109883a 	add	r4,r4,r4
 200dc64:	2109883a 	add	r4,r4,r4
 200dc68:	1907883a 	add	r3,r3,r4
 200dc6c:	19000017 	ldw	r4,0(r3)
 200dc70:	91000015 	stw	r4,0(r18)
 200dc74:	1c800015 	stw	r18,0(r3)
 200dc78:	1025883a 	mov	r18,r2
 200dc7c:	803feb1e 	bne	r16,zero,200dc2c <__alt_mem_epcs_flash_controller_0+0xfd00cc2c>
 200dc80:	9005883a 	mov	r2,r18
 200dc84:	dfc00517 	ldw	ra,20(sp)
 200dc88:	dd000417 	ldw	r20,16(sp)
 200dc8c:	dcc00317 	ldw	r19,12(sp)
 200dc90:	dc800217 	ldw	r18,8(sp)
 200dc94:	dc400117 	ldw	r17,4(sp)
 200dc98:	dc000017 	ldw	r16,0(sp)
 200dc9c:	dec00604 	addi	sp,sp,24
 200dca0:	f800283a 	ret
 200dca4:	880d883a 	mov	r6,r17
 200dca8:	880b883a 	mov	r5,r17
 200dcac:	9809883a 	mov	r4,r19
 200dcb0:	200d9e80 	call	200d9e8 <__multiply>
 200dcb4:	88800015 	stw	r2,0(r17)
 200dcb8:	10000015 	stw	zero,0(r2)
 200dcbc:	003fdd06 	br	200dc34 <__alt_mem_epcs_flash_controller_0+0xfd00cc34>
 200dcc0:	1025883a 	mov	r18,r2
 200dcc4:	003fd706 	br	200dc24 <__alt_mem_epcs_flash_controller_0+0xfd00cc24>
 200dcc8:	10bfffc4 	addi	r2,r2,-1
 200dccc:	1085883a 	add	r2,r2,r2
 200dcd0:	00c08134 	movhi	r3,516
 200dcd4:	18f0fe04 	addi	r3,r3,-15368
 200dcd8:	1085883a 	add	r2,r2,r2
 200dcdc:	1885883a 	add	r2,r3,r2
 200dce0:	11800017 	ldw	r6,0(r2)
 200dce4:	000f883a 	mov	r7,zero
 200dce8:	200d6700 	call	200d670 <__multadd>
 200dcec:	1025883a 	mov	r18,r2
 200dcf0:	003fc706 	br	200dc10 <__alt_mem_epcs_flash_controller_0+0xfd00cc10>
 200dcf4:	05000044 	movi	r20,1
 200dcf8:	a00b883a 	mov	r5,r20
 200dcfc:	9809883a 	mov	r4,r19
 200dd00:	200d5a00 	call	200d5a0 <_Balloc>
 200dd04:	1023883a 	mov	r17,r2
 200dd08:	00809c44 	movi	r2,625
 200dd0c:	88800515 	stw	r2,20(r17)
 200dd10:	8d000415 	stw	r20,16(r17)
 200dd14:	9c401215 	stw	r17,72(r19)
 200dd18:	88000015 	stw	zero,0(r17)
 200dd1c:	003fc606 	br	200dc38 <__alt_mem_epcs_flash_controller_0+0xfd00cc38>

0200dd20 <__lshift>:
 200dd20:	defff904 	addi	sp,sp,-28
 200dd24:	dd400515 	stw	r21,20(sp)
 200dd28:	dcc00315 	stw	r19,12(sp)
 200dd2c:	302bd17a 	srai	r21,r6,5
 200dd30:	2cc00417 	ldw	r19,16(r5)
 200dd34:	28800217 	ldw	r2,8(r5)
 200dd38:	dd000415 	stw	r20,16(sp)
 200dd3c:	ace7883a 	add	r19,r21,r19
 200dd40:	dc800215 	stw	r18,8(sp)
 200dd44:	dc400115 	stw	r17,4(sp)
 200dd48:	dc000015 	stw	r16,0(sp)
 200dd4c:	dfc00615 	stw	ra,24(sp)
 200dd50:	9c000044 	addi	r16,r19,1
 200dd54:	2823883a 	mov	r17,r5
 200dd58:	3029883a 	mov	r20,r6
 200dd5c:	2025883a 	mov	r18,r4
 200dd60:	29400117 	ldw	r5,4(r5)
 200dd64:	1400030e 	bge	r2,r16,200dd74 <__lshift+0x54>
 200dd68:	1085883a 	add	r2,r2,r2
 200dd6c:	29400044 	addi	r5,r5,1
 200dd70:	143ffd16 	blt	r2,r16,200dd68 <__alt_mem_epcs_flash_controller_0+0xfd00cd68>
 200dd74:	9009883a 	mov	r4,r18
 200dd78:	200d5a00 	call	200d5a0 <_Balloc>
 200dd7c:	10c00504 	addi	r3,r2,20
 200dd80:	0540070e 	bge	zero,r21,200dda0 <__lshift+0x80>
 200dd84:	ad6b883a 	add	r21,r21,r21
 200dd88:	ad6b883a 	add	r21,r21,r21
 200dd8c:	1809883a 	mov	r4,r3
 200dd90:	1d47883a 	add	r3,r3,r21
 200dd94:	20000015 	stw	zero,0(r4)
 200dd98:	21000104 	addi	r4,r4,4
 200dd9c:	193ffd1e 	bne	r3,r4,200dd94 <__alt_mem_epcs_flash_controller_0+0xfd00cd94>
 200dda0:	8a000417 	ldw	r8,16(r17)
 200dda4:	89000504 	addi	r4,r17,20
 200dda8:	a18007cc 	andi	r6,r20,31
 200ddac:	4211883a 	add	r8,r8,r8
 200ddb0:	4211883a 	add	r8,r8,r8
 200ddb4:	2211883a 	add	r8,r4,r8
 200ddb8:	30002326 	beq	r6,zero,200de48 <__lshift+0x128>
 200ddbc:	02400804 	movi	r9,32
 200ddc0:	4993c83a 	sub	r9,r9,r6
 200ddc4:	000b883a 	mov	r5,zero
 200ddc8:	21c00017 	ldw	r7,0(r4)
 200ddcc:	1815883a 	mov	r10,r3
 200ddd0:	18c00104 	addi	r3,r3,4
 200ddd4:	398e983a 	sll	r7,r7,r6
 200ddd8:	21000104 	addi	r4,r4,4
 200dddc:	394ab03a 	or	r5,r7,r5
 200dde0:	197fff15 	stw	r5,-4(r3)
 200dde4:	217fff17 	ldw	r5,-4(r4)
 200dde8:	2a4ad83a 	srl	r5,r5,r9
 200ddec:	223ff636 	bltu	r4,r8,200ddc8 <__alt_mem_epcs_flash_controller_0+0xfd00cdc8>
 200ddf0:	51400115 	stw	r5,4(r10)
 200ddf4:	28001a1e 	bne	r5,zero,200de60 <__lshift+0x140>
 200ddf8:	843fffc4 	addi	r16,r16,-1
 200ddfc:	14000415 	stw	r16,16(r2)
 200de00:	88000826 	beq	r17,zero,200de24 <__lshift+0x104>
 200de04:	89000117 	ldw	r4,4(r17)
 200de08:	90c01317 	ldw	r3,76(r18)
 200de0c:	2109883a 	add	r4,r4,r4
 200de10:	2109883a 	add	r4,r4,r4
 200de14:	1907883a 	add	r3,r3,r4
 200de18:	19000017 	ldw	r4,0(r3)
 200de1c:	89000015 	stw	r4,0(r17)
 200de20:	1c400015 	stw	r17,0(r3)
 200de24:	dfc00617 	ldw	ra,24(sp)
 200de28:	dd400517 	ldw	r21,20(sp)
 200de2c:	dd000417 	ldw	r20,16(sp)
 200de30:	dcc00317 	ldw	r19,12(sp)
 200de34:	dc800217 	ldw	r18,8(sp)
 200de38:	dc400117 	ldw	r17,4(sp)
 200de3c:	dc000017 	ldw	r16,0(sp)
 200de40:	dec00704 	addi	sp,sp,28
 200de44:	f800283a 	ret
 200de48:	21400017 	ldw	r5,0(r4)
 200de4c:	18c00104 	addi	r3,r3,4
 200de50:	21000104 	addi	r4,r4,4
 200de54:	197fff15 	stw	r5,-4(r3)
 200de58:	223ffb36 	bltu	r4,r8,200de48 <__alt_mem_epcs_flash_controller_0+0xfd00ce48>
 200de5c:	003fe606 	br	200ddf8 <__alt_mem_epcs_flash_controller_0+0xfd00cdf8>
 200de60:	9c000084 	addi	r16,r19,2
 200de64:	003fe406 	br	200ddf8 <__alt_mem_epcs_flash_controller_0+0xfd00cdf8>

0200de68 <__mcmp>:
 200de68:	20800417 	ldw	r2,16(r4)
 200de6c:	28c00417 	ldw	r3,16(r5)
 200de70:	10c5c83a 	sub	r2,r2,r3
 200de74:	1000111e 	bne	r2,zero,200debc <__mcmp+0x54>
 200de78:	18c7883a 	add	r3,r3,r3
 200de7c:	18c7883a 	add	r3,r3,r3
 200de80:	21000504 	addi	r4,r4,20
 200de84:	29400504 	addi	r5,r5,20
 200de88:	20c5883a 	add	r2,r4,r3
 200de8c:	28cb883a 	add	r5,r5,r3
 200de90:	00000106 	br	200de98 <__mcmp+0x30>
 200de94:	20800a2e 	bgeu	r4,r2,200dec0 <__mcmp+0x58>
 200de98:	10bfff04 	addi	r2,r2,-4
 200de9c:	297fff04 	addi	r5,r5,-4
 200dea0:	11800017 	ldw	r6,0(r2)
 200dea4:	28c00017 	ldw	r3,0(r5)
 200dea8:	30fffa26 	beq	r6,r3,200de94 <__alt_mem_epcs_flash_controller_0+0xfd00ce94>
 200deac:	30c00236 	bltu	r6,r3,200deb8 <__mcmp+0x50>
 200deb0:	00800044 	movi	r2,1
 200deb4:	f800283a 	ret
 200deb8:	00bfffc4 	movi	r2,-1
 200debc:	f800283a 	ret
 200dec0:	0005883a 	mov	r2,zero
 200dec4:	f800283a 	ret

0200dec8 <__mdiff>:
 200dec8:	28c00417 	ldw	r3,16(r5)
 200decc:	30800417 	ldw	r2,16(r6)
 200ded0:	defffa04 	addi	sp,sp,-24
 200ded4:	dcc00315 	stw	r19,12(sp)
 200ded8:	dc800215 	stw	r18,8(sp)
 200dedc:	dfc00515 	stw	ra,20(sp)
 200dee0:	dd000415 	stw	r20,16(sp)
 200dee4:	dc400115 	stw	r17,4(sp)
 200dee8:	dc000015 	stw	r16,0(sp)
 200deec:	1887c83a 	sub	r3,r3,r2
 200def0:	2825883a 	mov	r18,r5
 200def4:	3027883a 	mov	r19,r6
 200def8:	1800141e 	bne	r3,zero,200df4c <__mdiff+0x84>
 200defc:	1085883a 	add	r2,r2,r2
 200df00:	1085883a 	add	r2,r2,r2
 200df04:	2a000504 	addi	r8,r5,20
 200df08:	34000504 	addi	r16,r6,20
 200df0c:	4087883a 	add	r3,r8,r2
 200df10:	8085883a 	add	r2,r16,r2
 200df14:	00000106 	br	200df1c <__mdiff+0x54>
 200df18:	40c0592e 	bgeu	r8,r3,200e080 <__mdiff+0x1b8>
 200df1c:	18ffff04 	addi	r3,r3,-4
 200df20:	10bfff04 	addi	r2,r2,-4
 200df24:	19c00017 	ldw	r7,0(r3)
 200df28:	11400017 	ldw	r5,0(r2)
 200df2c:	397ffa26 	beq	r7,r5,200df18 <__alt_mem_epcs_flash_controller_0+0xfd00cf18>
 200df30:	3940592e 	bgeu	r7,r5,200e098 <__mdiff+0x1d0>
 200df34:	9005883a 	mov	r2,r18
 200df38:	4023883a 	mov	r17,r8
 200df3c:	9825883a 	mov	r18,r19
 200df40:	05000044 	movi	r20,1
 200df44:	1027883a 	mov	r19,r2
 200df48:	00000406 	br	200df5c <__mdiff+0x94>
 200df4c:	18005616 	blt	r3,zero,200e0a8 <__mdiff+0x1e0>
 200df50:	34400504 	addi	r17,r6,20
 200df54:	2c000504 	addi	r16,r5,20
 200df58:	0029883a 	mov	r20,zero
 200df5c:	91400117 	ldw	r5,4(r18)
 200df60:	200d5a00 	call	200d5a0 <_Balloc>
 200df64:	92400417 	ldw	r9,16(r18)
 200df68:	9b000417 	ldw	r12,16(r19)
 200df6c:	12c00504 	addi	r11,r2,20
 200df70:	4a51883a 	add	r8,r9,r9
 200df74:	6319883a 	add	r12,r12,r12
 200df78:	4211883a 	add	r8,r8,r8
 200df7c:	6319883a 	add	r12,r12,r12
 200df80:	15000315 	stw	r20,12(r2)
 200df84:	8211883a 	add	r8,r16,r8
 200df88:	8b19883a 	add	r12,r17,r12
 200df8c:	0007883a 	mov	r3,zero
 200df90:	81400017 	ldw	r5,0(r16)
 200df94:	89c00017 	ldw	r7,0(r17)
 200df98:	59800104 	addi	r6,r11,4
 200df9c:	293fffcc 	andi	r4,r5,65535
 200dfa0:	20c7883a 	add	r3,r4,r3
 200dfa4:	393fffcc 	andi	r4,r7,65535
 200dfa8:	1909c83a 	sub	r4,r3,r4
 200dfac:	280ad43a 	srli	r5,r5,16
 200dfb0:	380ed43a 	srli	r7,r7,16
 200dfb4:	2007d43a 	srai	r3,r4,16
 200dfb8:	213fffcc 	andi	r4,r4,65535
 200dfbc:	29cbc83a 	sub	r5,r5,r7
 200dfc0:	28c7883a 	add	r3,r5,r3
 200dfc4:	180a943a 	slli	r5,r3,16
 200dfc8:	8c400104 	addi	r17,r17,4
 200dfcc:	84000104 	addi	r16,r16,4
 200dfd0:	2908b03a 	or	r4,r5,r4
 200dfd4:	59000015 	stw	r4,0(r11)
 200dfd8:	1807d43a 	srai	r3,r3,16
 200dfdc:	3015883a 	mov	r10,r6
 200dfe0:	3017883a 	mov	r11,r6
 200dfe4:	8b3fea36 	bltu	r17,r12,200df90 <__alt_mem_epcs_flash_controller_0+0xfd00cf90>
 200dfe8:	8200162e 	bgeu	r16,r8,200e044 <__mdiff+0x17c>
 200dfec:	8017883a 	mov	r11,r16
 200dff0:	59400017 	ldw	r5,0(r11)
 200dff4:	31800104 	addi	r6,r6,4
 200dff8:	5ac00104 	addi	r11,r11,4
 200dffc:	293fffcc 	andi	r4,r5,65535
 200e000:	20c7883a 	add	r3,r4,r3
 200e004:	280ed43a 	srli	r7,r5,16
 200e008:	180bd43a 	srai	r5,r3,16
 200e00c:	193fffcc 	andi	r4,r3,65535
 200e010:	3947883a 	add	r3,r7,r5
 200e014:	180a943a 	slli	r5,r3,16
 200e018:	1807d43a 	srai	r3,r3,16
 200e01c:	2908b03a 	or	r4,r5,r4
 200e020:	313fff15 	stw	r4,-4(r6)
 200e024:	5a3ff236 	bltu	r11,r8,200dff0 <__alt_mem_epcs_flash_controller_0+0xfd00cff0>
 200e028:	0406303a 	nor	r3,zero,r16
 200e02c:	1a07883a 	add	r3,r3,r8
 200e030:	1806d0ba 	srli	r3,r3,2
 200e034:	18c00044 	addi	r3,r3,1
 200e038:	18c7883a 	add	r3,r3,r3
 200e03c:	18c7883a 	add	r3,r3,r3
 200e040:	50d5883a 	add	r10,r10,r3
 200e044:	50ffff04 	addi	r3,r10,-4
 200e048:	2000041e 	bne	r4,zero,200e05c <__mdiff+0x194>
 200e04c:	18ffff04 	addi	r3,r3,-4
 200e050:	19000017 	ldw	r4,0(r3)
 200e054:	4a7fffc4 	addi	r9,r9,-1
 200e058:	203ffc26 	beq	r4,zero,200e04c <__alt_mem_epcs_flash_controller_0+0xfd00d04c>
 200e05c:	12400415 	stw	r9,16(r2)
 200e060:	dfc00517 	ldw	ra,20(sp)
 200e064:	dd000417 	ldw	r20,16(sp)
 200e068:	dcc00317 	ldw	r19,12(sp)
 200e06c:	dc800217 	ldw	r18,8(sp)
 200e070:	dc400117 	ldw	r17,4(sp)
 200e074:	dc000017 	ldw	r16,0(sp)
 200e078:	dec00604 	addi	sp,sp,24
 200e07c:	f800283a 	ret
 200e080:	000b883a 	mov	r5,zero
 200e084:	200d5a00 	call	200d5a0 <_Balloc>
 200e088:	00c00044 	movi	r3,1
 200e08c:	10c00415 	stw	r3,16(r2)
 200e090:	10000515 	stw	zero,20(r2)
 200e094:	003ff206 	br	200e060 <__alt_mem_epcs_flash_controller_0+0xfd00d060>
 200e098:	8023883a 	mov	r17,r16
 200e09c:	0029883a 	mov	r20,zero
 200e0a0:	4021883a 	mov	r16,r8
 200e0a4:	003fad06 	br	200df5c <__alt_mem_epcs_flash_controller_0+0xfd00cf5c>
 200e0a8:	9005883a 	mov	r2,r18
 200e0ac:	94400504 	addi	r17,r18,20
 200e0b0:	9c000504 	addi	r16,r19,20
 200e0b4:	9825883a 	mov	r18,r19
 200e0b8:	05000044 	movi	r20,1
 200e0bc:	1027883a 	mov	r19,r2
 200e0c0:	003fa606 	br	200df5c <__alt_mem_epcs_flash_controller_0+0xfd00cf5c>

0200e0c4 <__ulp>:
 200e0c4:	295ffc2c 	andhi	r5,r5,32752
 200e0c8:	00bf3034 	movhi	r2,64704
 200e0cc:	2887883a 	add	r3,r5,r2
 200e0d0:	00c0020e 	bge	zero,r3,200e0dc <__ulp+0x18>
 200e0d4:	0005883a 	mov	r2,zero
 200e0d8:	f800283a 	ret
 200e0dc:	00c7c83a 	sub	r3,zero,r3
 200e0e0:	1807d53a 	srai	r3,r3,20
 200e0e4:	008004c4 	movi	r2,19
 200e0e8:	10c00b0e 	bge	r2,r3,200e118 <__ulp+0x54>
 200e0ec:	18bffb04 	addi	r2,r3,-20
 200e0f0:	01000784 	movi	r4,30
 200e0f4:	0007883a 	mov	r3,zero
 200e0f8:	20800516 	blt	r4,r2,200e110 <__ulp+0x4c>
 200e0fc:	010007c4 	movi	r4,31
 200e100:	2089c83a 	sub	r4,r4,r2
 200e104:	00800044 	movi	r2,1
 200e108:	1104983a 	sll	r2,r2,r4
 200e10c:	f800283a 	ret
 200e110:	00800044 	movi	r2,1
 200e114:	f800283a 	ret
 200e118:	01400234 	movhi	r5,8
 200e11c:	28c7d83a 	sra	r3,r5,r3
 200e120:	0005883a 	mov	r2,zero
 200e124:	f800283a 	ret

0200e128 <__b2d>:
 200e128:	defffa04 	addi	sp,sp,-24
 200e12c:	dc000015 	stw	r16,0(sp)
 200e130:	24000417 	ldw	r16,16(r4)
 200e134:	dc400115 	stw	r17,4(sp)
 200e138:	24400504 	addi	r17,r4,20
 200e13c:	8421883a 	add	r16,r16,r16
 200e140:	8421883a 	add	r16,r16,r16
 200e144:	8c21883a 	add	r16,r17,r16
 200e148:	dc800215 	stw	r18,8(sp)
 200e14c:	84bfff17 	ldw	r18,-4(r16)
 200e150:	dd000415 	stw	r20,16(sp)
 200e154:	dcc00315 	stw	r19,12(sp)
 200e158:	9009883a 	mov	r4,r18
 200e15c:	2829883a 	mov	r20,r5
 200e160:	dfc00515 	stw	ra,20(sp)
 200e164:	200d8940 	call	200d894 <__hi0bits>
 200e168:	00c00804 	movi	r3,32
 200e16c:	1889c83a 	sub	r4,r3,r2
 200e170:	a1000015 	stw	r4,0(r20)
 200e174:	01000284 	movi	r4,10
 200e178:	84ffff04 	addi	r19,r16,-4
 200e17c:	20801216 	blt	r4,r2,200e1c8 <__b2d+0xa0>
 200e180:	018002c4 	movi	r6,11
 200e184:	308dc83a 	sub	r6,r6,r2
 200e188:	9186d83a 	srl	r3,r18,r6
 200e18c:	18cffc34 	orhi	r3,r3,16368
 200e190:	8cc0212e 	bgeu	r17,r19,200e218 <__b2d+0xf0>
 200e194:	813ffe17 	ldw	r4,-8(r16)
 200e198:	218cd83a 	srl	r6,r4,r6
 200e19c:	10800544 	addi	r2,r2,21
 200e1a0:	9084983a 	sll	r2,r18,r2
 200e1a4:	1184b03a 	or	r2,r2,r6
 200e1a8:	dfc00517 	ldw	ra,20(sp)
 200e1ac:	dd000417 	ldw	r20,16(sp)
 200e1b0:	dcc00317 	ldw	r19,12(sp)
 200e1b4:	dc800217 	ldw	r18,8(sp)
 200e1b8:	dc400117 	ldw	r17,4(sp)
 200e1bc:	dc000017 	ldw	r16,0(sp)
 200e1c0:	dec00604 	addi	sp,sp,24
 200e1c4:	f800283a 	ret
 200e1c8:	8cc00f2e 	bgeu	r17,r19,200e208 <__b2d+0xe0>
 200e1cc:	117ffd44 	addi	r5,r2,-11
 200e1d0:	80bffe17 	ldw	r2,-8(r16)
 200e1d4:	28000e26 	beq	r5,zero,200e210 <__b2d+0xe8>
 200e1d8:	1949c83a 	sub	r4,r3,r5
 200e1dc:	9164983a 	sll	r18,r18,r5
 200e1e0:	1106d83a 	srl	r3,r2,r4
 200e1e4:	81bffe04 	addi	r6,r16,-8
 200e1e8:	948ffc34 	orhi	r18,r18,16368
 200e1ec:	90c6b03a 	or	r3,r18,r3
 200e1f0:	89800e2e 	bgeu	r17,r6,200e22c <__b2d+0x104>
 200e1f4:	81bffd17 	ldw	r6,-12(r16)
 200e1f8:	1144983a 	sll	r2,r2,r5
 200e1fc:	310ad83a 	srl	r5,r6,r4
 200e200:	2884b03a 	or	r2,r5,r2
 200e204:	003fe806 	br	200e1a8 <__alt_mem_epcs_flash_controller_0+0xfd00d1a8>
 200e208:	10bffd44 	addi	r2,r2,-11
 200e20c:	1000041e 	bne	r2,zero,200e220 <__b2d+0xf8>
 200e210:	90cffc34 	orhi	r3,r18,16368
 200e214:	003fe406 	br	200e1a8 <__alt_mem_epcs_flash_controller_0+0xfd00d1a8>
 200e218:	000d883a 	mov	r6,zero
 200e21c:	003fdf06 	br	200e19c <__alt_mem_epcs_flash_controller_0+0xfd00d19c>
 200e220:	90a4983a 	sll	r18,r18,r2
 200e224:	0005883a 	mov	r2,zero
 200e228:	003ff906 	br	200e210 <__alt_mem_epcs_flash_controller_0+0xfd00d210>
 200e22c:	1144983a 	sll	r2,r2,r5
 200e230:	003fdd06 	br	200e1a8 <__alt_mem_epcs_flash_controller_0+0xfd00d1a8>

0200e234 <__d2b>:
 200e234:	defff804 	addi	sp,sp,-32
 200e238:	dc000215 	stw	r16,8(sp)
 200e23c:	3021883a 	mov	r16,r6
 200e240:	dc400315 	stw	r17,12(sp)
 200e244:	8022907a 	slli	r17,r16,1
 200e248:	dd000615 	stw	r20,24(sp)
 200e24c:	2829883a 	mov	r20,r5
 200e250:	01400044 	movi	r5,1
 200e254:	dcc00515 	stw	r19,20(sp)
 200e258:	dc800415 	stw	r18,16(sp)
 200e25c:	dfc00715 	stw	ra,28(sp)
 200e260:	3825883a 	mov	r18,r7
 200e264:	8822d57a 	srli	r17,r17,21
 200e268:	200d5a00 	call	200d5a0 <_Balloc>
 200e26c:	1027883a 	mov	r19,r2
 200e270:	00800434 	movhi	r2,16
 200e274:	10bfffc4 	addi	r2,r2,-1
 200e278:	808c703a 	and	r6,r16,r2
 200e27c:	88000126 	beq	r17,zero,200e284 <__d2b+0x50>
 200e280:	31800434 	orhi	r6,r6,16
 200e284:	d9800015 	stw	r6,0(sp)
 200e288:	a0002426 	beq	r20,zero,200e31c <__d2b+0xe8>
 200e28c:	d9000104 	addi	r4,sp,4
 200e290:	dd000115 	stw	r20,4(sp)
 200e294:	200d8fc0 	call	200d8fc <__lo0bits>
 200e298:	d8c00017 	ldw	r3,0(sp)
 200e29c:	10002f1e 	bne	r2,zero,200e35c <__d2b+0x128>
 200e2a0:	d9000117 	ldw	r4,4(sp)
 200e2a4:	99000515 	stw	r4,20(r19)
 200e2a8:	1821003a 	cmpeq	r16,r3,zero
 200e2ac:	01000084 	movi	r4,2
 200e2b0:	2421c83a 	sub	r16,r4,r16
 200e2b4:	98c00615 	stw	r3,24(r19)
 200e2b8:	9c000415 	stw	r16,16(r19)
 200e2bc:	88001f1e 	bne	r17,zero,200e33c <__d2b+0x108>
 200e2c0:	10bef384 	addi	r2,r2,-1074
 200e2c4:	90800015 	stw	r2,0(r18)
 200e2c8:	00900034 	movhi	r2,16384
 200e2cc:	10bfffc4 	addi	r2,r2,-1
 200e2d0:	8085883a 	add	r2,r16,r2
 200e2d4:	1085883a 	add	r2,r2,r2
 200e2d8:	1085883a 	add	r2,r2,r2
 200e2dc:	9885883a 	add	r2,r19,r2
 200e2e0:	11000517 	ldw	r4,20(r2)
 200e2e4:	8020917a 	slli	r16,r16,5
 200e2e8:	200d8940 	call	200d894 <__hi0bits>
 200e2ec:	d8c00817 	ldw	r3,32(sp)
 200e2f0:	8085c83a 	sub	r2,r16,r2
 200e2f4:	18800015 	stw	r2,0(r3)
 200e2f8:	9805883a 	mov	r2,r19
 200e2fc:	dfc00717 	ldw	ra,28(sp)
 200e300:	dd000617 	ldw	r20,24(sp)
 200e304:	dcc00517 	ldw	r19,20(sp)
 200e308:	dc800417 	ldw	r18,16(sp)
 200e30c:	dc400317 	ldw	r17,12(sp)
 200e310:	dc000217 	ldw	r16,8(sp)
 200e314:	dec00804 	addi	sp,sp,32
 200e318:	f800283a 	ret
 200e31c:	d809883a 	mov	r4,sp
 200e320:	200d8fc0 	call	200d8fc <__lo0bits>
 200e324:	d8c00017 	ldw	r3,0(sp)
 200e328:	04000044 	movi	r16,1
 200e32c:	9c000415 	stw	r16,16(r19)
 200e330:	98c00515 	stw	r3,20(r19)
 200e334:	10800804 	addi	r2,r2,32
 200e338:	883fe126 	beq	r17,zero,200e2c0 <__alt_mem_epcs_flash_controller_0+0xfd00d2c0>
 200e33c:	00c00d44 	movi	r3,53
 200e340:	8c7ef344 	addi	r17,r17,-1075
 200e344:	88a3883a 	add	r17,r17,r2
 200e348:	1885c83a 	sub	r2,r3,r2
 200e34c:	d8c00817 	ldw	r3,32(sp)
 200e350:	94400015 	stw	r17,0(r18)
 200e354:	18800015 	stw	r2,0(r3)
 200e358:	003fe706 	br	200e2f8 <__alt_mem_epcs_flash_controller_0+0xfd00d2f8>
 200e35c:	01000804 	movi	r4,32
 200e360:	2089c83a 	sub	r4,r4,r2
 200e364:	1908983a 	sll	r4,r3,r4
 200e368:	d9400117 	ldw	r5,4(sp)
 200e36c:	1886d83a 	srl	r3,r3,r2
 200e370:	2148b03a 	or	r4,r4,r5
 200e374:	99000515 	stw	r4,20(r19)
 200e378:	d8c00015 	stw	r3,0(sp)
 200e37c:	003fca06 	br	200e2a8 <__alt_mem_epcs_flash_controller_0+0xfd00d2a8>

0200e380 <__ratio>:
 200e380:	defff904 	addi	sp,sp,-28
 200e384:	dc400315 	stw	r17,12(sp)
 200e388:	2823883a 	mov	r17,r5
 200e38c:	d9400104 	addi	r5,sp,4
 200e390:	dfc00615 	stw	ra,24(sp)
 200e394:	dcc00515 	stw	r19,20(sp)
 200e398:	dc800415 	stw	r18,16(sp)
 200e39c:	2027883a 	mov	r19,r4
 200e3a0:	dc000215 	stw	r16,8(sp)
 200e3a4:	200e1280 	call	200e128 <__b2d>
 200e3a8:	d80b883a 	mov	r5,sp
 200e3ac:	8809883a 	mov	r4,r17
 200e3b0:	1025883a 	mov	r18,r2
 200e3b4:	1821883a 	mov	r16,r3
 200e3b8:	200e1280 	call	200e128 <__b2d>
 200e3bc:	8a000417 	ldw	r8,16(r17)
 200e3c0:	99000417 	ldw	r4,16(r19)
 200e3c4:	d9400117 	ldw	r5,4(sp)
 200e3c8:	2209c83a 	sub	r4,r4,r8
 200e3cc:	2010917a 	slli	r8,r4,5
 200e3d0:	d9000017 	ldw	r4,0(sp)
 200e3d4:	2909c83a 	sub	r4,r5,r4
 200e3d8:	4109883a 	add	r4,r8,r4
 200e3dc:	01000e0e 	bge	zero,r4,200e418 <__ratio+0x98>
 200e3e0:	2008953a 	slli	r4,r4,20
 200e3e4:	2421883a 	add	r16,r4,r16
 200e3e8:	100d883a 	mov	r6,r2
 200e3ec:	180f883a 	mov	r7,r3
 200e3f0:	9009883a 	mov	r4,r18
 200e3f4:	800b883a 	mov	r5,r16
 200e3f8:	20034280 	call	2003428 <__divdf3>
 200e3fc:	dfc00617 	ldw	ra,24(sp)
 200e400:	dcc00517 	ldw	r19,20(sp)
 200e404:	dc800417 	ldw	r18,16(sp)
 200e408:	dc400317 	ldw	r17,12(sp)
 200e40c:	dc000217 	ldw	r16,8(sp)
 200e410:	dec00704 	addi	sp,sp,28
 200e414:	f800283a 	ret
 200e418:	2008953a 	slli	r4,r4,20
 200e41c:	1907c83a 	sub	r3,r3,r4
 200e420:	003ff106 	br	200e3e8 <__alt_mem_epcs_flash_controller_0+0xfd00d3e8>

0200e424 <_mprec_log10>:
 200e424:	defffe04 	addi	sp,sp,-8
 200e428:	dc000015 	stw	r16,0(sp)
 200e42c:	dfc00115 	stw	ra,4(sp)
 200e430:	008005c4 	movi	r2,23
 200e434:	2021883a 	mov	r16,r4
 200e438:	11000d0e 	bge	r2,r4,200e470 <_mprec_log10+0x4c>
 200e43c:	0005883a 	mov	r2,zero
 200e440:	00cffc34 	movhi	r3,16368
 200e444:	843fffc4 	addi	r16,r16,-1
 200e448:	000d883a 	mov	r6,zero
 200e44c:	01d00934 	movhi	r7,16420
 200e450:	1009883a 	mov	r4,r2
 200e454:	180b883a 	mov	r5,r3
 200e458:	2003e040 	call	2003e04 <__muldf3>
 200e45c:	803ff91e 	bne	r16,zero,200e444 <__alt_mem_epcs_flash_controller_0+0xfd00d444>
 200e460:	dfc00117 	ldw	ra,4(sp)
 200e464:	dc000017 	ldw	r16,0(sp)
 200e468:	dec00204 	addi	sp,sp,8
 200e46c:	f800283a 	ret
 200e470:	202090fa 	slli	r16,r4,3
 200e474:	00808134 	movhi	r2,516
 200e478:	10b11504 	addi	r2,r2,-15276
 200e47c:	1421883a 	add	r16,r2,r16
 200e480:	80800017 	ldw	r2,0(r16)
 200e484:	80c00117 	ldw	r3,4(r16)
 200e488:	dfc00117 	ldw	ra,4(sp)
 200e48c:	dc000017 	ldw	r16,0(sp)
 200e490:	dec00204 	addi	sp,sp,8
 200e494:	f800283a 	ret

0200e498 <__copybits>:
 200e498:	297fffc4 	addi	r5,r5,-1
 200e49c:	280fd17a 	srai	r7,r5,5
 200e4a0:	30c00417 	ldw	r3,16(r6)
 200e4a4:	30800504 	addi	r2,r6,20
 200e4a8:	39c00044 	addi	r7,r7,1
 200e4ac:	18c7883a 	add	r3,r3,r3
 200e4b0:	39cf883a 	add	r7,r7,r7
 200e4b4:	18c7883a 	add	r3,r3,r3
 200e4b8:	39cf883a 	add	r7,r7,r7
 200e4bc:	10c7883a 	add	r3,r2,r3
 200e4c0:	21cf883a 	add	r7,r4,r7
 200e4c4:	10c00d2e 	bgeu	r2,r3,200e4fc <__copybits+0x64>
 200e4c8:	200b883a 	mov	r5,r4
 200e4cc:	12000017 	ldw	r8,0(r2)
 200e4d0:	29400104 	addi	r5,r5,4
 200e4d4:	10800104 	addi	r2,r2,4
 200e4d8:	2a3fff15 	stw	r8,-4(r5)
 200e4dc:	10fffb36 	bltu	r2,r3,200e4cc <__alt_mem_epcs_flash_controller_0+0xfd00d4cc>
 200e4e0:	1985c83a 	sub	r2,r3,r6
 200e4e4:	10bffac4 	addi	r2,r2,-21
 200e4e8:	1004d0ba 	srli	r2,r2,2
 200e4ec:	10800044 	addi	r2,r2,1
 200e4f0:	1085883a 	add	r2,r2,r2
 200e4f4:	1085883a 	add	r2,r2,r2
 200e4f8:	2089883a 	add	r4,r4,r2
 200e4fc:	21c0032e 	bgeu	r4,r7,200e50c <__copybits+0x74>
 200e500:	20000015 	stw	zero,0(r4)
 200e504:	21000104 	addi	r4,r4,4
 200e508:	21fffd36 	bltu	r4,r7,200e500 <__alt_mem_epcs_flash_controller_0+0xfd00d500>
 200e50c:	f800283a 	ret

0200e510 <__any_on>:
 200e510:	20c00417 	ldw	r3,16(r4)
 200e514:	2805d17a 	srai	r2,r5,5
 200e518:	21000504 	addi	r4,r4,20
 200e51c:	18800d0e 	bge	r3,r2,200e554 <__any_on+0x44>
 200e520:	18c7883a 	add	r3,r3,r3
 200e524:	18c7883a 	add	r3,r3,r3
 200e528:	20c7883a 	add	r3,r4,r3
 200e52c:	20c0192e 	bgeu	r4,r3,200e594 <__any_on+0x84>
 200e530:	18bfff17 	ldw	r2,-4(r3)
 200e534:	18ffff04 	addi	r3,r3,-4
 200e538:	1000041e 	bne	r2,zero,200e54c <__any_on+0x3c>
 200e53c:	20c0142e 	bgeu	r4,r3,200e590 <__any_on+0x80>
 200e540:	18ffff04 	addi	r3,r3,-4
 200e544:	19400017 	ldw	r5,0(r3)
 200e548:	283ffc26 	beq	r5,zero,200e53c <__alt_mem_epcs_flash_controller_0+0xfd00d53c>
 200e54c:	00800044 	movi	r2,1
 200e550:	f800283a 	ret
 200e554:	10c00a0e 	bge	r2,r3,200e580 <__any_on+0x70>
 200e558:	1085883a 	add	r2,r2,r2
 200e55c:	1085883a 	add	r2,r2,r2
 200e560:	294007cc 	andi	r5,r5,31
 200e564:	2087883a 	add	r3,r4,r2
 200e568:	283ff026 	beq	r5,zero,200e52c <__alt_mem_epcs_flash_controller_0+0xfd00d52c>
 200e56c:	19800017 	ldw	r6,0(r3)
 200e570:	3144d83a 	srl	r2,r6,r5
 200e574:	114a983a 	sll	r5,r2,r5
 200e578:	317ff41e 	bne	r6,r5,200e54c <__alt_mem_epcs_flash_controller_0+0xfd00d54c>
 200e57c:	003feb06 	br	200e52c <__alt_mem_epcs_flash_controller_0+0xfd00d52c>
 200e580:	1085883a 	add	r2,r2,r2
 200e584:	1085883a 	add	r2,r2,r2
 200e588:	2087883a 	add	r3,r4,r2
 200e58c:	003fe706 	br	200e52c <__alt_mem_epcs_flash_controller_0+0xfd00d52c>
 200e590:	f800283a 	ret
 200e594:	0005883a 	mov	r2,zero
 200e598:	f800283a 	ret

0200e59c <_realloc_r>:
 200e59c:	defff604 	addi	sp,sp,-40
 200e5a0:	dc800215 	stw	r18,8(sp)
 200e5a4:	dfc00915 	stw	ra,36(sp)
 200e5a8:	df000815 	stw	fp,32(sp)
 200e5ac:	ddc00715 	stw	r23,28(sp)
 200e5b0:	dd800615 	stw	r22,24(sp)
 200e5b4:	dd400515 	stw	r21,20(sp)
 200e5b8:	dd000415 	stw	r20,16(sp)
 200e5bc:	dcc00315 	stw	r19,12(sp)
 200e5c0:	dc400115 	stw	r17,4(sp)
 200e5c4:	dc000015 	stw	r16,0(sp)
 200e5c8:	3025883a 	mov	r18,r6
 200e5cc:	2800b726 	beq	r5,zero,200e8ac <_realloc_r+0x310>
 200e5d0:	282b883a 	mov	r21,r5
 200e5d4:	2029883a 	mov	r20,r4
 200e5d8:	20131880 	call	2013188 <__malloc_lock>
 200e5dc:	a8bfff17 	ldw	r2,-4(r21)
 200e5e0:	043fff04 	movi	r16,-4
 200e5e4:	90c002c4 	addi	r3,r18,11
 200e5e8:	01000584 	movi	r4,22
 200e5ec:	acfffe04 	addi	r19,r21,-8
 200e5f0:	1420703a 	and	r16,r2,r16
 200e5f4:	20c0332e 	bgeu	r4,r3,200e6c4 <_realloc_r+0x128>
 200e5f8:	047ffe04 	movi	r17,-8
 200e5fc:	1c62703a 	and	r17,r3,r17
 200e600:	8807883a 	mov	r3,r17
 200e604:	88005816 	blt	r17,zero,200e768 <_realloc_r+0x1cc>
 200e608:	8c805736 	bltu	r17,r18,200e768 <_realloc_r+0x1cc>
 200e60c:	80c0300e 	bge	r16,r3,200e6d0 <_realloc_r+0x134>
 200e610:	07008134 	movhi	fp,516
 200e614:	e7327304 	addi	fp,fp,-13876
 200e618:	e1c00217 	ldw	r7,8(fp)
 200e61c:	9c09883a 	add	r4,r19,r16
 200e620:	22000117 	ldw	r8,4(r4)
 200e624:	21c06326 	beq	r4,r7,200e7b4 <_realloc_r+0x218>
 200e628:	017fff84 	movi	r5,-2
 200e62c:	414a703a 	and	r5,r8,r5
 200e630:	214b883a 	add	r5,r4,r5
 200e634:	29800117 	ldw	r6,4(r5)
 200e638:	3180004c 	andi	r6,r6,1
 200e63c:	30003f26 	beq	r6,zero,200e73c <_realloc_r+0x1a0>
 200e640:	1080004c 	andi	r2,r2,1
 200e644:	10008326 	beq	r2,zero,200e854 <_realloc_r+0x2b8>
 200e648:	900b883a 	mov	r5,r18
 200e64c:	a009883a 	mov	r4,r20
 200e650:	20052780 	call	2005278 <_malloc_r>
 200e654:	1025883a 	mov	r18,r2
 200e658:	10011e26 	beq	r2,zero,200ead4 <_realloc_r+0x538>
 200e65c:	a93fff17 	ldw	r4,-4(r21)
 200e660:	10fffe04 	addi	r3,r2,-8
 200e664:	00bfff84 	movi	r2,-2
 200e668:	2084703a 	and	r2,r4,r2
 200e66c:	9885883a 	add	r2,r19,r2
 200e670:	1880ee26 	beq	r3,r2,200ea2c <_realloc_r+0x490>
 200e674:	81bfff04 	addi	r6,r16,-4
 200e678:	00800904 	movi	r2,36
 200e67c:	1180b836 	bltu	r2,r6,200e960 <_realloc_r+0x3c4>
 200e680:	00c004c4 	movi	r3,19
 200e684:	19809636 	bltu	r3,r6,200e8e0 <_realloc_r+0x344>
 200e688:	9005883a 	mov	r2,r18
 200e68c:	a807883a 	mov	r3,r21
 200e690:	19000017 	ldw	r4,0(r3)
 200e694:	11000015 	stw	r4,0(r2)
 200e698:	19000117 	ldw	r4,4(r3)
 200e69c:	11000115 	stw	r4,4(r2)
 200e6a0:	18c00217 	ldw	r3,8(r3)
 200e6a4:	10c00215 	stw	r3,8(r2)
 200e6a8:	a80b883a 	mov	r5,r21
 200e6ac:	a009883a 	mov	r4,r20
 200e6b0:	200c62c0 	call	200c62c <_free_r>
 200e6b4:	a009883a 	mov	r4,r20
 200e6b8:	20131ac0 	call	20131ac <__malloc_unlock>
 200e6bc:	9005883a 	mov	r2,r18
 200e6c0:	00001206 	br	200e70c <_realloc_r+0x170>
 200e6c4:	00c00404 	movi	r3,16
 200e6c8:	1823883a 	mov	r17,r3
 200e6cc:	003fce06 	br	200e608 <__alt_mem_epcs_flash_controller_0+0xfd00d608>
 200e6d0:	a825883a 	mov	r18,r21
 200e6d4:	8445c83a 	sub	r2,r16,r17
 200e6d8:	00c003c4 	movi	r3,15
 200e6dc:	18802636 	bltu	r3,r2,200e778 <_realloc_r+0x1dc>
 200e6e0:	99800117 	ldw	r6,4(r19)
 200e6e4:	9c07883a 	add	r3,r19,r16
 200e6e8:	3180004c 	andi	r6,r6,1
 200e6ec:	3420b03a 	or	r16,r6,r16
 200e6f0:	9c000115 	stw	r16,4(r19)
 200e6f4:	18800117 	ldw	r2,4(r3)
 200e6f8:	10800054 	ori	r2,r2,1
 200e6fc:	18800115 	stw	r2,4(r3)
 200e700:	a009883a 	mov	r4,r20
 200e704:	20131ac0 	call	20131ac <__malloc_unlock>
 200e708:	9005883a 	mov	r2,r18
 200e70c:	dfc00917 	ldw	ra,36(sp)
 200e710:	df000817 	ldw	fp,32(sp)
 200e714:	ddc00717 	ldw	r23,28(sp)
 200e718:	dd800617 	ldw	r22,24(sp)
 200e71c:	dd400517 	ldw	r21,20(sp)
 200e720:	dd000417 	ldw	r20,16(sp)
 200e724:	dcc00317 	ldw	r19,12(sp)
 200e728:	dc800217 	ldw	r18,8(sp)
 200e72c:	dc400117 	ldw	r17,4(sp)
 200e730:	dc000017 	ldw	r16,0(sp)
 200e734:	dec00a04 	addi	sp,sp,40
 200e738:	f800283a 	ret
 200e73c:	017fff04 	movi	r5,-4
 200e740:	414a703a 	and	r5,r8,r5
 200e744:	814d883a 	add	r6,r16,r5
 200e748:	30c01f16 	blt	r6,r3,200e7c8 <_realloc_r+0x22c>
 200e74c:	20800317 	ldw	r2,12(r4)
 200e750:	20c00217 	ldw	r3,8(r4)
 200e754:	a825883a 	mov	r18,r21
 200e758:	3021883a 	mov	r16,r6
 200e75c:	18800315 	stw	r2,12(r3)
 200e760:	10c00215 	stw	r3,8(r2)
 200e764:	003fdb06 	br	200e6d4 <__alt_mem_epcs_flash_controller_0+0xfd00d6d4>
 200e768:	00800304 	movi	r2,12
 200e76c:	a0800015 	stw	r2,0(r20)
 200e770:	0005883a 	mov	r2,zero
 200e774:	003fe506 	br	200e70c <__alt_mem_epcs_flash_controller_0+0xfd00d70c>
 200e778:	98c00117 	ldw	r3,4(r19)
 200e77c:	9c4b883a 	add	r5,r19,r17
 200e780:	11000054 	ori	r4,r2,1
 200e784:	18c0004c 	andi	r3,r3,1
 200e788:	1c62b03a 	or	r17,r3,r17
 200e78c:	9c400115 	stw	r17,4(r19)
 200e790:	29000115 	stw	r4,4(r5)
 200e794:	2885883a 	add	r2,r5,r2
 200e798:	10c00117 	ldw	r3,4(r2)
 200e79c:	29400204 	addi	r5,r5,8
 200e7a0:	a009883a 	mov	r4,r20
 200e7a4:	18c00054 	ori	r3,r3,1
 200e7a8:	10c00115 	stw	r3,4(r2)
 200e7ac:	200c62c0 	call	200c62c <_free_r>
 200e7b0:	003fd306 	br	200e700 <__alt_mem_epcs_flash_controller_0+0xfd00d700>
 200e7b4:	017fff04 	movi	r5,-4
 200e7b8:	414a703a 	and	r5,r8,r5
 200e7bc:	89800404 	addi	r6,r17,16
 200e7c0:	8151883a 	add	r8,r16,r5
 200e7c4:	4180590e 	bge	r8,r6,200e92c <_realloc_r+0x390>
 200e7c8:	1080004c 	andi	r2,r2,1
 200e7cc:	103f9e1e 	bne	r2,zero,200e648 <__alt_mem_epcs_flash_controller_0+0xfd00d648>
 200e7d0:	adbffe17 	ldw	r22,-8(r21)
 200e7d4:	00bfff04 	movi	r2,-4
 200e7d8:	9dadc83a 	sub	r22,r19,r22
 200e7dc:	b1800117 	ldw	r6,4(r22)
 200e7e0:	3084703a 	and	r2,r6,r2
 200e7e4:	20002026 	beq	r4,zero,200e868 <_realloc_r+0x2cc>
 200e7e8:	80af883a 	add	r23,r16,r2
 200e7ec:	b96f883a 	add	r23,r23,r5
 200e7f0:	21c05f26 	beq	r4,r7,200e970 <_realloc_r+0x3d4>
 200e7f4:	b8c01c16 	blt	r23,r3,200e868 <_realloc_r+0x2cc>
 200e7f8:	20800317 	ldw	r2,12(r4)
 200e7fc:	20c00217 	ldw	r3,8(r4)
 200e800:	81bfff04 	addi	r6,r16,-4
 200e804:	01000904 	movi	r4,36
 200e808:	18800315 	stw	r2,12(r3)
 200e80c:	10c00215 	stw	r3,8(r2)
 200e810:	b0c00217 	ldw	r3,8(r22)
 200e814:	b0800317 	ldw	r2,12(r22)
 200e818:	b4800204 	addi	r18,r22,8
 200e81c:	18800315 	stw	r2,12(r3)
 200e820:	10c00215 	stw	r3,8(r2)
 200e824:	21801b36 	bltu	r4,r6,200e894 <_realloc_r+0x2f8>
 200e828:	008004c4 	movi	r2,19
 200e82c:	1180352e 	bgeu	r2,r6,200e904 <_realloc_r+0x368>
 200e830:	a8800017 	ldw	r2,0(r21)
 200e834:	b0800215 	stw	r2,8(r22)
 200e838:	a8800117 	ldw	r2,4(r21)
 200e83c:	b0800315 	stw	r2,12(r22)
 200e840:	008006c4 	movi	r2,27
 200e844:	11807f36 	bltu	r2,r6,200ea44 <_realloc_r+0x4a8>
 200e848:	b0800404 	addi	r2,r22,16
 200e84c:	ad400204 	addi	r21,r21,8
 200e850:	00002d06 	br	200e908 <_realloc_r+0x36c>
 200e854:	adbffe17 	ldw	r22,-8(r21)
 200e858:	00bfff04 	movi	r2,-4
 200e85c:	9dadc83a 	sub	r22,r19,r22
 200e860:	b1000117 	ldw	r4,4(r22)
 200e864:	2084703a 	and	r2,r4,r2
 200e868:	b03f7726 	beq	r22,zero,200e648 <__alt_mem_epcs_flash_controller_0+0xfd00d648>
 200e86c:	80af883a 	add	r23,r16,r2
 200e870:	b8ff7516 	blt	r23,r3,200e648 <__alt_mem_epcs_flash_controller_0+0xfd00d648>
 200e874:	b0800317 	ldw	r2,12(r22)
 200e878:	b0c00217 	ldw	r3,8(r22)
 200e87c:	81bfff04 	addi	r6,r16,-4
 200e880:	01000904 	movi	r4,36
 200e884:	18800315 	stw	r2,12(r3)
 200e888:	10c00215 	stw	r3,8(r2)
 200e88c:	b4800204 	addi	r18,r22,8
 200e890:	21bfe52e 	bgeu	r4,r6,200e828 <__alt_mem_epcs_flash_controller_0+0xfd00d828>
 200e894:	a80b883a 	mov	r5,r21
 200e898:	9009883a 	mov	r4,r18
 200e89c:	200d4440 	call	200d444 <memmove>
 200e8a0:	b821883a 	mov	r16,r23
 200e8a4:	b027883a 	mov	r19,r22
 200e8a8:	003f8a06 	br	200e6d4 <__alt_mem_epcs_flash_controller_0+0xfd00d6d4>
 200e8ac:	300b883a 	mov	r5,r6
 200e8b0:	dfc00917 	ldw	ra,36(sp)
 200e8b4:	df000817 	ldw	fp,32(sp)
 200e8b8:	ddc00717 	ldw	r23,28(sp)
 200e8bc:	dd800617 	ldw	r22,24(sp)
 200e8c0:	dd400517 	ldw	r21,20(sp)
 200e8c4:	dd000417 	ldw	r20,16(sp)
 200e8c8:	dcc00317 	ldw	r19,12(sp)
 200e8cc:	dc800217 	ldw	r18,8(sp)
 200e8d0:	dc400117 	ldw	r17,4(sp)
 200e8d4:	dc000017 	ldw	r16,0(sp)
 200e8d8:	dec00a04 	addi	sp,sp,40
 200e8dc:	20052781 	jmpi	2005278 <_malloc_r>
 200e8e0:	a8c00017 	ldw	r3,0(r21)
 200e8e4:	90c00015 	stw	r3,0(r18)
 200e8e8:	a8c00117 	ldw	r3,4(r21)
 200e8ec:	90c00115 	stw	r3,4(r18)
 200e8f0:	00c006c4 	movi	r3,27
 200e8f4:	19804536 	bltu	r3,r6,200ea0c <_realloc_r+0x470>
 200e8f8:	90800204 	addi	r2,r18,8
 200e8fc:	a8c00204 	addi	r3,r21,8
 200e900:	003f6306 	br	200e690 <__alt_mem_epcs_flash_controller_0+0xfd00d690>
 200e904:	9005883a 	mov	r2,r18
 200e908:	a8c00017 	ldw	r3,0(r21)
 200e90c:	b821883a 	mov	r16,r23
 200e910:	b027883a 	mov	r19,r22
 200e914:	10c00015 	stw	r3,0(r2)
 200e918:	a8c00117 	ldw	r3,4(r21)
 200e91c:	10c00115 	stw	r3,4(r2)
 200e920:	a8c00217 	ldw	r3,8(r21)
 200e924:	10c00215 	stw	r3,8(r2)
 200e928:	003f6a06 	br	200e6d4 <__alt_mem_epcs_flash_controller_0+0xfd00d6d4>
 200e92c:	9c67883a 	add	r19,r19,r17
 200e930:	4445c83a 	sub	r2,r8,r17
 200e934:	e4c00215 	stw	r19,8(fp)
 200e938:	10800054 	ori	r2,r2,1
 200e93c:	98800115 	stw	r2,4(r19)
 200e940:	a8bfff17 	ldw	r2,-4(r21)
 200e944:	a009883a 	mov	r4,r20
 200e948:	1080004c 	andi	r2,r2,1
 200e94c:	1462b03a 	or	r17,r2,r17
 200e950:	ac7fff15 	stw	r17,-4(r21)
 200e954:	20131ac0 	call	20131ac <__malloc_unlock>
 200e958:	a805883a 	mov	r2,r21
 200e95c:	003f6b06 	br	200e70c <__alt_mem_epcs_flash_controller_0+0xfd00d70c>
 200e960:	a80b883a 	mov	r5,r21
 200e964:	9009883a 	mov	r4,r18
 200e968:	200d4440 	call	200d444 <memmove>
 200e96c:	003f4e06 	br	200e6a8 <__alt_mem_epcs_flash_controller_0+0xfd00d6a8>
 200e970:	89000404 	addi	r4,r17,16
 200e974:	b93fbc16 	blt	r23,r4,200e868 <__alt_mem_epcs_flash_controller_0+0xfd00d868>
 200e978:	b0800317 	ldw	r2,12(r22)
 200e97c:	b0c00217 	ldw	r3,8(r22)
 200e980:	81bfff04 	addi	r6,r16,-4
 200e984:	01000904 	movi	r4,36
 200e988:	18800315 	stw	r2,12(r3)
 200e98c:	10c00215 	stw	r3,8(r2)
 200e990:	b4800204 	addi	r18,r22,8
 200e994:	21804336 	bltu	r4,r6,200eaa4 <_realloc_r+0x508>
 200e998:	008004c4 	movi	r2,19
 200e99c:	11803f2e 	bgeu	r2,r6,200ea9c <_realloc_r+0x500>
 200e9a0:	a8800017 	ldw	r2,0(r21)
 200e9a4:	b0800215 	stw	r2,8(r22)
 200e9a8:	a8800117 	ldw	r2,4(r21)
 200e9ac:	b0800315 	stw	r2,12(r22)
 200e9b0:	008006c4 	movi	r2,27
 200e9b4:	11803f36 	bltu	r2,r6,200eab4 <_realloc_r+0x518>
 200e9b8:	b0800404 	addi	r2,r22,16
 200e9bc:	ad400204 	addi	r21,r21,8
 200e9c0:	a8c00017 	ldw	r3,0(r21)
 200e9c4:	10c00015 	stw	r3,0(r2)
 200e9c8:	a8c00117 	ldw	r3,4(r21)
 200e9cc:	10c00115 	stw	r3,4(r2)
 200e9d0:	a8c00217 	ldw	r3,8(r21)
 200e9d4:	10c00215 	stw	r3,8(r2)
 200e9d8:	b447883a 	add	r3,r22,r17
 200e9dc:	bc45c83a 	sub	r2,r23,r17
 200e9e0:	e0c00215 	stw	r3,8(fp)
 200e9e4:	10800054 	ori	r2,r2,1
 200e9e8:	18800115 	stw	r2,4(r3)
 200e9ec:	b0800117 	ldw	r2,4(r22)
 200e9f0:	a009883a 	mov	r4,r20
 200e9f4:	1080004c 	andi	r2,r2,1
 200e9f8:	1462b03a 	or	r17,r2,r17
 200e9fc:	b4400115 	stw	r17,4(r22)
 200ea00:	20131ac0 	call	20131ac <__malloc_unlock>
 200ea04:	9005883a 	mov	r2,r18
 200ea08:	003f4006 	br	200e70c <__alt_mem_epcs_flash_controller_0+0xfd00d70c>
 200ea0c:	a8c00217 	ldw	r3,8(r21)
 200ea10:	90c00215 	stw	r3,8(r18)
 200ea14:	a8c00317 	ldw	r3,12(r21)
 200ea18:	90c00315 	stw	r3,12(r18)
 200ea1c:	30801126 	beq	r6,r2,200ea64 <_realloc_r+0x4c8>
 200ea20:	90800404 	addi	r2,r18,16
 200ea24:	a8c00404 	addi	r3,r21,16
 200ea28:	003f1906 	br	200e690 <__alt_mem_epcs_flash_controller_0+0xfd00d690>
 200ea2c:	90ffff17 	ldw	r3,-4(r18)
 200ea30:	00bfff04 	movi	r2,-4
 200ea34:	a825883a 	mov	r18,r21
 200ea38:	1884703a 	and	r2,r3,r2
 200ea3c:	80a1883a 	add	r16,r16,r2
 200ea40:	003f2406 	br	200e6d4 <__alt_mem_epcs_flash_controller_0+0xfd00d6d4>
 200ea44:	a8800217 	ldw	r2,8(r21)
 200ea48:	b0800415 	stw	r2,16(r22)
 200ea4c:	a8800317 	ldw	r2,12(r21)
 200ea50:	b0800515 	stw	r2,20(r22)
 200ea54:	31000a26 	beq	r6,r4,200ea80 <_realloc_r+0x4e4>
 200ea58:	b0800604 	addi	r2,r22,24
 200ea5c:	ad400404 	addi	r21,r21,16
 200ea60:	003fa906 	br	200e908 <__alt_mem_epcs_flash_controller_0+0xfd00d908>
 200ea64:	a9000417 	ldw	r4,16(r21)
 200ea68:	90800604 	addi	r2,r18,24
 200ea6c:	a8c00604 	addi	r3,r21,24
 200ea70:	91000415 	stw	r4,16(r18)
 200ea74:	a9000517 	ldw	r4,20(r21)
 200ea78:	91000515 	stw	r4,20(r18)
 200ea7c:	003f0406 	br	200e690 <__alt_mem_epcs_flash_controller_0+0xfd00d690>
 200ea80:	a8c00417 	ldw	r3,16(r21)
 200ea84:	ad400604 	addi	r21,r21,24
 200ea88:	b0800804 	addi	r2,r22,32
 200ea8c:	b0c00615 	stw	r3,24(r22)
 200ea90:	a8ffff17 	ldw	r3,-4(r21)
 200ea94:	b0c00715 	stw	r3,28(r22)
 200ea98:	003f9b06 	br	200e908 <__alt_mem_epcs_flash_controller_0+0xfd00d908>
 200ea9c:	9005883a 	mov	r2,r18
 200eaa0:	003fc706 	br	200e9c0 <__alt_mem_epcs_flash_controller_0+0xfd00d9c0>
 200eaa4:	a80b883a 	mov	r5,r21
 200eaa8:	9009883a 	mov	r4,r18
 200eaac:	200d4440 	call	200d444 <memmove>
 200eab0:	003fc906 	br	200e9d8 <__alt_mem_epcs_flash_controller_0+0xfd00d9d8>
 200eab4:	a8800217 	ldw	r2,8(r21)
 200eab8:	b0800415 	stw	r2,16(r22)
 200eabc:	a8800317 	ldw	r2,12(r21)
 200eac0:	b0800515 	stw	r2,20(r22)
 200eac4:	31000726 	beq	r6,r4,200eae4 <_realloc_r+0x548>
 200eac8:	b0800604 	addi	r2,r22,24
 200eacc:	ad400404 	addi	r21,r21,16
 200ead0:	003fbb06 	br	200e9c0 <__alt_mem_epcs_flash_controller_0+0xfd00d9c0>
 200ead4:	a009883a 	mov	r4,r20
 200ead8:	20131ac0 	call	20131ac <__malloc_unlock>
 200eadc:	0005883a 	mov	r2,zero
 200eae0:	003f0a06 	br	200e70c <__alt_mem_epcs_flash_controller_0+0xfd00d70c>
 200eae4:	a8c00417 	ldw	r3,16(r21)
 200eae8:	ad400604 	addi	r21,r21,24
 200eaec:	b0800804 	addi	r2,r22,32
 200eaf0:	b0c00615 	stw	r3,24(r22)
 200eaf4:	a8ffff17 	ldw	r3,-4(r21)
 200eaf8:	b0c00715 	stw	r3,28(r22)
 200eafc:	003fb006 	br	200e9c0 <__alt_mem_epcs_flash_controller_0+0xfd00d9c0>

0200eb00 <__sread>:
 200eb00:	defffe04 	addi	sp,sp,-8
 200eb04:	dc000015 	stw	r16,0(sp)
 200eb08:	2821883a 	mov	r16,r5
 200eb0c:	2940038f 	ldh	r5,14(r5)
 200eb10:	dfc00115 	stw	ra,4(sp)
 200eb14:	2011c3c0 	call	2011c3c <_read_r>
 200eb18:	10000716 	blt	r2,zero,200eb38 <__sread+0x38>
 200eb1c:	80c01417 	ldw	r3,80(r16)
 200eb20:	1887883a 	add	r3,r3,r2
 200eb24:	80c01415 	stw	r3,80(r16)
 200eb28:	dfc00117 	ldw	ra,4(sp)
 200eb2c:	dc000017 	ldw	r16,0(sp)
 200eb30:	dec00204 	addi	sp,sp,8
 200eb34:	f800283a 	ret
 200eb38:	80c0030b 	ldhu	r3,12(r16)
 200eb3c:	18fbffcc 	andi	r3,r3,61439
 200eb40:	80c0030d 	sth	r3,12(r16)
 200eb44:	dfc00117 	ldw	ra,4(sp)
 200eb48:	dc000017 	ldw	r16,0(sp)
 200eb4c:	dec00204 	addi	sp,sp,8
 200eb50:	f800283a 	ret

0200eb54 <__seofread>:
 200eb54:	0005883a 	mov	r2,zero
 200eb58:	f800283a 	ret

0200eb5c <__swrite>:
 200eb5c:	2880030b 	ldhu	r2,12(r5)
 200eb60:	defffb04 	addi	sp,sp,-20
 200eb64:	dcc00315 	stw	r19,12(sp)
 200eb68:	dc800215 	stw	r18,8(sp)
 200eb6c:	dc400115 	stw	r17,4(sp)
 200eb70:	dc000015 	stw	r16,0(sp)
 200eb74:	dfc00415 	stw	ra,16(sp)
 200eb78:	10c0400c 	andi	r3,r2,256
 200eb7c:	2821883a 	mov	r16,r5
 200eb80:	2023883a 	mov	r17,r4
 200eb84:	3025883a 	mov	r18,r6
 200eb88:	3827883a 	mov	r19,r7
 200eb8c:	18000526 	beq	r3,zero,200eba4 <__swrite+0x48>
 200eb90:	2940038f 	ldh	r5,14(r5)
 200eb94:	01c00084 	movi	r7,2
 200eb98:	000d883a 	mov	r6,zero
 200eb9c:	2011bdc0 	call	2011bdc <_lseek_r>
 200eba0:	8080030b 	ldhu	r2,12(r16)
 200eba4:	8140038f 	ldh	r5,14(r16)
 200eba8:	10bbffcc 	andi	r2,r2,61439
 200ebac:	980f883a 	mov	r7,r19
 200ebb0:	900d883a 	mov	r6,r18
 200ebb4:	8809883a 	mov	r4,r17
 200ebb8:	8080030d 	sth	r2,12(r16)
 200ebbc:	dfc00417 	ldw	ra,16(sp)
 200ebc0:	dcc00317 	ldw	r19,12(sp)
 200ebc4:	dc800217 	ldw	r18,8(sp)
 200ebc8:	dc400117 	ldw	r17,4(sp)
 200ebcc:	dc000017 	ldw	r16,0(sp)
 200ebd0:	dec00504 	addi	sp,sp,20
 200ebd4:	201176c1 	jmpi	201176c <_write_r>

0200ebd8 <__sseek>:
 200ebd8:	defffe04 	addi	sp,sp,-8
 200ebdc:	dc000015 	stw	r16,0(sp)
 200ebe0:	2821883a 	mov	r16,r5
 200ebe4:	2940038f 	ldh	r5,14(r5)
 200ebe8:	dfc00115 	stw	ra,4(sp)
 200ebec:	2011bdc0 	call	2011bdc <_lseek_r>
 200ebf0:	00ffffc4 	movi	r3,-1
 200ebf4:	10c00826 	beq	r2,r3,200ec18 <__sseek+0x40>
 200ebf8:	80c0030b 	ldhu	r3,12(r16)
 200ebfc:	80801415 	stw	r2,80(r16)
 200ec00:	18c40014 	ori	r3,r3,4096
 200ec04:	80c0030d 	sth	r3,12(r16)
 200ec08:	dfc00117 	ldw	ra,4(sp)
 200ec0c:	dc000017 	ldw	r16,0(sp)
 200ec10:	dec00204 	addi	sp,sp,8
 200ec14:	f800283a 	ret
 200ec18:	80c0030b 	ldhu	r3,12(r16)
 200ec1c:	18fbffcc 	andi	r3,r3,61439
 200ec20:	80c0030d 	sth	r3,12(r16)
 200ec24:	dfc00117 	ldw	ra,4(sp)
 200ec28:	dc000017 	ldw	r16,0(sp)
 200ec2c:	dec00204 	addi	sp,sp,8
 200ec30:	f800283a 	ret

0200ec34 <__sclose>:
 200ec34:	2940038f 	ldh	r5,14(r5)
 200ec38:	20117cc1 	jmpi	20117cc <_close_r>

0200ec3c <strcmp>:
 200ec3c:	2144b03a 	or	r2,r4,r5
 200ec40:	108000cc 	andi	r2,r2,3
 200ec44:	1000171e 	bne	r2,zero,200eca4 <strcmp+0x68>
 200ec48:	20800017 	ldw	r2,0(r4)
 200ec4c:	28c00017 	ldw	r3,0(r5)
 200ec50:	10c0141e 	bne	r2,r3,200eca4 <strcmp+0x68>
 200ec54:	027fbff4 	movhi	r9,65279
 200ec58:	4a7fbfc4 	addi	r9,r9,-257
 200ec5c:	0086303a 	nor	r3,zero,r2
 200ec60:	02202074 	movhi	r8,32897
 200ec64:	1245883a 	add	r2,r2,r9
 200ec68:	42202004 	addi	r8,r8,-32640
 200ec6c:	10c4703a 	and	r2,r2,r3
 200ec70:	1204703a 	and	r2,r2,r8
 200ec74:	10000226 	beq	r2,zero,200ec80 <strcmp+0x44>
 200ec78:	00002306 	br	200ed08 <strcmp+0xcc>
 200ec7c:	1000221e 	bne	r2,zero,200ed08 <strcmp+0xcc>
 200ec80:	21000104 	addi	r4,r4,4
 200ec84:	20c00017 	ldw	r3,0(r4)
 200ec88:	29400104 	addi	r5,r5,4
 200ec8c:	29800017 	ldw	r6,0(r5)
 200ec90:	1a4f883a 	add	r7,r3,r9
 200ec94:	00c4303a 	nor	r2,zero,r3
 200ec98:	3884703a 	and	r2,r7,r2
 200ec9c:	1204703a 	and	r2,r2,r8
 200eca0:	19bff626 	beq	r3,r6,200ec7c <__alt_mem_epcs_flash_controller_0+0xfd00dc7c>
 200eca4:	20800003 	ldbu	r2,0(r4)
 200eca8:	10c03fcc 	andi	r3,r2,255
 200ecac:	18c0201c 	xori	r3,r3,128
 200ecb0:	18ffe004 	addi	r3,r3,-128
 200ecb4:	18000c26 	beq	r3,zero,200ece8 <strcmp+0xac>
 200ecb8:	29800007 	ldb	r6,0(r5)
 200ecbc:	19800326 	beq	r3,r6,200eccc <strcmp+0x90>
 200ecc0:	00001306 	br	200ed10 <strcmp+0xd4>
 200ecc4:	29800007 	ldb	r6,0(r5)
 200ecc8:	11800b1e 	bne	r2,r6,200ecf8 <strcmp+0xbc>
 200eccc:	21000044 	addi	r4,r4,1
 200ecd0:	20c00003 	ldbu	r3,0(r4)
 200ecd4:	29400044 	addi	r5,r5,1
 200ecd8:	18803fcc 	andi	r2,r3,255
 200ecdc:	1080201c 	xori	r2,r2,128
 200ece0:	10bfe004 	addi	r2,r2,-128
 200ece4:	103ff71e 	bne	r2,zero,200ecc4 <__alt_mem_epcs_flash_controller_0+0xfd00dcc4>
 200ece8:	0007883a 	mov	r3,zero
 200ecec:	28800003 	ldbu	r2,0(r5)
 200ecf0:	1885c83a 	sub	r2,r3,r2
 200ecf4:	f800283a 	ret
 200ecf8:	28800003 	ldbu	r2,0(r5)
 200ecfc:	18c03fcc 	andi	r3,r3,255
 200ed00:	1885c83a 	sub	r2,r3,r2
 200ed04:	f800283a 	ret
 200ed08:	0005883a 	mov	r2,zero
 200ed0c:	f800283a 	ret
 200ed10:	10c03fcc 	andi	r3,r2,255
 200ed14:	003ff506 	br	200ecec <__alt_mem_epcs_flash_controller_0+0xfd00dcec>

0200ed18 <__ssprint_r>:
 200ed18:	30800217 	ldw	r2,8(r6)
 200ed1c:	defff604 	addi	sp,sp,-40
 200ed20:	dc800215 	stw	r18,8(sp)
 200ed24:	dfc00915 	stw	ra,36(sp)
 200ed28:	df000815 	stw	fp,32(sp)
 200ed2c:	ddc00715 	stw	r23,28(sp)
 200ed30:	dd800615 	stw	r22,24(sp)
 200ed34:	dd400515 	stw	r21,20(sp)
 200ed38:	dd000415 	stw	r20,16(sp)
 200ed3c:	dcc00315 	stw	r19,12(sp)
 200ed40:	dc400115 	stw	r17,4(sp)
 200ed44:	dc000015 	stw	r16,0(sp)
 200ed48:	3025883a 	mov	r18,r6
 200ed4c:	10005826 	beq	r2,zero,200eeb0 <__ssprint_r+0x198>
 200ed50:	2027883a 	mov	r19,r4
 200ed54:	35c00017 	ldw	r23,0(r6)
 200ed58:	29000017 	ldw	r4,0(r5)
 200ed5c:	28800217 	ldw	r2,8(r5)
 200ed60:	2823883a 	mov	r17,r5
 200ed64:	0039883a 	mov	fp,zero
 200ed68:	0021883a 	mov	r16,zero
 200ed6c:	80003926 	beq	r16,zero,200ee54 <__ssprint_r+0x13c>
 200ed70:	102b883a 	mov	r21,r2
 200ed74:	102d883a 	mov	r22,r2
 200ed78:	80803a36 	bltu	r16,r2,200ee64 <__ssprint_r+0x14c>
 200ed7c:	88c0030b 	ldhu	r3,12(r17)
 200ed80:	1881200c 	andi	r2,r3,1152
 200ed84:	10002626 	beq	r2,zero,200ee20 <__ssprint_r+0x108>
 200ed88:	88800517 	ldw	r2,20(r17)
 200ed8c:	89400417 	ldw	r5,16(r17)
 200ed90:	81800044 	addi	r6,r16,1
 200ed94:	108f883a 	add	r7,r2,r2
 200ed98:	3885883a 	add	r2,r7,r2
 200ed9c:	100ed7fa 	srli	r7,r2,31
 200eda0:	216dc83a 	sub	r22,r4,r5
 200eda4:	3589883a 	add	r4,r6,r22
 200eda8:	3885883a 	add	r2,r7,r2
 200edac:	102bd07a 	srai	r21,r2,1
 200edb0:	a80d883a 	mov	r6,r21
 200edb4:	a900022e 	bgeu	r21,r4,200edc0 <__ssprint_r+0xa8>
 200edb8:	202b883a 	mov	r21,r4
 200edbc:	200d883a 	mov	r6,r4
 200edc0:	18c1000c 	andi	r3,r3,1024
 200edc4:	18002a26 	beq	r3,zero,200ee70 <__ssprint_r+0x158>
 200edc8:	300b883a 	mov	r5,r6
 200edcc:	9809883a 	mov	r4,r19
 200edd0:	20052780 	call	2005278 <_malloc_r>
 200edd4:	1029883a 	mov	r20,r2
 200edd8:	10002c26 	beq	r2,zero,200ee8c <__ssprint_r+0x174>
 200eddc:	89400417 	ldw	r5,16(r17)
 200ede0:	b00d883a 	mov	r6,r22
 200ede4:	1009883a 	mov	r4,r2
 200ede8:	200d2fc0 	call	200d2fc <memcpy>
 200edec:	8880030b 	ldhu	r2,12(r17)
 200edf0:	00fedfc4 	movi	r3,-1153
 200edf4:	10c4703a 	and	r2,r2,r3
 200edf8:	10802014 	ori	r2,r2,128
 200edfc:	8880030d 	sth	r2,12(r17)
 200ee00:	a589883a 	add	r4,r20,r22
 200ee04:	adadc83a 	sub	r22,r21,r22
 200ee08:	8d400515 	stw	r21,20(r17)
 200ee0c:	8d800215 	stw	r22,8(r17)
 200ee10:	8d000415 	stw	r20,16(r17)
 200ee14:	89000015 	stw	r4,0(r17)
 200ee18:	802b883a 	mov	r21,r16
 200ee1c:	802d883a 	mov	r22,r16
 200ee20:	b00d883a 	mov	r6,r22
 200ee24:	e00b883a 	mov	r5,fp
 200ee28:	200d4440 	call	200d444 <memmove>
 200ee2c:	88800217 	ldw	r2,8(r17)
 200ee30:	89000017 	ldw	r4,0(r17)
 200ee34:	90c00217 	ldw	r3,8(r18)
 200ee38:	1545c83a 	sub	r2,r2,r21
 200ee3c:	2589883a 	add	r4,r4,r22
 200ee40:	88800215 	stw	r2,8(r17)
 200ee44:	89000015 	stw	r4,0(r17)
 200ee48:	1c21c83a 	sub	r16,r3,r16
 200ee4c:	94000215 	stw	r16,8(r18)
 200ee50:	80001726 	beq	r16,zero,200eeb0 <__ssprint_r+0x198>
 200ee54:	bf000017 	ldw	fp,0(r23)
 200ee58:	bc000117 	ldw	r16,4(r23)
 200ee5c:	bdc00204 	addi	r23,r23,8
 200ee60:	003fc206 	br	200ed6c <__alt_mem_epcs_flash_controller_0+0xfd00dd6c>
 200ee64:	802b883a 	mov	r21,r16
 200ee68:	802d883a 	mov	r22,r16
 200ee6c:	003fec06 	br	200ee20 <__alt_mem_epcs_flash_controller_0+0xfd00de20>
 200ee70:	9809883a 	mov	r4,r19
 200ee74:	200e59c0 	call	200e59c <_realloc_r>
 200ee78:	1029883a 	mov	r20,r2
 200ee7c:	103fe01e 	bne	r2,zero,200ee00 <__alt_mem_epcs_flash_controller_0+0xfd00de00>
 200ee80:	89400417 	ldw	r5,16(r17)
 200ee84:	9809883a 	mov	r4,r19
 200ee88:	200c62c0 	call	200c62c <_free_r>
 200ee8c:	88c0030b 	ldhu	r3,12(r17)
 200ee90:	00800304 	movi	r2,12
 200ee94:	98800015 	stw	r2,0(r19)
 200ee98:	18c01014 	ori	r3,r3,64
 200ee9c:	88c0030d 	sth	r3,12(r17)
 200eea0:	00bfffc4 	movi	r2,-1
 200eea4:	90000215 	stw	zero,8(r18)
 200eea8:	90000115 	stw	zero,4(r18)
 200eeac:	00000206 	br	200eeb8 <__ssprint_r+0x1a0>
 200eeb0:	90000115 	stw	zero,4(r18)
 200eeb4:	0005883a 	mov	r2,zero
 200eeb8:	dfc00917 	ldw	ra,36(sp)
 200eebc:	df000817 	ldw	fp,32(sp)
 200eec0:	ddc00717 	ldw	r23,28(sp)
 200eec4:	dd800617 	ldw	r22,24(sp)
 200eec8:	dd400517 	ldw	r21,20(sp)
 200eecc:	dd000417 	ldw	r20,16(sp)
 200eed0:	dcc00317 	ldw	r19,12(sp)
 200eed4:	dc800217 	ldw	r18,8(sp)
 200eed8:	dc400117 	ldw	r17,4(sp)
 200eedc:	dc000017 	ldw	r16,0(sp)
 200eee0:	dec00a04 	addi	sp,sp,40
 200eee4:	f800283a 	ret

0200eee8 <___svfiprintf_internal_r>:
 200eee8:	2880030b 	ldhu	r2,12(r5)
 200eeec:	deffc804 	addi	sp,sp,-224
 200eef0:	dcc03115 	stw	r19,196(sp)
 200eef4:	dfc03715 	stw	ra,220(sp)
 200eef8:	df003615 	stw	fp,216(sp)
 200eefc:	ddc03515 	stw	r23,212(sp)
 200ef00:	dd803415 	stw	r22,208(sp)
 200ef04:	dd403315 	stw	r21,204(sp)
 200ef08:	dd003215 	stw	r20,200(sp)
 200ef0c:	dc803015 	stw	r18,192(sp)
 200ef10:	dc402f15 	stw	r17,188(sp)
 200ef14:	dc002e15 	stw	r16,184(sp)
 200ef18:	d9402715 	stw	r5,156(sp)
 200ef1c:	d9002a15 	stw	r4,168(sp)
 200ef20:	1080200c 	andi	r2,r2,128
 200ef24:	d9c02315 	stw	r7,140(sp)
 200ef28:	3027883a 	mov	r19,r6
 200ef2c:	10000226 	beq	r2,zero,200ef38 <___svfiprintf_internal_r+0x50>
 200ef30:	28800417 	ldw	r2,16(r5)
 200ef34:	10041d26 	beq	r2,zero,200ffac <___svfiprintf_internal_r+0x10c4>
 200ef38:	dac01a04 	addi	r11,sp,104
 200ef3c:	dac01e15 	stw	r11,120(sp)
 200ef40:	d8801e17 	ldw	r2,120(sp)
 200ef44:	dac019c4 	addi	r11,sp,103
 200ef48:	dd402a17 	ldw	r21,168(sp)
 200ef4c:	ddc02717 	ldw	r23,156(sp)
 200ef50:	05808134 	movhi	r22,516
 200ef54:	05008134 	movhi	r20,516
 200ef58:	dac01f15 	stw	r11,124(sp)
 200ef5c:	12d7c83a 	sub	r11,r2,r11
 200ef60:	b5b14b04 	addi	r22,r22,-15060
 200ef64:	a5314704 	addi	r20,r20,-15076
 200ef68:	dec01a15 	stw	sp,104(sp)
 200ef6c:	d8001c15 	stw	zero,112(sp)
 200ef70:	d8001b15 	stw	zero,108(sp)
 200ef74:	d811883a 	mov	r8,sp
 200ef78:	d8002915 	stw	zero,164(sp)
 200ef7c:	d8002515 	stw	zero,148(sp)
 200ef80:	dac02b15 	stw	r11,172(sp)
 200ef84:	98800007 	ldb	r2,0(r19)
 200ef88:	1002dd26 	beq	r2,zero,200fb00 <___svfiprintf_internal_r+0xc18>
 200ef8c:	00c00944 	movi	r3,37
 200ef90:	9823883a 	mov	r17,r19
 200ef94:	10c0021e 	bne	r2,r3,200efa0 <___svfiprintf_internal_r+0xb8>
 200ef98:	00001406 	br	200efec <___svfiprintf_internal_r+0x104>
 200ef9c:	10c00326 	beq	r2,r3,200efac <___svfiprintf_internal_r+0xc4>
 200efa0:	8c400044 	addi	r17,r17,1
 200efa4:	88800007 	ldb	r2,0(r17)
 200efa8:	103ffc1e 	bne	r2,zero,200ef9c <__alt_mem_epcs_flash_controller_0+0xfd00df9c>
 200efac:	8ce1c83a 	sub	r16,r17,r19
 200efb0:	80000e26 	beq	r16,zero,200efec <___svfiprintf_internal_r+0x104>
 200efb4:	d8c01c17 	ldw	r3,112(sp)
 200efb8:	d8801b17 	ldw	r2,108(sp)
 200efbc:	44c00015 	stw	r19,0(r8)
 200efc0:	1c07883a 	add	r3,r3,r16
 200efc4:	10800044 	addi	r2,r2,1
 200efc8:	d8c01c15 	stw	r3,112(sp)
 200efcc:	44000115 	stw	r16,4(r8)
 200efd0:	d8801b15 	stw	r2,108(sp)
 200efd4:	00c001c4 	movi	r3,7
 200efd8:	18831e16 	blt	r3,r2,200fc54 <___svfiprintf_internal_r+0xd6c>
 200efdc:	42000204 	addi	r8,r8,8
 200efe0:	dac02517 	ldw	r11,148(sp)
 200efe4:	5c17883a 	add	r11,r11,r16
 200efe8:	dac02515 	stw	r11,148(sp)
 200efec:	88800007 	ldb	r2,0(r17)
 200eff0:	1002c526 	beq	r2,zero,200fb08 <___svfiprintf_internal_r+0xc20>
 200eff4:	88c00047 	ldb	r3,1(r17)
 200eff8:	8cc00044 	addi	r19,r17,1
 200effc:	d8001d85 	stb	zero,118(sp)
 200f000:	0009883a 	mov	r4,zero
 200f004:	000f883a 	mov	r7,zero
 200f008:	043fffc4 	movi	r16,-1
 200f00c:	d8002415 	stw	zero,144(sp)
 200f010:	0025883a 	mov	r18,zero
 200f014:	01401604 	movi	r5,88
 200f018:	01800244 	movi	r6,9
 200f01c:	02800a84 	movi	r10,42
 200f020:	02401b04 	movi	r9,108
 200f024:	9cc00044 	addi	r19,r19,1
 200f028:	18bff804 	addi	r2,r3,-32
 200f02c:	2881dd36 	bltu	r5,r2,200f7a4 <___svfiprintf_internal_r+0x8bc>
 200f030:	100490ba 	slli	r2,r2,2
 200f034:	02c08074 	movhi	r11,513
 200f038:	5afc1204 	addi	r11,r11,-4024
 200f03c:	12c5883a 	add	r2,r2,r11
 200f040:	10800017 	ldw	r2,0(r2)
 200f044:	1000683a 	jmp	r2
 200f048:	0200f244 	movi	r8,969
 200f04c:	0200f7a4 	muli	r8,zero,990
 200f050:	0200f7a4 	muli	r8,zero,990
 200f054:	0200f238 	rdprs	r8,zero,968
 200f058:	0200f7a4 	muli	r8,zero,990
 200f05c:	0200f7a4 	muli	r8,zero,990
 200f060:	0200f7a4 	muli	r8,zero,990
 200f064:	0200f7a4 	muli	r8,zero,990
 200f068:	0200f7a4 	muli	r8,zero,990
 200f06c:	0200f7a4 	muli	r8,zero,990
 200f070:	0200f1ac 	andhi	r8,zero,966
 200f074:	0200f388 	cmpgei	r8,zero,974
 200f078:	0200f7a4 	muli	r8,zero,990
 200f07c:	0200f1d8 	cmpnei	r8,zero,967
 200f080:	0200f7d8 	cmpnei	r8,zero,991
 200f084:	0200f7a4 	muli	r8,zero,990
 200f088:	0200f7cc 	andi	r8,zero,991
 200f08c:	0200f76c 	andhi	r8,zero,989
 200f090:	0200f76c 	andhi	r8,zero,989
 200f094:	0200f76c 	andhi	r8,zero,989
 200f098:	0200f76c 	andhi	r8,zero,989
 200f09c:	0200f76c 	andhi	r8,zero,989
 200f0a0:	0200f76c 	andhi	r8,zero,989
 200f0a4:	0200f76c 	andhi	r8,zero,989
 200f0a8:	0200f76c 	andhi	r8,zero,989
 200f0ac:	0200f76c 	andhi	r8,zero,989
 200f0b0:	0200f7a4 	muli	r8,zero,990
 200f0b4:	0200f7a4 	muli	r8,zero,990
 200f0b8:	0200f7a4 	muli	r8,zero,990
 200f0bc:	0200f7a4 	muli	r8,zero,990
 200f0c0:	0200f7a4 	muli	r8,zero,990
 200f0c4:	0200f7a4 	muli	r8,zero,990
 200f0c8:	0200f7a4 	muli	r8,zero,990
 200f0cc:	0200f7a4 	muli	r8,zero,990
 200f0d0:	0200f7a4 	muli	r8,zero,990
 200f0d4:	0200f7a4 	muli	r8,zero,990
 200f0d8:	0200f708 	cmpgei	r8,zero,988
 200f0dc:	0200f7a4 	muli	r8,zero,990
 200f0e0:	0200f7a4 	muli	r8,zero,990
 200f0e4:	0200f7a4 	muli	r8,zero,990
 200f0e8:	0200f7a4 	muli	r8,zero,990
 200f0ec:	0200f7a4 	muli	r8,zero,990
 200f0f0:	0200f7a4 	muli	r8,zero,990
 200f0f4:	0200f7a4 	muli	r8,zero,990
 200f0f8:	0200f7a4 	muli	r8,zero,990
 200f0fc:	0200f7a4 	muli	r8,zero,990
 200f100:	0200f7a4 	muli	r8,zero,990
 200f104:	0200f880 	call	200f88 <__alt_mem_sdram-0x1dff078>
 200f108:	0200f7a4 	muli	r8,zero,990
 200f10c:	0200f7a4 	muli	r8,zero,990
 200f110:	0200f7a4 	muli	r8,zero,990
 200f114:	0200f7a4 	muli	r8,zero,990
 200f118:	0200f7a4 	muli	r8,zero,990
 200f11c:	0200f818 	cmpnei	r8,zero,992
 200f120:	0200f7a4 	muli	r8,zero,990
 200f124:	0200f7a4 	muli	r8,zero,990
 200f128:	0200f54c 	andi	r8,zero,981
 200f12c:	0200f7a4 	muli	r8,zero,990
 200f130:	0200f7a4 	muli	r8,zero,990
 200f134:	0200f7a4 	muli	r8,zero,990
 200f138:	0200f7a4 	muli	r8,zero,990
 200f13c:	0200f7a4 	muli	r8,zero,990
 200f140:	0200f7a4 	muli	r8,zero,990
 200f144:	0200f7a4 	muli	r8,zero,990
 200f148:	0200f7a4 	muli	r8,zero,990
 200f14c:	0200f7a4 	muli	r8,zero,990
 200f150:	0200f7a4 	muli	r8,zero,990
 200f154:	0200f43c 	xorhi	r8,zero,976
 200f158:	0200f5e8 	cmpgeui	r8,zero,983
 200f15c:	0200f7a4 	muli	r8,zero,990
 200f160:	0200f7a4 	muli	r8,zero,990
 200f164:	0200f7a4 	muli	r8,zero,990
 200f168:	0200f5dc 	xori	r8,zero,983
 200f16c:	0200f5e8 	cmpgeui	r8,zero,983
 200f170:	0200f7a4 	muli	r8,zero,990
 200f174:	0200f7a4 	muli	r8,zero,990
 200f178:	0200f5cc 	andi	r8,zero,983
 200f17c:	0200f7a4 	muli	r8,zero,990
 200f180:	0200f590 	cmplti	r8,zero,982
 200f184:	0200f398 	cmpnei	r8,zero,974
 200f188:	0200f1e4 	muli	r8,zero,967
 200f18c:	0200f6fc 	xorhi	r8,zero,987
 200f190:	0200f7a4 	muli	r8,zero,990
 200f194:	0200f6b0 	cmpltui	r8,zero,986
 200f198:	0200f7a4 	muli	r8,zero,990
 200f19c:	0200f308 	cmpgei	r8,zero,972
 200f1a0:	0200f7a4 	muli	r8,zero,990
 200f1a4:	0200f7a4 	muli	r8,zero,990
 200f1a8:	0200f264 	muli	r8,zero,969
 200f1ac:	dac02317 	ldw	r11,140(sp)
 200f1b0:	5ac00017 	ldw	r11,0(r11)
 200f1b4:	dac02415 	stw	r11,144(sp)
 200f1b8:	dac02317 	ldw	r11,140(sp)
 200f1bc:	58800104 	addi	r2,r11,4
 200f1c0:	dac02417 	ldw	r11,144(sp)
 200f1c4:	5802e90e 	bge	r11,zero,200fd6c <___svfiprintf_internal_r+0xe84>
 200f1c8:	dac02417 	ldw	r11,144(sp)
 200f1cc:	d8802315 	stw	r2,140(sp)
 200f1d0:	02d7c83a 	sub	r11,zero,r11
 200f1d4:	dac02415 	stw	r11,144(sp)
 200f1d8:	94800114 	ori	r18,r18,4
 200f1dc:	98c00007 	ldb	r3,0(r19)
 200f1e0:	003f9006 	br	200f024 <__alt_mem_epcs_flash_controller_0+0xfd00e024>
 200f1e4:	00800c04 	movi	r2,48
 200f1e8:	dac02317 	ldw	r11,140(sp)
 200f1ec:	d8801d05 	stb	r2,116(sp)
 200f1f0:	00801e04 	movi	r2,120
 200f1f4:	d8801d45 	stb	r2,117(sp)
 200f1f8:	d8001d85 	stb	zero,118(sp)
 200f1fc:	58c00104 	addi	r3,r11,4
 200f200:	5f000017 	ldw	fp,0(r11)
 200f204:	0013883a 	mov	r9,zero
 200f208:	90800094 	ori	r2,r18,2
 200f20c:	80032b16 	blt	r16,zero,200febc <___svfiprintf_internal_r+0xfd4>
 200f210:	00bfdfc4 	movi	r2,-129
 200f214:	90a4703a 	and	r18,r18,r2
 200f218:	d8c02315 	stw	r3,140(sp)
 200f21c:	94800094 	ori	r18,r18,2
 200f220:	e002dc26 	beq	fp,zero,200fd94 <___svfiprintf_internal_r+0xeac>
 200f224:	01008134 	movhi	r4,516
 200f228:	2130df04 	addi	r4,r4,-15492
 200f22c:	0015883a 	mov	r10,zero
 200f230:	d9002915 	stw	r4,164(sp)
 200f234:	00002306 	br	200f2c4 <___svfiprintf_internal_r+0x3dc>
 200f238:	94800054 	ori	r18,r18,1
 200f23c:	98c00007 	ldb	r3,0(r19)
 200f240:	003f7806 	br	200f024 <__alt_mem_epcs_flash_controller_0+0xfd00e024>
 200f244:	38803fcc 	andi	r2,r7,255
 200f248:	1080201c 	xori	r2,r2,128
 200f24c:	10bfe004 	addi	r2,r2,-128
 200f250:	1002f31e 	bne	r2,zero,200fe20 <___svfiprintf_internal_r+0xf38>
 200f254:	01000044 	movi	r4,1
 200f258:	01c00804 	movi	r7,32
 200f25c:	98c00007 	ldb	r3,0(r19)
 200f260:	003f7006 	br	200f024 <__alt_mem_epcs_flash_controller_0+0xfd00e024>
 200f264:	21003fcc 	andi	r4,r4,255
 200f268:	2003aa1e 	bne	r4,zero,2010114 <___svfiprintf_internal_r+0x122c>
 200f26c:	00808134 	movhi	r2,516
 200f270:	10b0df04 	addi	r2,r2,-15492
 200f274:	d8802915 	stw	r2,164(sp)
 200f278:	9080080c 	andi	r2,r18,32
 200f27c:	1000ba26 	beq	r2,zero,200f568 <___svfiprintf_internal_r+0x680>
 200f280:	dac02317 	ldw	r11,140(sp)
 200f284:	5f000017 	ldw	fp,0(r11)
 200f288:	5a400117 	ldw	r9,4(r11)
 200f28c:	5ac00204 	addi	r11,r11,8
 200f290:	dac02315 	stw	r11,140(sp)
 200f294:	9080004c 	andi	r2,r18,1
 200f298:	10029026 	beq	r2,zero,200fcdc <___svfiprintf_internal_r+0xdf4>
 200f29c:	e244b03a 	or	r2,fp,r9
 200f2a0:	1002d41e 	bne	r2,zero,200fdf4 <___svfiprintf_internal_r+0xf0c>
 200f2a4:	d8001d85 	stb	zero,118(sp)
 200f2a8:	80030b16 	blt	r16,zero,200fed8 <___svfiprintf_internal_r+0xff0>
 200f2ac:	00bfdfc4 	movi	r2,-129
 200f2b0:	90a4703a 	and	r18,r18,r2
 200f2b4:	0015883a 	mov	r10,zero
 200f2b8:	80002426 	beq	r16,zero,200f34c <___svfiprintf_internal_r+0x464>
 200f2bc:	0039883a 	mov	fp,zero
 200f2c0:	0013883a 	mov	r9,zero
 200f2c4:	d9002917 	ldw	r4,164(sp)
 200f2c8:	dc401a04 	addi	r17,sp,104
 200f2cc:	e08003cc 	andi	r2,fp,15
 200f2d0:	4806973a 	slli	r3,r9,28
 200f2d4:	2085883a 	add	r2,r4,r2
 200f2d8:	e038d13a 	srli	fp,fp,4
 200f2dc:	10800003 	ldbu	r2,0(r2)
 200f2e0:	4812d13a 	srli	r9,r9,4
 200f2e4:	8c7fffc4 	addi	r17,r17,-1
 200f2e8:	1f38b03a 	or	fp,r3,fp
 200f2ec:	88800005 	stb	r2,0(r17)
 200f2f0:	e244b03a 	or	r2,fp,r9
 200f2f4:	103ff51e 	bne	r2,zero,200f2cc <__alt_mem_epcs_flash_controller_0+0xfd00e2cc>
 200f2f8:	dac01e17 	ldw	r11,120(sp)
 200f2fc:	5c57c83a 	sub	r11,r11,r17
 200f300:	dac02115 	stw	r11,132(sp)
 200f304:	00001406 	br	200f358 <___svfiprintf_internal_r+0x470>
 200f308:	21003fcc 	andi	r4,r4,255
 200f30c:	2003741e 	bne	r4,zero,20100e0 <___svfiprintf_internal_r+0x11f8>
 200f310:	9080080c 	andi	r2,r18,32
 200f314:	10014526 	beq	r2,zero,200f82c <___svfiprintf_internal_r+0x944>
 200f318:	dac02317 	ldw	r11,140(sp)
 200f31c:	d8001d85 	stb	zero,118(sp)
 200f320:	58c00204 	addi	r3,r11,8
 200f324:	5f000017 	ldw	fp,0(r11)
 200f328:	5a400117 	ldw	r9,4(r11)
 200f32c:	8002d916 	blt	r16,zero,200fe94 <___svfiprintf_internal_r+0xfac>
 200f330:	013fdfc4 	movi	r4,-129
 200f334:	e244b03a 	or	r2,fp,r9
 200f338:	d8c02315 	stw	r3,140(sp)
 200f33c:	9124703a 	and	r18,r18,r4
 200f340:	0015883a 	mov	r10,zero
 200f344:	1000b91e 	bne	r2,zero,200f62c <___svfiprintf_internal_r+0x744>
 200f348:	8002e61e 	bne	r16,zero,200fee4 <___svfiprintf_internal_r+0xffc>
 200f34c:	0021883a 	mov	r16,zero
 200f350:	d8002115 	stw	zero,132(sp)
 200f354:	dc401a04 	addi	r17,sp,104
 200f358:	d8c02117 	ldw	r3,132(sp)
 200f35c:	dc002015 	stw	r16,128(sp)
 200f360:	80c0010e 	bge	r16,r3,200f368 <___svfiprintf_internal_r+0x480>
 200f364:	d8c02015 	stw	r3,128(sp)
 200f368:	52803fcc 	andi	r10,r10,255
 200f36c:	5280201c 	xori	r10,r10,128
 200f370:	52bfe004 	addi	r10,r10,-128
 200f374:	50003c26 	beq	r10,zero,200f468 <___svfiprintf_internal_r+0x580>
 200f378:	dac02017 	ldw	r11,128(sp)
 200f37c:	5ac00044 	addi	r11,r11,1
 200f380:	dac02015 	stw	r11,128(sp)
 200f384:	00003806 	br	200f468 <___svfiprintf_internal_r+0x580>
 200f388:	01000044 	movi	r4,1
 200f38c:	01c00ac4 	movi	r7,43
 200f390:	98c00007 	ldb	r3,0(r19)
 200f394:	003f2306 	br	200f024 <__alt_mem_epcs_flash_controller_0+0xfd00e024>
 200f398:	21003fcc 	andi	r4,r4,255
 200f39c:	2003481e 	bne	r4,zero,20100c0 <___svfiprintf_internal_r+0x11d8>
 200f3a0:	9080080c 	andi	r2,r18,32
 200f3a4:	10013b26 	beq	r2,zero,200f894 <___svfiprintf_internal_r+0x9ac>
 200f3a8:	dac02317 	ldw	r11,140(sp)
 200f3ac:	d8001d85 	stb	zero,118(sp)
 200f3b0:	58800204 	addi	r2,r11,8
 200f3b4:	5f000017 	ldw	fp,0(r11)
 200f3b8:	5a400117 	ldw	r9,4(r11)
 200f3bc:	8002a816 	blt	r16,zero,200fe60 <___svfiprintf_internal_r+0xf78>
 200f3c0:	013fdfc4 	movi	r4,-129
 200f3c4:	e246b03a 	or	r3,fp,r9
 200f3c8:	d8802315 	stw	r2,140(sp)
 200f3cc:	9124703a 	and	r18,r18,r4
 200f3d0:	18013c26 	beq	r3,zero,200f8c4 <___svfiprintf_internal_r+0x9dc>
 200f3d4:	0015883a 	mov	r10,zero
 200f3d8:	dc401a04 	addi	r17,sp,104
 200f3dc:	e006d0fa 	srli	r3,fp,3
 200f3e0:	4808977a 	slli	r4,r9,29
 200f3e4:	4812d0fa 	srli	r9,r9,3
 200f3e8:	e70001cc 	andi	fp,fp,7
 200f3ec:	e0800c04 	addi	r2,fp,48
 200f3f0:	8c7fffc4 	addi	r17,r17,-1
 200f3f4:	20f8b03a 	or	fp,r4,r3
 200f3f8:	88800005 	stb	r2,0(r17)
 200f3fc:	e246b03a 	or	r3,fp,r9
 200f400:	183ff61e 	bne	r3,zero,200f3dc <__alt_mem_epcs_flash_controller_0+0xfd00e3dc>
 200f404:	90c0004c 	andi	r3,r18,1
 200f408:	1800a526 	beq	r3,zero,200f6a0 <___svfiprintf_internal_r+0x7b8>
 200f40c:	10803fcc 	andi	r2,r2,255
 200f410:	1080201c 	xori	r2,r2,128
 200f414:	10bfe004 	addi	r2,r2,-128
 200f418:	00c00c04 	movi	r3,48
 200f41c:	10ffb626 	beq	r2,r3,200f2f8 <__alt_mem_epcs_flash_controller_0+0xfd00e2f8>
 200f420:	88ffffc5 	stb	r3,-1(r17)
 200f424:	d8c01e17 	ldw	r3,120(sp)
 200f428:	88bfffc4 	addi	r2,r17,-1
 200f42c:	1023883a 	mov	r17,r2
 200f430:	1887c83a 	sub	r3,r3,r2
 200f434:	d8c02115 	stw	r3,132(sp)
 200f438:	003fc706 	br	200f358 <__alt_mem_epcs_flash_controller_0+0xfd00e358>
 200f43c:	dac02317 	ldw	r11,140(sp)
 200f440:	00c00044 	movi	r3,1
 200f444:	d8c02015 	stw	r3,128(sp)
 200f448:	58800017 	ldw	r2,0(r11)
 200f44c:	5ac00104 	addi	r11,r11,4
 200f450:	d8001d85 	stb	zero,118(sp)
 200f454:	d8801005 	stb	r2,64(sp)
 200f458:	dac02315 	stw	r11,140(sp)
 200f45c:	d8c02115 	stw	r3,132(sp)
 200f460:	dc401004 	addi	r17,sp,64
 200f464:	0021883a 	mov	r16,zero
 200f468:	90c0008c 	andi	r3,r18,2
 200f46c:	d8c02215 	stw	r3,136(sp)
 200f470:	18000326 	beq	r3,zero,200f480 <___svfiprintf_internal_r+0x598>
 200f474:	dac02017 	ldw	r11,128(sp)
 200f478:	5ac00084 	addi	r11,r11,2
 200f47c:	dac02015 	stw	r11,128(sp)
 200f480:	90c0210c 	andi	r3,r18,132
 200f484:	d8c02615 	stw	r3,152(sp)
 200f488:	1801131e 	bne	r3,zero,200f8d8 <___svfiprintf_internal_r+0x9f0>
 200f48c:	dac02417 	ldw	r11,144(sp)
 200f490:	d8c02017 	ldw	r3,128(sp)
 200f494:	58f9c83a 	sub	fp,r11,r3
 200f498:	07010f0e 	bge	zero,fp,200f8d8 <___svfiprintf_internal_r+0x9f0>
 200f49c:	02400404 	movi	r9,16
 200f4a0:	d8c01c17 	ldw	r3,112(sp)
 200f4a4:	d8801b17 	ldw	r2,108(sp)
 200f4a8:	4f02d60e 	bge	r9,fp,2010004 <___svfiprintf_internal_r+0x111c>
 200f4ac:	01408134 	movhi	r5,516
 200f4b0:	29714b04 	addi	r5,r5,-15060
 200f4b4:	d9402815 	stw	r5,160(sp)
 200f4b8:	028001c4 	movi	r10,7
 200f4bc:	00000306 	br	200f4cc <___svfiprintf_internal_r+0x5e4>
 200f4c0:	e73ffc04 	addi	fp,fp,-16
 200f4c4:	42000204 	addi	r8,r8,8
 200f4c8:	4f00150e 	bge	r9,fp,200f520 <___svfiprintf_internal_r+0x638>
 200f4cc:	18c00404 	addi	r3,r3,16
 200f4d0:	10800044 	addi	r2,r2,1
 200f4d4:	45800015 	stw	r22,0(r8)
 200f4d8:	42400115 	stw	r9,4(r8)
 200f4dc:	d8c01c15 	stw	r3,112(sp)
 200f4e0:	d8801b15 	stw	r2,108(sp)
 200f4e4:	50bff60e 	bge	r10,r2,200f4c0 <__alt_mem_epcs_flash_controller_0+0xfd00e4c0>
 200f4e8:	d9801a04 	addi	r6,sp,104
 200f4ec:	b80b883a 	mov	r5,r23
 200f4f0:	a809883a 	mov	r4,r21
 200f4f4:	da402c15 	stw	r9,176(sp)
 200f4f8:	da802d15 	stw	r10,180(sp)
 200f4fc:	200ed180 	call	200ed18 <__ssprint_r>
 200f500:	da402c17 	ldw	r9,176(sp)
 200f504:	da802d17 	ldw	r10,180(sp)
 200f508:	1001851e 	bne	r2,zero,200fb20 <___svfiprintf_internal_r+0xc38>
 200f50c:	e73ffc04 	addi	fp,fp,-16
 200f510:	d8c01c17 	ldw	r3,112(sp)
 200f514:	d8801b17 	ldw	r2,108(sp)
 200f518:	d811883a 	mov	r8,sp
 200f51c:	4f3feb16 	blt	r9,fp,200f4cc <__alt_mem_epcs_flash_controller_0+0xfd00e4cc>
 200f520:	dac02817 	ldw	r11,160(sp)
 200f524:	e0c7883a 	add	r3,fp,r3
 200f528:	10800044 	addi	r2,r2,1
 200f52c:	42c00015 	stw	r11,0(r8)
 200f530:	47000115 	stw	fp,4(r8)
 200f534:	d8c01c15 	stw	r3,112(sp)
 200f538:	d8801b15 	stw	r2,108(sp)
 200f53c:	010001c4 	movi	r4,7
 200f540:	2081ee16 	blt	r4,r2,200fcfc <___svfiprintf_internal_r+0xe14>
 200f544:	42000204 	addi	r8,r8,8
 200f548:	0000e506 	br	200f8e0 <___svfiprintf_internal_r+0x9f8>
 200f54c:	21003fcc 	andi	r4,r4,255
 200f550:	2002dd1e 	bne	r4,zero,20100c8 <___svfiprintf_internal_r+0x11e0>
 200f554:	00808134 	movhi	r2,516
 200f558:	10b0da04 	addi	r2,r2,-15512
 200f55c:	d8802915 	stw	r2,164(sp)
 200f560:	9080080c 	andi	r2,r18,32
 200f564:	103f461e 	bne	r2,zero,200f280 <__alt_mem_epcs_flash_controller_0+0xfd00e280>
 200f568:	9080040c 	andi	r2,r18,16
 200f56c:	10022e1e 	bne	r2,zero,200fe28 <___svfiprintf_internal_r+0xf40>
 200f570:	9080100c 	andi	r2,r18,64
 200f574:	dac02317 	ldw	r11,140(sp)
 200f578:	10027326 	beq	r2,zero,200ff48 <___svfiprintf_internal_r+0x1060>
 200f57c:	5f00000b 	ldhu	fp,0(r11)
 200f580:	5ac00104 	addi	r11,r11,4
 200f584:	0013883a 	mov	r9,zero
 200f588:	dac02315 	stw	r11,140(sp)
 200f58c:	003f4106 	br	200f294 <__alt_mem_epcs_flash_controller_0+0xfd00e294>
 200f590:	21003fcc 	andi	r4,r4,255
 200f594:	2002e11e 	bne	r4,zero,201011c <___svfiprintf_internal_r+0x1234>
 200f598:	9080080c 	andi	r2,r18,32
 200f59c:	1002011e 	bne	r2,zero,200fda4 <___svfiprintf_internal_r+0xebc>
 200f5a0:	9080040c 	andi	r2,r18,16
 200f5a4:	10023e1e 	bne	r2,zero,200fea0 <___svfiprintf_internal_r+0xfb8>
 200f5a8:	9480100c 	andi	r18,r18,64
 200f5ac:	90023c26 	beq	r18,zero,200fea0 <___svfiprintf_internal_r+0xfb8>
 200f5b0:	dac02317 	ldw	r11,140(sp)
 200f5b4:	58800017 	ldw	r2,0(r11)
 200f5b8:	5ac00104 	addi	r11,r11,4
 200f5bc:	dac02315 	stw	r11,140(sp)
 200f5c0:	dac02517 	ldw	r11,148(sp)
 200f5c4:	12c0000d 	sth	r11,0(r2)
 200f5c8:	003e6e06 	br	200ef84 <__alt_mem_epcs_flash_controller_0+0xfd00df84>
 200f5cc:	98c00007 	ldb	r3,0(r19)
 200f5d0:	1a422926 	beq	r3,r9,200fe78 <___svfiprintf_internal_r+0xf90>
 200f5d4:	94800414 	ori	r18,r18,16
 200f5d8:	003e9206 	br	200f024 <__alt_mem_epcs_flash_controller_0+0xfd00e024>
 200f5dc:	94801014 	ori	r18,r18,64
 200f5e0:	98c00007 	ldb	r3,0(r19)
 200f5e4:	003e8f06 	br	200f024 <__alt_mem_epcs_flash_controller_0+0xfd00e024>
 200f5e8:	21003fcc 	andi	r4,r4,255
 200f5ec:	2002c71e 	bne	r4,zero,201010c <___svfiprintf_internal_r+0x1224>
 200f5f0:	9080080c 	andi	r2,r18,32
 200f5f4:	10004926 	beq	r2,zero,200f71c <___svfiprintf_internal_r+0x834>
 200f5f8:	dac02317 	ldw	r11,140(sp)
 200f5fc:	58800117 	ldw	r2,4(r11)
 200f600:	5f000017 	ldw	fp,0(r11)
 200f604:	5ac00204 	addi	r11,r11,8
 200f608:	dac02315 	stw	r11,140(sp)
 200f60c:	1013883a 	mov	r9,r2
 200f610:	10004b16 	blt	r2,zero,200f740 <___svfiprintf_internal_r+0x858>
 200f614:	da801d83 	ldbu	r10,118(sp)
 200f618:	8001cb16 	blt	r16,zero,200fd48 <___svfiprintf_internal_r+0xe60>
 200f61c:	00ffdfc4 	movi	r3,-129
 200f620:	e244b03a 	or	r2,fp,r9
 200f624:	90e4703a 	and	r18,r18,r3
 200f628:	103f4726 	beq	r2,zero,200f348 <__alt_mem_epcs_flash_controller_0+0xfd00e348>
 200f62c:	48008c26 	beq	r9,zero,200f860 <___svfiprintf_internal_r+0x978>
 200f630:	dc802015 	stw	r18,128(sp)
 200f634:	dc002115 	stw	r16,132(sp)
 200f638:	dc401a04 	addi	r17,sp,104
 200f63c:	e021883a 	mov	r16,fp
 200f640:	da002215 	stw	r8,136(sp)
 200f644:	5039883a 	mov	fp,r10
 200f648:	4825883a 	mov	r18,r9
 200f64c:	8009883a 	mov	r4,r16
 200f650:	900b883a 	mov	r5,r18
 200f654:	01800284 	movi	r6,10
 200f658:	000f883a 	mov	r7,zero
 200f65c:	20125b40 	call	20125b4 <__umoddi3>
 200f660:	10800c04 	addi	r2,r2,48
 200f664:	8c7fffc4 	addi	r17,r17,-1
 200f668:	8009883a 	mov	r4,r16
 200f66c:	900b883a 	mov	r5,r18
 200f670:	88800005 	stb	r2,0(r17)
 200f674:	01800284 	movi	r6,10
 200f678:	000f883a 	mov	r7,zero
 200f67c:	201203c0 	call	201203c <__udivdi3>
 200f680:	1021883a 	mov	r16,r2
 200f684:	10c4b03a 	or	r2,r2,r3
 200f688:	1825883a 	mov	r18,r3
 200f68c:	103fef1e 	bne	r2,zero,200f64c <__alt_mem_epcs_flash_controller_0+0xfd00e64c>
 200f690:	dc802017 	ldw	r18,128(sp)
 200f694:	dc002117 	ldw	r16,132(sp)
 200f698:	da002217 	ldw	r8,136(sp)
 200f69c:	e015883a 	mov	r10,fp
 200f6a0:	d8c01e17 	ldw	r3,120(sp)
 200f6a4:	1c47c83a 	sub	r3,r3,r17
 200f6a8:	d8c02115 	stw	r3,132(sp)
 200f6ac:	003f2a06 	br	200f358 <__alt_mem_epcs_flash_controller_0+0xfd00e358>
 200f6b0:	dac02317 	ldw	r11,140(sp)
 200f6b4:	d8001d85 	stb	zero,118(sp)
 200f6b8:	5c400017 	ldw	r17,0(r11)
 200f6bc:	5f000104 	addi	fp,r11,4
 200f6c0:	88022f26 	beq	r17,zero,200ff80 <___svfiprintf_internal_r+0x1098>
 200f6c4:	80022516 	blt	r16,zero,200ff5c <___svfiprintf_internal_r+0x1074>
 200f6c8:	800d883a 	mov	r6,r16
 200f6cc:	000b883a 	mov	r5,zero
 200f6d0:	8809883a 	mov	r4,r17
 200f6d4:	da002c15 	stw	r8,176(sp)
 200f6d8:	200d2180 	call	200d218 <memchr>
 200f6dc:	da002c17 	ldw	r8,176(sp)
 200f6e0:	10026426 	beq	r2,zero,2010074 <___svfiprintf_internal_r+0x118c>
 200f6e4:	1445c83a 	sub	r2,r2,r17
 200f6e8:	d8802115 	stw	r2,132(sp)
 200f6ec:	da801d83 	ldbu	r10,118(sp)
 200f6f0:	df002315 	stw	fp,140(sp)
 200f6f4:	0021883a 	mov	r16,zero
 200f6f8:	003f1706 	br	200f358 <__alt_mem_epcs_flash_controller_0+0xfd00e358>
 200f6fc:	94800814 	ori	r18,r18,32
 200f700:	98c00007 	ldb	r3,0(r19)
 200f704:	003e4706 	br	200f024 <__alt_mem_epcs_flash_controller_0+0xfd00e024>
 200f708:	21003fcc 	andi	r4,r4,255
 200f70c:	2002701e 	bne	r4,zero,20100d0 <___svfiprintf_internal_r+0x11e8>
 200f710:	94800414 	ori	r18,r18,16
 200f714:	9080080c 	andi	r2,r18,32
 200f718:	103fb71e 	bne	r2,zero,200f5f8 <__alt_mem_epcs_flash_controller_0+0xfd00e5f8>
 200f71c:	9080040c 	andi	r2,r18,16
 200f720:	1001ab26 	beq	r2,zero,200fdd0 <___svfiprintf_internal_r+0xee8>
 200f724:	dac02317 	ldw	r11,140(sp)
 200f728:	5f000017 	ldw	fp,0(r11)
 200f72c:	5ac00104 	addi	r11,r11,4
 200f730:	dac02315 	stw	r11,140(sp)
 200f734:	e013d7fa 	srai	r9,fp,31
 200f738:	4805883a 	mov	r2,r9
 200f73c:	103fb50e 	bge	r2,zero,200f614 <__alt_mem_epcs_flash_controller_0+0xfd00e614>
 200f740:	0739c83a 	sub	fp,zero,fp
 200f744:	02800b44 	movi	r10,45
 200f748:	e004c03a 	cmpne	r2,fp,zero
 200f74c:	0253c83a 	sub	r9,zero,r9
 200f750:	da801d85 	stb	r10,118(sp)
 200f754:	4893c83a 	sub	r9,r9,r2
 200f758:	80023016 	blt	r16,zero,201001c <___svfiprintf_internal_r+0x1134>
 200f75c:	00bfdfc4 	movi	r2,-129
 200f760:	90a4703a 	and	r18,r18,r2
 200f764:	483fb21e 	bne	r9,zero,200f630 <__alt_mem_epcs_flash_controller_0+0xfd00e630>
 200f768:	00003d06 	br	200f860 <___svfiprintf_internal_r+0x978>
 200f76c:	9817883a 	mov	r11,r19
 200f770:	d8002415 	stw	zero,144(sp)
 200f774:	18bff404 	addi	r2,r3,-48
 200f778:	0019883a 	mov	r12,zero
 200f77c:	58c00007 	ldb	r3,0(r11)
 200f780:	630002a4 	muli	r12,r12,10
 200f784:	9cc00044 	addi	r19,r19,1
 200f788:	9817883a 	mov	r11,r19
 200f78c:	1319883a 	add	r12,r2,r12
 200f790:	18bff404 	addi	r2,r3,-48
 200f794:	30bff92e 	bgeu	r6,r2,200f77c <__alt_mem_epcs_flash_controller_0+0xfd00e77c>
 200f798:	db002415 	stw	r12,144(sp)
 200f79c:	18bff804 	addi	r2,r3,-32
 200f7a0:	28be232e 	bgeu	r5,r2,200f030 <__alt_mem_epcs_flash_controller_0+0xfd00e030>
 200f7a4:	21003fcc 	andi	r4,r4,255
 200f7a8:	20024b1e 	bne	r4,zero,20100d8 <___svfiprintf_internal_r+0x11f0>
 200f7ac:	1800d626 	beq	r3,zero,200fb08 <___svfiprintf_internal_r+0xc20>
 200f7b0:	02c00044 	movi	r11,1
 200f7b4:	dac02015 	stw	r11,128(sp)
 200f7b8:	d8c01005 	stb	r3,64(sp)
 200f7bc:	d8001d85 	stb	zero,118(sp)
 200f7c0:	dac02115 	stw	r11,132(sp)
 200f7c4:	dc401004 	addi	r17,sp,64
 200f7c8:	003f2606 	br	200f464 <__alt_mem_epcs_flash_controller_0+0xfd00e464>
 200f7cc:	94802014 	ori	r18,r18,128
 200f7d0:	98c00007 	ldb	r3,0(r19)
 200f7d4:	003e1306 	br	200f024 <__alt_mem_epcs_flash_controller_0+0xfd00e024>
 200f7d8:	98c00007 	ldb	r3,0(r19)
 200f7dc:	9ac00044 	addi	r11,r19,1
 200f7e0:	1a822b26 	beq	r3,r10,2010090 <___svfiprintf_internal_r+0x11a8>
 200f7e4:	18bff404 	addi	r2,r3,-48
 200f7e8:	0021883a 	mov	r16,zero
 200f7ec:	30821e36 	bltu	r6,r2,2010068 <___svfiprintf_internal_r+0x1180>
 200f7f0:	58c00007 	ldb	r3,0(r11)
 200f7f4:	840002a4 	muli	r16,r16,10
 200f7f8:	5cc00044 	addi	r19,r11,1
 200f7fc:	9817883a 	mov	r11,r19
 200f800:	80a1883a 	add	r16,r16,r2
 200f804:	18bff404 	addi	r2,r3,-48
 200f808:	30bff92e 	bgeu	r6,r2,200f7f0 <__alt_mem_epcs_flash_controller_0+0xfd00e7f0>
 200f80c:	803e060e 	bge	r16,zero,200f028 <__alt_mem_epcs_flash_controller_0+0xfd00e028>
 200f810:	043fffc4 	movi	r16,-1
 200f814:	003e0406 	br	200f028 <__alt_mem_epcs_flash_controller_0+0xfd00e028>
 200f818:	21003fcc 	andi	r4,r4,255
 200f81c:	2002371e 	bne	r4,zero,20100fc <___svfiprintf_internal_r+0x1214>
 200f820:	94800414 	ori	r18,r18,16
 200f824:	9080080c 	andi	r2,r18,32
 200f828:	103ebb1e 	bne	r2,zero,200f318 <__alt_mem_epcs_flash_controller_0+0xfd00e318>
 200f82c:	9080040c 	andi	r2,r18,16
 200f830:	10013b26 	beq	r2,zero,200fd20 <___svfiprintf_internal_r+0xe38>
 200f834:	dac02317 	ldw	r11,140(sp)
 200f838:	d8001d85 	stb	zero,118(sp)
 200f83c:	0013883a 	mov	r9,zero
 200f840:	58800104 	addi	r2,r11,4
 200f844:	5f000017 	ldw	fp,0(r11)
 200f848:	80013d16 	blt	r16,zero,200fd40 <___svfiprintf_internal_r+0xe58>
 200f84c:	00ffdfc4 	movi	r3,-129
 200f850:	d8802315 	stw	r2,140(sp)
 200f854:	90e4703a 	and	r18,r18,r3
 200f858:	0015883a 	mov	r10,zero
 200f85c:	e03eba26 	beq	fp,zero,200f348 <__alt_mem_epcs_flash_controller_0+0xfd00e348>
 200f860:	00800244 	movi	r2,9
 200f864:	173f7236 	bltu	r2,fp,200f630 <__alt_mem_epcs_flash_controller_0+0xfd00e630>
 200f868:	dac02b17 	ldw	r11,172(sp)
 200f86c:	e7000c04 	addi	fp,fp,48
 200f870:	df0019c5 	stb	fp,103(sp)
 200f874:	dac02115 	stw	r11,132(sp)
 200f878:	dc4019c4 	addi	r17,sp,103
 200f87c:	003eb606 	br	200f358 <__alt_mem_epcs_flash_controller_0+0xfd00e358>
 200f880:	21003fcc 	andi	r4,r4,255
 200f884:	20021f1e 	bne	r4,zero,2010104 <___svfiprintf_internal_r+0x121c>
 200f888:	94800414 	ori	r18,r18,16
 200f88c:	9080080c 	andi	r2,r18,32
 200f890:	103ec51e 	bne	r2,zero,200f3a8 <__alt_mem_epcs_flash_controller_0+0xfd00e3a8>
 200f894:	9080040c 	andi	r2,r18,16
 200f898:	10016926 	beq	r2,zero,200fe40 <___svfiprintf_internal_r+0xf58>
 200f89c:	dac02317 	ldw	r11,140(sp)
 200f8a0:	d8001d85 	stb	zero,118(sp)
 200f8a4:	0013883a 	mov	r9,zero
 200f8a8:	58800104 	addi	r2,r11,4
 200f8ac:	5f000017 	ldw	fp,0(r11)
 200f8b0:	80016b16 	blt	r16,zero,200fe60 <___svfiprintf_internal_r+0xf78>
 200f8b4:	00ffdfc4 	movi	r3,-129
 200f8b8:	d8802315 	stw	r2,140(sp)
 200f8bc:	90e4703a 	and	r18,r18,r3
 200f8c0:	e03ec41e 	bne	fp,zero,200f3d4 <__alt_mem_epcs_flash_controller_0+0xfd00e3d4>
 200f8c4:	0015883a 	mov	r10,zero
 200f8c8:	8001c226 	beq	r16,zero,200ffd4 <___svfiprintf_internal_r+0x10ec>
 200f8cc:	0039883a 	mov	fp,zero
 200f8d0:	0013883a 	mov	r9,zero
 200f8d4:	003ec006 	br	200f3d8 <__alt_mem_epcs_flash_controller_0+0xfd00e3d8>
 200f8d8:	d8c01c17 	ldw	r3,112(sp)
 200f8dc:	d8801b17 	ldw	r2,108(sp)
 200f8e0:	d9001d87 	ldb	r4,118(sp)
 200f8e4:	20000b26 	beq	r4,zero,200f914 <___svfiprintf_internal_r+0xa2c>
 200f8e8:	d9001d84 	addi	r4,sp,118
 200f8ec:	18c00044 	addi	r3,r3,1
 200f8f0:	10800044 	addi	r2,r2,1
 200f8f4:	41000015 	stw	r4,0(r8)
 200f8f8:	01000044 	movi	r4,1
 200f8fc:	41000115 	stw	r4,4(r8)
 200f900:	d8c01c15 	stw	r3,112(sp)
 200f904:	d8801b15 	stw	r2,108(sp)
 200f908:	010001c4 	movi	r4,7
 200f90c:	2080e116 	blt	r4,r2,200fc94 <___svfiprintf_internal_r+0xdac>
 200f910:	42000204 	addi	r8,r8,8
 200f914:	dac02217 	ldw	r11,136(sp)
 200f918:	58000b26 	beq	r11,zero,200f948 <___svfiprintf_internal_r+0xa60>
 200f91c:	d9001d04 	addi	r4,sp,116
 200f920:	18c00084 	addi	r3,r3,2
 200f924:	10800044 	addi	r2,r2,1
 200f928:	41000015 	stw	r4,0(r8)
 200f92c:	01000084 	movi	r4,2
 200f930:	41000115 	stw	r4,4(r8)
 200f934:	d8c01c15 	stw	r3,112(sp)
 200f938:	d8801b15 	stw	r2,108(sp)
 200f93c:	010001c4 	movi	r4,7
 200f940:	2080dd16 	blt	r4,r2,200fcb8 <___svfiprintf_internal_r+0xdd0>
 200f944:	42000204 	addi	r8,r8,8
 200f948:	dac02617 	ldw	r11,152(sp)
 200f94c:	01002004 	movi	r4,128
 200f950:	59008426 	beq	r11,r4,200fb64 <___svfiprintf_internal_r+0xc7c>
 200f954:	dac02117 	ldw	r11,132(sp)
 200f958:	82e1c83a 	sub	r16,r16,r11
 200f95c:	0400270e 	bge	zero,r16,200f9fc <___svfiprintf_internal_r+0xb14>
 200f960:	01c00404 	movi	r7,16
 200f964:	3c016a0e 	bge	r7,r16,200ff10 <___svfiprintf_internal_r+0x1028>
 200f968:	01408134 	movhi	r5,516
 200f96c:	29714704 	addi	r5,r5,-15076
 200f970:	d9402215 	stw	r5,136(sp)
 200f974:	070001c4 	movi	fp,7
 200f978:	00000306 	br	200f988 <___svfiprintf_internal_r+0xaa0>
 200f97c:	843ffc04 	addi	r16,r16,-16
 200f980:	42000204 	addi	r8,r8,8
 200f984:	3c00130e 	bge	r7,r16,200f9d4 <___svfiprintf_internal_r+0xaec>
 200f988:	18c00404 	addi	r3,r3,16
 200f98c:	10800044 	addi	r2,r2,1
 200f990:	45000015 	stw	r20,0(r8)
 200f994:	41c00115 	stw	r7,4(r8)
 200f998:	d8c01c15 	stw	r3,112(sp)
 200f99c:	d8801b15 	stw	r2,108(sp)
 200f9a0:	e0bff60e 	bge	fp,r2,200f97c <__alt_mem_epcs_flash_controller_0+0xfd00e97c>
 200f9a4:	d9801a04 	addi	r6,sp,104
 200f9a8:	b80b883a 	mov	r5,r23
 200f9ac:	a809883a 	mov	r4,r21
 200f9b0:	d9c02c15 	stw	r7,176(sp)
 200f9b4:	200ed180 	call	200ed18 <__ssprint_r>
 200f9b8:	d9c02c17 	ldw	r7,176(sp)
 200f9bc:	1000581e 	bne	r2,zero,200fb20 <___svfiprintf_internal_r+0xc38>
 200f9c0:	843ffc04 	addi	r16,r16,-16
 200f9c4:	d8c01c17 	ldw	r3,112(sp)
 200f9c8:	d8801b17 	ldw	r2,108(sp)
 200f9cc:	d811883a 	mov	r8,sp
 200f9d0:	3c3fed16 	blt	r7,r16,200f988 <__alt_mem_epcs_flash_controller_0+0xfd00e988>
 200f9d4:	dac02217 	ldw	r11,136(sp)
 200f9d8:	1c07883a 	add	r3,r3,r16
 200f9dc:	10800044 	addi	r2,r2,1
 200f9e0:	42c00015 	stw	r11,0(r8)
 200f9e4:	44000115 	stw	r16,4(r8)
 200f9e8:	d8c01c15 	stw	r3,112(sp)
 200f9ec:	d8801b15 	stw	r2,108(sp)
 200f9f0:	010001c4 	movi	r4,7
 200f9f4:	20809e16 	blt	r4,r2,200fc70 <___svfiprintf_internal_r+0xd88>
 200f9f8:	42000204 	addi	r8,r8,8
 200f9fc:	dac02117 	ldw	r11,132(sp)
 200fa00:	10800044 	addi	r2,r2,1
 200fa04:	44400015 	stw	r17,0(r8)
 200fa08:	58c7883a 	add	r3,r11,r3
 200fa0c:	42c00115 	stw	r11,4(r8)
 200fa10:	d8c01c15 	stw	r3,112(sp)
 200fa14:	d8801b15 	stw	r2,108(sp)
 200fa18:	010001c4 	movi	r4,7
 200fa1c:	20807f16 	blt	r4,r2,200fc1c <___svfiprintf_internal_r+0xd34>
 200fa20:	42000204 	addi	r8,r8,8
 200fa24:	9480010c 	andi	r18,r18,4
 200fa28:	90002926 	beq	r18,zero,200fad0 <___svfiprintf_internal_r+0xbe8>
 200fa2c:	dac02417 	ldw	r11,144(sp)
 200fa30:	d8802017 	ldw	r2,128(sp)
 200fa34:	58a1c83a 	sub	r16,r11,r2
 200fa38:	0400250e 	bge	zero,r16,200fad0 <___svfiprintf_internal_r+0xbe8>
 200fa3c:	04400404 	movi	r17,16
 200fa40:	d8801b17 	ldw	r2,108(sp)
 200fa44:	8c017c0e 	bge	r17,r16,2010038 <___svfiprintf_internal_r+0x1150>
 200fa48:	01408134 	movhi	r5,516
 200fa4c:	29714b04 	addi	r5,r5,-15060
 200fa50:	d9402815 	stw	r5,160(sp)
 200fa54:	048001c4 	movi	r18,7
 200fa58:	00000306 	br	200fa68 <___svfiprintf_internal_r+0xb80>
 200fa5c:	843ffc04 	addi	r16,r16,-16
 200fa60:	42000204 	addi	r8,r8,8
 200fa64:	8c00110e 	bge	r17,r16,200faac <___svfiprintf_internal_r+0xbc4>
 200fa68:	18c00404 	addi	r3,r3,16
 200fa6c:	10800044 	addi	r2,r2,1
 200fa70:	45800015 	stw	r22,0(r8)
 200fa74:	44400115 	stw	r17,4(r8)
 200fa78:	d8c01c15 	stw	r3,112(sp)
 200fa7c:	d8801b15 	stw	r2,108(sp)
 200fa80:	90bff60e 	bge	r18,r2,200fa5c <__alt_mem_epcs_flash_controller_0+0xfd00ea5c>
 200fa84:	d9801a04 	addi	r6,sp,104
 200fa88:	b80b883a 	mov	r5,r23
 200fa8c:	a809883a 	mov	r4,r21
 200fa90:	200ed180 	call	200ed18 <__ssprint_r>
 200fa94:	1000221e 	bne	r2,zero,200fb20 <___svfiprintf_internal_r+0xc38>
 200fa98:	843ffc04 	addi	r16,r16,-16
 200fa9c:	d8c01c17 	ldw	r3,112(sp)
 200faa0:	d8801b17 	ldw	r2,108(sp)
 200faa4:	d811883a 	mov	r8,sp
 200faa8:	8c3fef16 	blt	r17,r16,200fa68 <__alt_mem_epcs_flash_controller_0+0xfd00ea68>
 200faac:	dac02817 	ldw	r11,160(sp)
 200fab0:	1c07883a 	add	r3,r3,r16
 200fab4:	10800044 	addi	r2,r2,1
 200fab8:	42c00015 	stw	r11,0(r8)
 200fabc:	44000115 	stw	r16,4(r8)
 200fac0:	d8c01c15 	stw	r3,112(sp)
 200fac4:	d8801b15 	stw	r2,108(sp)
 200fac8:	010001c4 	movi	r4,7
 200facc:	2080aa16 	blt	r4,r2,200fd78 <___svfiprintf_internal_r+0xe90>
 200fad0:	d8802417 	ldw	r2,144(sp)
 200fad4:	dac02017 	ldw	r11,128(sp)
 200fad8:	12c0010e 	bge	r2,r11,200fae0 <___svfiprintf_internal_r+0xbf8>
 200fadc:	5805883a 	mov	r2,r11
 200fae0:	dac02517 	ldw	r11,148(sp)
 200fae4:	5897883a 	add	r11,r11,r2
 200fae8:	dac02515 	stw	r11,148(sp)
 200faec:	1800531e 	bne	r3,zero,200fc3c <___svfiprintf_internal_r+0xd54>
 200faf0:	98800007 	ldb	r2,0(r19)
 200faf4:	d8001b15 	stw	zero,108(sp)
 200faf8:	d811883a 	mov	r8,sp
 200fafc:	103d231e 	bne	r2,zero,200ef8c <__alt_mem_epcs_flash_controller_0+0xfd00df8c>
 200fb00:	9823883a 	mov	r17,r19
 200fb04:	003d3906 	br	200efec <__alt_mem_epcs_flash_controller_0+0xfd00dfec>
 200fb08:	d8801c17 	ldw	r2,112(sp)
 200fb0c:	10000426 	beq	r2,zero,200fb20 <___svfiprintf_internal_r+0xc38>
 200fb10:	d9402717 	ldw	r5,156(sp)
 200fb14:	d9002a17 	ldw	r4,168(sp)
 200fb18:	d9801a04 	addi	r6,sp,104
 200fb1c:	200ed180 	call	200ed18 <__ssprint_r>
 200fb20:	dac02717 	ldw	r11,156(sp)
 200fb24:	d8802517 	ldw	r2,148(sp)
 200fb28:	58c0030b 	ldhu	r3,12(r11)
 200fb2c:	18c0100c 	andi	r3,r3,64
 200fb30:	1801381e 	bne	r3,zero,2010014 <___svfiprintf_internal_r+0x112c>
 200fb34:	dfc03717 	ldw	ra,220(sp)
 200fb38:	df003617 	ldw	fp,216(sp)
 200fb3c:	ddc03517 	ldw	r23,212(sp)
 200fb40:	dd803417 	ldw	r22,208(sp)
 200fb44:	dd403317 	ldw	r21,204(sp)
 200fb48:	dd003217 	ldw	r20,200(sp)
 200fb4c:	dcc03117 	ldw	r19,196(sp)
 200fb50:	dc803017 	ldw	r18,192(sp)
 200fb54:	dc402f17 	ldw	r17,188(sp)
 200fb58:	dc002e17 	ldw	r16,184(sp)
 200fb5c:	dec03804 	addi	sp,sp,224
 200fb60:	f800283a 	ret
 200fb64:	dac02417 	ldw	r11,144(sp)
 200fb68:	d9002017 	ldw	r4,128(sp)
 200fb6c:	5939c83a 	sub	fp,r11,r4
 200fb70:	073f780e 	bge	zero,fp,200f954 <__alt_mem_epcs_flash_controller_0+0xfd00e954>
 200fb74:	02400404 	movi	r9,16
 200fb78:	4f01370e 	bge	r9,fp,2010058 <___svfiprintf_internal_r+0x1170>
 200fb7c:	02c08134 	movhi	r11,516
 200fb80:	5af14704 	addi	r11,r11,-15076
 200fb84:	dac02215 	stw	r11,136(sp)
 200fb88:	028001c4 	movi	r10,7
 200fb8c:	00000306 	br	200fb9c <___svfiprintf_internal_r+0xcb4>
 200fb90:	e73ffc04 	addi	fp,fp,-16
 200fb94:	42000204 	addi	r8,r8,8
 200fb98:	4f00150e 	bge	r9,fp,200fbf0 <___svfiprintf_internal_r+0xd08>
 200fb9c:	18c00404 	addi	r3,r3,16
 200fba0:	10800044 	addi	r2,r2,1
 200fba4:	45000015 	stw	r20,0(r8)
 200fba8:	42400115 	stw	r9,4(r8)
 200fbac:	d8c01c15 	stw	r3,112(sp)
 200fbb0:	d8801b15 	stw	r2,108(sp)
 200fbb4:	50bff60e 	bge	r10,r2,200fb90 <__alt_mem_epcs_flash_controller_0+0xfd00eb90>
 200fbb8:	d9801a04 	addi	r6,sp,104
 200fbbc:	b80b883a 	mov	r5,r23
 200fbc0:	a809883a 	mov	r4,r21
 200fbc4:	da402c15 	stw	r9,176(sp)
 200fbc8:	da802d15 	stw	r10,180(sp)
 200fbcc:	200ed180 	call	200ed18 <__ssprint_r>
 200fbd0:	da402c17 	ldw	r9,176(sp)
 200fbd4:	da802d17 	ldw	r10,180(sp)
 200fbd8:	103fd11e 	bne	r2,zero,200fb20 <__alt_mem_epcs_flash_controller_0+0xfd00eb20>
 200fbdc:	e73ffc04 	addi	fp,fp,-16
 200fbe0:	d8c01c17 	ldw	r3,112(sp)
 200fbe4:	d8801b17 	ldw	r2,108(sp)
 200fbe8:	d811883a 	mov	r8,sp
 200fbec:	4f3feb16 	blt	r9,fp,200fb9c <__alt_mem_epcs_flash_controller_0+0xfd00eb9c>
 200fbf0:	dac02217 	ldw	r11,136(sp)
 200fbf4:	1f07883a 	add	r3,r3,fp
 200fbf8:	10800044 	addi	r2,r2,1
 200fbfc:	42c00015 	stw	r11,0(r8)
 200fc00:	47000115 	stw	fp,4(r8)
 200fc04:	d8c01c15 	stw	r3,112(sp)
 200fc08:	d8801b15 	stw	r2,108(sp)
 200fc0c:	010001c4 	movi	r4,7
 200fc10:	2080b616 	blt	r4,r2,200feec <___svfiprintf_internal_r+0x1004>
 200fc14:	42000204 	addi	r8,r8,8
 200fc18:	003f4e06 	br	200f954 <__alt_mem_epcs_flash_controller_0+0xfd00e954>
 200fc1c:	d9801a04 	addi	r6,sp,104
 200fc20:	b80b883a 	mov	r5,r23
 200fc24:	a809883a 	mov	r4,r21
 200fc28:	200ed180 	call	200ed18 <__ssprint_r>
 200fc2c:	103fbc1e 	bne	r2,zero,200fb20 <__alt_mem_epcs_flash_controller_0+0xfd00eb20>
 200fc30:	d8c01c17 	ldw	r3,112(sp)
 200fc34:	d811883a 	mov	r8,sp
 200fc38:	003f7a06 	br	200fa24 <__alt_mem_epcs_flash_controller_0+0xfd00ea24>
 200fc3c:	d9801a04 	addi	r6,sp,104
 200fc40:	b80b883a 	mov	r5,r23
 200fc44:	a809883a 	mov	r4,r21
 200fc48:	200ed180 	call	200ed18 <__ssprint_r>
 200fc4c:	103fa826 	beq	r2,zero,200faf0 <__alt_mem_epcs_flash_controller_0+0xfd00eaf0>
 200fc50:	003fb306 	br	200fb20 <__alt_mem_epcs_flash_controller_0+0xfd00eb20>
 200fc54:	d9801a04 	addi	r6,sp,104
 200fc58:	b80b883a 	mov	r5,r23
 200fc5c:	a809883a 	mov	r4,r21
 200fc60:	200ed180 	call	200ed18 <__ssprint_r>
 200fc64:	103fae1e 	bne	r2,zero,200fb20 <__alt_mem_epcs_flash_controller_0+0xfd00eb20>
 200fc68:	d811883a 	mov	r8,sp
 200fc6c:	003cdc06 	br	200efe0 <__alt_mem_epcs_flash_controller_0+0xfd00dfe0>
 200fc70:	d9801a04 	addi	r6,sp,104
 200fc74:	b80b883a 	mov	r5,r23
 200fc78:	a809883a 	mov	r4,r21
 200fc7c:	200ed180 	call	200ed18 <__ssprint_r>
 200fc80:	103fa71e 	bne	r2,zero,200fb20 <__alt_mem_epcs_flash_controller_0+0xfd00eb20>
 200fc84:	d8c01c17 	ldw	r3,112(sp)
 200fc88:	d8801b17 	ldw	r2,108(sp)
 200fc8c:	d811883a 	mov	r8,sp
 200fc90:	003f5a06 	br	200f9fc <__alt_mem_epcs_flash_controller_0+0xfd00e9fc>
 200fc94:	d9801a04 	addi	r6,sp,104
 200fc98:	b80b883a 	mov	r5,r23
 200fc9c:	a809883a 	mov	r4,r21
 200fca0:	200ed180 	call	200ed18 <__ssprint_r>
 200fca4:	103f9e1e 	bne	r2,zero,200fb20 <__alt_mem_epcs_flash_controller_0+0xfd00eb20>
 200fca8:	d8c01c17 	ldw	r3,112(sp)
 200fcac:	d8801b17 	ldw	r2,108(sp)
 200fcb0:	d811883a 	mov	r8,sp
 200fcb4:	003f1706 	br	200f914 <__alt_mem_epcs_flash_controller_0+0xfd00e914>
 200fcb8:	d9801a04 	addi	r6,sp,104
 200fcbc:	b80b883a 	mov	r5,r23
 200fcc0:	a809883a 	mov	r4,r21
 200fcc4:	200ed180 	call	200ed18 <__ssprint_r>
 200fcc8:	103f951e 	bne	r2,zero,200fb20 <__alt_mem_epcs_flash_controller_0+0xfd00eb20>
 200fccc:	d8c01c17 	ldw	r3,112(sp)
 200fcd0:	d8801b17 	ldw	r2,108(sp)
 200fcd4:	d811883a 	mov	r8,sp
 200fcd8:	003f1b06 	br	200f948 <__alt_mem_epcs_flash_controller_0+0xfd00e948>
 200fcdc:	d8001d85 	stb	zero,118(sp)
 200fce0:	80007b16 	blt	r16,zero,200fed0 <___svfiprintf_internal_r+0xfe8>
 200fce4:	00ffdfc4 	movi	r3,-129
 200fce8:	e244b03a 	or	r2,fp,r9
 200fcec:	90e4703a 	and	r18,r18,r3
 200fcf0:	103d7026 	beq	r2,zero,200f2b4 <__alt_mem_epcs_flash_controller_0+0xfd00e2b4>
 200fcf4:	0015883a 	mov	r10,zero
 200fcf8:	003d7206 	br	200f2c4 <__alt_mem_epcs_flash_controller_0+0xfd00e2c4>
 200fcfc:	d9801a04 	addi	r6,sp,104
 200fd00:	b80b883a 	mov	r5,r23
 200fd04:	a809883a 	mov	r4,r21
 200fd08:	200ed180 	call	200ed18 <__ssprint_r>
 200fd0c:	103f841e 	bne	r2,zero,200fb20 <__alt_mem_epcs_flash_controller_0+0xfd00eb20>
 200fd10:	d8c01c17 	ldw	r3,112(sp)
 200fd14:	d8801b17 	ldw	r2,108(sp)
 200fd18:	d811883a 	mov	r8,sp
 200fd1c:	003ef006 	br	200f8e0 <__alt_mem_epcs_flash_controller_0+0xfd00e8e0>
 200fd20:	9080100c 	andi	r2,r18,64
 200fd24:	d8001d85 	stb	zero,118(sp)
 200fd28:	dac02317 	ldw	r11,140(sp)
 200fd2c:	10008126 	beq	r2,zero,200ff34 <___svfiprintf_internal_r+0x104c>
 200fd30:	58800104 	addi	r2,r11,4
 200fd34:	5f00000b 	ldhu	fp,0(r11)
 200fd38:	0013883a 	mov	r9,zero
 200fd3c:	803ec30e 	bge	r16,zero,200f84c <__alt_mem_epcs_flash_controller_0+0xfd00e84c>
 200fd40:	d8802315 	stw	r2,140(sp)
 200fd44:	0015883a 	mov	r10,zero
 200fd48:	e244b03a 	or	r2,fp,r9
 200fd4c:	103e371e 	bne	r2,zero,200f62c <__alt_mem_epcs_flash_controller_0+0xfd00e62c>
 200fd50:	00800044 	movi	r2,1
 200fd54:	10803fcc 	andi	r2,r2,255
 200fd58:	00c00044 	movi	r3,1
 200fd5c:	10c06126 	beq	r2,r3,200fee4 <___svfiprintf_internal_r+0xffc>
 200fd60:	00c00084 	movi	r3,2
 200fd64:	10fd5526 	beq	r2,r3,200f2bc <__alt_mem_epcs_flash_controller_0+0xfd00e2bc>
 200fd68:	003ed806 	br	200f8cc <__alt_mem_epcs_flash_controller_0+0xfd00e8cc>
 200fd6c:	d8802315 	stw	r2,140(sp)
 200fd70:	98c00007 	ldb	r3,0(r19)
 200fd74:	003cab06 	br	200f024 <__alt_mem_epcs_flash_controller_0+0xfd00e024>
 200fd78:	d9801a04 	addi	r6,sp,104
 200fd7c:	b80b883a 	mov	r5,r23
 200fd80:	a809883a 	mov	r4,r21
 200fd84:	200ed180 	call	200ed18 <__ssprint_r>
 200fd88:	103f651e 	bne	r2,zero,200fb20 <__alt_mem_epcs_flash_controller_0+0xfd00eb20>
 200fd8c:	d8c01c17 	ldw	r3,112(sp)
 200fd90:	003f4f06 	br	200fad0 <__alt_mem_epcs_flash_controller_0+0xfd00ead0>
 200fd94:	00808134 	movhi	r2,516
 200fd98:	10b0df04 	addi	r2,r2,-15492
 200fd9c:	d8802915 	stw	r2,164(sp)
 200fda0:	003d4406 	br	200f2b4 <__alt_mem_epcs_flash_controller_0+0xfd00e2b4>
 200fda4:	dac02317 	ldw	r11,140(sp)
 200fda8:	58800017 	ldw	r2,0(r11)
 200fdac:	dac02517 	ldw	r11,148(sp)
 200fdb0:	5807d7fa 	srai	r3,r11,31
 200fdb4:	dac02317 	ldw	r11,140(sp)
 200fdb8:	10c00115 	stw	r3,4(r2)
 200fdbc:	5ac00104 	addi	r11,r11,4
 200fdc0:	dac02315 	stw	r11,140(sp)
 200fdc4:	dac02517 	ldw	r11,148(sp)
 200fdc8:	12c00015 	stw	r11,0(r2)
 200fdcc:	003c6d06 	br	200ef84 <__alt_mem_epcs_flash_controller_0+0xfd00df84>
 200fdd0:	9080100c 	andi	r2,r18,64
 200fdd4:	dac02317 	ldw	r11,140(sp)
 200fdd8:	103e5326 	beq	r2,zero,200f728 <__alt_mem_epcs_flash_controller_0+0xfd00e728>
 200fddc:	5f00000f 	ldh	fp,0(r11)
 200fde0:	5ac00104 	addi	r11,r11,4
 200fde4:	dac02315 	stw	r11,140(sp)
 200fde8:	e013d7fa 	srai	r9,fp,31
 200fdec:	4805883a 	mov	r2,r9
 200fdf0:	003e0706 	br	200f610 <__alt_mem_epcs_flash_controller_0+0xfd00e610>
 200fdf4:	00800c04 	movi	r2,48
 200fdf8:	d8801d05 	stb	r2,116(sp)
 200fdfc:	d8c01d45 	stb	r3,117(sp)
 200fe00:	d8001d85 	stb	zero,118(sp)
 200fe04:	90800094 	ori	r2,r18,2
 200fe08:	80008f16 	blt	r16,zero,2010048 <___svfiprintf_internal_r+0x1160>
 200fe0c:	00bfdfc4 	movi	r2,-129
 200fe10:	90a4703a 	and	r18,r18,r2
 200fe14:	94800094 	ori	r18,r18,2
 200fe18:	0015883a 	mov	r10,zero
 200fe1c:	003d2906 	br	200f2c4 <__alt_mem_epcs_flash_controller_0+0xfd00e2c4>
 200fe20:	98c00007 	ldb	r3,0(r19)
 200fe24:	003c7f06 	br	200f024 <__alt_mem_epcs_flash_controller_0+0xfd00e024>
 200fe28:	dac02317 	ldw	r11,140(sp)
 200fe2c:	0013883a 	mov	r9,zero
 200fe30:	5f000017 	ldw	fp,0(r11)
 200fe34:	5ac00104 	addi	r11,r11,4
 200fe38:	dac02315 	stw	r11,140(sp)
 200fe3c:	003d1506 	br	200f294 <__alt_mem_epcs_flash_controller_0+0xfd00e294>
 200fe40:	9080100c 	andi	r2,r18,64
 200fe44:	d8001d85 	stb	zero,118(sp)
 200fe48:	dac02317 	ldw	r11,140(sp)
 200fe4c:	10003426 	beq	r2,zero,200ff20 <___svfiprintf_internal_r+0x1038>
 200fe50:	58800104 	addi	r2,r11,4
 200fe54:	5f00000b 	ldhu	fp,0(r11)
 200fe58:	0013883a 	mov	r9,zero
 200fe5c:	803e950e 	bge	r16,zero,200f8b4 <__alt_mem_epcs_flash_controller_0+0xfd00e8b4>
 200fe60:	e246b03a 	or	r3,fp,r9
 200fe64:	d8802315 	stw	r2,140(sp)
 200fe68:	183d5a1e 	bne	r3,zero,200f3d4 <__alt_mem_epcs_flash_controller_0+0xfd00e3d4>
 200fe6c:	0015883a 	mov	r10,zero
 200fe70:	0005883a 	mov	r2,zero
 200fe74:	003fb706 	br	200fd54 <__alt_mem_epcs_flash_controller_0+0xfd00ed54>
 200fe78:	98c00043 	ldbu	r3,1(r19)
 200fe7c:	94800814 	ori	r18,r18,32
 200fe80:	9cc00044 	addi	r19,r19,1
 200fe84:	18c03fcc 	andi	r3,r3,255
 200fe88:	18c0201c 	xori	r3,r3,128
 200fe8c:	18ffe004 	addi	r3,r3,-128
 200fe90:	003c6406 	br	200f024 <__alt_mem_epcs_flash_controller_0+0xfd00e024>
 200fe94:	d8c02315 	stw	r3,140(sp)
 200fe98:	0015883a 	mov	r10,zero
 200fe9c:	003faa06 	br	200fd48 <__alt_mem_epcs_flash_controller_0+0xfd00ed48>
 200fea0:	dac02317 	ldw	r11,140(sp)
 200fea4:	58800017 	ldw	r2,0(r11)
 200fea8:	5ac00104 	addi	r11,r11,4
 200feac:	dac02315 	stw	r11,140(sp)
 200feb0:	dac02517 	ldw	r11,148(sp)
 200feb4:	12c00015 	stw	r11,0(r2)
 200feb8:	003c3206 	br	200ef84 <__alt_mem_epcs_flash_controller_0+0xfd00df84>
 200febc:	01008134 	movhi	r4,516
 200fec0:	2130df04 	addi	r4,r4,-15492
 200fec4:	d9002915 	stw	r4,164(sp)
 200fec8:	d8c02315 	stw	r3,140(sp)
 200fecc:	1025883a 	mov	r18,r2
 200fed0:	e244b03a 	or	r2,fp,r9
 200fed4:	103f871e 	bne	r2,zero,200fcf4 <__alt_mem_epcs_flash_controller_0+0xfd00ecf4>
 200fed8:	0015883a 	mov	r10,zero
 200fedc:	00800084 	movi	r2,2
 200fee0:	003f9c06 	br	200fd54 <__alt_mem_epcs_flash_controller_0+0xfd00ed54>
 200fee4:	0039883a 	mov	fp,zero
 200fee8:	003e5f06 	br	200f868 <__alt_mem_epcs_flash_controller_0+0xfd00e868>
 200feec:	d9801a04 	addi	r6,sp,104
 200fef0:	b80b883a 	mov	r5,r23
 200fef4:	a809883a 	mov	r4,r21
 200fef8:	200ed180 	call	200ed18 <__ssprint_r>
 200fefc:	103f081e 	bne	r2,zero,200fb20 <__alt_mem_epcs_flash_controller_0+0xfd00eb20>
 200ff00:	d8c01c17 	ldw	r3,112(sp)
 200ff04:	d8801b17 	ldw	r2,108(sp)
 200ff08:	d811883a 	mov	r8,sp
 200ff0c:	003e9106 	br	200f954 <__alt_mem_epcs_flash_controller_0+0xfd00e954>
 200ff10:	01008134 	movhi	r4,516
 200ff14:	21314704 	addi	r4,r4,-15076
 200ff18:	d9002215 	stw	r4,136(sp)
 200ff1c:	003ead06 	br	200f9d4 <__alt_mem_epcs_flash_controller_0+0xfd00e9d4>
 200ff20:	58800104 	addi	r2,r11,4
 200ff24:	5f000017 	ldw	fp,0(r11)
 200ff28:	0013883a 	mov	r9,zero
 200ff2c:	803e610e 	bge	r16,zero,200f8b4 <__alt_mem_epcs_flash_controller_0+0xfd00e8b4>
 200ff30:	003fcb06 	br	200fe60 <__alt_mem_epcs_flash_controller_0+0xfd00ee60>
 200ff34:	58800104 	addi	r2,r11,4
 200ff38:	5f000017 	ldw	fp,0(r11)
 200ff3c:	0013883a 	mov	r9,zero
 200ff40:	803e420e 	bge	r16,zero,200f84c <__alt_mem_epcs_flash_controller_0+0xfd00e84c>
 200ff44:	003f7e06 	br	200fd40 <__alt_mem_epcs_flash_controller_0+0xfd00ed40>
 200ff48:	5f000017 	ldw	fp,0(r11)
 200ff4c:	5ac00104 	addi	r11,r11,4
 200ff50:	0013883a 	mov	r9,zero
 200ff54:	dac02315 	stw	r11,140(sp)
 200ff58:	003cce06 	br	200f294 <__alt_mem_epcs_flash_controller_0+0xfd00e294>
 200ff5c:	8809883a 	mov	r4,r17
 200ff60:	da002c15 	stw	r8,176(sp)
 200ff64:	2005e800 	call	2005e80 <strlen>
 200ff68:	d8802115 	stw	r2,132(sp)
 200ff6c:	da801d83 	ldbu	r10,118(sp)
 200ff70:	df002315 	stw	fp,140(sp)
 200ff74:	0021883a 	mov	r16,zero
 200ff78:	da002c17 	ldw	r8,176(sp)
 200ff7c:	003cf606 	br	200f358 <__alt_mem_epcs_flash_controller_0+0xfd00e358>
 200ff80:	00800184 	movi	r2,6
 200ff84:	1400012e 	bgeu	r2,r16,200ff8c <___svfiprintf_internal_r+0x10a4>
 200ff88:	1021883a 	mov	r16,r2
 200ff8c:	dc002115 	stw	r16,132(sp)
 200ff90:	8005883a 	mov	r2,r16
 200ff94:	80003c16 	blt	r16,zero,2010088 <___svfiprintf_internal_r+0x11a0>
 200ff98:	04408134 	movhi	r17,516
 200ff9c:	d8802015 	stw	r2,128(sp)
 200ffa0:	df002315 	stw	fp,140(sp)
 200ffa4:	8c70e404 	addi	r17,r17,-15472
 200ffa8:	003d2e06 	br	200f464 <__alt_mem_epcs_flash_controller_0+0xfd00e464>
 200ffac:	04001004 	movi	r16,64
 200ffb0:	800b883a 	mov	r5,r16
 200ffb4:	20052780 	call	2005278 <_malloc_r>
 200ffb8:	dac02717 	ldw	r11,156(sp)
 200ffbc:	58800015 	stw	r2,0(r11)
 200ffc0:	58800415 	stw	r2,16(r11)
 200ffc4:	10004826 	beq	r2,zero,20100e8 <___svfiprintf_internal_r+0x1200>
 200ffc8:	dac02717 	ldw	r11,156(sp)
 200ffcc:	5c000515 	stw	r16,20(r11)
 200ffd0:	003bd906 	br	200ef38 <__alt_mem_epcs_flash_controller_0+0xfd00df38>
 200ffd4:	9080004c 	andi	r2,r18,1
 200ffd8:	0015883a 	mov	r10,zero
 200ffdc:	10000626 	beq	r2,zero,200fff8 <___svfiprintf_internal_r+0x1110>
 200ffe0:	dac02b17 	ldw	r11,172(sp)
 200ffe4:	00800c04 	movi	r2,48
 200ffe8:	d88019c5 	stb	r2,103(sp)
 200ffec:	dac02115 	stw	r11,132(sp)
 200fff0:	dc4019c4 	addi	r17,sp,103
 200fff4:	003cd806 	br	200f358 <__alt_mem_epcs_flash_controller_0+0xfd00e358>
 200fff8:	d8002115 	stw	zero,132(sp)
 200fffc:	dc401a04 	addi	r17,sp,104
 2010000:	003cd506 	br	200f358 <__alt_mem_epcs_flash_controller_0+0xfd00e358>
 2010004:	01008134 	movhi	r4,516
 2010008:	21314b04 	addi	r4,r4,-15060
 201000c:	d9002815 	stw	r4,160(sp)
 2010010:	003d4306 	br	200f520 <__alt_mem_epcs_flash_controller_0+0xfd00e520>
 2010014:	00bfffc4 	movi	r2,-1
 2010018:	003ec606 	br	200fb34 <__alt_mem_epcs_flash_controller_0+0xfd00eb34>
 201001c:	00800044 	movi	r2,1
 2010020:	10803fcc 	andi	r2,r2,255
 2010024:	00c00044 	movi	r3,1
 2010028:	10fd8026 	beq	r2,r3,200f62c <__alt_mem_epcs_flash_controller_0+0xfd00e62c>
 201002c:	00c00084 	movi	r3,2
 2010030:	10fca426 	beq	r2,r3,200f2c4 <__alt_mem_epcs_flash_controller_0+0xfd00e2c4>
 2010034:	003ce806 	br	200f3d8 <__alt_mem_epcs_flash_controller_0+0xfd00e3d8>
 2010038:	01008134 	movhi	r4,516
 201003c:	21314b04 	addi	r4,r4,-15060
 2010040:	d9002815 	stw	r4,160(sp)
 2010044:	003e9906 	br	200faac <__alt_mem_epcs_flash_controller_0+0xfd00eaac>
 2010048:	1025883a 	mov	r18,r2
 201004c:	0015883a 	mov	r10,zero
 2010050:	00800084 	movi	r2,2
 2010054:	003ff206 	br	2010020 <__alt_mem_epcs_flash_controller_0+0xfd00f020>
 2010058:	01408134 	movhi	r5,516
 201005c:	29714704 	addi	r5,r5,-15076
 2010060:	d9402215 	stw	r5,136(sp)
 2010064:	003ee206 	br	200fbf0 <__alt_mem_epcs_flash_controller_0+0xfd00ebf0>
 2010068:	5827883a 	mov	r19,r11
 201006c:	0021883a 	mov	r16,zero
 2010070:	003bed06 	br	200f028 <__alt_mem_epcs_flash_controller_0+0xfd00e028>
 2010074:	dc002115 	stw	r16,132(sp)
 2010078:	da801d83 	ldbu	r10,118(sp)
 201007c:	df002315 	stw	fp,140(sp)
 2010080:	0021883a 	mov	r16,zero
 2010084:	003cb406 	br	200f358 <__alt_mem_epcs_flash_controller_0+0xfd00e358>
 2010088:	0005883a 	mov	r2,zero
 201008c:	003fc206 	br	200ff98 <__alt_mem_epcs_flash_controller_0+0xfd00ef98>
 2010090:	d8802317 	ldw	r2,140(sp)
 2010094:	98c00043 	ldbu	r3,1(r19)
 2010098:	5827883a 	mov	r19,r11
 201009c:	14000017 	ldw	r16,0(r2)
 20100a0:	10800104 	addi	r2,r2,4
 20100a4:	d8802315 	stw	r2,140(sp)
 20100a8:	803f760e 	bge	r16,zero,200fe84 <__alt_mem_epcs_flash_controller_0+0xfd00ee84>
 20100ac:	18c03fcc 	andi	r3,r3,255
 20100b0:	18c0201c 	xori	r3,r3,128
 20100b4:	043fffc4 	movi	r16,-1
 20100b8:	18ffe004 	addi	r3,r3,-128
 20100bc:	003bd906 	br	200f024 <__alt_mem_epcs_flash_controller_0+0xfd00e024>
 20100c0:	d9c01d85 	stb	r7,118(sp)
 20100c4:	003cb606 	br	200f3a0 <__alt_mem_epcs_flash_controller_0+0xfd00e3a0>
 20100c8:	d9c01d85 	stb	r7,118(sp)
 20100cc:	003d2106 	br	200f554 <__alt_mem_epcs_flash_controller_0+0xfd00e554>
 20100d0:	d9c01d85 	stb	r7,118(sp)
 20100d4:	003d8e06 	br	200f710 <__alt_mem_epcs_flash_controller_0+0xfd00e710>
 20100d8:	d9c01d85 	stb	r7,118(sp)
 20100dc:	003db306 	br	200f7ac <__alt_mem_epcs_flash_controller_0+0xfd00e7ac>
 20100e0:	d9c01d85 	stb	r7,118(sp)
 20100e4:	003c8a06 	br	200f310 <__alt_mem_epcs_flash_controller_0+0xfd00e310>
 20100e8:	dac02a17 	ldw	r11,168(sp)
 20100ec:	00800304 	movi	r2,12
 20100f0:	58800015 	stw	r2,0(r11)
 20100f4:	00bfffc4 	movi	r2,-1
 20100f8:	003e8e06 	br	200fb34 <__alt_mem_epcs_flash_controller_0+0xfd00eb34>
 20100fc:	d9c01d85 	stb	r7,118(sp)
 2010100:	003dc706 	br	200f820 <__alt_mem_epcs_flash_controller_0+0xfd00e820>
 2010104:	d9c01d85 	stb	r7,118(sp)
 2010108:	003ddf06 	br	200f888 <__alt_mem_epcs_flash_controller_0+0xfd00e888>
 201010c:	d9c01d85 	stb	r7,118(sp)
 2010110:	003d3706 	br	200f5f0 <__alt_mem_epcs_flash_controller_0+0xfd00e5f0>
 2010114:	d9c01d85 	stb	r7,118(sp)
 2010118:	003c5406 	br	200f26c <__alt_mem_epcs_flash_controller_0+0xfd00e26c>
 201011c:	d9c01d85 	stb	r7,118(sp)
 2010120:	003d1d06 	br	200f598 <__alt_mem_epcs_flash_controller_0+0xfd00e598>

02010124 <__sprint_r.part.0>:
 2010124:	28801917 	ldw	r2,100(r5)
 2010128:	defff604 	addi	sp,sp,-40
 201012c:	dd400515 	stw	r21,20(sp)
 2010130:	dfc00915 	stw	ra,36(sp)
 2010134:	df000815 	stw	fp,32(sp)
 2010138:	ddc00715 	stw	r23,28(sp)
 201013c:	dd800615 	stw	r22,24(sp)
 2010140:	dd000415 	stw	r20,16(sp)
 2010144:	dcc00315 	stw	r19,12(sp)
 2010148:	dc800215 	stw	r18,8(sp)
 201014c:	dc400115 	stw	r17,4(sp)
 2010150:	dc000015 	stw	r16,0(sp)
 2010154:	1088000c 	andi	r2,r2,8192
 2010158:	302b883a 	mov	r21,r6
 201015c:	10002e26 	beq	r2,zero,2010218 <__sprint_r.part.0+0xf4>
 2010160:	30800217 	ldw	r2,8(r6)
 2010164:	35800017 	ldw	r22,0(r6)
 2010168:	10002926 	beq	r2,zero,2010210 <__sprint_r.part.0+0xec>
 201016c:	2827883a 	mov	r19,r5
 2010170:	2029883a 	mov	r20,r4
 2010174:	b5c00104 	addi	r23,r22,4
 2010178:	04bfffc4 	movi	r18,-1
 201017c:	bc400017 	ldw	r17,0(r23)
 2010180:	b4000017 	ldw	r16,0(r22)
 2010184:	0039883a 	mov	fp,zero
 2010188:	8822d0ba 	srli	r17,r17,2
 201018c:	8800031e 	bne	r17,zero,201019c <__sprint_r.part.0+0x78>
 2010190:	00001806 	br	20101f4 <__sprint_r.part.0+0xd0>
 2010194:	84000104 	addi	r16,r16,4
 2010198:	8f001526 	beq	r17,fp,20101f0 <__sprint_r.part.0+0xcc>
 201019c:	81400017 	ldw	r5,0(r16)
 20101a0:	980d883a 	mov	r6,r19
 20101a4:	a009883a 	mov	r4,r20
 20101a8:	2011a880 	call	2011a88 <_fputwc_r>
 20101ac:	e7000044 	addi	fp,fp,1
 20101b0:	14bff81e 	bne	r2,r18,2010194 <__alt_mem_epcs_flash_controller_0+0xfd00f194>
 20101b4:	9005883a 	mov	r2,r18
 20101b8:	a8000215 	stw	zero,8(r21)
 20101bc:	a8000115 	stw	zero,4(r21)
 20101c0:	dfc00917 	ldw	ra,36(sp)
 20101c4:	df000817 	ldw	fp,32(sp)
 20101c8:	ddc00717 	ldw	r23,28(sp)
 20101cc:	dd800617 	ldw	r22,24(sp)
 20101d0:	dd400517 	ldw	r21,20(sp)
 20101d4:	dd000417 	ldw	r20,16(sp)
 20101d8:	dcc00317 	ldw	r19,12(sp)
 20101dc:	dc800217 	ldw	r18,8(sp)
 20101e0:	dc400117 	ldw	r17,4(sp)
 20101e4:	dc000017 	ldw	r16,0(sp)
 20101e8:	dec00a04 	addi	sp,sp,40
 20101ec:	f800283a 	ret
 20101f0:	a8800217 	ldw	r2,8(r21)
 20101f4:	8c63883a 	add	r17,r17,r17
 20101f8:	8c63883a 	add	r17,r17,r17
 20101fc:	1445c83a 	sub	r2,r2,r17
 2010200:	a8800215 	stw	r2,8(r21)
 2010204:	b5800204 	addi	r22,r22,8
 2010208:	bdc00204 	addi	r23,r23,8
 201020c:	103fdb1e 	bne	r2,zero,201017c <__alt_mem_epcs_flash_controller_0+0xfd00f17c>
 2010210:	0005883a 	mov	r2,zero
 2010214:	003fe806 	br	20101b8 <__alt_mem_epcs_flash_controller_0+0xfd00f1b8>
 2010218:	200c93c0 	call	200c93c <__sfvwrite_r>
 201021c:	003fe606 	br	20101b8 <__alt_mem_epcs_flash_controller_0+0xfd00f1b8>

02010220 <__sprint_r>:
 2010220:	30c00217 	ldw	r3,8(r6)
 2010224:	18000126 	beq	r3,zero,201022c <__sprint_r+0xc>
 2010228:	20101241 	jmpi	2010124 <__sprint_r.part.0>
 201022c:	30000115 	stw	zero,4(r6)
 2010230:	0005883a 	mov	r2,zero
 2010234:	f800283a 	ret

02010238 <___vfiprintf_internal_r>:
 2010238:	deffc904 	addi	sp,sp,-220
 201023c:	df003515 	stw	fp,212(sp)
 2010240:	dd003115 	stw	r20,196(sp)
 2010244:	dfc03615 	stw	ra,216(sp)
 2010248:	ddc03415 	stw	r23,208(sp)
 201024c:	dd803315 	stw	r22,204(sp)
 2010250:	dd403215 	stw	r21,200(sp)
 2010254:	dcc03015 	stw	r19,192(sp)
 2010258:	dc802f15 	stw	r18,188(sp)
 201025c:	dc402e15 	stw	r17,184(sp)
 2010260:	dc002d15 	stw	r16,180(sp)
 2010264:	d9002015 	stw	r4,128(sp)
 2010268:	d9c02215 	stw	r7,136(sp)
 201026c:	2829883a 	mov	r20,r5
 2010270:	3039883a 	mov	fp,r6
 2010274:	20000226 	beq	r4,zero,2010280 <___vfiprintf_internal_r+0x48>
 2010278:	20800e17 	ldw	r2,56(r4)
 201027c:	1000cf26 	beq	r2,zero,20105bc <___vfiprintf_internal_r+0x384>
 2010280:	a080030b 	ldhu	r2,12(r20)
 2010284:	10c8000c 	andi	r3,r2,8192
 2010288:	1800061e 	bne	r3,zero,20102a4 <___vfiprintf_internal_r+0x6c>
 201028c:	a1001917 	ldw	r4,100(r20)
 2010290:	00f7ffc4 	movi	r3,-8193
 2010294:	10880014 	ori	r2,r2,8192
 2010298:	20c6703a 	and	r3,r4,r3
 201029c:	a080030d 	sth	r2,12(r20)
 20102a0:	a0c01915 	stw	r3,100(r20)
 20102a4:	10c0020c 	andi	r3,r2,8
 20102a8:	1800a926 	beq	r3,zero,2010550 <___vfiprintf_internal_r+0x318>
 20102ac:	a0c00417 	ldw	r3,16(r20)
 20102b0:	1800a726 	beq	r3,zero,2010550 <___vfiprintf_internal_r+0x318>
 20102b4:	1080068c 	andi	r2,r2,26
 20102b8:	00c00284 	movi	r3,10
 20102bc:	10c0ac26 	beq	r2,r3,2010570 <___vfiprintf_internal_r+0x338>
 20102c0:	da801a04 	addi	r10,sp,104
 20102c4:	da801e15 	stw	r10,120(sp)
 20102c8:	d8801e17 	ldw	r2,120(sp)
 20102cc:	da8019c4 	addi	r10,sp,103
 20102d0:	05808134 	movhi	r22,516
 20102d4:	05c08134 	movhi	r23,516
 20102d8:	da801f15 	stw	r10,124(sp)
 20102dc:	1295c83a 	sub	r10,r2,r10
 20102e0:	b5b15304 	addi	r22,r22,-15028
 20102e4:	bdf14f04 	addi	r23,r23,-15044
 20102e8:	dec01a15 	stw	sp,104(sp)
 20102ec:	d8001c15 	stw	zero,112(sp)
 20102f0:	d8001b15 	stw	zero,108(sp)
 20102f4:	d8002615 	stw	zero,152(sp)
 20102f8:	d8002315 	stw	zero,140(sp)
 20102fc:	da802715 	stw	r10,156(sp)
 2010300:	d811883a 	mov	r8,sp
 2010304:	dd002115 	stw	r20,132(sp)
 2010308:	e021883a 	mov	r16,fp
 201030c:	80800007 	ldb	r2,0(r16)
 2010310:	1003ea26 	beq	r2,zero,20112bc <___vfiprintf_internal_r+0x1084>
 2010314:	00c00944 	movi	r3,37
 2010318:	8025883a 	mov	r18,r16
 201031c:	10c0021e 	bne	r2,r3,2010328 <___vfiprintf_internal_r+0xf0>
 2010320:	00001606 	br	201037c <___vfiprintf_internal_r+0x144>
 2010324:	10c00326 	beq	r2,r3,2010334 <___vfiprintf_internal_r+0xfc>
 2010328:	94800044 	addi	r18,r18,1
 201032c:	90800007 	ldb	r2,0(r18)
 2010330:	103ffc1e 	bne	r2,zero,2010324 <__alt_mem_epcs_flash_controller_0+0xfd00f324>
 2010334:	9423c83a 	sub	r17,r18,r16
 2010338:	88001026 	beq	r17,zero,201037c <___vfiprintf_internal_r+0x144>
 201033c:	d8c01c17 	ldw	r3,112(sp)
 2010340:	d8801b17 	ldw	r2,108(sp)
 2010344:	44000015 	stw	r16,0(r8)
 2010348:	88c7883a 	add	r3,r17,r3
 201034c:	10800044 	addi	r2,r2,1
 2010350:	44400115 	stw	r17,4(r8)
 2010354:	d8c01c15 	stw	r3,112(sp)
 2010358:	d8801b15 	stw	r2,108(sp)
 201035c:	010001c4 	movi	r4,7
 2010360:	2080760e 	bge	r4,r2,201053c <___vfiprintf_internal_r+0x304>
 2010364:	1803821e 	bne	r3,zero,2011170 <___vfiprintf_internal_r+0xf38>
 2010368:	da802317 	ldw	r10,140(sp)
 201036c:	d8001b15 	stw	zero,108(sp)
 2010370:	d811883a 	mov	r8,sp
 2010374:	5455883a 	add	r10,r10,r17
 2010378:	da802315 	stw	r10,140(sp)
 201037c:	90800007 	ldb	r2,0(r18)
 2010380:	10044626 	beq	r2,zero,201149c <___vfiprintf_internal_r+0x1264>
 2010384:	90c00047 	ldb	r3,1(r18)
 2010388:	94000044 	addi	r16,r18,1
 201038c:	d8001d85 	stb	zero,118(sp)
 2010390:	0009883a 	mov	r4,zero
 2010394:	000f883a 	mov	r7,zero
 2010398:	027fffc4 	movi	r9,-1
 201039c:	0023883a 	mov	r17,zero
 20103a0:	0029883a 	mov	r20,zero
 20103a4:	01401604 	movi	r5,88
 20103a8:	01800244 	movi	r6,9
 20103ac:	03400a84 	movi	r13,42
 20103b0:	03001b04 	movi	r12,108
 20103b4:	84000044 	addi	r16,r16,1
 20103b8:	18bff804 	addi	r2,r3,-32
 20103bc:	28827336 	bltu	r5,r2,2010d8c <___vfiprintf_internal_r+0xb54>
 20103c0:	100490ba 	slli	r2,r2,2
 20103c4:	02808074 	movhi	r10,513
 20103c8:	5280f604 	addi	r10,r10,984
 20103cc:	1285883a 	add	r2,r2,r10
 20103d0:	10800017 	ldw	r2,0(r2)
 20103d4:	1000683a 	jmp	r2
 20103d8:	02010ac0 	call	2010ac <__alt_mem_sdram-0x1dfef54>
 20103dc:	02010d8c 	andi	r8,zero,1078
 20103e0:	02010d8c 	andi	r8,zero,1078
 20103e4:	02010ae0 	cmpeqi	r8,zero,1067
 20103e8:	02010d8c 	andi	r8,zero,1078
 20103ec:	02010d8c 	andi	r8,zero,1078
 20103f0:	02010d8c 	andi	r8,zero,1078
 20103f4:	02010d8c 	andi	r8,zero,1078
 20103f8:	02010d8c 	andi	r8,zero,1078
 20103fc:	02010d8c 	andi	r8,zero,1078
 2010400:	02010cc8 	cmpgei	r8,zero,1075
 2010404:	02010ce4 	muli	r8,zero,1075
 2010408:	02010d8c 	andi	r8,zero,1078
 201040c:	020105cc 	andi	r8,zero,1047
 2010410:	02010cf4 	movhi	r8,1075
 2010414:	02010d8c 	andi	r8,zero,1078
 2010418:	02010aec 	andhi	r8,zero,1067
 201041c:	02010af8 	rdprs	r8,zero,1067
 2010420:	02010af8 	rdprs	r8,zero,1067
 2010424:	02010af8 	rdprs	r8,zero,1067
 2010428:	02010af8 	rdprs	r8,zero,1067
 201042c:	02010af8 	rdprs	r8,zero,1067
 2010430:	02010af8 	rdprs	r8,zero,1067
 2010434:	02010af8 	rdprs	r8,zero,1067
 2010438:	02010af8 	rdprs	r8,zero,1067
 201043c:	02010af8 	rdprs	r8,zero,1067
 2010440:	02010d8c 	andi	r8,zero,1078
 2010444:	02010d8c 	andi	r8,zero,1078
 2010448:	02010d8c 	andi	r8,zero,1078
 201044c:	02010d8c 	andi	r8,zero,1078
 2010450:	02010d8c 	andi	r8,zero,1078
 2010454:	02010d8c 	andi	r8,zero,1078
 2010458:	02010d8c 	andi	r8,zero,1078
 201045c:	02010d8c 	andi	r8,zero,1078
 2010460:	02010d8c 	andi	r8,zero,1078
 2010464:	02010d8c 	andi	r8,zero,1078
 2010468:	02010b24 	muli	r8,zero,1068
 201046c:	02010d8c 	andi	r8,zero,1078
 2010470:	02010d8c 	andi	r8,zero,1078
 2010474:	02010d8c 	andi	r8,zero,1078
 2010478:	02010d8c 	andi	r8,zero,1078
 201047c:	02010d8c 	andi	r8,zero,1078
 2010480:	02010d8c 	andi	r8,zero,1078
 2010484:	02010d8c 	andi	r8,zero,1078
 2010488:	02010d8c 	andi	r8,zero,1078
 201048c:	02010d8c 	andi	r8,zero,1078
 2010490:	02010d8c 	andi	r8,zero,1078
 2010494:	02010b5c 	xori	r8,zero,1069
 2010498:	02010d8c 	andi	r8,zero,1078
 201049c:	02010d8c 	andi	r8,zero,1078
 20104a0:	02010d8c 	andi	r8,zero,1078
 20104a4:	02010d8c 	andi	r8,zero,1078
 20104a8:	02010d8c 	andi	r8,zero,1078
 20104ac:	02010bb4 	movhi	r8,1070
 20104b0:	02010d8c 	andi	r8,zero,1078
 20104b4:	02010d8c 	andi	r8,zero,1078
 20104b8:	02010c24 	muli	r8,zero,1072
 20104bc:	02010d8c 	andi	r8,zero,1078
 20104c0:	02010d8c 	andi	r8,zero,1078
 20104c4:	02010d8c 	andi	r8,zero,1078
 20104c8:	02010d8c 	andi	r8,zero,1078
 20104cc:	02010d8c 	andi	r8,zero,1078
 20104d0:	02010d8c 	andi	r8,zero,1078
 20104d4:	02010d8c 	andi	r8,zero,1078
 20104d8:	02010d8c 	andi	r8,zero,1078
 20104dc:	02010d8c 	andi	r8,zero,1078
 20104e0:	02010d8c 	andi	r8,zero,1078
 20104e4:	020109d0 	cmplti	r8,zero,1063
 20104e8:	020109fc 	xorhi	r8,zero,1063
 20104ec:	02010d8c 	andi	r8,zero,1078
 20104f0:	02010d8c 	andi	r8,zero,1078
 20104f4:	02010d8c 	andi	r8,zero,1078
 20104f8:	02010d34 	movhi	r8,1076
 20104fc:	020109fc 	xorhi	r8,zero,1063
 2010500:	02010d8c 	andi	r8,zero,1078
 2010504:	02010d8c 	andi	r8,zero,1078
 2010508:	02010890 	cmplti	r8,zero,1058
 201050c:	02010d8c 	andi	r8,zero,1078
 2010510:	020108a0 	cmpeqi	r8,zero,1058
 2010514:	020108dc 	xori	r8,zero,1059
 2010518:	020105d8 	cmpnei	r8,zero,1047
 201051c:	02010884 	movi	r8,1058
 2010520:	02010d8c 	andi	r8,zero,1078
 2010524:	02010c60 	cmpeqi	r8,zero,1073
 2010528:	02010d8c 	andi	r8,zero,1078
 201052c:	02010cb8 	rdprs	r8,zero,1074
 2010530:	02010d8c 	andi	r8,zero,1078
 2010534:	02010d8c 	andi	r8,zero,1078
 2010538:	0201097c 	xorhi	r8,zero,1061
 201053c:	42000204 	addi	r8,r8,8
 2010540:	da802317 	ldw	r10,140(sp)
 2010544:	5455883a 	add	r10,r10,r17
 2010548:	da802315 	stw	r10,140(sp)
 201054c:	003f8b06 	br	201037c <__alt_mem_epcs_flash_controller_0+0xfd00f37c>
 2010550:	d9002017 	ldw	r4,128(sp)
 2010554:	a00b883a 	mov	r5,r20
 2010558:	200a4e40 	call	200a4e4 <__swsetup_r>
 201055c:	1003b11e 	bne	r2,zero,2011424 <___vfiprintf_internal_r+0x11ec>
 2010560:	a080030b 	ldhu	r2,12(r20)
 2010564:	00c00284 	movi	r3,10
 2010568:	1080068c 	andi	r2,r2,26
 201056c:	10ff541e 	bne	r2,r3,20102c0 <__alt_mem_epcs_flash_controller_0+0xfd00f2c0>
 2010570:	a080038f 	ldh	r2,14(r20)
 2010574:	103f5216 	blt	r2,zero,20102c0 <__alt_mem_epcs_flash_controller_0+0xfd00f2c0>
 2010578:	d9c02217 	ldw	r7,136(sp)
 201057c:	d9002017 	ldw	r4,128(sp)
 2010580:	e00d883a 	mov	r6,fp
 2010584:	a00b883a 	mov	r5,r20
 2010588:	20116b00 	call	20116b0 <__sbprintf>
 201058c:	dfc03617 	ldw	ra,216(sp)
 2010590:	df003517 	ldw	fp,212(sp)
 2010594:	ddc03417 	ldw	r23,208(sp)
 2010598:	dd803317 	ldw	r22,204(sp)
 201059c:	dd403217 	ldw	r21,200(sp)
 20105a0:	dd003117 	ldw	r20,196(sp)
 20105a4:	dcc03017 	ldw	r19,192(sp)
 20105a8:	dc802f17 	ldw	r18,188(sp)
 20105ac:	dc402e17 	ldw	r17,184(sp)
 20105b0:	dc002d17 	ldw	r16,180(sp)
 20105b4:	dec03704 	addi	sp,sp,220
 20105b8:	f800283a 	ret
 20105bc:	200c4b80 	call	200c4b8 <__sinit>
 20105c0:	003f2f06 	br	2010280 <__alt_mem_epcs_flash_controller_0+0xfd00f280>
 20105c4:	0463c83a 	sub	r17,zero,r17
 20105c8:	d8802215 	stw	r2,136(sp)
 20105cc:	a5000114 	ori	r20,r20,4
 20105d0:	80c00007 	ldb	r3,0(r16)
 20105d4:	003f7706 	br	20103b4 <__alt_mem_epcs_flash_controller_0+0xfd00f3b4>
 20105d8:	00800c04 	movi	r2,48
 20105dc:	da802217 	ldw	r10,136(sp)
 20105e0:	d8801d05 	stb	r2,116(sp)
 20105e4:	00801e04 	movi	r2,120
 20105e8:	d8801d45 	stb	r2,117(sp)
 20105ec:	d8001d85 	stb	zero,118(sp)
 20105f0:	50c00104 	addi	r3,r10,4
 20105f4:	54800017 	ldw	r18,0(r10)
 20105f8:	0027883a 	mov	r19,zero
 20105fc:	a0800094 	ori	r2,r20,2
 2010600:	48030b16 	blt	r9,zero,2011230 <___vfiprintf_internal_r+0xff8>
 2010604:	00bfdfc4 	movi	r2,-129
 2010608:	a096703a 	and	r11,r20,r2
 201060c:	d8c02215 	stw	r3,136(sp)
 2010610:	5d000094 	ori	r20,r11,2
 2010614:	90032b1e 	bne	r18,zero,20112c4 <___vfiprintf_internal_r+0x108c>
 2010618:	00808134 	movhi	r2,516
 201061c:	10b0df04 	addi	r2,r2,-15492
 2010620:	d8802615 	stw	r2,152(sp)
 2010624:	0039883a 	mov	fp,zero
 2010628:	48017b1e 	bne	r9,zero,2010c18 <___vfiprintf_internal_r+0x9e0>
 201062c:	0013883a 	mov	r9,zero
 2010630:	0027883a 	mov	r19,zero
 2010634:	dd401a04 	addi	r21,sp,104
 2010638:	4825883a 	mov	r18,r9
 201063c:	4cc0010e 	bge	r9,r19,2010644 <___vfiprintf_internal_r+0x40c>
 2010640:	9825883a 	mov	r18,r19
 2010644:	e7003fcc 	andi	fp,fp,255
 2010648:	e700201c 	xori	fp,fp,128
 201064c:	e73fe004 	addi	fp,fp,-128
 2010650:	e0000126 	beq	fp,zero,2010658 <___vfiprintf_internal_r+0x420>
 2010654:	94800044 	addi	r18,r18,1
 2010658:	a380008c 	andi	r14,r20,2
 201065c:	70000126 	beq	r14,zero,2010664 <___vfiprintf_internal_r+0x42c>
 2010660:	94800084 	addi	r18,r18,2
 2010664:	a700210c 	andi	fp,r20,132
 2010668:	e001df1e 	bne	fp,zero,2010de8 <___vfiprintf_internal_r+0xbb0>
 201066c:	8c87c83a 	sub	r3,r17,r18
 2010670:	00c1dd0e 	bge	zero,r3,2010de8 <___vfiprintf_internal_r+0xbb0>
 2010674:	01c00404 	movi	r7,16
 2010678:	d8801c17 	ldw	r2,112(sp)
 201067c:	38c3ad0e 	bge	r7,r3,2011534 <___vfiprintf_internal_r+0x12fc>
 2010680:	02808134 	movhi	r10,516
 2010684:	52b15304 	addi	r10,r10,-15028
 2010688:	dc002915 	stw	r16,164(sp)
 201068c:	d9801b17 	ldw	r6,108(sp)
 2010690:	da802415 	stw	r10,144(sp)
 2010694:	03c001c4 	movi	r15,7
 2010698:	da402515 	stw	r9,148(sp)
 201069c:	db802815 	stw	r14,160(sp)
 20106a0:	1821883a 	mov	r16,r3
 20106a4:	00000506 	br	20106bc <___vfiprintf_internal_r+0x484>
 20106a8:	31400084 	addi	r5,r6,2
 20106ac:	42000204 	addi	r8,r8,8
 20106b0:	200d883a 	mov	r6,r4
 20106b4:	843ffc04 	addi	r16,r16,-16
 20106b8:	3c000d0e 	bge	r7,r16,20106f0 <___vfiprintf_internal_r+0x4b8>
 20106bc:	10800404 	addi	r2,r2,16
 20106c0:	31000044 	addi	r4,r6,1
 20106c4:	45800015 	stw	r22,0(r8)
 20106c8:	41c00115 	stw	r7,4(r8)
 20106cc:	d8801c15 	stw	r2,112(sp)
 20106d0:	d9001b15 	stw	r4,108(sp)
 20106d4:	793ff40e 	bge	r15,r4,20106a8 <__alt_mem_epcs_flash_controller_0+0xfd00f6a8>
 20106d8:	1001b51e 	bne	r2,zero,2010db0 <___vfiprintf_internal_r+0xb78>
 20106dc:	843ffc04 	addi	r16,r16,-16
 20106e0:	000d883a 	mov	r6,zero
 20106e4:	01400044 	movi	r5,1
 20106e8:	d811883a 	mov	r8,sp
 20106ec:	3c3ff316 	blt	r7,r16,20106bc <__alt_mem_epcs_flash_controller_0+0xfd00f6bc>
 20106f0:	8007883a 	mov	r3,r16
 20106f4:	da402517 	ldw	r9,148(sp)
 20106f8:	db802817 	ldw	r14,160(sp)
 20106fc:	dc002917 	ldw	r16,164(sp)
 2010700:	da802417 	ldw	r10,144(sp)
 2010704:	1885883a 	add	r2,r3,r2
 2010708:	40c00115 	stw	r3,4(r8)
 201070c:	42800015 	stw	r10,0(r8)
 2010710:	d8801c15 	stw	r2,112(sp)
 2010714:	d9401b15 	stw	r5,108(sp)
 2010718:	00c001c4 	movi	r3,7
 201071c:	19426016 	blt	r3,r5,20110a0 <___vfiprintf_internal_r+0xe68>
 2010720:	d8c01d87 	ldb	r3,118(sp)
 2010724:	42000204 	addi	r8,r8,8
 2010728:	29000044 	addi	r4,r5,1
 201072c:	1801b31e 	bne	r3,zero,2010dfc <___vfiprintf_internal_r+0xbc4>
 2010730:	7001c026 	beq	r14,zero,2010e34 <___vfiprintf_internal_r+0xbfc>
 2010734:	d8c01d04 	addi	r3,sp,116
 2010738:	10800084 	addi	r2,r2,2
 201073c:	40c00015 	stw	r3,0(r8)
 2010740:	00c00084 	movi	r3,2
 2010744:	40c00115 	stw	r3,4(r8)
 2010748:	d8801c15 	stw	r2,112(sp)
 201074c:	d9001b15 	stw	r4,108(sp)
 2010750:	00c001c4 	movi	r3,7
 2010754:	1902650e 	bge	r3,r4,20110ec <___vfiprintf_internal_r+0xeb4>
 2010758:	10029a1e 	bne	r2,zero,20111c4 <___vfiprintf_internal_r+0xf8c>
 201075c:	00c02004 	movi	r3,128
 2010760:	01000044 	movi	r4,1
 2010764:	000b883a 	mov	r5,zero
 2010768:	d811883a 	mov	r8,sp
 201076c:	e0c1b31e 	bne	fp,r3,2010e3c <___vfiprintf_internal_r+0xc04>
 2010770:	8cb9c83a 	sub	fp,r17,r18
 2010774:	0701b10e 	bge	zero,fp,2010e3c <___vfiprintf_internal_r+0xc04>
 2010778:	01c00404 	movi	r7,16
 201077c:	3f03890e 	bge	r7,fp,20115a4 <___vfiprintf_internal_r+0x136c>
 2010780:	00c08134 	movhi	r3,516
 2010784:	18f14f04 	addi	r3,r3,-15044
 2010788:	d8c02415 	stw	r3,144(sp)
 201078c:	8007883a 	mov	r3,r16
 2010790:	034001c4 	movi	r13,7
 2010794:	e021883a 	mov	r16,fp
 2010798:	da402515 	stw	r9,148(sp)
 201079c:	1839883a 	mov	fp,r3
 20107a0:	00000506 	br	20107b8 <___vfiprintf_internal_r+0x580>
 20107a4:	29800084 	addi	r6,r5,2
 20107a8:	42000204 	addi	r8,r8,8
 20107ac:	180b883a 	mov	r5,r3
 20107b0:	843ffc04 	addi	r16,r16,-16
 20107b4:	3c000d0e 	bge	r7,r16,20107ec <___vfiprintf_internal_r+0x5b4>
 20107b8:	10800404 	addi	r2,r2,16
 20107bc:	28c00044 	addi	r3,r5,1
 20107c0:	45c00015 	stw	r23,0(r8)
 20107c4:	41c00115 	stw	r7,4(r8)
 20107c8:	d8801c15 	stw	r2,112(sp)
 20107cc:	d8c01b15 	stw	r3,108(sp)
 20107d0:	68fff40e 	bge	r13,r3,20107a4 <__alt_mem_epcs_flash_controller_0+0xfd00f7a4>
 20107d4:	1002241e 	bne	r2,zero,2011068 <___vfiprintf_internal_r+0xe30>
 20107d8:	843ffc04 	addi	r16,r16,-16
 20107dc:	01800044 	movi	r6,1
 20107e0:	000b883a 	mov	r5,zero
 20107e4:	d811883a 	mov	r8,sp
 20107e8:	3c3ff316 	blt	r7,r16,20107b8 <__alt_mem_epcs_flash_controller_0+0xfd00f7b8>
 20107ec:	da402517 	ldw	r9,148(sp)
 20107f0:	e007883a 	mov	r3,fp
 20107f4:	8039883a 	mov	fp,r16
 20107f8:	1821883a 	mov	r16,r3
 20107fc:	d8c02417 	ldw	r3,144(sp)
 2010800:	1705883a 	add	r2,r2,fp
 2010804:	47000115 	stw	fp,4(r8)
 2010808:	40c00015 	stw	r3,0(r8)
 201080c:	d8801c15 	stw	r2,112(sp)
 2010810:	d9801b15 	stw	r6,108(sp)
 2010814:	00c001c4 	movi	r3,7
 2010818:	19827616 	blt	r3,r6,20111f4 <___vfiprintf_internal_r+0xfbc>
 201081c:	4cf9c83a 	sub	fp,r9,r19
 2010820:	42000204 	addi	r8,r8,8
 2010824:	31000044 	addi	r4,r6,1
 2010828:	300b883a 	mov	r5,r6
 201082c:	07018516 	blt	zero,fp,2010e44 <___vfiprintf_internal_r+0xc0c>
 2010830:	9885883a 	add	r2,r19,r2
 2010834:	45400015 	stw	r21,0(r8)
 2010838:	44c00115 	stw	r19,4(r8)
 201083c:	d8801c15 	stw	r2,112(sp)
 2010840:	d9001b15 	stw	r4,108(sp)
 2010844:	00c001c4 	movi	r3,7
 2010848:	1901dd0e 	bge	r3,r4,2010fc0 <___vfiprintf_internal_r+0xd88>
 201084c:	1002401e 	bne	r2,zero,2011150 <___vfiprintf_internal_r+0xf18>
 2010850:	d8001b15 	stw	zero,108(sp)
 2010854:	a2c0010c 	andi	r11,r20,4
 2010858:	58000226 	beq	r11,zero,2010864 <___vfiprintf_internal_r+0x62c>
 201085c:	8ca7c83a 	sub	r19,r17,r18
 2010860:	04c2f216 	blt	zero,r19,201142c <___vfiprintf_internal_r+0x11f4>
 2010864:	8c80010e 	bge	r17,r18,201086c <___vfiprintf_internal_r+0x634>
 2010868:	9023883a 	mov	r17,r18
 201086c:	da802317 	ldw	r10,140(sp)
 2010870:	5455883a 	add	r10,r10,r17
 2010874:	da802315 	stw	r10,140(sp)
 2010878:	d8001b15 	stw	zero,108(sp)
 201087c:	d811883a 	mov	r8,sp
 2010880:	003ea206 	br	201030c <__alt_mem_epcs_flash_controller_0+0xfd00f30c>
 2010884:	a5000814 	ori	r20,r20,32
 2010888:	80c00007 	ldb	r3,0(r16)
 201088c:	003ec906 	br	20103b4 <__alt_mem_epcs_flash_controller_0+0xfd00f3b4>
 2010890:	80c00007 	ldb	r3,0(r16)
 2010894:	1b030926 	beq	r3,r12,20114bc <___vfiprintf_internal_r+0x1284>
 2010898:	a5000414 	ori	r20,r20,16
 201089c:	003ec506 	br	20103b4 <__alt_mem_epcs_flash_controller_0+0xfd00f3b4>
 20108a0:	21003fcc 	andi	r4,r4,255
 20108a4:	20035e1e 	bne	r4,zero,2011620 <___vfiprintf_internal_r+0x13e8>
 20108a8:	a080080c 	andi	r2,r20,32
 20108ac:	1002a526 	beq	r2,zero,2011344 <___vfiprintf_internal_r+0x110c>
 20108b0:	da802217 	ldw	r10,136(sp)
 20108b4:	50800017 	ldw	r2,0(r10)
 20108b8:	da802317 	ldw	r10,140(sp)
 20108bc:	5007d7fa 	srai	r3,r10,31
 20108c0:	da802217 	ldw	r10,136(sp)
 20108c4:	10c00115 	stw	r3,4(r2)
 20108c8:	52800104 	addi	r10,r10,4
 20108cc:	da802215 	stw	r10,136(sp)
 20108d0:	da802317 	ldw	r10,140(sp)
 20108d4:	12800015 	stw	r10,0(r2)
 20108d8:	003e8c06 	br	201030c <__alt_mem_epcs_flash_controller_0+0xfd00f30c>
 20108dc:	21003fcc 	andi	r4,r4,255
 20108e0:	2003511e 	bne	r4,zero,2011628 <___vfiprintf_internal_r+0x13f0>
 20108e4:	a080080c 	andi	r2,r20,32
 20108e8:	1000a126 	beq	r2,zero,2010b70 <___vfiprintf_internal_r+0x938>
 20108ec:	da802217 	ldw	r10,136(sp)
 20108f0:	d8001d85 	stb	zero,118(sp)
 20108f4:	50800204 	addi	r2,r10,8
 20108f8:	54800017 	ldw	r18,0(r10)
 20108fc:	54c00117 	ldw	r19,4(r10)
 2010900:	4802b416 	blt	r9,zero,20113d4 <___vfiprintf_internal_r+0x119c>
 2010904:	013fdfc4 	movi	r4,-129
 2010908:	94c6b03a 	or	r3,r18,r19
 201090c:	d8802215 	stw	r2,136(sp)
 2010910:	a128703a 	and	r20,r20,r4
 2010914:	1800a226 	beq	r3,zero,2010ba0 <___vfiprintf_internal_r+0x968>
 2010918:	0039883a 	mov	fp,zero
 201091c:	dd401a04 	addi	r21,sp,104
 2010920:	9006d0fa 	srli	r3,r18,3
 2010924:	9808977a 	slli	r4,r19,29
 2010928:	9826d0fa 	srli	r19,r19,3
 201092c:	948001cc 	andi	r18,r18,7
 2010930:	90800c04 	addi	r2,r18,48
 2010934:	ad7fffc4 	addi	r21,r21,-1
 2010938:	20e4b03a 	or	r18,r4,r3
 201093c:	a8800005 	stb	r2,0(r21)
 2010940:	94c6b03a 	or	r3,r18,r19
 2010944:	183ff61e 	bne	r3,zero,2010920 <__alt_mem_epcs_flash_controller_0+0xfd00f920>
 2010948:	a0c0004c 	andi	r3,r20,1
 201094c:	18005926 	beq	r3,zero,2010ab4 <___vfiprintf_internal_r+0x87c>
 2010950:	10803fcc 	andi	r2,r2,255
 2010954:	1080201c 	xori	r2,r2,128
 2010958:	10bfe004 	addi	r2,r2,-128
 201095c:	00c00c04 	movi	r3,48
 2010960:	10c05426 	beq	r2,r3,2010ab4 <___vfiprintf_internal_r+0x87c>
 2010964:	da801e17 	ldw	r10,120(sp)
 2010968:	a8bfffc4 	addi	r2,r21,-1
 201096c:	a8ffffc5 	stb	r3,-1(r21)
 2010970:	50a7c83a 	sub	r19,r10,r2
 2010974:	102b883a 	mov	r21,r2
 2010978:	003f2f06 	br	2010638 <__alt_mem_epcs_flash_controller_0+0xfd00f638>
 201097c:	21003fcc 	andi	r4,r4,255
 2010980:	2003421e 	bne	r4,zero,201168c <___vfiprintf_internal_r+0x1454>
 2010984:	00808134 	movhi	r2,516
 2010988:	10b0df04 	addi	r2,r2,-15492
 201098c:	d8802615 	stw	r2,152(sp)
 2010990:	a080080c 	andi	r2,r20,32
 2010994:	1000aa26 	beq	r2,zero,2010c40 <___vfiprintf_internal_r+0xa08>
 2010998:	da802217 	ldw	r10,136(sp)
 201099c:	54800017 	ldw	r18,0(r10)
 20109a0:	54c00117 	ldw	r19,4(r10)
 20109a4:	52800204 	addi	r10,r10,8
 20109a8:	da802215 	stw	r10,136(sp)
 20109ac:	a080004c 	andi	r2,r20,1
 20109b0:	1001d226 	beq	r2,zero,20110fc <___vfiprintf_internal_r+0xec4>
 20109b4:	94c4b03a 	or	r2,r18,r19
 20109b8:	1002351e 	bne	r2,zero,2011290 <___vfiprintf_internal_r+0x1058>
 20109bc:	d8001d85 	stb	zero,118(sp)
 20109c0:	48022216 	blt	r9,zero,201124c <___vfiprintf_internal_r+0x1014>
 20109c4:	00bfdfc4 	movi	r2,-129
 20109c8:	a0a8703a 	and	r20,r20,r2
 20109cc:	003f1506 	br	2010624 <__alt_mem_epcs_flash_controller_0+0xfd00f624>
 20109d0:	da802217 	ldw	r10,136(sp)
 20109d4:	04800044 	movi	r18,1
 20109d8:	d8001d85 	stb	zero,118(sp)
 20109dc:	50800017 	ldw	r2,0(r10)
 20109e0:	52800104 	addi	r10,r10,4
 20109e4:	da802215 	stw	r10,136(sp)
 20109e8:	d8801005 	stb	r2,64(sp)
 20109ec:	9027883a 	mov	r19,r18
 20109f0:	dd401004 	addi	r21,sp,64
 20109f4:	0013883a 	mov	r9,zero
 20109f8:	003f1706 	br	2010658 <__alt_mem_epcs_flash_controller_0+0xfd00f658>
 20109fc:	21003fcc 	andi	r4,r4,255
 2010a00:	2003201e 	bne	r4,zero,2011684 <___vfiprintf_internal_r+0x144c>
 2010a04:	a080080c 	andi	r2,r20,32
 2010a08:	10004b26 	beq	r2,zero,2010b38 <___vfiprintf_internal_r+0x900>
 2010a0c:	da802217 	ldw	r10,136(sp)
 2010a10:	50800117 	ldw	r2,4(r10)
 2010a14:	54800017 	ldw	r18,0(r10)
 2010a18:	52800204 	addi	r10,r10,8
 2010a1c:	da802215 	stw	r10,136(sp)
 2010a20:	1027883a 	mov	r19,r2
 2010a24:	10022c16 	blt	r2,zero,20112d8 <___vfiprintf_internal_r+0x10a0>
 2010a28:	df001d83 	ldbu	fp,118(sp)
 2010a2c:	48007216 	blt	r9,zero,2010bf8 <___vfiprintf_internal_r+0x9c0>
 2010a30:	00ffdfc4 	movi	r3,-129
 2010a34:	94c4b03a 	or	r2,r18,r19
 2010a38:	a0e8703a 	and	r20,r20,r3
 2010a3c:	1000cc26 	beq	r2,zero,2010d70 <___vfiprintf_internal_r+0xb38>
 2010a40:	98021026 	beq	r19,zero,2011284 <___vfiprintf_internal_r+0x104c>
 2010a44:	dc402415 	stw	r17,144(sp)
 2010a48:	dc002515 	stw	r16,148(sp)
 2010a4c:	9823883a 	mov	r17,r19
 2010a50:	9021883a 	mov	r16,r18
 2010a54:	dd401a04 	addi	r21,sp,104
 2010a58:	4825883a 	mov	r18,r9
 2010a5c:	4027883a 	mov	r19,r8
 2010a60:	8009883a 	mov	r4,r16
 2010a64:	880b883a 	mov	r5,r17
 2010a68:	01800284 	movi	r6,10
 2010a6c:	000f883a 	mov	r7,zero
 2010a70:	20125b40 	call	20125b4 <__umoddi3>
 2010a74:	10800c04 	addi	r2,r2,48
 2010a78:	ad7fffc4 	addi	r21,r21,-1
 2010a7c:	8009883a 	mov	r4,r16
 2010a80:	880b883a 	mov	r5,r17
 2010a84:	a8800005 	stb	r2,0(r21)
 2010a88:	01800284 	movi	r6,10
 2010a8c:	000f883a 	mov	r7,zero
 2010a90:	201203c0 	call	201203c <__udivdi3>
 2010a94:	1021883a 	mov	r16,r2
 2010a98:	10c4b03a 	or	r2,r2,r3
 2010a9c:	1823883a 	mov	r17,r3
 2010aa0:	103fef1e 	bne	r2,zero,2010a60 <__alt_mem_epcs_flash_controller_0+0xfd00fa60>
 2010aa4:	dc402417 	ldw	r17,144(sp)
 2010aa8:	dc002517 	ldw	r16,148(sp)
 2010aac:	9013883a 	mov	r9,r18
 2010ab0:	9811883a 	mov	r8,r19
 2010ab4:	da801e17 	ldw	r10,120(sp)
 2010ab8:	5567c83a 	sub	r19,r10,r21
 2010abc:	003ede06 	br	2010638 <__alt_mem_epcs_flash_controller_0+0xfd00f638>
 2010ac0:	38803fcc 	andi	r2,r7,255
 2010ac4:	1080201c 	xori	r2,r2,128
 2010ac8:	10bfe004 	addi	r2,r2,-128
 2010acc:	1002371e 	bne	r2,zero,20113ac <___vfiprintf_internal_r+0x1174>
 2010ad0:	01000044 	movi	r4,1
 2010ad4:	01c00804 	movi	r7,32
 2010ad8:	80c00007 	ldb	r3,0(r16)
 2010adc:	003e3506 	br	20103b4 <__alt_mem_epcs_flash_controller_0+0xfd00f3b4>
 2010ae0:	a5000054 	ori	r20,r20,1
 2010ae4:	80c00007 	ldb	r3,0(r16)
 2010ae8:	003e3206 	br	20103b4 <__alt_mem_epcs_flash_controller_0+0xfd00f3b4>
 2010aec:	a5002014 	ori	r20,r20,128
 2010af0:	80c00007 	ldb	r3,0(r16)
 2010af4:	003e2f06 	br	20103b4 <__alt_mem_epcs_flash_controller_0+0xfd00f3b4>
 2010af8:	8015883a 	mov	r10,r16
 2010afc:	0023883a 	mov	r17,zero
 2010b00:	18bff404 	addi	r2,r3,-48
 2010b04:	50c00007 	ldb	r3,0(r10)
 2010b08:	8c4002a4 	muli	r17,r17,10
 2010b0c:	84000044 	addi	r16,r16,1
 2010b10:	8015883a 	mov	r10,r16
 2010b14:	1463883a 	add	r17,r2,r17
 2010b18:	18bff404 	addi	r2,r3,-48
 2010b1c:	30bff92e 	bgeu	r6,r2,2010b04 <__alt_mem_epcs_flash_controller_0+0xfd00fb04>
 2010b20:	003e2506 	br	20103b8 <__alt_mem_epcs_flash_controller_0+0xfd00f3b8>
 2010b24:	21003fcc 	andi	r4,r4,255
 2010b28:	2002d41e 	bne	r4,zero,201167c <___vfiprintf_internal_r+0x1444>
 2010b2c:	a5000414 	ori	r20,r20,16
 2010b30:	a080080c 	andi	r2,r20,32
 2010b34:	103fb51e 	bne	r2,zero,2010a0c <__alt_mem_epcs_flash_controller_0+0xfd00fa0c>
 2010b38:	a080040c 	andi	r2,r20,16
 2010b3c:	1001f826 	beq	r2,zero,2011320 <___vfiprintf_internal_r+0x10e8>
 2010b40:	da802217 	ldw	r10,136(sp)
 2010b44:	54800017 	ldw	r18,0(r10)
 2010b48:	52800104 	addi	r10,r10,4
 2010b4c:	da802215 	stw	r10,136(sp)
 2010b50:	9027d7fa 	srai	r19,r18,31
 2010b54:	9805883a 	mov	r2,r19
 2010b58:	003fb206 	br	2010a24 <__alt_mem_epcs_flash_controller_0+0xfd00fa24>
 2010b5c:	21003fcc 	andi	r4,r4,255
 2010b60:	2002c41e 	bne	r4,zero,2011674 <___vfiprintf_internal_r+0x143c>
 2010b64:	a5000414 	ori	r20,r20,16
 2010b68:	a080080c 	andi	r2,r20,32
 2010b6c:	103f5f1e 	bne	r2,zero,20108ec <__alt_mem_epcs_flash_controller_0+0xfd00f8ec>
 2010b70:	a080040c 	andi	r2,r20,16
 2010b74:	10020f26 	beq	r2,zero,20113b4 <___vfiprintf_internal_r+0x117c>
 2010b78:	da802217 	ldw	r10,136(sp)
 2010b7c:	d8001d85 	stb	zero,118(sp)
 2010b80:	0027883a 	mov	r19,zero
 2010b84:	50800104 	addi	r2,r10,4
 2010b88:	54800017 	ldw	r18,0(r10)
 2010b8c:	48021116 	blt	r9,zero,20113d4 <___vfiprintf_internal_r+0x119c>
 2010b90:	00ffdfc4 	movi	r3,-129
 2010b94:	d8802215 	stw	r2,136(sp)
 2010b98:	a0e8703a 	and	r20,r20,r3
 2010b9c:	903f5e1e 	bne	r18,zero,2010918 <__alt_mem_epcs_flash_controller_0+0xfd00f918>
 2010ba0:	0039883a 	mov	fp,zero
 2010ba4:	4802a626 	beq	r9,zero,2011640 <___vfiprintf_internal_r+0x1408>
 2010ba8:	0025883a 	mov	r18,zero
 2010bac:	0027883a 	mov	r19,zero
 2010bb0:	003f5a06 	br	201091c <__alt_mem_epcs_flash_controller_0+0xfd00f91c>
 2010bb4:	21003fcc 	andi	r4,r4,255
 2010bb8:	20029f1e 	bne	r4,zero,2011638 <___vfiprintf_internal_r+0x1400>
 2010bbc:	a5000414 	ori	r20,r20,16
 2010bc0:	a080080c 	andi	r2,r20,32
 2010bc4:	10005e1e 	bne	r2,zero,2010d40 <___vfiprintf_internal_r+0xb08>
 2010bc8:	a080040c 	andi	r2,r20,16
 2010bcc:	1001a21e 	bne	r2,zero,2011258 <___vfiprintf_internal_r+0x1020>
 2010bd0:	a080100c 	andi	r2,r20,64
 2010bd4:	d8001d85 	stb	zero,118(sp)
 2010bd8:	da802217 	ldw	r10,136(sp)
 2010bdc:	1002231e 	bne	r2,zero,201146c <___vfiprintf_internal_r+0x1234>
 2010be0:	50800104 	addi	r2,r10,4
 2010be4:	54800017 	ldw	r18,0(r10)
 2010be8:	0027883a 	mov	r19,zero
 2010bec:	4801a00e 	bge	r9,zero,2011270 <___vfiprintf_internal_r+0x1038>
 2010bf0:	d8802215 	stw	r2,136(sp)
 2010bf4:	0039883a 	mov	fp,zero
 2010bf8:	94c4b03a 	or	r2,r18,r19
 2010bfc:	103f901e 	bne	r2,zero,2010a40 <__alt_mem_epcs_flash_controller_0+0xfd00fa40>
 2010c00:	00800044 	movi	r2,1
 2010c04:	10803fcc 	andi	r2,r2,255
 2010c08:	00c00044 	movi	r3,1
 2010c0c:	10c05926 	beq	r2,r3,2010d74 <___vfiprintf_internal_r+0xb3c>
 2010c10:	00c00084 	movi	r3,2
 2010c14:	10ffe41e 	bne	r2,r3,2010ba8 <__alt_mem_epcs_flash_controller_0+0xfd00fba8>
 2010c18:	0025883a 	mov	r18,zero
 2010c1c:	0027883a 	mov	r19,zero
 2010c20:	00013d06 	br	2011118 <___vfiprintf_internal_r+0xee0>
 2010c24:	21003fcc 	andi	r4,r4,255
 2010c28:	2002811e 	bne	r4,zero,2011630 <___vfiprintf_internal_r+0x13f8>
 2010c2c:	00808134 	movhi	r2,516
 2010c30:	10b0da04 	addi	r2,r2,-15512
 2010c34:	d8802615 	stw	r2,152(sp)
 2010c38:	a080080c 	andi	r2,r20,32
 2010c3c:	103f561e 	bne	r2,zero,2010998 <__alt_mem_epcs_flash_controller_0+0xfd00f998>
 2010c40:	a080040c 	andi	r2,r20,16
 2010c44:	1001d126 	beq	r2,zero,201138c <___vfiprintf_internal_r+0x1154>
 2010c48:	da802217 	ldw	r10,136(sp)
 2010c4c:	0027883a 	mov	r19,zero
 2010c50:	54800017 	ldw	r18,0(r10)
 2010c54:	52800104 	addi	r10,r10,4
 2010c58:	da802215 	stw	r10,136(sp)
 2010c5c:	003f5306 	br	20109ac <__alt_mem_epcs_flash_controller_0+0xfd00f9ac>
 2010c60:	da802217 	ldw	r10,136(sp)
 2010c64:	d8001d85 	stb	zero,118(sp)
 2010c68:	55400017 	ldw	r21,0(r10)
 2010c6c:	50c00104 	addi	r3,r10,4
 2010c70:	a8024226 	beq	r21,zero,201157c <___vfiprintf_internal_r+0x1344>
 2010c74:	48021816 	blt	r9,zero,20114d8 <___vfiprintf_internal_r+0x12a0>
 2010c78:	480d883a 	mov	r6,r9
 2010c7c:	000b883a 	mov	r5,zero
 2010c80:	a809883a 	mov	r4,r21
 2010c84:	d8c02a15 	stw	r3,168(sp)
 2010c88:	da002b15 	stw	r8,172(sp)
 2010c8c:	da402c15 	stw	r9,176(sp)
 2010c90:	200d2180 	call	200d218 <memchr>
 2010c94:	d8c02a17 	ldw	r3,168(sp)
 2010c98:	da002b17 	ldw	r8,172(sp)
 2010c9c:	da402c17 	ldw	r9,176(sp)
 2010ca0:	10024826 	beq	r2,zero,20115c4 <___vfiprintf_internal_r+0x138c>
 2010ca4:	1567c83a 	sub	r19,r2,r21
 2010ca8:	df001d83 	ldbu	fp,118(sp)
 2010cac:	d8c02215 	stw	r3,136(sp)
 2010cb0:	0013883a 	mov	r9,zero
 2010cb4:	003e6006 	br	2010638 <__alt_mem_epcs_flash_controller_0+0xfd00f638>
 2010cb8:	21003fcc 	andi	r4,r4,255
 2010cbc:	203fc026 	beq	r4,zero,2010bc0 <__alt_mem_epcs_flash_controller_0+0xfd00fbc0>
 2010cc0:	d9c01d85 	stb	r7,118(sp)
 2010cc4:	003fbe06 	br	2010bc0 <__alt_mem_epcs_flash_controller_0+0xfd00fbc0>
 2010cc8:	da802217 	ldw	r10,136(sp)
 2010ccc:	54400017 	ldw	r17,0(r10)
 2010cd0:	50800104 	addi	r2,r10,4
 2010cd4:	883e3b16 	blt	r17,zero,20105c4 <__alt_mem_epcs_flash_controller_0+0xfd00f5c4>
 2010cd8:	d8802215 	stw	r2,136(sp)
 2010cdc:	80c00007 	ldb	r3,0(r16)
 2010ce0:	003db406 	br	20103b4 <__alt_mem_epcs_flash_controller_0+0xfd00f3b4>
 2010ce4:	01000044 	movi	r4,1
 2010ce8:	01c00ac4 	movi	r7,43
 2010cec:	80c00007 	ldb	r3,0(r16)
 2010cf0:	003db006 	br	20103b4 <__alt_mem_epcs_flash_controller_0+0xfd00f3b4>
 2010cf4:	80c00007 	ldb	r3,0(r16)
 2010cf8:	82800044 	addi	r10,r16,1
 2010cfc:	1b423c26 	beq	r3,r13,20115f0 <___vfiprintf_internal_r+0x13b8>
 2010d00:	18bff404 	addi	r2,r3,-48
 2010d04:	0013883a 	mov	r9,zero
 2010d08:	30822b36 	bltu	r6,r2,20115b8 <___vfiprintf_internal_r+0x1380>
 2010d0c:	50c00007 	ldb	r3,0(r10)
 2010d10:	4a4002a4 	muli	r9,r9,10
 2010d14:	54000044 	addi	r16,r10,1
 2010d18:	8015883a 	mov	r10,r16
 2010d1c:	4893883a 	add	r9,r9,r2
 2010d20:	18bff404 	addi	r2,r3,-48
 2010d24:	30bff92e 	bgeu	r6,r2,2010d0c <__alt_mem_epcs_flash_controller_0+0xfd00fd0c>
 2010d28:	483da30e 	bge	r9,zero,20103b8 <__alt_mem_epcs_flash_controller_0+0xfd00f3b8>
 2010d2c:	027fffc4 	movi	r9,-1
 2010d30:	003da106 	br	20103b8 <__alt_mem_epcs_flash_controller_0+0xfd00f3b8>
 2010d34:	a5001014 	ori	r20,r20,64
 2010d38:	80c00007 	ldb	r3,0(r16)
 2010d3c:	003d9d06 	br	20103b4 <__alt_mem_epcs_flash_controller_0+0xfd00f3b4>
 2010d40:	da802217 	ldw	r10,136(sp)
 2010d44:	d8001d85 	stb	zero,118(sp)
 2010d48:	50c00204 	addi	r3,r10,8
 2010d4c:	54800017 	ldw	r18,0(r10)
 2010d50:	54c00117 	ldw	r19,4(r10)
 2010d54:	4801ca16 	blt	r9,zero,2011480 <___vfiprintf_internal_r+0x1248>
 2010d58:	013fdfc4 	movi	r4,-129
 2010d5c:	94c4b03a 	or	r2,r18,r19
 2010d60:	d8c02215 	stw	r3,136(sp)
 2010d64:	a128703a 	and	r20,r20,r4
 2010d68:	0039883a 	mov	fp,zero
 2010d6c:	103f341e 	bne	r2,zero,2010a40 <__alt_mem_epcs_flash_controller_0+0xfd00fa40>
 2010d70:	483e2e26 	beq	r9,zero,201062c <__alt_mem_epcs_flash_controller_0+0xfd00f62c>
 2010d74:	0025883a 	mov	r18,zero
 2010d78:	94800c04 	addi	r18,r18,48
 2010d7c:	dc8019c5 	stb	r18,103(sp)
 2010d80:	dcc02717 	ldw	r19,156(sp)
 2010d84:	dd4019c4 	addi	r21,sp,103
 2010d88:	003e2b06 	br	2010638 <__alt_mem_epcs_flash_controller_0+0xfd00f638>
 2010d8c:	21003fcc 	andi	r4,r4,255
 2010d90:	2002361e 	bne	r4,zero,201166c <___vfiprintf_internal_r+0x1434>
 2010d94:	1801c126 	beq	r3,zero,201149c <___vfiprintf_internal_r+0x1264>
 2010d98:	04800044 	movi	r18,1
 2010d9c:	d8c01005 	stb	r3,64(sp)
 2010da0:	d8001d85 	stb	zero,118(sp)
 2010da4:	9027883a 	mov	r19,r18
 2010da8:	dd401004 	addi	r21,sp,64
 2010dac:	003f1106 	br	20109f4 <__alt_mem_epcs_flash_controller_0+0xfd00f9f4>
 2010db0:	d9402117 	ldw	r5,132(sp)
 2010db4:	d9002017 	ldw	r4,128(sp)
 2010db8:	d9801a04 	addi	r6,sp,104
 2010dbc:	d9c02b15 	stw	r7,172(sp)
 2010dc0:	dbc02a15 	stw	r15,168(sp)
 2010dc4:	20101240 	call	2010124 <__sprint_r.part.0>
 2010dc8:	d9c02b17 	ldw	r7,172(sp)
 2010dcc:	dbc02a17 	ldw	r15,168(sp)
 2010dd0:	10006d1e 	bne	r2,zero,2010f88 <___vfiprintf_internal_r+0xd50>
 2010dd4:	d9801b17 	ldw	r6,108(sp)
 2010dd8:	d8801c17 	ldw	r2,112(sp)
 2010ddc:	d811883a 	mov	r8,sp
 2010de0:	31400044 	addi	r5,r6,1
 2010de4:	003e3306 	br	20106b4 <__alt_mem_epcs_flash_controller_0+0xfd00f6b4>
 2010de8:	d9401b17 	ldw	r5,108(sp)
 2010dec:	d8801c17 	ldw	r2,112(sp)
 2010df0:	29000044 	addi	r4,r5,1
 2010df4:	d8c01d87 	ldb	r3,118(sp)
 2010df8:	183e4d26 	beq	r3,zero,2010730 <__alt_mem_epcs_flash_controller_0+0xfd00f730>
 2010dfc:	00c00044 	movi	r3,1
 2010e00:	d9401d84 	addi	r5,sp,118
 2010e04:	10c5883a 	add	r2,r2,r3
 2010e08:	41400015 	stw	r5,0(r8)
 2010e0c:	40c00115 	stw	r3,4(r8)
 2010e10:	d8801c15 	stw	r2,112(sp)
 2010e14:	d9001b15 	stw	r4,108(sp)
 2010e18:	014001c4 	movi	r5,7
 2010e1c:	2900a90e 	bge	r5,r4,20110c4 <___vfiprintf_internal_r+0xe8c>
 2010e20:	1000da1e 	bne	r2,zero,201118c <___vfiprintf_internal_r+0xf54>
 2010e24:	7000ab1e 	bne	r14,zero,20110d4 <___vfiprintf_internal_r+0xe9c>
 2010e28:	000b883a 	mov	r5,zero
 2010e2c:	1809883a 	mov	r4,r3
 2010e30:	d811883a 	mov	r8,sp
 2010e34:	00c02004 	movi	r3,128
 2010e38:	e0fe4d26 	beq	fp,r3,2010770 <__alt_mem_epcs_flash_controller_0+0xfd00f770>
 2010e3c:	4cf9c83a 	sub	fp,r9,r19
 2010e40:	073e7b0e 	bge	zero,fp,2010830 <__alt_mem_epcs_flash_controller_0+0xfd00f830>
 2010e44:	01c00404 	movi	r7,16
 2010e48:	3f01900e 	bge	r7,fp,201148c <___vfiprintf_internal_r+0x1254>
 2010e4c:	00c08134 	movhi	r3,516
 2010e50:	18f14f04 	addi	r3,r3,-15044
 2010e54:	d8c02415 	stw	r3,144(sp)
 2010e58:	034001c4 	movi	r13,7
 2010e5c:	00000506 	br	2010e74 <___vfiprintf_internal_r+0xc3c>
 2010e60:	29000084 	addi	r4,r5,2
 2010e64:	42000204 	addi	r8,r8,8
 2010e68:	180b883a 	mov	r5,r3
 2010e6c:	e73ffc04 	addi	fp,fp,-16
 2010e70:	3f000d0e 	bge	r7,fp,2010ea8 <___vfiprintf_internal_r+0xc70>
 2010e74:	10800404 	addi	r2,r2,16
 2010e78:	28c00044 	addi	r3,r5,1
 2010e7c:	45c00015 	stw	r23,0(r8)
 2010e80:	41c00115 	stw	r7,4(r8)
 2010e84:	d8801c15 	stw	r2,112(sp)
 2010e88:	d8c01b15 	stw	r3,108(sp)
 2010e8c:	68fff40e 	bge	r13,r3,2010e60 <__alt_mem_epcs_flash_controller_0+0xfd00fe60>
 2010e90:	1000101e 	bne	r2,zero,2010ed4 <___vfiprintf_internal_r+0xc9c>
 2010e94:	e73ffc04 	addi	fp,fp,-16
 2010e98:	01000044 	movi	r4,1
 2010e9c:	000b883a 	mov	r5,zero
 2010ea0:	d811883a 	mov	r8,sp
 2010ea4:	3f3ff316 	blt	r7,fp,2010e74 <__alt_mem_epcs_flash_controller_0+0xfd00fe74>
 2010ea8:	da802417 	ldw	r10,144(sp)
 2010eac:	1705883a 	add	r2,r2,fp
 2010eb0:	47000115 	stw	fp,4(r8)
 2010eb4:	42800015 	stw	r10,0(r8)
 2010eb8:	d8801c15 	stw	r2,112(sp)
 2010ebc:	d9001b15 	stw	r4,108(sp)
 2010ec0:	00c001c4 	movi	r3,7
 2010ec4:	19003616 	blt	r3,r4,2010fa0 <___vfiprintf_internal_r+0xd68>
 2010ec8:	42000204 	addi	r8,r8,8
 2010ecc:	21000044 	addi	r4,r4,1
 2010ed0:	003e5706 	br	2010830 <__alt_mem_epcs_flash_controller_0+0xfd00f830>
 2010ed4:	d9402117 	ldw	r5,132(sp)
 2010ed8:	d9002017 	ldw	r4,128(sp)
 2010edc:	d9801a04 	addi	r6,sp,104
 2010ee0:	d9c02b15 	stw	r7,172(sp)
 2010ee4:	db402a15 	stw	r13,168(sp)
 2010ee8:	20101240 	call	2010124 <__sprint_r.part.0>
 2010eec:	d9c02b17 	ldw	r7,172(sp)
 2010ef0:	db402a17 	ldw	r13,168(sp)
 2010ef4:	1000241e 	bne	r2,zero,2010f88 <___vfiprintf_internal_r+0xd50>
 2010ef8:	d9401b17 	ldw	r5,108(sp)
 2010efc:	d8801c17 	ldw	r2,112(sp)
 2010f00:	d811883a 	mov	r8,sp
 2010f04:	29000044 	addi	r4,r5,1
 2010f08:	003fd806 	br	2010e6c <__alt_mem_epcs_flash_controller_0+0xfd00fe6c>
 2010f0c:	d9401b17 	ldw	r5,108(sp)
 2010f10:	00c08134 	movhi	r3,516
 2010f14:	18f15304 	addi	r3,r3,-15028
 2010f18:	d8c02415 	stw	r3,144(sp)
 2010f1c:	29400044 	addi	r5,r5,1
 2010f20:	d8c02417 	ldw	r3,144(sp)
 2010f24:	14c5883a 	add	r2,r2,r19
 2010f28:	44c00115 	stw	r19,4(r8)
 2010f2c:	40c00015 	stw	r3,0(r8)
 2010f30:	d8801c15 	stw	r2,112(sp)
 2010f34:	d9401b15 	stw	r5,108(sp)
 2010f38:	00c001c4 	movi	r3,7
 2010f3c:	1940070e 	bge	r3,r5,2010f5c <___vfiprintf_internal_r+0xd24>
 2010f40:	103e4826 	beq	r2,zero,2010864 <__alt_mem_epcs_flash_controller_0+0xfd00f864>
 2010f44:	d9402117 	ldw	r5,132(sp)
 2010f48:	d9002017 	ldw	r4,128(sp)
 2010f4c:	d9801a04 	addi	r6,sp,104
 2010f50:	20101240 	call	2010124 <__sprint_r.part.0>
 2010f54:	10000c1e 	bne	r2,zero,2010f88 <___vfiprintf_internal_r+0xd50>
 2010f58:	d8801c17 	ldw	r2,112(sp)
 2010f5c:	8c80010e 	bge	r17,r18,2010f64 <___vfiprintf_internal_r+0xd2c>
 2010f60:	9023883a 	mov	r17,r18
 2010f64:	da802317 	ldw	r10,140(sp)
 2010f68:	5455883a 	add	r10,r10,r17
 2010f6c:	da802315 	stw	r10,140(sp)
 2010f70:	103e4126 	beq	r2,zero,2010878 <__alt_mem_epcs_flash_controller_0+0xfd00f878>
 2010f74:	d9402117 	ldw	r5,132(sp)
 2010f78:	d9002017 	ldw	r4,128(sp)
 2010f7c:	d9801a04 	addi	r6,sp,104
 2010f80:	20101240 	call	2010124 <__sprint_r.part.0>
 2010f84:	103e3c26 	beq	r2,zero,2010878 <__alt_mem_epcs_flash_controller_0+0xfd00f878>
 2010f88:	dd002117 	ldw	r20,132(sp)
 2010f8c:	a080030b 	ldhu	r2,12(r20)
 2010f90:	1080100c 	andi	r2,r2,64
 2010f94:	1001231e 	bne	r2,zero,2011424 <___vfiprintf_internal_r+0x11ec>
 2010f98:	d8802317 	ldw	r2,140(sp)
 2010f9c:	003d7b06 	br	201058c <__alt_mem_epcs_flash_controller_0+0xfd00f58c>
 2010fa0:	1000991e 	bne	r2,zero,2011208 <___vfiprintf_internal_r+0xfd0>
 2010fa4:	00c00044 	movi	r3,1
 2010fa8:	9805883a 	mov	r2,r19
 2010fac:	dd400015 	stw	r21,0(sp)
 2010fb0:	dcc00115 	stw	r19,4(sp)
 2010fb4:	dcc01c15 	stw	r19,112(sp)
 2010fb8:	d8c01b15 	stw	r3,108(sp)
 2010fbc:	d811883a 	mov	r8,sp
 2010fc0:	42000204 	addi	r8,r8,8
 2010fc4:	a2c0010c 	andi	r11,r20,4
 2010fc8:	583fe426 	beq	r11,zero,2010f5c <__alt_mem_epcs_flash_controller_0+0xfd00ff5c>
 2010fcc:	8ca7c83a 	sub	r19,r17,r18
 2010fd0:	04ffe20e 	bge	zero,r19,2010f5c <__alt_mem_epcs_flash_controller_0+0xfd00ff5c>
 2010fd4:	01c00404 	movi	r7,16
 2010fd8:	3cffcc0e 	bge	r7,r19,2010f0c <__alt_mem_epcs_flash_controller_0+0xfd00ff0c>
 2010fdc:	02808134 	movhi	r10,516
 2010fe0:	52b15304 	addi	r10,r10,-15028
 2010fe4:	d9001b17 	ldw	r4,108(sp)
 2010fe8:	da802415 	stw	r10,144(sp)
 2010fec:	382b883a 	mov	r21,r7
 2010ff0:	050001c4 	movi	r20,7
 2010ff4:	df002017 	ldw	fp,128(sp)
 2010ff8:	00000506 	br	2011010 <___vfiprintf_internal_r+0xdd8>
 2010ffc:	21400084 	addi	r5,r4,2
 2011000:	42000204 	addi	r8,r8,8
 2011004:	1809883a 	mov	r4,r3
 2011008:	9cfffc04 	addi	r19,r19,-16
 201100c:	acffc40e 	bge	r21,r19,2010f20 <__alt_mem_epcs_flash_controller_0+0xfd00ff20>
 2011010:	10800404 	addi	r2,r2,16
 2011014:	20c00044 	addi	r3,r4,1
 2011018:	45800015 	stw	r22,0(r8)
 201101c:	45400115 	stw	r21,4(r8)
 2011020:	d8801c15 	stw	r2,112(sp)
 2011024:	d8c01b15 	stw	r3,108(sp)
 2011028:	a0fff40e 	bge	r20,r3,2010ffc <__alt_mem_epcs_flash_controller_0+0xfd00fffc>
 201102c:	1000041e 	bne	r2,zero,2011040 <___vfiprintf_internal_r+0xe08>
 2011030:	01400044 	movi	r5,1
 2011034:	0009883a 	mov	r4,zero
 2011038:	d811883a 	mov	r8,sp
 201103c:	003ff206 	br	2011008 <__alt_mem_epcs_flash_controller_0+0xfd010008>
 2011040:	d9402117 	ldw	r5,132(sp)
 2011044:	d9801a04 	addi	r6,sp,104
 2011048:	e009883a 	mov	r4,fp
 201104c:	20101240 	call	2010124 <__sprint_r.part.0>
 2011050:	103fcd1e 	bne	r2,zero,2010f88 <__alt_mem_epcs_flash_controller_0+0xfd00ff88>
 2011054:	d9001b17 	ldw	r4,108(sp)
 2011058:	d8801c17 	ldw	r2,112(sp)
 201105c:	d811883a 	mov	r8,sp
 2011060:	21400044 	addi	r5,r4,1
 2011064:	003fe806 	br	2011008 <__alt_mem_epcs_flash_controller_0+0xfd010008>
 2011068:	d9402117 	ldw	r5,132(sp)
 201106c:	d9002017 	ldw	r4,128(sp)
 2011070:	d9801a04 	addi	r6,sp,104
 2011074:	d9c02b15 	stw	r7,172(sp)
 2011078:	db402a15 	stw	r13,168(sp)
 201107c:	20101240 	call	2010124 <__sprint_r.part.0>
 2011080:	d9c02b17 	ldw	r7,172(sp)
 2011084:	db402a17 	ldw	r13,168(sp)
 2011088:	103fbf1e 	bne	r2,zero,2010f88 <__alt_mem_epcs_flash_controller_0+0xfd00ff88>
 201108c:	d9401b17 	ldw	r5,108(sp)
 2011090:	d8801c17 	ldw	r2,112(sp)
 2011094:	d811883a 	mov	r8,sp
 2011098:	29800044 	addi	r6,r5,1
 201109c:	003dc406 	br	20107b0 <__alt_mem_epcs_flash_controller_0+0xfd00f7b0>
 20110a0:	1000d21e 	bne	r2,zero,20113ec <___vfiprintf_internal_r+0x11b4>
 20110a4:	d8c01d87 	ldb	r3,118(sp)
 20110a8:	18009526 	beq	r3,zero,2011300 <___vfiprintf_internal_r+0x10c8>
 20110ac:	00800044 	movi	r2,1
 20110b0:	d8c01d84 	addi	r3,sp,118
 20110b4:	1009883a 	mov	r4,r2
 20110b8:	d8c00015 	stw	r3,0(sp)
 20110bc:	d8800115 	stw	r2,4(sp)
 20110c0:	d811883a 	mov	r8,sp
 20110c4:	200b883a 	mov	r5,r4
 20110c8:	42000204 	addi	r8,r8,8
 20110cc:	21000044 	addi	r4,r4,1
 20110d0:	003d9706 	br	2010730 <__alt_mem_epcs_flash_controller_0+0xfd00f730>
 20110d4:	d9001d04 	addi	r4,sp,116
 20110d8:	00800084 	movi	r2,2
 20110dc:	d9000015 	stw	r4,0(sp)
 20110e0:	d8800115 	stw	r2,4(sp)
 20110e4:	1809883a 	mov	r4,r3
 20110e8:	d811883a 	mov	r8,sp
 20110ec:	200b883a 	mov	r5,r4
 20110f0:	42000204 	addi	r8,r8,8
 20110f4:	21000044 	addi	r4,r4,1
 20110f8:	003f4e06 	br	2010e34 <__alt_mem_epcs_flash_controller_0+0xfd00fe34>
 20110fc:	d8001d85 	stb	zero,118(sp)
 2011100:	48005016 	blt	r9,zero,2011244 <___vfiprintf_internal_r+0x100c>
 2011104:	00ffdfc4 	movi	r3,-129
 2011108:	94c4b03a 	or	r2,r18,r19
 201110c:	a0e8703a 	and	r20,r20,r3
 2011110:	103d4426 	beq	r2,zero,2010624 <__alt_mem_epcs_flash_controller_0+0xfd00f624>
 2011114:	0039883a 	mov	fp,zero
 2011118:	d9002617 	ldw	r4,152(sp)
 201111c:	dd401a04 	addi	r21,sp,104
 2011120:	908003cc 	andi	r2,r18,15
 2011124:	9806973a 	slli	r3,r19,28
 2011128:	2085883a 	add	r2,r4,r2
 201112c:	9024d13a 	srli	r18,r18,4
 2011130:	10800003 	ldbu	r2,0(r2)
 2011134:	9826d13a 	srli	r19,r19,4
 2011138:	ad7fffc4 	addi	r21,r21,-1
 201113c:	1ca4b03a 	or	r18,r3,r18
 2011140:	a8800005 	stb	r2,0(r21)
 2011144:	94c4b03a 	or	r2,r18,r19
 2011148:	103ff51e 	bne	r2,zero,2011120 <__alt_mem_epcs_flash_controller_0+0xfd010120>
 201114c:	003e5906 	br	2010ab4 <__alt_mem_epcs_flash_controller_0+0xfd00fab4>
 2011150:	d9402117 	ldw	r5,132(sp)
 2011154:	d9002017 	ldw	r4,128(sp)
 2011158:	d9801a04 	addi	r6,sp,104
 201115c:	20101240 	call	2010124 <__sprint_r.part.0>
 2011160:	103f891e 	bne	r2,zero,2010f88 <__alt_mem_epcs_flash_controller_0+0xfd00ff88>
 2011164:	d8801c17 	ldw	r2,112(sp)
 2011168:	d811883a 	mov	r8,sp
 201116c:	003f9506 	br	2010fc4 <__alt_mem_epcs_flash_controller_0+0xfd00ffc4>
 2011170:	d9402117 	ldw	r5,132(sp)
 2011174:	d9002017 	ldw	r4,128(sp)
 2011178:	d9801a04 	addi	r6,sp,104
 201117c:	20101240 	call	2010124 <__sprint_r.part.0>
 2011180:	103f811e 	bne	r2,zero,2010f88 <__alt_mem_epcs_flash_controller_0+0xfd00ff88>
 2011184:	d811883a 	mov	r8,sp
 2011188:	003ced06 	br	2010540 <__alt_mem_epcs_flash_controller_0+0xfd00f540>
 201118c:	d9402117 	ldw	r5,132(sp)
 2011190:	d9002017 	ldw	r4,128(sp)
 2011194:	d9801a04 	addi	r6,sp,104
 2011198:	da402c15 	stw	r9,176(sp)
 201119c:	db802a15 	stw	r14,168(sp)
 20111a0:	20101240 	call	2010124 <__sprint_r.part.0>
 20111a4:	da402c17 	ldw	r9,176(sp)
 20111a8:	db802a17 	ldw	r14,168(sp)
 20111ac:	103f761e 	bne	r2,zero,2010f88 <__alt_mem_epcs_flash_controller_0+0xfd00ff88>
 20111b0:	d9401b17 	ldw	r5,108(sp)
 20111b4:	d8801c17 	ldw	r2,112(sp)
 20111b8:	d811883a 	mov	r8,sp
 20111bc:	29000044 	addi	r4,r5,1
 20111c0:	003d5b06 	br	2010730 <__alt_mem_epcs_flash_controller_0+0xfd00f730>
 20111c4:	d9402117 	ldw	r5,132(sp)
 20111c8:	d9002017 	ldw	r4,128(sp)
 20111cc:	d9801a04 	addi	r6,sp,104
 20111d0:	da402c15 	stw	r9,176(sp)
 20111d4:	20101240 	call	2010124 <__sprint_r.part.0>
 20111d8:	da402c17 	ldw	r9,176(sp)
 20111dc:	103f6a1e 	bne	r2,zero,2010f88 <__alt_mem_epcs_flash_controller_0+0xfd00ff88>
 20111e0:	d9401b17 	ldw	r5,108(sp)
 20111e4:	d8801c17 	ldw	r2,112(sp)
 20111e8:	d811883a 	mov	r8,sp
 20111ec:	29000044 	addi	r4,r5,1
 20111f0:	003f1006 	br	2010e34 <__alt_mem_epcs_flash_controller_0+0xfd00fe34>
 20111f4:	1000c31e 	bne	r2,zero,2011504 <___vfiprintf_internal_r+0x12cc>
 20111f8:	01000044 	movi	r4,1
 20111fc:	000b883a 	mov	r5,zero
 2011200:	d811883a 	mov	r8,sp
 2011204:	003f0d06 	br	2010e3c <__alt_mem_epcs_flash_controller_0+0xfd00fe3c>
 2011208:	d9402117 	ldw	r5,132(sp)
 201120c:	d9002017 	ldw	r4,128(sp)
 2011210:	d9801a04 	addi	r6,sp,104
 2011214:	20101240 	call	2010124 <__sprint_r.part.0>
 2011218:	103f5b1e 	bne	r2,zero,2010f88 <__alt_mem_epcs_flash_controller_0+0xfd00ff88>
 201121c:	d9001b17 	ldw	r4,108(sp)
 2011220:	d8801c17 	ldw	r2,112(sp)
 2011224:	d811883a 	mov	r8,sp
 2011228:	21000044 	addi	r4,r4,1
 201122c:	003d8006 	br	2010830 <__alt_mem_epcs_flash_controller_0+0xfd00f830>
 2011230:	01008134 	movhi	r4,516
 2011234:	2130df04 	addi	r4,r4,-15492
 2011238:	d9002615 	stw	r4,152(sp)
 201123c:	d8c02215 	stw	r3,136(sp)
 2011240:	1029883a 	mov	r20,r2
 2011244:	94c4b03a 	or	r2,r18,r19
 2011248:	103fb21e 	bne	r2,zero,2011114 <__alt_mem_epcs_flash_controller_0+0xfd010114>
 201124c:	0039883a 	mov	fp,zero
 2011250:	00800084 	movi	r2,2
 2011254:	003e6b06 	br	2010c04 <__alt_mem_epcs_flash_controller_0+0xfd00fc04>
 2011258:	da802217 	ldw	r10,136(sp)
 201125c:	d8001d85 	stb	zero,118(sp)
 2011260:	0027883a 	mov	r19,zero
 2011264:	50800104 	addi	r2,r10,4
 2011268:	54800017 	ldw	r18,0(r10)
 201126c:	483e6016 	blt	r9,zero,2010bf0 <__alt_mem_epcs_flash_controller_0+0xfd00fbf0>
 2011270:	00ffdfc4 	movi	r3,-129
 2011274:	d8802215 	stw	r2,136(sp)
 2011278:	a0e8703a 	and	r20,r20,r3
 201127c:	0039883a 	mov	fp,zero
 2011280:	903ebb26 	beq	r18,zero,2010d70 <__alt_mem_epcs_flash_controller_0+0xfd00fd70>
 2011284:	00800244 	movi	r2,9
 2011288:	14bdee36 	bltu	r2,r18,2010a44 <__alt_mem_epcs_flash_controller_0+0xfd00fa44>
 201128c:	003eba06 	br	2010d78 <__alt_mem_epcs_flash_controller_0+0xfd00fd78>
 2011290:	00800c04 	movi	r2,48
 2011294:	d8c01d45 	stb	r3,117(sp)
 2011298:	d8801d05 	stb	r2,116(sp)
 201129c:	d8001d85 	stb	zero,118(sp)
 20112a0:	a0c00094 	ori	r3,r20,2
 20112a4:	4800a916 	blt	r9,zero,201154c <___vfiprintf_internal_r+0x1314>
 20112a8:	00bfdfc4 	movi	r2,-129
 20112ac:	a096703a 	and	r11,r20,r2
 20112b0:	5d000094 	ori	r20,r11,2
 20112b4:	0039883a 	mov	fp,zero
 20112b8:	003f9706 	br	2011118 <__alt_mem_epcs_flash_controller_0+0xfd010118>
 20112bc:	8025883a 	mov	r18,r16
 20112c0:	003c2e06 	br	201037c <__alt_mem_epcs_flash_controller_0+0xfd00f37c>
 20112c4:	00808134 	movhi	r2,516
 20112c8:	10b0df04 	addi	r2,r2,-15492
 20112cc:	0039883a 	mov	fp,zero
 20112d0:	d8802615 	stw	r2,152(sp)
 20112d4:	003f9006 	br	2011118 <__alt_mem_epcs_flash_controller_0+0xfd010118>
 20112d8:	04a5c83a 	sub	r18,zero,r18
 20112dc:	07000b44 	movi	fp,45
 20112e0:	9004c03a 	cmpne	r2,r18,zero
 20112e4:	04e7c83a 	sub	r19,zero,r19
 20112e8:	df001d85 	stb	fp,118(sp)
 20112ec:	98a7c83a 	sub	r19,r19,r2
 20112f0:	48009f16 	blt	r9,zero,2011570 <___vfiprintf_internal_r+0x1338>
 20112f4:	00bfdfc4 	movi	r2,-129
 20112f8:	a0a8703a 	and	r20,r20,r2
 20112fc:	003dd006 	br	2010a40 <__alt_mem_epcs_flash_controller_0+0xfd00fa40>
 2011300:	70004c26 	beq	r14,zero,2011434 <___vfiprintf_internal_r+0x11fc>
 2011304:	00800084 	movi	r2,2
 2011308:	d8c01d04 	addi	r3,sp,116
 201130c:	d8c00015 	stw	r3,0(sp)
 2011310:	d8800115 	stw	r2,4(sp)
 2011314:	01000044 	movi	r4,1
 2011318:	d811883a 	mov	r8,sp
 201131c:	003f7306 	br	20110ec <__alt_mem_epcs_flash_controller_0+0xfd0100ec>
 2011320:	a080100c 	andi	r2,r20,64
 2011324:	da802217 	ldw	r10,136(sp)
 2011328:	103e0626 	beq	r2,zero,2010b44 <__alt_mem_epcs_flash_controller_0+0xfd00fb44>
 201132c:	5480000f 	ldh	r18,0(r10)
 2011330:	52800104 	addi	r10,r10,4
 2011334:	da802215 	stw	r10,136(sp)
 2011338:	9027d7fa 	srai	r19,r18,31
 201133c:	9805883a 	mov	r2,r19
 2011340:	003db806 	br	2010a24 <__alt_mem_epcs_flash_controller_0+0xfd00fa24>
 2011344:	a080040c 	andi	r2,r20,16
 2011348:	1000091e 	bne	r2,zero,2011370 <___vfiprintf_internal_r+0x1138>
 201134c:	a2c0100c 	andi	r11,r20,64
 2011350:	58000726 	beq	r11,zero,2011370 <___vfiprintf_internal_r+0x1138>
 2011354:	da802217 	ldw	r10,136(sp)
 2011358:	50800017 	ldw	r2,0(r10)
 201135c:	52800104 	addi	r10,r10,4
 2011360:	da802215 	stw	r10,136(sp)
 2011364:	da802317 	ldw	r10,140(sp)
 2011368:	1280000d 	sth	r10,0(r2)
 201136c:	003be706 	br	201030c <__alt_mem_epcs_flash_controller_0+0xfd00f30c>
 2011370:	da802217 	ldw	r10,136(sp)
 2011374:	50800017 	ldw	r2,0(r10)
 2011378:	52800104 	addi	r10,r10,4
 201137c:	da802215 	stw	r10,136(sp)
 2011380:	da802317 	ldw	r10,140(sp)
 2011384:	12800015 	stw	r10,0(r2)
 2011388:	003be006 	br	201030c <__alt_mem_epcs_flash_controller_0+0xfd00f30c>
 201138c:	a080100c 	andi	r2,r20,64
 2011390:	da802217 	ldw	r10,136(sp)
 2011394:	10003026 	beq	r2,zero,2011458 <___vfiprintf_internal_r+0x1220>
 2011398:	5480000b 	ldhu	r18,0(r10)
 201139c:	52800104 	addi	r10,r10,4
 20113a0:	0027883a 	mov	r19,zero
 20113a4:	da802215 	stw	r10,136(sp)
 20113a8:	003d8006 	br	20109ac <__alt_mem_epcs_flash_controller_0+0xfd00f9ac>
 20113ac:	80c00007 	ldb	r3,0(r16)
 20113b0:	003c0006 	br	20103b4 <__alt_mem_epcs_flash_controller_0+0xfd00f3b4>
 20113b4:	a080100c 	andi	r2,r20,64
 20113b8:	d8001d85 	stb	zero,118(sp)
 20113bc:	da802217 	ldw	r10,136(sp)
 20113c0:	1000201e 	bne	r2,zero,2011444 <___vfiprintf_internal_r+0x120c>
 20113c4:	50800104 	addi	r2,r10,4
 20113c8:	54800017 	ldw	r18,0(r10)
 20113cc:	0027883a 	mov	r19,zero
 20113d0:	483def0e 	bge	r9,zero,2010b90 <__alt_mem_epcs_flash_controller_0+0xfd00fb90>
 20113d4:	94c6b03a 	or	r3,r18,r19
 20113d8:	d8802215 	stw	r2,136(sp)
 20113dc:	183d4e1e 	bne	r3,zero,2010918 <__alt_mem_epcs_flash_controller_0+0xfd00f918>
 20113e0:	0039883a 	mov	fp,zero
 20113e4:	0005883a 	mov	r2,zero
 20113e8:	003e0606 	br	2010c04 <__alt_mem_epcs_flash_controller_0+0xfd00fc04>
 20113ec:	d9402117 	ldw	r5,132(sp)
 20113f0:	d9002017 	ldw	r4,128(sp)
 20113f4:	d9801a04 	addi	r6,sp,104
 20113f8:	da402c15 	stw	r9,176(sp)
 20113fc:	db802a15 	stw	r14,168(sp)
 2011400:	20101240 	call	2010124 <__sprint_r.part.0>
 2011404:	da402c17 	ldw	r9,176(sp)
 2011408:	db802a17 	ldw	r14,168(sp)
 201140c:	103ede1e 	bne	r2,zero,2010f88 <__alt_mem_epcs_flash_controller_0+0xfd00ff88>
 2011410:	d9401b17 	ldw	r5,108(sp)
 2011414:	d8801c17 	ldw	r2,112(sp)
 2011418:	d811883a 	mov	r8,sp
 201141c:	29000044 	addi	r4,r5,1
 2011420:	003e7406 	br	2010df4 <__alt_mem_epcs_flash_controller_0+0xfd00fdf4>
 2011424:	00bfffc4 	movi	r2,-1
 2011428:	003c5806 	br	201058c <__alt_mem_epcs_flash_controller_0+0xfd00f58c>
 201142c:	d811883a 	mov	r8,sp
 2011430:	003ee806 	br	2010fd4 <__alt_mem_epcs_flash_controller_0+0xfd00ffd4>
 2011434:	000b883a 	mov	r5,zero
 2011438:	01000044 	movi	r4,1
 201143c:	d811883a 	mov	r8,sp
 2011440:	003e7c06 	br	2010e34 <__alt_mem_epcs_flash_controller_0+0xfd00fe34>
 2011444:	50800104 	addi	r2,r10,4
 2011448:	5480000b 	ldhu	r18,0(r10)
 201144c:	0027883a 	mov	r19,zero
 2011450:	483dcf0e 	bge	r9,zero,2010b90 <__alt_mem_epcs_flash_controller_0+0xfd00fb90>
 2011454:	003fdf06 	br	20113d4 <__alt_mem_epcs_flash_controller_0+0xfd0103d4>
 2011458:	54800017 	ldw	r18,0(r10)
 201145c:	52800104 	addi	r10,r10,4
 2011460:	0027883a 	mov	r19,zero
 2011464:	da802215 	stw	r10,136(sp)
 2011468:	003d5006 	br	20109ac <__alt_mem_epcs_flash_controller_0+0xfd00f9ac>
 201146c:	50800104 	addi	r2,r10,4
 2011470:	5480000b 	ldhu	r18,0(r10)
 2011474:	0027883a 	mov	r19,zero
 2011478:	483f7d0e 	bge	r9,zero,2011270 <__alt_mem_epcs_flash_controller_0+0xfd010270>
 201147c:	003ddc06 	br	2010bf0 <__alt_mem_epcs_flash_controller_0+0xfd00fbf0>
 2011480:	d8c02215 	stw	r3,136(sp)
 2011484:	0039883a 	mov	fp,zero
 2011488:	003ddb06 	br	2010bf8 <__alt_mem_epcs_flash_controller_0+0xfd00fbf8>
 201148c:	02808134 	movhi	r10,516
 2011490:	52b14f04 	addi	r10,r10,-15044
 2011494:	da802415 	stw	r10,144(sp)
 2011498:	003e8306 	br	2010ea8 <__alt_mem_epcs_flash_controller_0+0xfd00fea8>
 201149c:	d8801c17 	ldw	r2,112(sp)
 20114a0:	dd002117 	ldw	r20,132(sp)
 20114a4:	103eb926 	beq	r2,zero,2010f8c <__alt_mem_epcs_flash_controller_0+0xfd00ff8c>
 20114a8:	d9002017 	ldw	r4,128(sp)
 20114ac:	d9801a04 	addi	r6,sp,104
 20114b0:	a00b883a 	mov	r5,r20
 20114b4:	20101240 	call	2010124 <__sprint_r.part.0>
 20114b8:	003eb406 	br	2010f8c <__alt_mem_epcs_flash_controller_0+0xfd00ff8c>
 20114bc:	80c00043 	ldbu	r3,1(r16)
 20114c0:	a5000814 	ori	r20,r20,32
 20114c4:	84000044 	addi	r16,r16,1
 20114c8:	18c03fcc 	andi	r3,r3,255
 20114cc:	18c0201c 	xori	r3,r3,128
 20114d0:	18ffe004 	addi	r3,r3,-128
 20114d4:	003bb706 	br	20103b4 <__alt_mem_epcs_flash_controller_0+0xfd00f3b4>
 20114d8:	a809883a 	mov	r4,r21
 20114dc:	d8c02a15 	stw	r3,168(sp)
 20114e0:	da002b15 	stw	r8,172(sp)
 20114e4:	2005e800 	call	2005e80 <strlen>
 20114e8:	d8c02a17 	ldw	r3,168(sp)
 20114ec:	1027883a 	mov	r19,r2
 20114f0:	df001d83 	ldbu	fp,118(sp)
 20114f4:	d8c02215 	stw	r3,136(sp)
 20114f8:	0013883a 	mov	r9,zero
 20114fc:	da002b17 	ldw	r8,172(sp)
 2011500:	003c4d06 	br	2010638 <__alt_mem_epcs_flash_controller_0+0xfd00f638>
 2011504:	d9402117 	ldw	r5,132(sp)
 2011508:	d9002017 	ldw	r4,128(sp)
 201150c:	d9801a04 	addi	r6,sp,104
 2011510:	da402c15 	stw	r9,176(sp)
 2011514:	20101240 	call	2010124 <__sprint_r.part.0>
 2011518:	da402c17 	ldw	r9,176(sp)
 201151c:	103e9a1e 	bne	r2,zero,2010f88 <__alt_mem_epcs_flash_controller_0+0xfd00ff88>
 2011520:	d9401b17 	ldw	r5,108(sp)
 2011524:	d8801c17 	ldw	r2,112(sp)
 2011528:	d811883a 	mov	r8,sp
 201152c:	29000044 	addi	r4,r5,1
 2011530:	003e4206 	br	2010e3c <__alt_mem_epcs_flash_controller_0+0xfd00fe3c>
 2011534:	d9401b17 	ldw	r5,108(sp)
 2011538:	01008134 	movhi	r4,516
 201153c:	21315304 	addi	r4,r4,-15028
 2011540:	d9002415 	stw	r4,144(sp)
 2011544:	29400044 	addi	r5,r5,1
 2011548:	003c6d06 	br	2010700 <__alt_mem_epcs_flash_controller_0+0xfd00f700>
 201154c:	0039883a 	mov	fp,zero
 2011550:	00800084 	movi	r2,2
 2011554:	10803fcc 	andi	r2,r2,255
 2011558:	01000044 	movi	r4,1
 201155c:	11001e26 	beq	r2,r4,20115d8 <___vfiprintf_internal_r+0x13a0>
 2011560:	01000084 	movi	r4,2
 2011564:	11001e1e 	bne	r2,r4,20115e0 <___vfiprintf_internal_r+0x13a8>
 2011568:	1829883a 	mov	r20,r3
 201156c:	003eea06 	br	2011118 <__alt_mem_epcs_flash_controller_0+0xfd010118>
 2011570:	a007883a 	mov	r3,r20
 2011574:	00800044 	movi	r2,1
 2011578:	003ff606 	br	2011554 <__alt_mem_epcs_flash_controller_0+0xfd010554>
 201157c:	00800184 	movi	r2,6
 2011580:	1240012e 	bgeu	r2,r9,2011588 <___vfiprintf_internal_r+0x1350>
 2011584:	1013883a 	mov	r9,r2
 2011588:	4827883a 	mov	r19,r9
 201158c:	4825883a 	mov	r18,r9
 2011590:	48001516 	blt	r9,zero,20115e8 <___vfiprintf_internal_r+0x13b0>
 2011594:	05408134 	movhi	r21,516
 2011598:	d8c02215 	stw	r3,136(sp)
 201159c:	ad70e404 	addi	r21,r21,-15472
 20115a0:	003d1406 	br	20109f4 <__alt_mem_epcs_flash_controller_0+0xfd00f9f4>
 20115a4:	02808134 	movhi	r10,516
 20115a8:	52b14f04 	addi	r10,r10,-15044
 20115ac:	da802415 	stw	r10,144(sp)
 20115b0:	200d883a 	mov	r6,r4
 20115b4:	003c9106 	br	20107fc <__alt_mem_epcs_flash_controller_0+0xfd00f7fc>
 20115b8:	5021883a 	mov	r16,r10
 20115bc:	0013883a 	mov	r9,zero
 20115c0:	003b7d06 	br	20103b8 <__alt_mem_epcs_flash_controller_0+0xfd00f3b8>
 20115c4:	4827883a 	mov	r19,r9
 20115c8:	df001d83 	ldbu	fp,118(sp)
 20115cc:	d8c02215 	stw	r3,136(sp)
 20115d0:	0013883a 	mov	r9,zero
 20115d4:	003c1806 	br	2010638 <__alt_mem_epcs_flash_controller_0+0xfd00f638>
 20115d8:	1829883a 	mov	r20,r3
 20115dc:	003d1806 	br	2010a40 <__alt_mem_epcs_flash_controller_0+0xfd00fa40>
 20115e0:	1829883a 	mov	r20,r3
 20115e4:	003ccd06 	br	201091c <__alt_mem_epcs_flash_controller_0+0xfd00f91c>
 20115e8:	0025883a 	mov	r18,zero
 20115ec:	003fe906 	br	2011594 <__alt_mem_epcs_flash_controller_0+0xfd010594>
 20115f0:	d8802217 	ldw	r2,136(sp)
 20115f4:	80c00043 	ldbu	r3,1(r16)
 20115f8:	5021883a 	mov	r16,r10
 20115fc:	12400017 	ldw	r9,0(r2)
 2011600:	10800104 	addi	r2,r2,4
 2011604:	d8802215 	stw	r2,136(sp)
 2011608:	483faf0e 	bge	r9,zero,20114c8 <__alt_mem_epcs_flash_controller_0+0xfd0104c8>
 201160c:	18c03fcc 	andi	r3,r3,255
 2011610:	18c0201c 	xori	r3,r3,128
 2011614:	027fffc4 	movi	r9,-1
 2011618:	18ffe004 	addi	r3,r3,-128
 201161c:	003b6506 	br	20103b4 <__alt_mem_epcs_flash_controller_0+0xfd00f3b4>
 2011620:	d9c01d85 	stb	r7,118(sp)
 2011624:	003ca006 	br	20108a8 <__alt_mem_epcs_flash_controller_0+0xfd00f8a8>
 2011628:	d9c01d85 	stb	r7,118(sp)
 201162c:	003cad06 	br	20108e4 <__alt_mem_epcs_flash_controller_0+0xfd00f8e4>
 2011630:	d9c01d85 	stb	r7,118(sp)
 2011634:	003d7d06 	br	2010c2c <__alt_mem_epcs_flash_controller_0+0xfd00fc2c>
 2011638:	d9c01d85 	stb	r7,118(sp)
 201163c:	003d5f06 	br	2010bbc <__alt_mem_epcs_flash_controller_0+0xfd00fbbc>
 2011640:	a080004c 	andi	r2,r20,1
 2011644:	0039883a 	mov	fp,zero
 2011648:	10000526 	beq	r2,zero,2011660 <___vfiprintf_internal_r+0x1428>
 201164c:	00800c04 	movi	r2,48
 2011650:	d88019c5 	stb	r2,103(sp)
 2011654:	dcc02717 	ldw	r19,156(sp)
 2011658:	dd4019c4 	addi	r21,sp,103
 201165c:	003bf606 	br	2010638 <__alt_mem_epcs_flash_controller_0+0xfd00f638>
 2011660:	0027883a 	mov	r19,zero
 2011664:	dd401a04 	addi	r21,sp,104
 2011668:	003bf306 	br	2010638 <__alt_mem_epcs_flash_controller_0+0xfd00f638>
 201166c:	d9c01d85 	stb	r7,118(sp)
 2011670:	003dc806 	br	2010d94 <__alt_mem_epcs_flash_controller_0+0xfd00fd94>
 2011674:	d9c01d85 	stb	r7,118(sp)
 2011678:	003d3a06 	br	2010b64 <__alt_mem_epcs_flash_controller_0+0xfd00fb64>
 201167c:	d9c01d85 	stb	r7,118(sp)
 2011680:	003d2a06 	br	2010b2c <__alt_mem_epcs_flash_controller_0+0xfd00fb2c>
 2011684:	d9c01d85 	stb	r7,118(sp)
 2011688:	003cde06 	br	2010a04 <__alt_mem_epcs_flash_controller_0+0xfd00fa04>
 201168c:	d9c01d85 	stb	r7,118(sp)
 2011690:	003cbc06 	br	2010984 <__alt_mem_epcs_flash_controller_0+0xfd00f984>

02011694 <__vfiprintf_internal>:
 2011694:	00808134 	movhi	r2,516
 2011698:	10b84a04 	addi	r2,r2,-7896
 201169c:	300f883a 	mov	r7,r6
 20116a0:	280d883a 	mov	r6,r5
 20116a4:	200b883a 	mov	r5,r4
 20116a8:	11000017 	ldw	r4,0(r2)
 20116ac:	20102381 	jmpi	2010238 <___vfiprintf_internal_r>

020116b0 <__sbprintf>:
 20116b0:	2880030b 	ldhu	r2,12(r5)
 20116b4:	2ac01917 	ldw	r11,100(r5)
 20116b8:	2a80038b 	ldhu	r10,14(r5)
 20116bc:	2a400717 	ldw	r9,28(r5)
 20116c0:	2a000917 	ldw	r8,36(r5)
 20116c4:	defee204 	addi	sp,sp,-1144
 20116c8:	00c10004 	movi	r3,1024
 20116cc:	dc011a15 	stw	r16,1128(sp)
 20116d0:	10bfff4c 	andi	r2,r2,65533
 20116d4:	2821883a 	mov	r16,r5
 20116d8:	d8cb883a 	add	r5,sp,r3
 20116dc:	dc811c15 	stw	r18,1136(sp)
 20116e0:	dc411b15 	stw	r17,1132(sp)
 20116e4:	dfc11d15 	stw	ra,1140(sp)
 20116e8:	2025883a 	mov	r18,r4
 20116ec:	d881030d 	sth	r2,1036(sp)
 20116f0:	dac11915 	stw	r11,1124(sp)
 20116f4:	da81038d 	sth	r10,1038(sp)
 20116f8:	da410715 	stw	r9,1052(sp)
 20116fc:	da010915 	stw	r8,1060(sp)
 2011700:	dec10015 	stw	sp,1024(sp)
 2011704:	dec10415 	stw	sp,1040(sp)
 2011708:	d8c10215 	stw	r3,1032(sp)
 201170c:	d8c10515 	stw	r3,1044(sp)
 2011710:	d8010615 	stw	zero,1048(sp)
 2011714:	20102380 	call	2010238 <___vfiprintf_internal_r>
 2011718:	1023883a 	mov	r17,r2
 201171c:	10000416 	blt	r2,zero,2011730 <__sbprintf+0x80>
 2011720:	d9410004 	addi	r5,sp,1024
 2011724:	9009883a 	mov	r4,r18
 2011728:	200c0dc0 	call	200c0dc <_fflush_r>
 201172c:	10000d1e 	bne	r2,zero,2011764 <__sbprintf+0xb4>
 2011730:	d881030b 	ldhu	r2,1036(sp)
 2011734:	1080100c 	andi	r2,r2,64
 2011738:	10000326 	beq	r2,zero,2011748 <__sbprintf+0x98>
 201173c:	8080030b 	ldhu	r2,12(r16)
 2011740:	10801014 	ori	r2,r2,64
 2011744:	8080030d 	sth	r2,12(r16)
 2011748:	8805883a 	mov	r2,r17
 201174c:	dfc11d17 	ldw	ra,1140(sp)
 2011750:	dc811c17 	ldw	r18,1136(sp)
 2011754:	dc411b17 	ldw	r17,1132(sp)
 2011758:	dc011a17 	ldw	r16,1128(sp)
 201175c:	dec11e04 	addi	sp,sp,1144
 2011760:	f800283a 	ret
 2011764:	047fffc4 	movi	r17,-1
 2011768:	003ff106 	br	2011730 <__alt_mem_epcs_flash_controller_0+0xfd010730>

0201176c <_write_r>:
 201176c:	defffd04 	addi	sp,sp,-12
 2011770:	2805883a 	mov	r2,r5
 2011774:	dc000015 	stw	r16,0(sp)
 2011778:	04008134 	movhi	r16,516
 201177c:	dc400115 	stw	r17,4(sp)
 2011780:	300b883a 	mov	r5,r6
 2011784:	84385e04 	addi	r16,r16,-7816
 2011788:	2023883a 	mov	r17,r4
 201178c:	380d883a 	mov	r6,r7
 2011790:	1009883a 	mov	r4,r2
 2011794:	dfc00215 	stw	ra,8(sp)
 2011798:	80000015 	stw	zero,0(r16)
 201179c:	20134880 	call	2013488 <write>
 20117a0:	00ffffc4 	movi	r3,-1
 20117a4:	10c00526 	beq	r2,r3,20117bc <_write_r+0x50>
 20117a8:	dfc00217 	ldw	ra,8(sp)
 20117ac:	dc400117 	ldw	r17,4(sp)
 20117b0:	dc000017 	ldw	r16,0(sp)
 20117b4:	dec00304 	addi	sp,sp,12
 20117b8:	f800283a 	ret
 20117bc:	80c00017 	ldw	r3,0(r16)
 20117c0:	183ff926 	beq	r3,zero,20117a8 <__alt_mem_epcs_flash_controller_0+0xfd0107a8>
 20117c4:	88c00015 	stw	r3,0(r17)
 20117c8:	003ff706 	br	20117a8 <__alt_mem_epcs_flash_controller_0+0xfd0107a8>

020117cc <_close_r>:
 20117cc:	defffd04 	addi	sp,sp,-12
 20117d0:	dc000015 	stw	r16,0(sp)
 20117d4:	04008134 	movhi	r16,516
 20117d8:	dc400115 	stw	r17,4(sp)
 20117dc:	84385e04 	addi	r16,r16,-7816
 20117e0:	2023883a 	mov	r17,r4
 20117e4:	2809883a 	mov	r4,r5
 20117e8:	dfc00215 	stw	ra,8(sp)
 20117ec:	80000015 	stw	zero,0(r16)
 20117f0:	2012d340 	call	2012d34 <close>
 20117f4:	00ffffc4 	movi	r3,-1
 20117f8:	10c00526 	beq	r2,r3,2011810 <_close_r+0x44>
 20117fc:	dfc00217 	ldw	ra,8(sp)
 2011800:	dc400117 	ldw	r17,4(sp)
 2011804:	dc000017 	ldw	r16,0(sp)
 2011808:	dec00304 	addi	sp,sp,12
 201180c:	f800283a 	ret
 2011810:	80c00017 	ldw	r3,0(r16)
 2011814:	183ff926 	beq	r3,zero,20117fc <__alt_mem_epcs_flash_controller_0+0xfd0107fc>
 2011818:	88c00015 	stw	r3,0(r17)
 201181c:	003ff706 	br	20117fc <__alt_mem_epcs_flash_controller_0+0xfd0107fc>

02011820 <_fclose_r>:
 2011820:	28003926 	beq	r5,zero,2011908 <_fclose_r+0xe8>
 2011824:	defffc04 	addi	sp,sp,-16
 2011828:	dc400115 	stw	r17,4(sp)
 201182c:	dc000015 	stw	r16,0(sp)
 2011830:	dfc00315 	stw	ra,12(sp)
 2011834:	dc800215 	stw	r18,8(sp)
 2011838:	2023883a 	mov	r17,r4
 201183c:	2821883a 	mov	r16,r5
 2011840:	20000226 	beq	r4,zero,201184c <_fclose_r+0x2c>
 2011844:	20800e17 	ldw	r2,56(r4)
 2011848:	10002726 	beq	r2,zero,20118e8 <_fclose_r+0xc8>
 201184c:	8080030f 	ldh	r2,12(r16)
 2011850:	1000071e 	bne	r2,zero,2011870 <_fclose_r+0x50>
 2011854:	0005883a 	mov	r2,zero
 2011858:	dfc00317 	ldw	ra,12(sp)
 201185c:	dc800217 	ldw	r18,8(sp)
 2011860:	dc400117 	ldw	r17,4(sp)
 2011864:	dc000017 	ldw	r16,0(sp)
 2011868:	dec00404 	addi	sp,sp,16
 201186c:	f800283a 	ret
 2011870:	800b883a 	mov	r5,r16
 2011874:	8809883a 	mov	r4,r17
 2011878:	200bec00 	call	200bec0 <__sflush_r>
 201187c:	1025883a 	mov	r18,r2
 2011880:	80800b17 	ldw	r2,44(r16)
 2011884:	10000426 	beq	r2,zero,2011898 <_fclose_r+0x78>
 2011888:	81400717 	ldw	r5,28(r16)
 201188c:	8809883a 	mov	r4,r17
 2011890:	103ee83a 	callr	r2
 2011894:	10001616 	blt	r2,zero,20118f0 <_fclose_r+0xd0>
 2011898:	8080030b 	ldhu	r2,12(r16)
 201189c:	1080200c 	andi	r2,r2,128
 20118a0:	1000151e 	bne	r2,zero,20118f8 <_fclose_r+0xd8>
 20118a4:	81400c17 	ldw	r5,48(r16)
 20118a8:	28000526 	beq	r5,zero,20118c0 <_fclose_r+0xa0>
 20118ac:	80801004 	addi	r2,r16,64
 20118b0:	28800226 	beq	r5,r2,20118bc <_fclose_r+0x9c>
 20118b4:	8809883a 	mov	r4,r17
 20118b8:	200c62c0 	call	200c62c <_free_r>
 20118bc:	80000c15 	stw	zero,48(r16)
 20118c0:	81401117 	ldw	r5,68(r16)
 20118c4:	28000326 	beq	r5,zero,20118d4 <_fclose_r+0xb4>
 20118c8:	8809883a 	mov	r4,r17
 20118cc:	200c62c0 	call	200c62c <_free_r>
 20118d0:	80001115 	stw	zero,68(r16)
 20118d4:	200c4c80 	call	200c4c8 <__sfp_lock_acquire>
 20118d8:	8000030d 	sth	zero,12(r16)
 20118dc:	200c4cc0 	call	200c4cc <__sfp_lock_release>
 20118e0:	9005883a 	mov	r2,r18
 20118e4:	003fdc06 	br	2011858 <__alt_mem_epcs_flash_controller_0+0xfd010858>
 20118e8:	200c4b80 	call	200c4b8 <__sinit>
 20118ec:	003fd706 	br	201184c <__alt_mem_epcs_flash_controller_0+0xfd01084c>
 20118f0:	04bfffc4 	movi	r18,-1
 20118f4:	003fe806 	br	2011898 <__alt_mem_epcs_flash_controller_0+0xfd010898>
 20118f8:	81400417 	ldw	r5,16(r16)
 20118fc:	8809883a 	mov	r4,r17
 2011900:	200c62c0 	call	200c62c <_free_r>
 2011904:	003fe706 	br	20118a4 <__alt_mem_epcs_flash_controller_0+0xfd0108a4>
 2011908:	0005883a 	mov	r2,zero
 201190c:	f800283a 	ret

02011910 <fclose>:
 2011910:	00808134 	movhi	r2,516
 2011914:	10b84a04 	addi	r2,r2,-7896
 2011918:	200b883a 	mov	r5,r4
 201191c:	11000017 	ldw	r4,0(r2)
 2011920:	20118201 	jmpi	2011820 <_fclose_r>

02011924 <__fputwc>:
 2011924:	defff804 	addi	sp,sp,-32
 2011928:	dcc00415 	stw	r19,16(sp)
 201192c:	dc800315 	stw	r18,12(sp)
 2011930:	dc000115 	stw	r16,4(sp)
 2011934:	dfc00715 	stw	ra,28(sp)
 2011938:	dd400615 	stw	r21,24(sp)
 201193c:	dd000515 	stw	r20,20(sp)
 2011940:	dc400215 	stw	r17,8(sp)
 2011944:	2027883a 	mov	r19,r4
 2011948:	2825883a 	mov	r18,r5
 201194c:	3021883a 	mov	r16,r6
 2011950:	200d0080 	call	200d008 <__locale_mb_cur_max>
 2011954:	00c00044 	movi	r3,1
 2011958:	10c03e26 	beq	r2,r3,2011a54 <__fputwc+0x130>
 201195c:	81c01704 	addi	r7,r16,92
 2011960:	900d883a 	mov	r6,r18
 2011964:	d80b883a 	mov	r5,sp
 2011968:	9809883a 	mov	r4,r19
 201196c:	2011df40 	call	2011df4 <_wcrtomb_r>
 2011970:	1029883a 	mov	r20,r2
 2011974:	00bfffc4 	movi	r2,-1
 2011978:	a0802026 	beq	r20,r2,20119fc <__fputwc+0xd8>
 201197c:	d9400003 	ldbu	r5,0(sp)
 2011980:	a0001c26 	beq	r20,zero,20119f4 <__fputwc+0xd0>
 2011984:	0023883a 	mov	r17,zero
 2011988:	05400284 	movi	r21,10
 201198c:	00000906 	br	20119b4 <__fputwc+0x90>
 2011990:	80800017 	ldw	r2,0(r16)
 2011994:	11400005 	stb	r5,0(r2)
 2011998:	80c00017 	ldw	r3,0(r16)
 201199c:	18c00044 	addi	r3,r3,1
 20119a0:	80c00015 	stw	r3,0(r16)
 20119a4:	8c400044 	addi	r17,r17,1
 20119a8:	dc45883a 	add	r2,sp,r17
 20119ac:	8d00112e 	bgeu	r17,r20,20119f4 <__fputwc+0xd0>
 20119b0:	11400003 	ldbu	r5,0(r2)
 20119b4:	80c00217 	ldw	r3,8(r16)
 20119b8:	18ffffc4 	addi	r3,r3,-1
 20119bc:	80c00215 	stw	r3,8(r16)
 20119c0:	183ff30e 	bge	r3,zero,2011990 <__alt_mem_epcs_flash_controller_0+0xfd010990>
 20119c4:	80800617 	ldw	r2,24(r16)
 20119c8:	18801916 	blt	r3,r2,2011a30 <__fputwc+0x10c>
 20119cc:	80800017 	ldw	r2,0(r16)
 20119d0:	11400005 	stb	r5,0(r2)
 20119d4:	80800017 	ldw	r2,0(r16)
 20119d8:	10c00003 	ldbu	r3,0(r2)
 20119dc:	10800044 	addi	r2,r2,1
 20119e0:	1d402326 	beq	r3,r21,2011a70 <__fputwc+0x14c>
 20119e4:	80800015 	stw	r2,0(r16)
 20119e8:	8c400044 	addi	r17,r17,1
 20119ec:	dc45883a 	add	r2,sp,r17
 20119f0:	8d3fef36 	bltu	r17,r20,20119b0 <__alt_mem_epcs_flash_controller_0+0xfd0109b0>
 20119f4:	9005883a 	mov	r2,r18
 20119f8:	00000406 	br	2011a0c <__fputwc+0xe8>
 20119fc:	80c0030b 	ldhu	r3,12(r16)
 2011a00:	a005883a 	mov	r2,r20
 2011a04:	18c01014 	ori	r3,r3,64
 2011a08:	80c0030d 	sth	r3,12(r16)
 2011a0c:	dfc00717 	ldw	ra,28(sp)
 2011a10:	dd400617 	ldw	r21,24(sp)
 2011a14:	dd000517 	ldw	r20,20(sp)
 2011a18:	dcc00417 	ldw	r19,16(sp)
 2011a1c:	dc800317 	ldw	r18,12(sp)
 2011a20:	dc400217 	ldw	r17,8(sp)
 2011a24:	dc000117 	ldw	r16,4(sp)
 2011a28:	dec00804 	addi	sp,sp,32
 2011a2c:	f800283a 	ret
 2011a30:	800d883a 	mov	r6,r16
 2011a34:	29403fcc 	andi	r5,r5,255
 2011a38:	9809883a 	mov	r4,r19
 2011a3c:	2011c9c0 	call	2011c9c <__swbuf_r>
 2011a40:	10bfffe0 	cmpeqi	r2,r2,-1
 2011a44:	10803fcc 	andi	r2,r2,255
 2011a48:	103fd626 	beq	r2,zero,20119a4 <__alt_mem_epcs_flash_controller_0+0xfd0109a4>
 2011a4c:	00bfffc4 	movi	r2,-1
 2011a50:	003fee06 	br	2011a0c <__alt_mem_epcs_flash_controller_0+0xfd010a0c>
 2011a54:	90ffffc4 	addi	r3,r18,-1
 2011a58:	01003f84 	movi	r4,254
 2011a5c:	20ffbf36 	bltu	r4,r3,201195c <__alt_mem_epcs_flash_controller_0+0xfd01095c>
 2011a60:	900b883a 	mov	r5,r18
 2011a64:	dc800005 	stb	r18,0(sp)
 2011a68:	1029883a 	mov	r20,r2
 2011a6c:	003fc506 	br	2011984 <__alt_mem_epcs_flash_controller_0+0xfd010984>
 2011a70:	800d883a 	mov	r6,r16
 2011a74:	a80b883a 	mov	r5,r21
 2011a78:	9809883a 	mov	r4,r19
 2011a7c:	2011c9c0 	call	2011c9c <__swbuf_r>
 2011a80:	10bfffe0 	cmpeqi	r2,r2,-1
 2011a84:	003fef06 	br	2011a44 <__alt_mem_epcs_flash_controller_0+0xfd010a44>

02011a88 <_fputwc_r>:
 2011a88:	3080030b 	ldhu	r2,12(r6)
 2011a8c:	10c8000c 	andi	r3,r2,8192
 2011a90:	1800051e 	bne	r3,zero,2011aa8 <_fputwc_r+0x20>
 2011a94:	30c01917 	ldw	r3,100(r6)
 2011a98:	10880014 	ori	r2,r2,8192
 2011a9c:	3080030d 	sth	r2,12(r6)
 2011aa0:	18880014 	ori	r2,r3,8192
 2011aa4:	30801915 	stw	r2,100(r6)
 2011aa8:	20119241 	jmpi	2011924 <__fputwc>

02011aac <fputwc>:
 2011aac:	00808134 	movhi	r2,516
 2011ab0:	defffc04 	addi	sp,sp,-16
 2011ab4:	10b84a04 	addi	r2,r2,-7896
 2011ab8:	dc000115 	stw	r16,4(sp)
 2011abc:	14000017 	ldw	r16,0(r2)
 2011ac0:	dc400215 	stw	r17,8(sp)
 2011ac4:	dfc00315 	stw	ra,12(sp)
 2011ac8:	2023883a 	mov	r17,r4
 2011acc:	80000226 	beq	r16,zero,2011ad8 <fputwc+0x2c>
 2011ad0:	80800e17 	ldw	r2,56(r16)
 2011ad4:	10001026 	beq	r2,zero,2011b18 <fputwc+0x6c>
 2011ad8:	2880030b 	ldhu	r2,12(r5)
 2011adc:	10c8000c 	andi	r3,r2,8192
 2011ae0:	1800051e 	bne	r3,zero,2011af8 <fputwc+0x4c>
 2011ae4:	28c01917 	ldw	r3,100(r5)
 2011ae8:	10880014 	ori	r2,r2,8192
 2011aec:	2880030d 	sth	r2,12(r5)
 2011af0:	18880014 	ori	r2,r3,8192
 2011af4:	28801915 	stw	r2,100(r5)
 2011af8:	280d883a 	mov	r6,r5
 2011afc:	8009883a 	mov	r4,r16
 2011b00:	880b883a 	mov	r5,r17
 2011b04:	dfc00317 	ldw	ra,12(sp)
 2011b08:	dc400217 	ldw	r17,8(sp)
 2011b0c:	dc000117 	ldw	r16,4(sp)
 2011b10:	dec00404 	addi	sp,sp,16
 2011b14:	20119241 	jmpi	2011924 <__fputwc>
 2011b18:	8009883a 	mov	r4,r16
 2011b1c:	d9400015 	stw	r5,0(sp)
 2011b20:	200c4b80 	call	200c4b8 <__sinit>
 2011b24:	d9400017 	ldw	r5,0(sp)
 2011b28:	003feb06 	br	2011ad8 <__alt_mem_epcs_flash_controller_0+0xfd010ad8>

02011b2c <_fstat_r>:
 2011b2c:	defffd04 	addi	sp,sp,-12
 2011b30:	2805883a 	mov	r2,r5
 2011b34:	dc000015 	stw	r16,0(sp)
 2011b38:	04008134 	movhi	r16,516
 2011b3c:	dc400115 	stw	r17,4(sp)
 2011b40:	84385e04 	addi	r16,r16,-7816
 2011b44:	2023883a 	mov	r17,r4
 2011b48:	300b883a 	mov	r5,r6
 2011b4c:	1009883a 	mov	r4,r2
 2011b50:	dfc00215 	stw	ra,8(sp)
 2011b54:	80000015 	stw	zero,0(r16)
 2011b58:	2012e6c0 	call	2012e6c <fstat>
 2011b5c:	00ffffc4 	movi	r3,-1
 2011b60:	10c00526 	beq	r2,r3,2011b78 <_fstat_r+0x4c>
 2011b64:	dfc00217 	ldw	ra,8(sp)
 2011b68:	dc400117 	ldw	r17,4(sp)
 2011b6c:	dc000017 	ldw	r16,0(sp)
 2011b70:	dec00304 	addi	sp,sp,12
 2011b74:	f800283a 	ret
 2011b78:	80c00017 	ldw	r3,0(r16)
 2011b7c:	183ff926 	beq	r3,zero,2011b64 <__alt_mem_epcs_flash_controller_0+0xfd010b64>
 2011b80:	88c00015 	stw	r3,0(r17)
 2011b84:	003ff706 	br	2011b64 <__alt_mem_epcs_flash_controller_0+0xfd010b64>

02011b88 <_isatty_r>:
 2011b88:	defffd04 	addi	sp,sp,-12
 2011b8c:	dc000015 	stw	r16,0(sp)
 2011b90:	04008134 	movhi	r16,516
 2011b94:	dc400115 	stw	r17,4(sp)
 2011b98:	84385e04 	addi	r16,r16,-7816
 2011b9c:	2023883a 	mov	r17,r4
 2011ba0:	2809883a 	mov	r4,r5
 2011ba4:	dfc00215 	stw	ra,8(sp)
 2011ba8:	80000015 	stw	zero,0(r16)
 2011bac:	2012f580 	call	2012f58 <isatty>
 2011bb0:	00ffffc4 	movi	r3,-1
 2011bb4:	10c00526 	beq	r2,r3,2011bcc <_isatty_r+0x44>
 2011bb8:	dfc00217 	ldw	ra,8(sp)
 2011bbc:	dc400117 	ldw	r17,4(sp)
 2011bc0:	dc000017 	ldw	r16,0(sp)
 2011bc4:	dec00304 	addi	sp,sp,12
 2011bc8:	f800283a 	ret
 2011bcc:	80c00017 	ldw	r3,0(r16)
 2011bd0:	183ff926 	beq	r3,zero,2011bb8 <__alt_mem_epcs_flash_controller_0+0xfd010bb8>
 2011bd4:	88c00015 	stw	r3,0(r17)
 2011bd8:	003ff706 	br	2011bb8 <__alt_mem_epcs_flash_controller_0+0xfd010bb8>

02011bdc <_lseek_r>:
 2011bdc:	defffd04 	addi	sp,sp,-12
 2011be0:	2805883a 	mov	r2,r5
 2011be4:	dc000015 	stw	r16,0(sp)
 2011be8:	04008134 	movhi	r16,516
 2011bec:	dc400115 	stw	r17,4(sp)
 2011bf0:	300b883a 	mov	r5,r6
 2011bf4:	84385e04 	addi	r16,r16,-7816
 2011bf8:	2023883a 	mov	r17,r4
 2011bfc:	380d883a 	mov	r6,r7
 2011c00:	1009883a 	mov	r4,r2
 2011c04:	dfc00215 	stw	ra,8(sp)
 2011c08:	80000015 	stw	zero,0(r16)
 2011c0c:	20130380 	call	2013038 <lseek>
 2011c10:	00ffffc4 	movi	r3,-1
 2011c14:	10c00526 	beq	r2,r3,2011c2c <_lseek_r+0x50>
 2011c18:	dfc00217 	ldw	ra,8(sp)
 2011c1c:	dc400117 	ldw	r17,4(sp)
 2011c20:	dc000017 	ldw	r16,0(sp)
 2011c24:	dec00304 	addi	sp,sp,12
 2011c28:	f800283a 	ret
 2011c2c:	80c00017 	ldw	r3,0(r16)
 2011c30:	183ff926 	beq	r3,zero,2011c18 <__alt_mem_epcs_flash_controller_0+0xfd010c18>
 2011c34:	88c00015 	stw	r3,0(r17)
 2011c38:	003ff706 	br	2011c18 <__alt_mem_epcs_flash_controller_0+0xfd010c18>

02011c3c <_read_r>:
 2011c3c:	defffd04 	addi	sp,sp,-12
 2011c40:	2805883a 	mov	r2,r5
 2011c44:	dc000015 	stw	r16,0(sp)
 2011c48:	04008134 	movhi	r16,516
 2011c4c:	dc400115 	stw	r17,4(sp)
 2011c50:	300b883a 	mov	r5,r6
 2011c54:	84385e04 	addi	r16,r16,-7816
 2011c58:	2023883a 	mov	r17,r4
 2011c5c:	380d883a 	mov	r6,r7
 2011c60:	1009883a 	mov	r4,r2
 2011c64:	dfc00215 	stw	ra,8(sp)
 2011c68:	80000015 	stw	zero,0(r16)
 2011c6c:	201320c0 	call	201320c <read>
 2011c70:	00ffffc4 	movi	r3,-1
 2011c74:	10c00526 	beq	r2,r3,2011c8c <_read_r+0x50>
 2011c78:	dfc00217 	ldw	ra,8(sp)
 2011c7c:	dc400117 	ldw	r17,4(sp)
 2011c80:	dc000017 	ldw	r16,0(sp)
 2011c84:	dec00304 	addi	sp,sp,12
 2011c88:	f800283a 	ret
 2011c8c:	80c00017 	ldw	r3,0(r16)
 2011c90:	183ff926 	beq	r3,zero,2011c78 <__alt_mem_epcs_flash_controller_0+0xfd010c78>
 2011c94:	88c00015 	stw	r3,0(r17)
 2011c98:	003ff706 	br	2011c78 <__alt_mem_epcs_flash_controller_0+0xfd010c78>

02011c9c <__swbuf_r>:
 2011c9c:	defffb04 	addi	sp,sp,-20
 2011ca0:	dcc00315 	stw	r19,12(sp)
 2011ca4:	dc800215 	stw	r18,8(sp)
 2011ca8:	dc000015 	stw	r16,0(sp)
 2011cac:	dfc00415 	stw	ra,16(sp)
 2011cb0:	dc400115 	stw	r17,4(sp)
 2011cb4:	2025883a 	mov	r18,r4
 2011cb8:	2827883a 	mov	r19,r5
 2011cbc:	3021883a 	mov	r16,r6
 2011cc0:	20000226 	beq	r4,zero,2011ccc <__swbuf_r+0x30>
 2011cc4:	20800e17 	ldw	r2,56(r4)
 2011cc8:	10004226 	beq	r2,zero,2011dd4 <__swbuf_r+0x138>
 2011ccc:	80800617 	ldw	r2,24(r16)
 2011cd0:	8100030b 	ldhu	r4,12(r16)
 2011cd4:	80800215 	stw	r2,8(r16)
 2011cd8:	2080020c 	andi	r2,r4,8
 2011cdc:	10003626 	beq	r2,zero,2011db8 <__swbuf_r+0x11c>
 2011ce0:	80c00417 	ldw	r3,16(r16)
 2011ce4:	18003426 	beq	r3,zero,2011db8 <__swbuf_r+0x11c>
 2011ce8:	2088000c 	andi	r2,r4,8192
 2011cec:	9c403fcc 	andi	r17,r19,255
 2011cf0:	10001a26 	beq	r2,zero,2011d5c <__swbuf_r+0xc0>
 2011cf4:	80800017 	ldw	r2,0(r16)
 2011cf8:	81000517 	ldw	r4,20(r16)
 2011cfc:	10c7c83a 	sub	r3,r2,r3
 2011d00:	1900200e 	bge	r3,r4,2011d84 <__swbuf_r+0xe8>
 2011d04:	18c00044 	addi	r3,r3,1
 2011d08:	81000217 	ldw	r4,8(r16)
 2011d0c:	11400044 	addi	r5,r2,1
 2011d10:	81400015 	stw	r5,0(r16)
 2011d14:	213fffc4 	addi	r4,r4,-1
 2011d18:	81000215 	stw	r4,8(r16)
 2011d1c:	14c00005 	stb	r19,0(r2)
 2011d20:	80800517 	ldw	r2,20(r16)
 2011d24:	10c01e26 	beq	r2,r3,2011da0 <__swbuf_r+0x104>
 2011d28:	8080030b 	ldhu	r2,12(r16)
 2011d2c:	1080004c 	andi	r2,r2,1
 2011d30:	10000226 	beq	r2,zero,2011d3c <__swbuf_r+0xa0>
 2011d34:	00800284 	movi	r2,10
 2011d38:	88801926 	beq	r17,r2,2011da0 <__swbuf_r+0x104>
 2011d3c:	8805883a 	mov	r2,r17
 2011d40:	dfc00417 	ldw	ra,16(sp)
 2011d44:	dcc00317 	ldw	r19,12(sp)
 2011d48:	dc800217 	ldw	r18,8(sp)
 2011d4c:	dc400117 	ldw	r17,4(sp)
 2011d50:	dc000017 	ldw	r16,0(sp)
 2011d54:	dec00504 	addi	sp,sp,20
 2011d58:	f800283a 	ret
 2011d5c:	81401917 	ldw	r5,100(r16)
 2011d60:	00b7ffc4 	movi	r2,-8193
 2011d64:	21080014 	ori	r4,r4,8192
 2011d68:	2884703a 	and	r2,r5,r2
 2011d6c:	80801915 	stw	r2,100(r16)
 2011d70:	80800017 	ldw	r2,0(r16)
 2011d74:	8100030d 	sth	r4,12(r16)
 2011d78:	81000517 	ldw	r4,20(r16)
 2011d7c:	10c7c83a 	sub	r3,r2,r3
 2011d80:	193fe016 	blt	r3,r4,2011d04 <__alt_mem_epcs_flash_controller_0+0xfd010d04>
 2011d84:	800b883a 	mov	r5,r16
 2011d88:	9009883a 	mov	r4,r18
 2011d8c:	200c0dc0 	call	200c0dc <_fflush_r>
 2011d90:	1000071e 	bne	r2,zero,2011db0 <__swbuf_r+0x114>
 2011d94:	80800017 	ldw	r2,0(r16)
 2011d98:	00c00044 	movi	r3,1
 2011d9c:	003fda06 	br	2011d08 <__alt_mem_epcs_flash_controller_0+0xfd010d08>
 2011da0:	800b883a 	mov	r5,r16
 2011da4:	9009883a 	mov	r4,r18
 2011da8:	200c0dc0 	call	200c0dc <_fflush_r>
 2011dac:	103fe326 	beq	r2,zero,2011d3c <__alt_mem_epcs_flash_controller_0+0xfd010d3c>
 2011db0:	00bfffc4 	movi	r2,-1
 2011db4:	003fe206 	br	2011d40 <__alt_mem_epcs_flash_controller_0+0xfd010d40>
 2011db8:	800b883a 	mov	r5,r16
 2011dbc:	9009883a 	mov	r4,r18
 2011dc0:	200a4e40 	call	200a4e4 <__swsetup_r>
 2011dc4:	103ffa1e 	bne	r2,zero,2011db0 <__alt_mem_epcs_flash_controller_0+0xfd010db0>
 2011dc8:	8100030b 	ldhu	r4,12(r16)
 2011dcc:	80c00417 	ldw	r3,16(r16)
 2011dd0:	003fc506 	br	2011ce8 <__alt_mem_epcs_flash_controller_0+0xfd010ce8>
 2011dd4:	200c4b80 	call	200c4b8 <__sinit>
 2011dd8:	003fbc06 	br	2011ccc <__alt_mem_epcs_flash_controller_0+0xfd010ccc>

02011ddc <__swbuf>:
 2011ddc:	00808134 	movhi	r2,516
 2011de0:	10b84a04 	addi	r2,r2,-7896
 2011de4:	280d883a 	mov	r6,r5
 2011de8:	200b883a 	mov	r5,r4
 2011dec:	11000017 	ldw	r4,0(r2)
 2011df0:	2011c9c1 	jmpi	2011c9c <__swbuf_r>

02011df4 <_wcrtomb_r>:
 2011df4:	defff604 	addi	sp,sp,-40
 2011df8:	00808134 	movhi	r2,516
 2011dfc:	dc800815 	stw	r18,32(sp)
 2011e00:	dc400715 	stw	r17,28(sp)
 2011e04:	dc000615 	stw	r16,24(sp)
 2011e08:	10b84e04 	addi	r2,r2,-7880
 2011e0c:	dfc00915 	stw	ra,36(sp)
 2011e10:	2021883a 	mov	r16,r4
 2011e14:	3823883a 	mov	r17,r7
 2011e18:	14800017 	ldw	r18,0(r2)
 2011e1c:	28001426 	beq	r5,zero,2011e70 <_wcrtomb_r+0x7c>
 2011e20:	d9400415 	stw	r5,16(sp)
 2011e24:	d9800515 	stw	r6,20(sp)
 2011e28:	200cffc0 	call	200cffc <__locale_charset>
 2011e2c:	d9800517 	ldw	r6,20(sp)
 2011e30:	d9400417 	ldw	r5,16(sp)
 2011e34:	100f883a 	mov	r7,r2
 2011e38:	dc400015 	stw	r17,0(sp)
 2011e3c:	8009883a 	mov	r4,r16
 2011e40:	903ee83a 	callr	r18
 2011e44:	00ffffc4 	movi	r3,-1
 2011e48:	10c0031e 	bne	r2,r3,2011e58 <_wcrtomb_r+0x64>
 2011e4c:	88000015 	stw	zero,0(r17)
 2011e50:	00c02284 	movi	r3,138
 2011e54:	80c00015 	stw	r3,0(r16)
 2011e58:	dfc00917 	ldw	ra,36(sp)
 2011e5c:	dc800817 	ldw	r18,32(sp)
 2011e60:	dc400717 	ldw	r17,28(sp)
 2011e64:	dc000617 	ldw	r16,24(sp)
 2011e68:	dec00a04 	addi	sp,sp,40
 2011e6c:	f800283a 	ret
 2011e70:	200cffc0 	call	200cffc <__locale_charset>
 2011e74:	100f883a 	mov	r7,r2
 2011e78:	dc400015 	stw	r17,0(sp)
 2011e7c:	000d883a 	mov	r6,zero
 2011e80:	d9400104 	addi	r5,sp,4
 2011e84:	8009883a 	mov	r4,r16
 2011e88:	903ee83a 	callr	r18
 2011e8c:	003fed06 	br	2011e44 <__alt_mem_epcs_flash_controller_0+0xfd010e44>

02011e90 <wcrtomb>:
 2011e90:	defff604 	addi	sp,sp,-40
 2011e94:	00808134 	movhi	r2,516
 2011e98:	dc800615 	stw	r18,24(sp)
 2011e9c:	dc400515 	stw	r17,20(sp)
 2011ea0:	10b84a04 	addi	r2,r2,-7896
 2011ea4:	dfc00915 	stw	ra,36(sp)
 2011ea8:	dd000815 	stw	r20,32(sp)
 2011eac:	dcc00715 	stw	r19,28(sp)
 2011eb0:	dc000415 	stw	r16,16(sp)
 2011eb4:	3025883a 	mov	r18,r6
 2011eb8:	14400017 	ldw	r17,0(r2)
 2011ebc:	20001926 	beq	r4,zero,2011f24 <wcrtomb+0x94>
 2011ec0:	00808134 	movhi	r2,516
 2011ec4:	10b84e04 	addi	r2,r2,-7880
 2011ec8:	15000017 	ldw	r20,0(r2)
 2011ecc:	2021883a 	mov	r16,r4
 2011ed0:	2827883a 	mov	r19,r5
 2011ed4:	200cffc0 	call	200cffc <__locale_charset>
 2011ed8:	100f883a 	mov	r7,r2
 2011edc:	dc800015 	stw	r18,0(sp)
 2011ee0:	980d883a 	mov	r6,r19
 2011ee4:	800b883a 	mov	r5,r16
 2011ee8:	8809883a 	mov	r4,r17
 2011eec:	a03ee83a 	callr	r20
 2011ef0:	00ffffc4 	movi	r3,-1
 2011ef4:	10c0031e 	bne	r2,r3,2011f04 <wcrtomb+0x74>
 2011ef8:	90000015 	stw	zero,0(r18)
 2011efc:	00c02284 	movi	r3,138
 2011f00:	88c00015 	stw	r3,0(r17)
 2011f04:	dfc00917 	ldw	ra,36(sp)
 2011f08:	dd000817 	ldw	r20,32(sp)
 2011f0c:	dcc00717 	ldw	r19,28(sp)
 2011f10:	dc800617 	ldw	r18,24(sp)
 2011f14:	dc400517 	ldw	r17,20(sp)
 2011f18:	dc000417 	ldw	r16,16(sp)
 2011f1c:	dec00a04 	addi	sp,sp,40
 2011f20:	f800283a 	ret
 2011f24:	00808134 	movhi	r2,516
 2011f28:	10b84e04 	addi	r2,r2,-7880
 2011f2c:	14000017 	ldw	r16,0(r2)
 2011f30:	200cffc0 	call	200cffc <__locale_charset>
 2011f34:	100f883a 	mov	r7,r2
 2011f38:	dc800015 	stw	r18,0(sp)
 2011f3c:	000d883a 	mov	r6,zero
 2011f40:	d9400104 	addi	r5,sp,4
 2011f44:	8809883a 	mov	r4,r17
 2011f48:	803ee83a 	callr	r16
 2011f4c:	003fe806 	br	2011ef0 <__alt_mem_epcs_flash_controller_0+0xfd010ef0>

02011f50 <__ascii_wctomb>:
 2011f50:	28000526 	beq	r5,zero,2011f68 <__ascii_wctomb+0x18>
 2011f54:	00803fc4 	movi	r2,255
 2011f58:	11800536 	bltu	r2,r6,2011f70 <__ascii_wctomb+0x20>
 2011f5c:	29800005 	stb	r6,0(r5)
 2011f60:	00800044 	movi	r2,1
 2011f64:	f800283a 	ret
 2011f68:	0005883a 	mov	r2,zero
 2011f6c:	f800283a 	ret
 2011f70:	00802284 	movi	r2,138
 2011f74:	20800015 	stw	r2,0(r4)
 2011f78:	00bfffc4 	movi	r2,-1
 2011f7c:	f800283a 	ret

02011f80 <_wctomb_r>:
 2011f80:	00808134 	movhi	r2,516
 2011f84:	defff904 	addi	sp,sp,-28
 2011f88:	10b84e04 	addi	r2,r2,-7880
 2011f8c:	dfc00615 	stw	ra,24(sp)
 2011f90:	dc400515 	stw	r17,20(sp)
 2011f94:	dc000415 	stw	r16,16(sp)
 2011f98:	3823883a 	mov	r17,r7
 2011f9c:	14000017 	ldw	r16,0(r2)
 2011fa0:	d9000115 	stw	r4,4(sp)
 2011fa4:	d9400215 	stw	r5,8(sp)
 2011fa8:	d9800315 	stw	r6,12(sp)
 2011fac:	200cffc0 	call	200cffc <__locale_charset>
 2011fb0:	d9800317 	ldw	r6,12(sp)
 2011fb4:	d9400217 	ldw	r5,8(sp)
 2011fb8:	d9000117 	ldw	r4,4(sp)
 2011fbc:	100f883a 	mov	r7,r2
 2011fc0:	dc400015 	stw	r17,0(sp)
 2011fc4:	803ee83a 	callr	r16
 2011fc8:	dfc00617 	ldw	ra,24(sp)
 2011fcc:	dc400517 	ldw	r17,20(sp)
 2011fd0:	dc000417 	ldw	r16,16(sp)
 2011fd4:	dec00704 	addi	sp,sp,28
 2011fd8:	f800283a 	ret

02011fdc <__muldi3>:
 2011fdc:	223fffcc 	andi	r8,r4,65535
 2011fe0:	2006d43a 	srli	r3,r4,16
 2011fe4:	32bfffcc 	andi	r10,r6,65535
 2011fe8:	3012d43a 	srli	r9,r6,16
 2011fec:	4297383a 	mul	r11,r8,r10
 2011ff0:	1a95383a 	mul	r10,r3,r10
 2011ff4:	4251383a 	mul	r8,r8,r9
 2011ff8:	5804d43a 	srli	r2,r11,16
 2011ffc:	4291883a 	add	r8,r8,r10
 2012000:	1205883a 	add	r2,r2,r8
 2012004:	1a51383a 	mul	r8,r3,r9
 2012008:	1280022e 	bgeu	r2,r10,2012014 <__muldi3+0x38>
 201200c:	00c00074 	movhi	r3,1
 2012010:	40d1883a 	add	r8,r8,r3
 2012014:	1006d43a 	srli	r3,r2,16
 2012018:	21cf383a 	mul	r7,r4,r7
 201201c:	314b383a 	mul	r5,r6,r5
 2012020:	1004943a 	slli	r2,r2,16
 2012024:	1a11883a 	add	r8,r3,r8
 2012028:	5affffcc 	andi	r11,r11,65535
 201202c:	3947883a 	add	r3,r7,r5
 2012030:	12c5883a 	add	r2,r2,r11
 2012034:	1a07883a 	add	r3,r3,r8
 2012038:	f800283a 	ret

0201203c <__udivdi3>:
 201203c:	defff504 	addi	sp,sp,-44
 2012040:	dcc00415 	stw	r19,16(sp)
 2012044:	dc000115 	stw	r16,4(sp)
 2012048:	dfc00a15 	stw	ra,40(sp)
 201204c:	df000915 	stw	fp,36(sp)
 2012050:	ddc00815 	stw	r23,32(sp)
 2012054:	dd800715 	stw	r22,28(sp)
 2012058:	dd400615 	stw	r21,24(sp)
 201205c:	dd000515 	stw	r20,20(sp)
 2012060:	dc800315 	stw	r18,12(sp)
 2012064:	dc400215 	stw	r17,8(sp)
 2012068:	2027883a 	mov	r19,r4
 201206c:	2821883a 	mov	r16,r5
 2012070:	3800411e 	bne	r7,zero,2012178 <__udivdi3+0x13c>
 2012074:	3023883a 	mov	r17,r6
 2012078:	2025883a 	mov	r18,r4
 201207c:	2980522e 	bgeu	r5,r6,20121c8 <__udivdi3+0x18c>
 2012080:	00bfffd4 	movui	r2,65535
 2012084:	282d883a 	mov	r22,r5
 2012088:	1180a836 	bltu	r2,r6,201232c <__udivdi3+0x2f0>
 201208c:	00803fc4 	movi	r2,255
 2012090:	1185803a 	cmpltu	r2,r2,r6
 2012094:	100490fa 	slli	r2,r2,3
 2012098:	3086d83a 	srl	r3,r6,r2
 201209c:	01008134 	movhi	r4,516
 20120a0:	21309344 	addi	r4,r4,-15795
 20120a4:	20c7883a 	add	r3,r4,r3
 20120a8:	18c00003 	ldbu	r3,0(r3)
 20120ac:	1885883a 	add	r2,r3,r2
 20120b0:	00c00804 	movi	r3,32
 20120b4:	1887c83a 	sub	r3,r3,r2
 20120b8:	18000526 	beq	r3,zero,20120d0 <__udivdi3+0x94>
 20120bc:	80e0983a 	sll	r16,r16,r3
 20120c0:	9884d83a 	srl	r2,r19,r2
 20120c4:	30e2983a 	sll	r17,r6,r3
 20120c8:	98e4983a 	sll	r18,r19,r3
 20120cc:	142cb03a 	or	r22,r2,r16
 20120d0:	882ad43a 	srli	r21,r17,16
 20120d4:	b009883a 	mov	r4,r22
 20120d8:	8d3fffcc 	andi	r20,r17,65535
 20120dc:	a80b883a 	mov	r5,r21
 20120e0:	20051340 	call	2005134 <__umodsi3>
 20120e4:	b009883a 	mov	r4,r22
 20120e8:	a80b883a 	mov	r5,r21
 20120ec:	1027883a 	mov	r19,r2
 20120f0:	20050d00 	call	20050d0 <__udivsi3>
 20120f4:	102d883a 	mov	r22,r2
 20120f8:	9826943a 	slli	r19,r19,16
 20120fc:	9004d43a 	srli	r2,r18,16
 2012100:	a5a1383a 	mul	r16,r20,r22
 2012104:	14c4b03a 	or	r2,r2,r19
 2012108:	1400052e 	bgeu	r2,r16,2012120 <__udivdi3+0xe4>
 201210c:	1445883a 	add	r2,r2,r17
 2012110:	b0ffffc4 	addi	r3,r22,-1
 2012114:	14400136 	bltu	r2,r17,201211c <__udivdi3+0xe0>
 2012118:	14012336 	bltu	r2,r16,20125a8 <__udivdi3+0x56c>
 201211c:	182d883a 	mov	r22,r3
 2012120:	1421c83a 	sub	r16,r2,r16
 2012124:	a80b883a 	mov	r5,r21
 2012128:	8009883a 	mov	r4,r16
 201212c:	20051340 	call	2005134 <__umodsi3>
 2012130:	1027883a 	mov	r19,r2
 2012134:	a80b883a 	mov	r5,r21
 2012138:	8009883a 	mov	r4,r16
 201213c:	20050d00 	call	20050d0 <__udivsi3>
 2012140:	9826943a 	slli	r19,r19,16
 2012144:	a0a9383a 	mul	r20,r20,r2
 2012148:	94bfffcc 	andi	r18,r18,65535
 201214c:	94e4b03a 	or	r18,r18,r19
 2012150:	9500052e 	bgeu	r18,r20,2012168 <__udivdi3+0x12c>
 2012154:	8ca5883a 	add	r18,r17,r18
 2012158:	10ffffc4 	addi	r3,r2,-1
 201215c:	9440f136 	bltu	r18,r17,2012524 <__udivdi3+0x4e8>
 2012160:	9500f02e 	bgeu	r18,r20,2012524 <__udivdi3+0x4e8>
 2012164:	10bfff84 	addi	r2,r2,-2
 2012168:	b00c943a 	slli	r6,r22,16
 201216c:	0007883a 	mov	r3,zero
 2012170:	3084b03a 	or	r2,r6,r2
 2012174:	00005906 	br	20122dc <__udivdi3+0x2a0>
 2012178:	29c05636 	bltu	r5,r7,20122d4 <__udivdi3+0x298>
 201217c:	00bfffd4 	movui	r2,65535
 2012180:	11c0622e 	bgeu	r2,r7,201230c <__udivdi3+0x2d0>
 2012184:	00804034 	movhi	r2,256
 2012188:	10bfffc4 	addi	r2,r2,-1
 201218c:	11c0ee36 	bltu	r2,r7,2012548 <__udivdi3+0x50c>
 2012190:	00800404 	movi	r2,16
 2012194:	3886d83a 	srl	r3,r7,r2
 2012198:	01008134 	movhi	r4,516
 201219c:	21309344 	addi	r4,r4,-15795
 20121a0:	20c7883a 	add	r3,r4,r3
 20121a4:	18c00003 	ldbu	r3,0(r3)
 20121a8:	05400804 	movi	r21,32
 20121ac:	1885883a 	add	r2,r3,r2
 20121b0:	a8abc83a 	sub	r21,r21,r2
 20121b4:	a800621e 	bne	r21,zero,2012340 <__udivdi3+0x304>
 20121b8:	3c00e936 	bltu	r7,r16,2012560 <__udivdi3+0x524>
 20121bc:	9985403a 	cmpgeu	r2,r19,r6
 20121c0:	0007883a 	mov	r3,zero
 20121c4:	00004506 	br	20122dc <__udivdi3+0x2a0>
 20121c8:	3000041e 	bne	r6,zero,20121dc <__udivdi3+0x1a0>
 20121cc:	000b883a 	mov	r5,zero
 20121d0:	01000044 	movi	r4,1
 20121d4:	20050d00 	call	20050d0 <__udivsi3>
 20121d8:	1023883a 	mov	r17,r2
 20121dc:	00bfffd4 	movui	r2,65535
 20121e0:	14404e2e 	bgeu	r2,r17,201231c <__udivdi3+0x2e0>
 20121e4:	00804034 	movhi	r2,256
 20121e8:	10bfffc4 	addi	r2,r2,-1
 20121ec:	1440d836 	bltu	r2,r17,2012550 <__udivdi3+0x514>
 20121f0:	00800404 	movi	r2,16
 20121f4:	8886d83a 	srl	r3,r17,r2
 20121f8:	01008134 	movhi	r4,516
 20121fc:	21309344 	addi	r4,r4,-15795
 2012200:	20c7883a 	add	r3,r4,r3
 2012204:	18c00003 	ldbu	r3,0(r3)
 2012208:	1885883a 	add	r2,r3,r2
 201220c:	00c00804 	movi	r3,32
 2012210:	1887c83a 	sub	r3,r3,r2
 2012214:	18008f1e 	bne	r3,zero,2012454 <__udivdi3+0x418>
 2012218:	882ad43a 	srli	r21,r17,16
 201221c:	8461c83a 	sub	r16,r16,r17
 2012220:	8d3fffcc 	andi	r20,r17,65535
 2012224:	00c00044 	movi	r3,1
 2012228:	8009883a 	mov	r4,r16
 201222c:	a80b883a 	mov	r5,r21
 2012230:	d8c00015 	stw	r3,0(sp)
 2012234:	20051340 	call	2005134 <__umodsi3>
 2012238:	8009883a 	mov	r4,r16
 201223c:	a80b883a 	mov	r5,r21
 2012240:	1027883a 	mov	r19,r2
 2012244:	20050d00 	call	20050d0 <__udivsi3>
 2012248:	9826943a 	slli	r19,r19,16
 201224c:	9008d43a 	srli	r4,r18,16
 2012250:	1521383a 	mul	r16,r2,r20
 2012254:	102d883a 	mov	r22,r2
 2012258:	24c8b03a 	or	r4,r4,r19
 201225c:	d8c00017 	ldw	r3,0(sp)
 2012260:	2400052e 	bgeu	r4,r16,2012278 <__udivdi3+0x23c>
 2012264:	2449883a 	add	r4,r4,r17
 2012268:	b0bfffc4 	addi	r2,r22,-1
 201226c:	24400136 	bltu	r4,r17,2012274 <__udivdi3+0x238>
 2012270:	2400ca36 	bltu	r4,r16,201259c <__udivdi3+0x560>
 2012274:	102d883a 	mov	r22,r2
 2012278:	2421c83a 	sub	r16,r4,r16
 201227c:	a80b883a 	mov	r5,r21
 2012280:	8009883a 	mov	r4,r16
 2012284:	d8c00015 	stw	r3,0(sp)
 2012288:	20051340 	call	2005134 <__umodsi3>
 201228c:	1027883a 	mov	r19,r2
 2012290:	a80b883a 	mov	r5,r21
 2012294:	8009883a 	mov	r4,r16
 2012298:	20050d00 	call	20050d0 <__udivsi3>
 201229c:	9826943a 	slli	r19,r19,16
 20122a0:	1529383a 	mul	r20,r2,r20
 20122a4:	94bfffcc 	andi	r18,r18,65535
 20122a8:	94e4b03a 	or	r18,r18,r19
 20122ac:	d8c00017 	ldw	r3,0(sp)
 20122b0:	9500052e 	bgeu	r18,r20,20122c8 <__udivdi3+0x28c>
 20122b4:	8ca5883a 	add	r18,r17,r18
 20122b8:	113fffc4 	addi	r4,r2,-1
 20122bc:	94409736 	bltu	r18,r17,201251c <__udivdi3+0x4e0>
 20122c0:	9500962e 	bgeu	r18,r20,201251c <__udivdi3+0x4e0>
 20122c4:	10bfff84 	addi	r2,r2,-2
 20122c8:	b00c943a 	slli	r6,r22,16
 20122cc:	3084b03a 	or	r2,r6,r2
 20122d0:	00000206 	br	20122dc <__udivdi3+0x2a0>
 20122d4:	0007883a 	mov	r3,zero
 20122d8:	0005883a 	mov	r2,zero
 20122dc:	dfc00a17 	ldw	ra,40(sp)
 20122e0:	df000917 	ldw	fp,36(sp)
 20122e4:	ddc00817 	ldw	r23,32(sp)
 20122e8:	dd800717 	ldw	r22,28(sp)
 20122ec:	dd400617 	ldw	r21,24(sp)
 20122f0:	dd000517 	ldw	r20,20(sp)
 20122f4:	dcc00417 	ldw	r19,16(sp)
 20122f8:	dc800317 	ldw	r18,12(sp)
 20122fc:	dc400217 	ldw	r17,8(sp)
 2012300:	dc000117 	ldw	r16,4(sp)
 2012304:	dec00b04 	addi	sp,sp,44
 2012308:	f800283a 	ret
 201230c:	00803fc4 	movi	r2,255
 2012310:	11c5803a 	cmpltu	r2,r2,r7
 2012314:	100490fa 	slli	r2,r2,3
 2012318:	003f9e06 	br	2012194 <__alt_mem_epcs_flash_controller_0+0xfd011194>
 201231c:	00803fc4 	movi	r2,255
 2012320:	1445803a 	cmpltu	r2,r2,r17
 2012324:	100490fa 	slli	r2,r2,3
 2012328:	003fb206 	br	20121f4 <__alt_mem_epcs_flash_controller_0+0xfd0111f4>
 201232c:	00804034 	movhi	r2,256
 2012330:	10bfffc4 	addi	r2,r2,-1
 2012334:	11808836 	bltu	r2,r6,2012558 <__udivdi3+0x51c>
 2012338:	00800404 	movi	r2,16
 201233c:	003f5606 	br	2012098 <__alt_mem_epcs_flash_controller_0+0xfd011098>
 2012340:	30aed83a 	srl	r23,r6,r2
 2012344:	3d4e983a 	sll	r7,r7,r21
 2012348:	80acd83a 	srl	r22,r16,r2
 201234c:	9884d83a 	srl	r2,r19,r2
 2012350:	3deeb03a 	or	r23,r7,r23
 2012354:	b824d43a 	srli	r18,r23,16
 2012358:	8560983a 	sll	r16,r16,r21
 201235c:	b009883a 	mov	r4,r22
 2012360:	900b883a 	mov	r5,r18
 2012364:	3568983a 	sll	r20,r6,r21
 2012368:	1420b03a 	or	r16,r2,r16
 201236c:	20051340 	call	2005134 <__umodsi3>
 2012370:	b009883a 	mov	r4,r22
 2012374:	900b883a 	mov	r5,r18
 2012378:	1023883a 	mov	r17,r2
 201237c:	20050d00 	call	20050d0 <__udivsi3>
 2012380:	8808943a 	slli	r4,r17,16
 2012384:	bf3fffcc 	andi	fp,r23,65535
 2012388:	8006d43a 	srli	r3,r16,16
 201238c:	e0a3383a 	mul	r17,fp,r2
 2012390:	100d883a 	mov	r6,r2
 2012394:	1906b03a 	or	r3,r3,r4
 2012398:	1c40042e 	bgeu	r3,r17,20123ac <__udivdi3+0x370>
 201239c:	1dc7883a 	add	r3,r3,r23
 20123a0:	10bfffc4 	addi	r2,r2,-1
 20123a4:	1dc0752e 	bgeu	r3,r23,201257c <__udivdi3+0x540>
 20123a8:	100d883a 	mov	r6,r2
 20123ac:	1c63c83a 	sub	r17,r3,r17
 20123b0:	900b883a 	mov	r5,r18
 20123b4:	8809883a 	mov	r4,r17
 20123b8:	d9800015 	stw	r6,0(sp)
 20123bc:	20051340 	call	2005134 <__umodsi3>
 20123c0:	102d883a 	mov	r22,r2
 20123c4:	8809883a 	mov	r4,r17
 20123c8:	900b883a 	mov	r5,r18
 20123cc:	20050d00 	call	20050d0 <__udivsi3>
 20123d0:	b02c943a 	slli	r22,r22,16
 20123d4:	e089383a 	mul	r4,fp,r2
 20123d8:	843fffcc 	andi	r16,r16,65535
 20123dc:	85a0b03a 	or	r16,r16,r22
 20123e0:	d9800017 	ldw	r6,0(sp)
 20123e4:	8100042e 	bgeu	r16,r4,20123f8 <__udivdi3+0x3bc>
 20123e8:	85e1883a 	add	r16,r16,r23
 20123ec:	10ffffc4 	addi	r3,r2,-1
 20123f0:	85c05e2e 	bgeu	r16,r23,201256c <__udivdi3+0x530>
 20123f4:	1805883a 	mov	r2,r3
 20123f8:	300c943a 	slli	r6,r6,16
 20123fc:	a17fffcc 	andi	r5,r20,65535
 2012400:	a028d43a 	srli	r20,r20,16
 2012404:	3084b03a 	or	r2,r6,r2
 2012408:	10ffffcc 	andi	r3,r2,65535
 201240c:	100cd43a 	srli	r6,r2,16
 2012410:	194f383a 	mul	r7,r3,r5
 2012414:	1d07383a 	mul	r3,r3,r20
 2012418:	314b383a 	mul	r5,r6,r5
 201241c:	3810d43a 	srli	r8,r7,16
 2012420:	8121c83a 	sub	r16,r16,r4
 2012424:	1947883a 	add	r3,r3,r5
 2012428:	40c7883a 	add	r3,r8,r3
 201242c:	350d383a 	mul	r6,r6,r20
 2012430:	1940022e 	bgeu	r3,r5,201243c <__udivdi3+0x400>
 2012434:	01000074 	movhi	r4,1
 2012438:	310d883a 	add	r6,r6,r4
 201243c:	1828d43a 	srli	r20,r3,16
 2012440:	a18d883a 	add	r6,r20,r6
 2012444:	81803e36 	bltu	r16,r6,2012540 <__udivdi3+0x504>
 2012448:	81803826 	beq	r16,r6,201252c <__udivdi3+0x4f0>
 201244c:	0007883a 	mov	r3,zero
 2012450:	003fa206 	br	20122dc <__alt_mem_epcs_flash_controller_0+0xfd0112dc>
 2012454:	88e2983a 	sll	r17,r17,r3
 2012458:	80a8d83a 	srl	r20,r16,r2
 201245c:	80e0983a 	sll	r16,r16,r3
 2012460:	882ad43a 	srli	r21,r17,16
 2012464:	9884d83a 	srl	r2,r19,r2
 2012468:	a009883a 	mov	r4,r20
 201246c:	a80b883a 	mov	r5,r21
 2012470:	142eb03a 	or	r23,r2,r16
 2012474:	98e4983a 	sll	r18,r19,r3
 2012478:	20051340 	call	2005134 <__umodsi3>
 201247c:	a009883a 	mov	r4,r20
 2012480:	a80b883a 	mov	r5,r21
 2012484:	1021883a 	mov	r16,r2
 2012488:	20050d00 	call	20050d0 <__udivsi3>
 201248c:	1039883a 	mov	fp,r2
 2012490:	8d3fffcc 	andi	r20,r17,65535
 2012494:	8020943a 	slli	r16,r16,16
 2012498:	b804d43a 	srli	r2,r23,16
 201249c:	a72d383a 	mul	r22,r20,fp
 20124a0:	1404b03a 	or	r2,r2,r16
 20124a4:	1580062e 	bgeu	r2,r22,20124c0 <__udivdi3+0x484>
 20124a8:	1445883a 	add	r2,r2,r17
 20124ac:	e0ffffc4 	addi	r3,fp,-1
 20124b0:	14403836 	bltu	r2,r17,2012594 <__udivdi3+0x558>
 20124b4:	1580372e 	bgeu	r2,r22,2012594 <__udivdi3+0x558>
 20124b8:	e73fff84 	addi	fp,fp,-2
 20124bc:	1445883a 	add	r2,r2,r17
 20124c0:	15adc83a 	sub	r22,r2,r22
 20124c4:	a80b883a 	mov	r5,r21
 20124c8:	b009883a 	mov	r4,r22
 20124cc:	20051340 	call	2005134 <__umodsi3>
 20124d0:	1027883a 	mov	r19,r2
 20124d4:	b009883a 	mov	r4,r22
 20124d8:	a80b883a 	mov	r5,r21
 20124dc:	20050d00 	call	20050d0 <__udivsi3>
 20124e0:	9826943a 	slli	r19,r19,16
 20124e4:	a0a1383a 	mul	r16,r20,r2
 20124e8:	b93fffcc 	andi	r4,r23,65535
 20124ec:	24c8b03a 	or	r4,r4,r19
 20124f0:	2400062e 	bgeu	r4,r16,201250c <__udivdi3+0x4d0>
 20124f4:	2449883a 	add	r4,r4,r17
 20124f8:	10ffffc4 	addi	r3,r2,-1
 20124fc:	24402336 	bltu	r4,r17,201258c <__udivdi3+0x550>
 2012500:	2400222e 	bgeu	r4,r16,201258c <__udivdi3+0x550>
 2012504:	10bfff84 	addi	r2,r2,-2
 2012508:	2449883a 	add	r4,r4,r17
 201250c:	e038943a 	slli	fp,fp,16
 2012510:	2421c83a 	sub	r16,r4,r16
 2012514:	e086b03a 	or	r3,fp,r2
 2012518:	003f4306 	br	2012228 <__alt_mem_epcs_flash_controller_0+0xfd011228>
 201251c:	2005883a 	mov	r2,r4
 2012520:	003f6906 	br	20122c8 <__alt_mem_epcs_flash_controller_0+0xfd0112c8>
 2012524:	1805883a 	mov	r2,r3
 2012528:	003f0f06 	br	2012168 <__alt_mem_epcs_flash_controller_0+0xfd011168>
 201252c:	1806943a 	slli	r3,r3,16
 2012530:	9d66983a 	sll	r19,r19,r21
 2012534:	39ffffcc 	andi	r7,r7,65535
 2012538:	19c7883a 	add	r3,r3,r7
 201253c:	98ffc32e 	bgeu	r19,r3,201244c <__alt_mem_epcs_flash_controller_0+0xfd01144c>
 2012540:	10bfffc4 	addi	r2,r2,-1
 2012544:	003fc106 	br	201244c <__alt_mem_epcs_flash_controller_0+0xfd01144c>
 2012548:	00800604 	movi	r2,24
 201254c:	003f1106 	br	2012194 <__alt_mem_epcs_flash_controller_0+0xfd011194>
 2012550:	00800604 	movi	r2,24
 2012554:	003f2706 	br	20121f4 <__alt_mem_epcs_flash_controller_0+0xfd0111f4>
 2012558:	00800604 	movi	r2,24
 201255c:	003ece06 	br	2012098 <__alt_mem_epcs_flash_controller_0+0xfd011098>
 2012560:	0007883a 	mov	r3,zero
 2012564:	00800044 	movi	r2,1
 2012568:	003f5c06 	br	20122dc <__alt_mem_epcs_flash_controller_0+0xfd0112dc>
 201256c:	813fa12e 	bgeu	r16,r4,20123f4 <__alt_mem_epcs_flash_controller_0+0xfd0113f4>
 2012570:	10bfff84 	addi	r2,r2,-2
 2012574:	85e1883a 	add	r16,r16,r23
 2012578:	003f9f06 	br	20123f8 <__alt_mem_epcs_flash_controller_0+0xfd0113f8>
 201257c:	1c7f8a2e 	bgeu	r3,r17,20123a8 <__alt_mem_epcs_flash_controller_0+0xfd0113a8>
 2012580:	31bfff84 	addi	r6,r6,-2
 2012584:	1dc7883a 	add	r3,r3,r23
 2012588:	003f8806 	br	20123ac <__alt_mem_epcs_flash_controller_0+0xfd0113ac>
 201258c:	1805883a 	mov	r2,r3
 2012590:	003fde06 	br	201250c <__alt_mem_epcs_flash_controller_0+0xfd01150c>
 2012594:	1839883a 	mov	fp,r3
 2012598:	003fc906 	br	20124c0 <__alt_mem_epcs_flash_controller_0+0xfd0114c0>
 201259c:	b5bfff84 	addi	r22,r22,-2
 20125a0:	2449883a 	add	r4,r4,r17
 20125a4:	003f3406 	br	2012278 <__alt_mem_epcs_flash_controller_0+0xfd011278>
 20125a8:	b5bfff84 	addi	r22,r22,-2
 20125ac:	1445883a 	add	r2,r2,r17
 20125b0:	003edb06 	br	2012120 <__alt_mem_epcs_flash_controller_0+0xfd011120>

020125b4 <__umoddi3>:
 20125b4:	defff404 	addi	sp,sp,-48
 20125b8:	df000a15 	stw	fp,40(sp)
 20125bc:	dc400315 	stw	r17,12(sp)
 20125c0:	dc000215 	stw	r16,8(sp)
 20125c4:	dfc00b15 	stw	ra,44(sp)
 20125c8:	ddc00915 	stw	r23,36(sp)
 20125cc:	dd800815 	stw	r22,32(sp)
 20125d0:	dd400715 	stw	r21,28(sp)
 20125d4:	dd000615 	stw	r20,24(sp)
 20125d8:	dcc00515 	stw	r19,20(sp)
 20125dc:	dc800415 	stw	r18,16(sp)
 20125e0:	2021883a 	mov	r16,r4
 20125e4:	2823883a 	mov	r17,r5
 20125e8:	2839883a 	mov	fp,r5
 20125ec:	38003c1e 	bne	r7,zero,20126e0 <__umoddi3+0x12c>
 20125f0:	3027883a 	mov	r19,r6
 20125f4:	2029883a 	mov	r20,r4
 20125f8:	2980512e 	bgeu	r5,r6,2012740 <__umoddi3+0x18c>
 20125fc:	00bfffd4 	movui	r2,65535
 2012600:	11809a36 	bltu	r2,r6,201286c <__umoddi3+0x2b8>
 2012604:	01003fc4 	movi	r4,255
 2012608:	2189803a 	cmpltu	r4,r4,r6
 201260c:	200890fa 	slli	r4,r4,3
 2012610:	3104d83a 	srl	r2,r6,r4
 2012614:	00c08134 	movhi	r3,516
 2012618:	18f09344 	addi	r3,r3,-15795
 201261c:	1885883a 	add	r2,r3,r2
 2012620:	10c00003 	ldbu	r3,0(r2)
 2012624:	00800804 	movi	r2,32
 2012628:	1909883a 	add	r4,r3,r4
 201262c:	1125c83a 	sub	r18,r2,r4
 2012630:	90000526 	beq	r18,zero,2012648 <__umoddi3+0x94>
 2012634:	8ca2983a 	sll	r17,r17,r18
 2012638:	8108d83a 	srl	r4,r16,r4
 201263c:	34a6983a 	sll	r19,r6,r18
 2012640:	84a8983a 	sll	r20,r16,r18
 2012644:	2478b03a 	or	fp,r4,r17
 2012648:	982ed43a 	srli	r23,r19,16
 201264c:	e009883a 	mov	r4,fp
 2012650:	9dbfffcc 	andi	r22,r19,65535
 2012654:	b80b883a 	mov	r5,r23
 2012658:	20051340 	call	2005134 <__umodsi3>
 201265c:	e009883a 	mov	r4,fp
 2012660:	b80b883a 	mov	r5,r23
 2012664:	102b883a 	mov	r21,r2
 2012668:	20050d00 	call	20050d0 <__udivsi3>
 201266c:	a806943a 	slli	r3,r21,16
 2012670:	a008d43a 	srli	r4,r20,16
 2012674:	b085383a 	mul	r2,r22,r2
 2012678:	20c8b03a 	or	r4,r4,r3
 201267c:	2080032e 	bgeu	r4,r2,201268c <__umoddi3+0xd8>
 2012680:	24c9883a 	add	r4,r4,r19
 2012684:	24c00136 	bltu	r4,r19,201268c <__umoddi3+0xd8>
 2012688:	20811036 	bltu	r4,r2,2012acc <__umoddi3+0x518>
 201268c:	20abc83a 	sub	r21,r4,r2
 2012690:	b80b883a 	mov	r5,r23
 2012694:	a809883a 	mov	r4,r21
 2012698:	20051340 	call	2005134 <__umodsi3>
 201269c:	1023883a 	mov	r17,r2
 20126a0:	b80b883a 	mov	r5,r23
 20126a4:	a809883a 	mov	r4,r21
 20126a8:	20050d00 	call	20050d0 <__udivsi3>
 20126ac:	8822943a 	slli	r17,r17,16
 20126b0:	b085383a 	mul	r2,r22,r2
 20126b4:	a0ffffcc 	andi	r3,r20,65535
 20126b8:	1c46b03a 	or	r3,r3,r17
 20126bc:	1880042e 	bgeu	r3,r2,20126d0 <__umoddi3+0x11c>
 20126c0:	1cc7883a 	add	r3,r3,r19
 20126c4:	1cc00236 	bltu	r3,r19,20126d0 <__umoddi3+0x11c>
 20126c8:	1880012e 	bgeu	r3,r2,20126d0 <__umoddi3+0x11c>
 20126cc:	1cc7883a 	add	r3,r3,r19
 20126d0:	1885c83a 	sub	r2,r3,r2
 20126d4:	1484d83a 	srl	r2,r2,r18
 20126d8:	0007883a 	mov	r3,zero
 20126dc:	00004f06 	br	201281c <__umoddi3+0x268>
 20126e0:	29c04c36 	bltu	r5,r7,2012814 <__umoddi3+0x260>
 20126e4:	00bfffd4 	movui	r2,65535
 20126e8:	11c0582e 	bgeu	r2,r7,201284c <__umoddi3+0x298>
 20126ec:	00804034 	movhi	r2,256
 20126f0:	10bfffc4 	addi	r2,r2,-1
 20126f4:	11c0e736 	bltu	r2,r7,2012a94 <__umoddi3+0x4e0>
 20126f8:	01000404 	movi	r4,16
 20126fc:	3904d83a 	srl	r2,r7,r4
 2012700:	00c08134 	movhi	r3,516
 2012704:	18f09344 	addi	r3,r3,-15795
 2012708:	1885883a 	add	r2,r3,r2
 201270c:	14c00003 	ldbu	r19,0(r2)
 2012710:	00c00804 	movi	r3,32
 2012714:	9927883a 	add	r19,r19,r4
 2012718:	1ce9c83a 	sub	r20,r3,r19
 201271c:	a000581e 	bne	r20,zero,2012880 <__umoddi3+0x2cc>
 2012720:	3c400136 	bltu	r7,r17,2012728 <__umoddi3+0x174>
 2012724:	8180eb36 	bltu	r16,r6,2012ad4 <__umoddi3+0x520>
 2012728:	8185c83a 	sub	r2,r16,r6
 201272c:	89e3c83a 	sub	r17,r17,r7
 2012730:	8089803a 	cmpltu	r4,r16,r2
 2012734:	8939c83a 	sub	fp,r17,r4
 2012738:	e007883a 	mov	r3,fp
 201273c:	00003706 	br	201281c <__umoddi3+0x268>
 2012740:	3000041e 	bne	r6,zero,2012754 <__umoddi3+0x1a0>
 2012744:	000b883a 	mov	r5,zero
 2012748:	01000044 	movi	r4,1
 201274c:	20050d00 	call	20050d0 <__udivsi3>
 2012750:	1027883a 	mov	r19,r2
 2012754:	00bfffd4 	movui	r2,65535
 2012758:	14c0402e 	bgeu	r2,r19,201285c <__umoddi3+0x2a8>
 201275c:	00804034 	movhi	r2,256
 2012760:	10bfffc4 	addi	r2,r2,-1
 2012764:	14c0cd36 	bltu	r2,r19,2012a9c <__umoddi3+0x4e8>
 2012768:	00800404 	movi	r2,16
 201276c:	9886d83a 	srl	r3,r19,r2
 2012770:	01008134 	movhi	r4,516
 2012774:	21309344 	addi	r4,r4,-15795
 2012778:	20c7883a 	add	r3,r4,r3
 201277c:	18c00003 	ldbu	r3,0(r3)
 2012780:	1887883a 	add	r3,r3,r2
 2012784:	00800804 	movi	r2,32
 2012788:	10e5c83a 	sub	r18,r2,r3
 201278c:	9000901e 	bne	r18,zero,20129d0 <__umoddi3+0x41c>
 2012790:	982cd43a 	srli	r22,r19,16
 2012794:	8ce3c83a 	sub	r17,r17,r19
 2012798:	9d7fffcc 	andi	r21,r19,65535
 201279c:	b00b883a 	mov	r5,r22
 20127a0:	8809883a 	mov	r4,r17
 20127a4:	20051340 	call	2005134 <__umodsi3>
 20127a8:	8809883a 	mov	r4,r17
 20127ac:	b00b883a 	mov	r5,r22
 20127b0:	1021883a 	mov	r16,r2
 20127b4:	20050d00 	call	20050d0 <__udivsi3>
 20127b8:	8006943a 	slli	r3,r16,16
 20127bc:	a008d43a 	srli	r4,r20,16
 20127c0:	1545383a 	mul	r2,r2,r21
 20127c4:	20c8b03a 	or	r4,r4,r3
 20127c8:	2080042e 	bgeu	r4,r2,20127dc <__umoddi3+0x228>
 20127cc:	24c9883a 	add	r4,r4,r19
 20127d0:	24c00236 	bltu	r4,r19,20127dc <__umoddi3+0x228>
 20127d4:	2080012e 	bgeu	r4,r2,20127dc <__umoddi3+0x228>
 20127d8:	24c9883a 	add	r4,r4,r19
 20127dc:	20a1c83a 	sub	r16,r4,r2
 20127e0:	b00b883a 	mov	r5,r22
 20127e4:	8009883a 	mov	r4,r16
 20127e8:	20051340 	call	2005134 <__umodsi3>
 20127ec:	1023883a 	mov	r17,r2
 20127f0:	b00b883a 	mov	r5,r22
 20127f4:	8009883a 	mov	r4,r16
 20127f8:	20050d00 	call	20050d0 <__udivsi3>
 20127fc:	8822943a 	slli	r17,r17,16
 2012800:	1545383a 	mul	r2,r2,r21
 2012804:	a53fffcc 	andi	r20,r20,65535
 2012808:	a446b03a 	or	r3,r20,r17
 201280c:	18bfb02e 	bgeu	r3,r2,20126d0 <__alt_mem_epcs_flash_controller_0+0xfd0116d0>
 2012810:	003fab06 	br	20126c0 <__alt_mem_epcs_flash_controller_0+0xfd0116c0>
 2012814:	2005883a 	mov	r2,r4
 2012818:	2807883a 	mov	r3,r5
 201281c:	dfc00b17 	ldw	ra,44(sp)
 2012820:	df000a17 	ldw	fp,40(sp)
 2012824:	ddc00917 	ldw	r23,36(sp)
 2012828:	dd800817 	ldw	r22,32(sp)
 201282c:	dd400717 	ldw	r21,28(sp)
 2012830:	dd000617 	ldw	r20,24(sp)
 2012834:	dcc00517 	ldw	r19,20(sp)
 2012838:	dc800417 	ldw	r18,16(sp)
 201283c:	dc400317 	ldw	r17,12(sp)
 2012840:	dc000217 	ldw	r16,8(sp)
 2012844:	dec00c04 	addi	sp,sp,48
 2012848:	f800283a 	ret
 201284c:	04c03fc4 	movi	r19,255
 2012850:	99c9803a 	cmpltu	r4,r19,r7
 2012854:	200890fa 	slli	r4,r4,3
 2012858:	003fa806 	br	20126fc <__alt_mem_epcs_flash_controller_0+0xfd0116fc>
 201285c:	00803fc4 	movi	r2,255
 2012860:	14c5803a 	cmpltu	r2,r2,r19
 2012864:	100490fa 	slli	r2,r2,3
 2012868:	003fc006 	br	201276c <__alt_mem_epcs_flash_controller_0+0xfd01176c>
 201286c:	00804034 	movhi	r2,256
 2012870:	10bfffc4 	addi	r2,r2,-1
 2012874:	11808b36 	bltu	r2,r6,2012aa4 <__umoddi3+0x4f0>
 2012878:	01000404 	movi	r4,16
 201287c:	003f6406 	br	2012610 <__alt_mem_epcs_flash_controller_0+0xfd011610>
 2012880:	34c4d83a 	srl	r2,r6,r19
 2012884:	3d0e983a 	sll	r7,r7,r20
 2012888:	8cf8d83a 	srl	fp,r17,r19
 201288c:	8d10983a 	sll	r8,r17,r20
 2012890:	38aab03a 	or	r21,r7,r2
 2012894:	a82cd43a 	srli	r22,r21,16
 2012898:	84e2d83a 	srl	r17,r16,r19
 201289c:	e009883a 	mov	r4,fp
 20128a0:	b00b883a 	mov	r5,r22
 20128a4:	8a22b03a 	or	r17,r17,r8
 20128a8:	3524983a 	sll	r18,r6,r20
 20128ac:	20051340 	call	2005134 <__umodsi3>
 20128b0:	e009883a 	mov	r4,fp
 20128b4:	b00b883a 	mov	r5,r22
 20128b8:	102f883a 	mov	r23,r2
 20128bc:	20050d00 	call	20050d0 <__udivsi3>
 20128c0:	100d883a 	mov	r6,r2
 20128c4:	b808943a 	slli	r4,r23,16
 20128c8:	aa3fffcc 	andi	r8,r21,65535
 20128cc:	8804d43a 	srli	r2,r17,16
 20128d0:	41af383a 	mul	r23,r8,r6
 20128d4:	8520983a 	sll	r16,r16,r20
 20128d8:	1104b03a 	or	r2,r2,r4
 20128dc:	15c0042e 	bgeu	r2,r23,20128f0 <__umoddi3+0x33c>
 20128e0:	1545883a 	add	r2,r2,r21
 20128e4:	30ffffc4 	addi	r3,r6,-1
 20128e8:	1540742e 	bgeu	r2,r21,2012abc <__umoddi3+0x508>
 20128ec:	180d883a 	mov	r6,r3
 20128f0:	15efc83a 	sub	r23,r2,r23
 20128f4:	b00b883a 	mov	r5,r22
 20128f8:	b809883a 	mov	r4,r23
 20128fc:	d9800115 	stw	r6,4(sp)
 2012900:	da000015 	stw	r8,0(sp)
 2012904:	20051340 	call	2005134 <__umodsi3>
 2012908:	b00b883a 	mov	r5,r22
 201290c:	b809883a 	mov	r4,r23
 2012910:	1039883a 	mov	fp,r2
 2012914:	20050d00 	call	20050d0 <__udivsi3>
 2012918:	da000017 	ldw	r8,0(sp)
 201291c:	e038943a 	slli	fp,fp,16
 2012920:	100b883a 	mov	r5,r2
 2012924:	4089383a 	mul	r4,r8,r2
 2012928:	8a3fffcc 	andi	r8,r17,65535
 201292c:	4710b03a 	or	r8,r8,fp
 2012930:	d9800117 	ldw	r6,4(sp)
 2012934:	4100042e 	bgeu	r8,r4,2012948 <__umoddi3+0x394>
 2012938:	4551883a 	add	r8,r8,r21
 201293c:	10bfffc4 	addi	r2,r2,-1
 2012940:	45405a2e 	bgeu	r8,r21,2012aac <__umoddi3+0x4f8>
 2012944:	100b883a 	mov	r5,r2
 2012948:	300c943a 	slli	r6,r6,16
 201294c:	91ffffcc 	andi	r7,r18,65535
 2012950:	9004d43a 	srli	r2,r18,16
 2012954:	314cb03a 	or	r6,r6,r5
 2012958:	317fffcc 	andi	r5,r6,65535
 201295c:	300cd43a 	srli	r6,r6,16
 2012960:	29d3383a 	mul	r9,r5,r7
 2012964:	288b383a 	mul	r5,r5,r2
 2012968:	31cf383a 	mul	r7,r6,r7
 201296c:	4806d43a 	srli	r3,r9,16
 2012970:	4111c83a 	sub	r8,r8,r4
 2012974:	29cb883a 	add	r5,r5,r7
 2012978:	194b883a 	add	r5,r3,r5
 201297c:	3085383a 	mul	r2,r6,r2
 2012980:	29c0022e 	bgeu	r5,r7,201298c <__umoddi3+0x3d8>
 2012984:	00c00074 	movhi	r3,1
 2012988:	10c5883a 	add	r2,r2,r3
 201298c:	2808d43a 	srli	r4,r5,16
 2012990:	280a943a 	slli	r5,r5,16
 2012994:	4a7fffcc 	andi	r9,r9,65535
 2012998:	2085883a 	add	r2,r4,r2
 201299c:	2a4b883a 	add	r5,r5,r9
 20129a0:	40803636 	bltu	r8,r2,2012a7c <__umoddi3+0x4c8>
 20129a4:	40804d26 	beq	r8,r2,2012adc <__umoddi3+0x528>
 20129a8:	4089c83a 	sub	r4,r8,r2
 20129ac:	280f883a 	mov	r7,r5
 20129b0:	81cfc83a 	sub	r7,r16,r7
 20129b4:	81c7803a 	cmpltu	r3,r16,r7
 20129b8:	20c7c83a 	sub	r3,r4,r3
 20129bc:	1cc4983a 	sll	r2,r3,r19
 20129c0:	3d0ed83a 	srl	r7,r7,r20
 20129c4:	1d06d83a 	srl	r3,r3,r20
 20129c8:	11c4b03a 	or	r2,r2,r7
 20129cc:	003f9306 	br	201281c <__alt_mem_epcs_flash_controller_0+0xfd01181c>
 20129d0:	9ca6983a 	sll	r19,r19,r18
 20129d4:	88e8d83a 	srl	r20,r17,r3
 20129d8:	80c4d83a 	srl	r2,r16,r3
 20129dc:	982cd43a 	srli	r22,r19,16
 20129e0:	8ca2983a 	sll	r17,r17,r18
 20129e4:	a009883a 	mov	r4,r20
 20129e8:	b00b883a 	mov	r5,r22
 20129ec:	1478b03a 	or	fp,r2,r17
 20129f0:	20051340 	call	2005134 <__umodsi3>
 20129f4:	a009883a 	mov	r4,r20
 20129f8:	b00b883a 	mov	r5,r22
 20129fc:	1023883a 	mov	r17,r2
 2012a00:	20050d00 	call	20050d0 <__udivsi3>
 2012a04:	9d7fffcc 	andi	r21,r19,65535
 2012a08:	880a943a 	slli	r5,r17,16
 2012a0c:	e008d43a 	srli	r4,fp,16
 2012a10:	a885383a 	mul	r2,r21,r2
 2012a14:	84a8983a 	sll	r20,r16,r18
 2012a18:	2148b03a 	or	r4,r4,r5
 2012a1c:	2080042e 	bgeu	r4,r2,2012a30 <__umoddi3+0x47c>
 2012a20:	24c9883a 	add	r4,r4,r19
 2012a24:	24c00236 	bltu	r4,r19,2012a30 <__umoddi3+0x47c>
 2012a28:	2080012e 	bgeu	r4,r2,2012a30 <__umoddi3+0x47c>
 2012a2c:	24c9883a 	add	r4,r4,r19
 2012a30:	20a3c83a 	sub	r17,r4,r2
 2012a34:	b00b883a 	mov	r5,r22
 2012a38:	8809883a 	mov	r4,r17
 2012a3c:	20051340 	call	2005134 <__umodsi3>
 2012a40:	102f883a 	mov	r23,r2
 2012a44:	8809883a 	mov	r4,r17
 2012a48:	b00b883a 	mov	r5,r22
 2012a4c:	20050d00 	call	20050d0 <__udivsi3>
 2012a50:	b82e943a 	slli	r23,r23,16
 2012a54:	a885383a 	mul	r2,r21,r2
 2012a58:	e13fffcc 	andi	r4,fp,65535
 2012a5c:	25c8b03a 	or	r4,r4,r23
 2012a60:	2080042e 	bgeu	r4,r2,2012a74 <__umoddi3+0x4c0>
 2012a64:	24c9883a 	add	r4,r4,r19
 2012a68:	24c00236 	bltu	r4,r19,2012a74 <__umoddi3+0x4c0>
 2012a6c:	2080012e 	bgeu	r4,r2,2012a74 <__umoddi3+0x4c0>
 2012a70:	24c9883a 	add	r4,r4,r19
 2012a74:	20a3c83a 	sub	r17,r4,r2
 2012a78:	003f4806 	br	201279c <__alt_mem_epcs_flash_controller_0+0xfd01179c>
 2012a7c:	2c8fc83a 	sub	r7,r5,r18
 2012a80:	1545c83a 	sub	r2,r2,r21
 2012a84:	29cb803a 	cmpltu	r5,r5,r7
 2012a88:	1145c83a 	sub	r2,r2,r5
 2012a8c:	4089c83a 	sub	r4,r8,r2
 2012a90:	003fc706 	br	20129b0 <__alt_mem_epcs_flash_controller_0+0xfd0119b0>
 2012a94:	01000604 	movi	r4,24
 2012a98:	003f1806 	br	20126fc <__alt_mem_epcs_flash_controller_0+0xfd0116fc>
 2012a9c:	00800604 	movi	r2,24
 2012aa0:	003f3206 	br	201276c <__alt_mem_epcs_flash_controller_0+0xfd01176c>
 2012aa4:	01000604 	movi	r4,24
 2012aa8:	003ed906 	br	2012610 <__alt_mem_epcs_flash_controller_0+0xfd011610>
 2012aac:	413fa52e 	bgeu	r8,r4,2012944 <__alt_mem_epcs_flash_controller_0+0xfd011944>
 2012ab0:	297fff84 	addi	r5,r5,-2
 2012ab4:	4551883a 	add	r8,r8,r21
 2012ab8:	003fa306 	br	2012948 <__alt_mem_epcs_flash_controller_0+0xfd011948>
 2012abc:	15ff8b2e 	bgeu	r2,r23,20128ec <__alt_mem_epcs_flash_controller_0+0xfd0118ec>
 2012ac0:	31bfff84 	addi	r6,r6,-2
 2012ac4:	1545883a 	add	r2,r2,r21
 2012ac8:	003f8906 	br	20128f0 <__alt_mem_epcs_flash_controller_0+0xfd0118f0>
 2012acc:	24c9883a 	add	r4,r4,r19
 2012ad0:	003eee06 	br	201268c <__alt_mem_epcs_flash_controller_0+0xfd01168c>
 2012ad4:	8005883a 	mov	r2,r16
 2012ad8:	003f1706 	br	2012738 <__alt_mem_epcs_flash_controller_0+0xfd011738>
 2012adc:	817fe736 	bltu	r16,r5,2012a7c <__alt_mem_epcs_flash_controller_0+0xfd011a7c>
 2012ae0:	280f883a 	mov	r7,r5
 2012ae4:	0009883a 	mov	r4,zero
 2012ae8:	003fb106 	br	20129b0 <__alt_mem_epcs_flash_controller_0+0xfd0119b0>

02012aec <__eqdf2>:
 2012aec:	2804d53a 	srli	r2,r5,20
 2012af0:	3806d53a 	srli	r3,r7,20
 2012af4:	02000434 	movhi	r8,16
 2012af8:	423fffc4 	addi	r8,r8,-1
 2012afc:	1081ffcc 	andi	r2,r2,2047
 2012b00:	0281ffc4 	movi	r10,2047
 2012b04:	2a12703a 	and	r9,r5,r8
 2012b08:	18c1ffcc 	andi	r3,r3,2047
 2012b0c:	3a10703a 	and	r8,r7,r8
 2012b10:	280ad7fa 	srli	r5,r5,31
 2012b14:	380ed7fa 	srli	r7,r7,31
 2012b18:	12801026 	beq	r2,r10,2012b5c <__eqdf2+0x70>
 2012b1c:	0281ffc4 	movi	r10,2047
 2012b20:	1a800a26 	beq	r3,r10,2012b4c <__eqdf2+0x60>
 2012b24:	10c00226 	beq	r2,r3,2012b30 <__eqdf2+0x44>
 2012b28:	00800044 	movi	r2,1
 2012b2c:	f800283a 	ret
 2012b30:	4a3ffd1e 	bne	r9,r8,2012b28 <__alt_mem_epcs_flash_controller_0+0xfd011b28>
 2012b34:	21bffc1e 	bne	r4,r6,2012b28 <__alt_mem_epcs_flash_controller_0+0xfd011b28>
 2012b38:	29c00c26 	beq	r5,r7,2012b6c <__eqdf2+0x80>
 2012b3c:	103ffa1e 	bne	r2,zero,2012b28 <__alt_mem_epcs_flash_controller_0+0xfd011b28>
 2012b40:	2244b03a 	or	r2,r4,r9
 2012b44:	1004c03a 	cmpne	r2,r2,zero
 2012b48:	f800283a 	ret
 2012b4c:	3214b03a 	or	r10,r6,r8
 2012b50:	503ff426 	beq	r10,zero,2012b24 <__alt_mem_epcs_flash_controller_0+0xfd011b24>
 2012b54:	00800044 	movi	r2,1
 2012b58:	f800283a 	ret
 2012b5c:	2254b03a 	or	r10,r4,r9
 2012b60:	503fee26 	beq	r10,zero,2012b1c <__alt_mem_epcs_flash_controller_0+0xfd011b1c>
 2012b64:	00800044 	movi	r2,1
 2012b68:	f800283a 	ret
 2012b6c:	0005883a 	mov	r2,zero
 2012b70:	f800283a 	ret

02012b74 <__gedf2>:
 2012b74:	2804d53a 	srli	r2,r5,20
 2012b78:	3806d53a 	srli	r3,r7,20
 2012b7c:	02000434 	movhi	r8,16
 2012b80:	423fffc4 	addi	r8,r8,-1
 2012b84:	1081ffcc 	andi	r2,r2,2047
 2012b88:	0241ffc4 	movi	r9,2047
 2012b8c:	2a14703a 	and	r10,r5,r8
 2012b90:	18c1ffcc 	andi	r3,r3,2047
 2012b94:	3a10703a 	and	r8,r7,r8
 2012b98:	280ad7fa 	srli	r5,r5,31
 2012b9c:	380ed7fa 	srli	r7,r7,31
 2012ba0:	12401d26 	beq	r2,r9,2012c18 <__gedf2+0xa4>
 2012ba4:	0241ffc4 	movi	r9,2047
 2012ba8:	1a401226 	beq	r3,r9,2012bf4 <__gedf2+0x80>
 2012bac:	1000081e 	bne	r2,zero,2012bd0 <__gedf2+0x5c>
 2012bb0:	2296b03a 	or	r11,r4,r10
 2012bb4:	5813003a 	cmpeq	r9,r11,zero
 2012bb8:	1800091e 	bne	r3,zero,2012be0 <__gedf2+0x6c>
 2012bbc:	3218b03a 	or	r12,r6,r8
 2012bc0:	6000071e 	bne	r12,zero,2012be0 <__gedf2+0x6c>
 2012bc4:	0005883a 	mov	r2,zero
 2012bc8:	5800101e 	bne	r11,zero,2012c0c <__gedf2+0x98>
 2012bcc:	f800283a 	ret
 2012bd0:	18000c1e 	bne	r3,zero,2012c04 <__gedf2+0x90>
 2012bd4:	3212b03a 	or	r9,r6,r8
 2012bd8:	48000c26 	beq	r9,zero,2012c0c <__gedf2+0x98>
 2012bdc:	0013883a 	mov	r9,zero
 2012be0:	39c03fcc 	andi	r7,r7,255
 2012be4:	48000826 	beq	r9,zero,2012c08 <__gedf2+0x94>
 2012be8:	38000926 	beq	r7,zero,2012c10 <__gedf2+0x9c>
 2012bec:	00800044 	movi	r2,1
 2012bf0:	f800283a 	ret
 2012bf4:	3212b03a 	or	r9,r6,r8
 2012bf8:	483fec26 	beq	r9,zero,2012bac <__alt_mem_epcs_flash_controller_0+0xfd011bac>
 2012bfc:	00bfff84 	movi	r2,-2
 2012c00:	f800283a 	ret
 2012c04:	39c03fcc 	andi	r7,r7,255
 2012c08:	29c00626 	beq	r5,r7,2012c24 <__gedf2+0xb0>
 2012c0c:	283ff726 	beq	r5,zero,2012bec <__alt_mem_epcs_flash_controller_0+0xfd011bec>
 2012c10:	00bfffc4 	movi	r2,-1
 2012c14:	f800283a 	ret
 2012c18:	2292b03a 	or	r9,r4,r10
 2012c1c:	483fe126 	beq	r9,zero,2012ba4 <__alt_mem_epcs_flash_controller_0+0xfd011ba4>
 2012c20:	003ff606 	br	2012bfc <__alt_mem_epcs_flash_controller_0+0xfd011bfc>
 2012c24:	18bff916 	blt	r3,r2,2012c0c <__alt_mem_epcs_flash_controller_0+0xfd011c0c>
 2012c28:	10c00316 	blt	r2,r3,2012c38 <__gedf2+0xc4>
 2012c2c:	42bff736 	bltu	r8,r10,2012c0c <__alt_mem_epcs_flash_controller_0+0xfd011c0c>
 2012c30:	52000326 	beq	r10,r8,2012c40 <__gedf2+0xcc>
 2012c34:	5200042e 	bgeu	r10,r8,2012c48 <__gedf2+0xd4>
 2012c38:	283fec1e 	bne	r5,zero,2012bec <__alt_mem_epcs_flash_controller_0+0xfd011bec>
 2012c3c:	003ff406 	br	2012c10 <__alt_mem_epcs_flash_controller_0+0xfd011c10>
 2012c40:	313ff236 	bltu	r6,r4,2012c0c <__alt_mem_epcs_flash_controller_0+0xfd011c0c>
 2012c44:	21bffc36 	bltu	r4,r6,2012c38 <__alt_mem_epcs_flash_controller_0+0xfd011c38>
 2012c48:	0005883a 	mov	r2,zero
 2012c4c:	f800283a 	ret

02012c50 <__floatunsidf>:
 2012c50:	defffe04 	addi	sp,sp,-8
 2012c54:	dc000015 	stw	r16,0(sp)
 2012c58:	dfc00115 	stw	ra,4(sp)
 2012c5c:	2021883a 	mov	r16,r4
 2012c60:	20002226 	beq	r4,zero,2012cec <__floatunsidf+0x9c>
 2012c64:	2004f740 	call	2004f74 <__clzsi2>
 2012c68:	01010784 	movi	r4,1054
 2012c6c:	2089c83a 	sub	r4,r4,r2
 2012c70:	01810cc4 	movi	r6,1075
 2012c74:	310dc83a 	sub	r6,r6,r4
 2012c78:	00c007c4 	movi	r3,31
 2012c7c:	1980120e 	bge	r3,r6,2012cc8 <__floatunsidf+0x78>
 2012c80:	00c104c4 	movi	r3,1043
 2012c84:	1907c83a 	sub	r3,r3,r4
 2012c88:	80ca983a 	sll	r5,r16,r3
 2012c8c:	00800434 	movhi	r2,16
 2012c90:	10bfffc4 	addi	r2,r2,-1
 2012c94:	2101ffcc 	andi	r4,r4,2047
 2012c98:	0021883a 	mov	r16,zero
 2012c9c:	288a703a 	and	r5,r5,r2
 2012ca0:	2008953a 	slli	r4,r4,20
 2012ca4:	00c00434 	movhi	r3,16
 2012ca8:	18ffffc4 	addi	r3,r3,-1
 2012cac:	28c6703a 	and	r3,r5,r3
 2012cb0:	8005883a 	mov	r2,r16
 2012cb4:	1906b03a 	or	r3,r3,r4
 2012cb8:	dfc00117 	ldw	ra,4(sp)
 2012cbc:	dc000017 	ldw	r16,0(sp)
 2012cc0:	dec00204 	addi	sp,sp,8
 2012cc4:	f800283a 	ret
 2012cc8:	00c002c4 	movi	r3,11
 2012ccc:	188bc83a 	sub	r5,r3,r2
 2012cd0:	814ad83a 	srl	r5,r16,r5
 2012cd4:	00c00434 	movhi	r3,16
 2012cd8:	18ffffc4 	addi	r3,r3,-1
 2012cdc:	81a0983a 	sll	r16,r16,r6
 2012ce0:	2101ffcc 	andi	r4,r4,2047
 2012ce4:	28ca703a 	and	r5,r5,r3
 2012ce8:	003fed06 	br	2012ca0 <__alt_mem_epcs_flash_controller_0+0xfd011ca0>
 2012cec:	0009883a 	mov	r4,zero
 2012cf0:	000b883a 	mov	r5,zero
 2012cf4:	003fea06 	br	2012ca0 <__alt_mem_epcs_flash_controller_0+0xfd011ca0>

02012cf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2012cf8:	defffe04 	addi	sp,sp,-8
 2012cfc:	dfc00115 	stw	ra,4(sp)
 2012d00:	df000015 	stw	fp,0(sp)
 2012d04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2012d08:	d0a00c17 	ldw	r2,-32720(gp)
 2012d0c:	10000326 	beq	r2,zero,2012d1c <alt_get_errno+0x24>
 2012d10:	d0a00c17 	ldw	r2,-32720(gp)
 2012d14:	103ee83a 	callr	r2
 2012d18:	00000106 	br	2012d20 <alt_get_errno+0x28>
 2012d1c:	d0a01604 	addi	r2,gp,-32680
}
 2012d20:	e037883a 	mov	sp,fp
 2012d24:	dfc00117 	ldw	ra,4(sp)
 2012d28:	df000017 	ldw	fp,0(sp)
 2012d2c:	dec00204 	addi	sp,sp,8
 2012d30:	f800283a 	ret

02012d34 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2012d34:	defffb04 	addi	sp,sp,-20
 2012d38:	dfc00415 	stw	ra,16(sp)
 2012d3c:	df000315 	stw	fp,12(sp)
 2012d40:	df000304 	addi	fp,sp,12
 2012d44:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2012d48:	e0bfff17 	ldw	r2,-4(fp)
 2012d4c:	10000616 	blt	r2,zero,2012d68 <close+0x34>
 2012d50:	e0bfff17 	ldw	r2,-4(fp)
 2012d54:	10c00324 	muli	r3,r2,12
 2012d58:	00808134 	movhi	r2,516
 2012d5c:	10b39d04 	addi	r2,r2,-12684
 2012d60:	1885883a 	add	r2,r3,r2
 2012d64:	00000106 	br	2012d6c <close+0x38>
 2012d68:	0005883a 	mov	r2,zero
 2012d6c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2012d70:	e0bffd17 	ldw	r2,-12(fp)
 2012d74:	10001926 	beq	r2,zero,2012ddc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2012d78:	e0bffd17 	ldw	r2,-12(fp)
 2012d7c:	10800017 	ldw	r2,0(r2)
 2012d80:	10800417 	ldw	r2,16(r2)
 2012d84:	10000626 	beq	r2,zero,2012da0 <close+0x6c>
 2012d88:	e0bffd17 	ldw	r2,-12(fp)
 2012d8c:	10800017 	ldw	r2,0(r2)
 2012d90:	10800417 	ldw	r2,16(r2)
 2012d94:	e13ffd17 	ldw	r4,-12(fp)
 2012d98:	103ee83a 	callr	r2
 2012d9c:	00000106 	br	2012da4 <close+0x70>
 2012da0:	0005883a 	mov	r2,zero
 2012da4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2012da8:	e13fff17 	ldw	r4,-4(fp)
 2012dac:	20133080 	call	2013308 <alt_release_fd>
    if (rval < 0)
 2012db0:	e0bffe17 	ldw	r2,-8(fp)
 2012db4:	1000070e 	bge	r2,zero,2012dd4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 2012db8:	2012cf80 	call	2012cf8 <alt_get_errno>
 2012dbc:	1007883a 	mov	r3,r2
 2012dc0:	e0bffe17 	ldw	r2,-8(fp)
 2012dc4:	0085c83a 	sub	r2,zero,r2
 2012dc8:	18800015 	stw	r2,0(r3)
      return -1;
 2012dcc:	00bfffc4 	movi	r2,-1
 2012dd0:	00000706 	br	2012df0 <close+0xbc>
    }
    return 0;
 2012dd4:	0005883a 	mov	r2,zero
 2012dd8:	00000506 	br	2012df0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2012ddc:	2012cf80 	call	2012cf8 <alt_get_errno>
 2012de0:	1007883a 	mov	r3,r2
 2012de4:	00801444 	movi	r2,81
 2012de8:	18800015 	stw	r2,0(r3)
    return -1;
 2012dec:	00bfffc4 	movi	r2,-1
  }
}
 2012df0:	e037883a 	mov	sp,fp
 2012df4:	dfc00117 	ldw	ra,4(sp)
 2012df8:	df000017 	ldw	fp,0(sp)
 2012dfc:	dec00204 	addi	sp,sp,8
 2012e00:	f800283a 	ret

02012e04 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2012e04:	defffc04 	addi	sp,sp,-16
 2012e08:	df000315 	stw	fp,12(sp)
 2012e0c:	df000304 	addi	fp,sp,12
 2012e10:	e13ffd15 	stw	r4,-12(fp)
 2012e14:	e17ffe15 	stw	r5,-8(fp)
 2012e18:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2012e1c:	e0bfff17 	ldw	r2,-4(fp)
}
 2012e20:	e037883a 	mov	sp,fp
 2012e24:	df000017 	ldw	fp,0(sp)
 2012e28:	dec00104 	addi	sp,sp,4
 2012e2c:	f800283a 	ret

02012e30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2012e30:	defffe04 	addi	sp,sp,-8
 2012e34:	dfc00115 	stw	ra,4(sp)
 2012e38:	df000015 	stw	fp,0(sp)
 2012e3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2012e40:	d0a00c17 	ldw	r2,-32720(gp)
 2012e44:	10000326 	beq	r2,zero,2012e54 <alt_get_errno+0x24>
 2012e48:	d0a00c17 	ldw	r2,-32720(gp)
 2012e4c:	103ee83a 	callr	r2
 2012e50:	00000106 	br	2012e58 <alt_get_errno+0x28>
 2012e54:	d0a01604 	addi	r2,gp,-32680
}
 2012e58:	e037883a 	mov	sp,fp
 2012e5c:	dfc00117 	ldw	ra,4(sp)
 2012e60:	df000017 	ldw	fp,0(sp)
 2012e64:	dec00204 	addi	sp,sp,8
 2012e68:	f800283a 	ret

02012e6c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2012e6c:	defffb04 	addi	sp,sp,-20
 2012e70:	dfc00415 	stw	ra,16(sp)
 2012e74:	df000315 	stw	fp,12(sp)
 2012e78:	df000304 	addi	fp,sp,12
 2012e7c:	e13ffe15 	stw	r4,-8(fp)
 2012e80:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2012e84:	e0bffe17 	ldw	r2,-8(fp)
 2012e88:	10000616 	blt	r2,zero,2012ea4 <fstat+0x38>
 2012e8c:	e0bffe17 	ldw	r2,-8(fp)
 2012e90:	10c00324 	muli	r3,r2,12
 2012e94:	00808134 	movhi	r2,516
 2012e98:	10b39d04 	addi	r2,r2,-12684
 2012e9c:	1885883a 	add	r2,r3,r2
 2012ea0:	00000106 	br	2012ea8 <fstat+0x3c>
 2012ea4:	0005883a 	mov	r2,zero
 2012ea8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 2012eac:	e0bffd17 	ldw	r2,-12(fp)
 2012eb0:	10001026 	beq	r2,zero,2012ef4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 2012eb4:	e0bffd17 	ldw	r2,-12(fp)
 2012eb8:	10800017 	ldw	r2,0(r2)
 2012ebc:	10800817 	ldw	r2,32(r2)
 2012ec0:	10000726 	beq	r2,zero,2012ee0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 2012ec4:	e0bffd17 	ldw	r2,-12(fp)
 2012ec8:	10800017 	ldw	r2,0(r2)
 2012ecc:	10800817 	ldw	r2,32(r2)
 2012ed0:	e17fff17 	ldw	r5,-4(fp)
 2012ed4:	e13ffd17 	ldw	r4,-12(fp)
 2012ed8:	103ee83a 	callr	r2
 2012edc:	00000a06 	br	2012f08 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2012ee0:	e0bfff17 	ldw	r2,-4(fp)
 2012ee4:	00c80004 	movi	r3,8192
 2012ee8:	10c00115 	stw	r3,4(r2)
      return 0;
 2012eec:	0005883a 	mov	r2,zero
 2012ef0:	00000506 	br	2012f08 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2012ef4:	2012e300 	call	2012e30 <alt_get_errno>
 2012ef8:	1007883a 	mov	r3,r2
 2012efc:	00801444 	movi	r2,81
 2012f00:	18800015 	stw	r2,0(r3)
    return -1;
 2012f04:	00bfffc4 	movi	r2,-1
  }
}
 2012f08:	e037883a 	mov	sp,fp
 2012f0c:	dfc00117 	ldw	ra,4(sp)
 2012f10:	df000017 	ldw	fp,0(sp)
 2012f14:	dec00204 	addi	sp,sp,8
 2012f18:	f800283a 	ret

02012f1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2012f1c:	defffe04 	addi	sp,sp,-8
 2012f20:	dfc00115 	stw	ra,4(sp)
 2012f24:	df000015 	stw	fp,0(sp)
 2012f28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2012f2c:	d0a00c17 	ldw	r2,-32720(gp)
 2012f30:	10000326 	beq	r2,zero,2012f40 <alt_get_errno+0x24>
 2012f34:	d0a00c17 	ldw	r2,-32720(gp)
 2012f38:	103ee83a 	callr	r2
 2012f3c:	00000106 	br	2012f44 <alt_get_errno+0x28>
 2012f40:	d0a01604 	addi	r2,gp,-32680
}
 2012f44:	e037883a 	mov	sp,fp
 2012f48:	dfc00117 	ldw	ra,4(sp)
 2012f4c:	df000017 	ldw	fp,0(sp)
 2012f50:	dec00204 	addi	sp,sp,8
 2012f54:	f800283a 	ret

02012f58 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2012f58:	deffed04 	addi	sp,sp,-76
 2012f5c:	dfc01215 	stw	ra,72(sp)
 2012f60:	df001115 	stw	fp,68(sp)
 2012f64:	df001104 	addi	fp,sp,68
 2012f68:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2012f6c:	e0bfff17 	ldw	r2,-4(fp)
 2012f70:	10000616 	blt	r2,zero,2012f8c <isatty+0x34>
 2012f74:	e0bfff17 	ldw	r2,-4(fp)
 2012f78:	10c00324 	muli	r3,r2,12
 2012f7c:	00808134 	movhi	r2,516
 2012f80:	10b39d04 	addi	r2,r2,-12684
 2012f84:	1885883a 	add	r2,r3,r2
 2012f88:	00000106 	br	2012f90 <isatty+0x38>
 2012f8c:	0005883a 	mov	r2,zero
 2012f90:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 2012f94:	e0bfef17 	ldw	r2,-68(fp)
 2012f98:	10000e26 	beq	r2,zero,2012fd4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2012f9c:	e0bfef17 	ldw	r2,-68(fp)
 2012fa0:	10800017 	ldw	r2,0(r2)
 2012fa4:	10800817 	ldw	r2,32(r2)
 2012fa8:	1000021e 	bne	r2,zero,2012fb4 <isatty+0x5c>
    {
      return 1;
 2012fac:	00800044 	movi	r2,1
 2012fb0:	00000d06 	br	2012fe8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 2012fb4:	e0bff004 	addi	r2,fp,-64
 2012fb8:	100b883a 	mov	r5,r2
 2012fbc:	e13fff17 	ldw	r4,-4(fp)
 2012fc0:	2012e6c0 	call	2012e6c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 2012fc4:	e0bff117 	ldw	r2,-60(fp)
 2012fc8:	10880020 	cmpeqi	r2,r2,8192
 2012fcc:	10803fcc 	andi	r2,r2,255
 2012fd0:	00000506 	br	2012fe8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2012fd4:	2012f1c0 	call	2012f1c <alt_get_errno>
 2012fd8:	1007883a 	mov	r3,r2
 2012fdc:	00801444 	movi	r2,81
 2012fe0:	18800015 	stw	r2,0(r3)
    return 0;
 2012fe4:	0005883a 	mov	r2,zero
  }
}
 2012fe8:	e037883a 	mov	sp,fp
 2012fec:	dfc00117 	ldw	ra,4(sp)
 2012ff0:	df000017 	ldw	fp,0(sp)
 2012ff4:	dec00204 	addi	sp,sp,8
 2012ff8:	f800283a 	ret

02012ffc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2012ffc:	defffe04 	addi	sp,sp,-8
 2013000:	dfc00115 	stw	ra,4(sp)
 2013004:	df000015 	stw	fp,0(sp)
 2013008:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201300c:	d0a00c17 	ldw	r2,-32720(gp)
 2013010:	10000326 	beq	r2,zero,2013020 <alt_get_errno+0x24>
 2013014:	d0a00c17 	ldw	r2,-32720(gp)
 2013018:	103ee83a 	callr	r2
 201301c:	00000106 	br	2013024 <alt_get_errno+0x28>
 2013020:	d0a01604 	addi	r2,gp,-32680
}
 2013024:	e037883a 	mov	sp,fp
 2013028:	dfc00117 	ldw	ra,4(sp)
 201302c:	df000017 	ldw	fp,0(sp)
 2013030:	dec00204 	addi	sp,sp,8
 2013034:	f800283a 	ret

02013038 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2013038:	defff904 	addi	sp,sp,-28
 201303c:	dfc00615 	stw	ra,24(sp)
 2013040:	df000515 	stw	fp,20(sp)
 2013044:	df000504 	addi	fp,sp,20
 2013048:	e13ffd15 	stw	r4,-12(fp)
 201304c:	e17ffe15 	stw	r5,-8(fp)
 2013050:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2013054:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2013058:	e0bffd17 	ldw	r2,-12(fp)
 201305c:	10000616 	blt	r2,zero,2013078 <lseek+0x40>
 2013060:	e0bffd17 	ldw	r2,-12(fp)
 2013064:	10c00324 	muli	r3,r2,12
 2013068:	00808134 	movhi	r2,516
 201306c:	10b39d04 	addi	r2,r2,-12684
 2013070:	1885883a 	add	r2,r3,r2
 2013074:	00000106 	br	201307c <lseek+0x44>
 2013078:	0005883a 	mov	r2,zero
 201307c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 2013080:	e0bffc17 	ldw	r2,-16(fp)
 2013084:	10001026 	beq	r2,zero,20130c8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2013088:	e0bffc17 	ldw	r2,-16(fp)
 201308c:	10800017 	ldw	r2,0(r2)
 2013090:	10800717 	ldw	r2,28(r2)
 2013094:	10000926 	beq	r2,zero,20130bc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2013098:	e0bffc17 	ldw	r2,-16(fp)
 201309c:	10800017 	ldw	r2,0(r2)
 20130a0:	10800717 	ldw	r2,28(r2)
 20130a4:	e1bfff17 	ldw	r6,-4(fp)
 20130a8:	e17ffe17 	ldw	r5,-8(fp)
 20130ac:	e13ffc17 	ldw	r4,-16(fp)
 20130b0:	103ee83a 	callr	r2
 20130b4:	e0bffb15 	stw	r2,-20(fp)
 20130b8:	00000506 	br	20130d0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 20130bc:	00bfde84 	movi	r2,-134
 20130c0:	e0bffb15 	stw	r2,-20(fp)
 20130c4:	00000206 	br	20130d0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 20130c8:	00bfebc4 	movi	r2,-81
 20130cc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 20130d0:	e0bffb17 	ldw	r2,-20(fp)
 20130d4:	1000070e 	bge	r2,zero,20130f4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 20130d8:	2012ffc0 	call	2012ffc <alt_get_errno>
 20130dc:	1007883a 	mov	r3,r2
 20130e0:	e0bffb17 	ldw	r2,-20(fp)
 20130e4:	0085c83a 	sub	r2,zero,r2
 20130e8:	18800015 	stw	r2,0(r3)
    rc = -1;
 20130ec:	00bfffc4 	movi	r2,-1
 20130f0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 20130f4:	e0bffb17 	ldw	r2,-20(fp)
}
 20130f8:	e037883a 	mov	sp,fp
 20130fc:	dfc00117 	ldw	ra,4(sp)
 2013100:	df000017 	ldw	fp,0(sp)
 2013104:	dec00204 	addi	sp,sp,8
 2013108:	f800283a 	ret

0201310c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 201310c:	defffd04 	addi	sp,sp,-12
 2013110:	dfc00215 	stw	ra,8(sp)
 2013114:	df000115 	stw	fp,4(sp)
 2013118:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 201311c:	0009883a 	mov	r4,zero
 2013120:	20135b40 	call	20135b4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2013124:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2013128:	20135ec0 	call	20135ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 201312c:	01808134 	movhi	r6,516
 2013130:	31b15a04 	addi	r6,r6,-15000
 2013134:	01408134 	movhi	r5,516
 2013138:	29715a04 	addi	r5,r5,-15000
 201313c:	01008134 	movhi	r4,516
 2013140:	21315a04 	addi	r4,r4,-15000
 2013144:	2015b340 	call	2015b34 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2013148:	20156540 	call	2015654 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 201314c:	01008074 	movhi	r4,513
 2013150:	2115ad04 	addi	r4,r4,22196
 2013154:	20164a00 	call	20164a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2013158:	d0a01a17 	ldw	r2,-32664(gp)
 201315c:	d0e01b17 	ldw	r3,-32660(gp)
 2013160:	d1201c17 	ldw	r4,-32656(gp)
 2013164:	200d883a 	mov	r6,r4
 2013168:	180b883a 	mov	r5,r3
 201316c:	1009883a 	mov	r4,r2
 2013170:	200255c0 	call	200255c <main>
 2013174:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2013178:	01000044 	movi	r4,1
 201317c:	2012d340 	call	2012d34 <close>
  exit (result);
 2013180:	e13fff17 	ldw	r4,-4(fp)
 2013184:	20164b40 	call	20164b4 <exit>

02013188 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 2013188:	defffe04 	addi	sp,sp,-8
 201318c:	df000115 	stw	fp,4(sp)
 2013190:	df000104 	addi	fp,sp,4
 2013194:	e13fff15 	stw	r4,-4(fp)
}
 2013198:	0001883a 	nop
 201319c:	e037883a 	mov	sp,fp
 20131a0:	df000017 	ldw	fp,0(sp)
 20131a4:	dec00104 	addi	sp,sp,4
 20131a8:	f800283a 	ret

020131ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 20131ac:	defffe04 	addi	sp,sp,-8
 20131b0:	df000115 	stw	fp,4(sp)
 20131b4:	df000104 	addi	fp,sp,4
 20131b8:	e13fff15 	stw	r4,-4(fp)
}
 20131bc:	0001883a 	nop
 20131c0:	e037883a 	mov	sp,fp
 20131c4:	df000017 	ldw	fp,0(sp)
 20131c8:	dec00104 	addi	sp,sp,4
 20131cc:	f800283a 	ret

020131d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20131d0:	defffe04 	addi	sp,sp,-8
 20131d4:	dfc00115 	stw	ra,4(sp)
 20131d8:	df000015 	stw	fp,0(sp)
 20131dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20131e0:	d0a00c17 	ldw	r2,-32720(gp)
 20131e4:	10000326 	beq	r2,zero,20131f4 <alt_get_errno+0x24>
 20131e8:	d0a00c17 	ldw	r2,-32720(gp)
 20131ec:	103ee83a 	callr	r2
 20131f0:	00000106 	br	20131f8 <alt_get_errno+0x28>
 20131f4:	d0a01604 	addi	r2,gp,-32680
}
 20131f8:	e037883a 	mov	sp,fp
 20131fc:	dfc00117 	ldw	ra,4(sp)
 2013200:	df000017 	ldw	fp,0(sp)
 2013204:	dec00204 	addi	sp,sp,8
 2013208:	f800283a 	ret

0201320c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 201320c:	defff904 	addi	sp,sp,-28
 2013210:	dfc00615 	stw	ra,24(sp)
 2013214:	df000515 	stw	fp,20(sp)
 2013218:	df000504 	addi	fp,sp,20
 201321c:	e13ffd15 	stw	r4,-12(fp)
 2013220:	e17ffe15 	stw	r5,-8(fp)
 2013224:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2013228:	e0bffd17 	ldw	r2,-12(fp)
 201322c:	10000616 	blt	r2,zero,2013248 <read+0x3c>
 2013230:	e0bffd17 	ldw	r2,-12(fp)
 2013234:	10c00324 	muli	r3,r2,12
 2013238:	00808134 	movhi	r2,516
 201323c:	10b39d04 	addi	r2,r2,-12684
 2013240:	1885883a 	add	r2,r3,r2
 2013244:	00000106 	br	201324c <read+0x40>
 2013248:	0005883a 	mov	r2,zero
 201324c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2013250:	e0bffb17 	ldw	r2,-20(fp)
 2013254:	10002226 	beq	r2,zero,20132e0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2013258:	e0bffb17 	ldw	r2,-20(fp)
 201325c:	10800217 	ldw	r2,8(r2)
 2013260:	108000cc 	andi	r2,r2,3
 2013264:	10800060 	cmpeqi	r2,r2,1
 2013268:	1000181e 	bne	r2,zero,20132cc <read+0xc0>
        (fd->dev->read))
 201326c:	e0bffb17 	ldw	r2,-20(fp)
 2013270:	10800017 	ldw	r2,0(r2)
 2013274:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2013278:	10001426 	beq	r2,zero,20132cc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 201327c:	e0bffb17 	ldw	r2,-20(fp)
 2013280:	10800017 	ldw	r2,0(r2)
 2013284:	10800517 	ldw	r2,20(r2)
 2013288:	e0ffff17 	ldw	r3,-4(fp)
 201328c:	180d883a 	mov	r6,r3
 2013290:	e17ffe17 	ldw	r5,-8(fp)
 2013294:	e13ffb17 	ldw	r4,-20(fp)
 2013298:	103ee83a 	callr	r2
 201329c:	e0bffc15 	stw	r2,-16(fp)
 20132a0:	e0bffc17 	ldw	r2,-16(fp)
 20132a4:	1000070e 	bge	r2,zero,20132c4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 20132a8:	20131d00 	call	20131d0 <alt_get_errno>
 20132ac:	1007883a 	mov	r3,r2
 20132b0:	e0bffc17 	ldw	r2,-16(fp)
 20132b4:	0085c83a 	sub	r2,zero,r2
 20132b8:	18800015 	stw	r2,0(r3)
          return -1;
 20132bc:	00bfffc4 	movi	r2,-1
 20132c0:	00000c06 	br	20132f4 <read+0xe8>
        }
        return rval;
 20132c4:	e0bffc17 	ldw	r2,-16(fp)
 20132c8:	00000a06 	br	20132f4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 20132cc:	20131d00 	call	20131d0 <alt_get_errno>
 20132d0:	1007883a 	mov	r3,r2
 20132d4:	00800344 	movi	r2,13
 20132d8:	18800015 	stw	r2,0(r3)
 20132dc:	00000406 	br	20132f0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 20132e0:	20131d00 	call	20131d0 <alt_get_errno>
 20132e4:	1007883a 	mov	r3,r2
 20132e8:	00801444 	movi	r2,81
 20132ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
 20132f0:	00bfffc4 	movi	r2,-1
}
 20132f4:	e037883a 	mov	sp,fp
 20132f8:	dfc00117 	ldw	ra,4(sp)
 20132fc:	df000017 	ldw	fp,0(sp)
 2013300:	dec00204 	addi	sp,sp,8
 2013304:	f800283a 	ret

02013308 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2013308:	defffe04 	addi	sp,sp,-8
 201330c:	df000115 	stw	fp,4(sp)
 2013310:	df000104 	addi	fp,sp,4
 2013314:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2013318:	e0bfff17 	ldw	r2,-4(fp)
 201331c:	108000d0 	cmplti	r2,r2,3
 2013320:	10000d1e 	bne	r2,zero,2013358 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2013324:	00808134 	movhi	r2,516
 2013328:	10b39d04 	addi	r2,r2,-12684
 201332c:	e0ffff17 	ldw	r3,-4(fp)
 2013330:	18c00324 	muli	r3,r3,12
 2013334:	10c5883a 	add	r2,r2,r3
 2013338:	10800204 	addi	r2,r2,8
 201333c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2013340:	00808134 	movhi	r2,516
 2013344:	10b39d04 	addi	r2,r2,-12684
 2013348:	e0ffff17 	ldw	r3,-4(fp)
 201334c:	18c00324 	muli	r3,r3,12
 2013350:	10c5883a 	add	r2,r2,r3
 2013354:	10000015 	stw	zero,0(r2)
  }
}
 2013358:	0001883a 	nop
 201335c:	e037883a 	mov	sp,fp
 2013360:	df000017 	ldw	fp,0(sp)
 2013364:	dec00104 	addi	sp,sp,4
 2013368:	f800283a 	ret

0201336c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 201336c:	defff904 	addi	sp,sp,-28
 2013370:	df000615 	stw	fp,24(sp)
 2013374:	df000604 	addi	fp,sp,24
 2013378:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201337c:	0005303a 	rdctl	r2,status
 2013380:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013384:	e0fffe17 	ldw	r3,-8(fp)
 2013388:	00bfff84 	movi	r2,-2
 201338c:	1884703a 	and	r2,r3,r2
 2013390:	1001703a 	wrctl	status,r2
  
  return context;
 2013394:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2013398:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 201339c:	d0a00d17 	ldw	r2,-32716(gp)
 20133a0:	10c000c4 	addi	r3,r2,3
 20133a4:	00bfff04 	movi	r2,-4
 20133a8:	1884703a 	and	r2,r3,r2
 20133ac:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 20133b0:	d0e00d17 	ldw	r3,-32716(gp)
 20133b4:	e0bfff17 	ldw	r2,-4(fp)
 20133b8:	1887883a 	add	r3,r3,r2
 20133bc:	00810034 	movhi	r2,1024
 20133c0:	10800004 	addi	r2,r2,0
 20133c4:	10c0062e 	bgeu	r2,r3,20133e0 <sbrk+0x74>
 20133c8:	e0bffb17 	ldw	r2,-20(fp)
 20133cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20133d0:	e0bffa17 	ldw	r2,-24(fp)
 20133d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 20133d8:	00bfffc4 	movi	r2,-1
 20133dc:	00000b06 	br	201340c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 20133e0:	d0a00d17 	ldw	r2,-32716(gp)
 20133e4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 20133e8:	d0e00d17 	ldw	r3,-32716(gp)
 20133ec:	e0bfff17 	ldw	r2,-4(fp)
 20133f0:	1885883a 	add	r2,r3,r2
 20133f4:	d0a00d15 	stw	r2,-32716(gp)
 20133f8:	e0bffb17 	ldw	r2,-20(fp)
 20133fc:	e0bffc15 	stw	r2,-16(fp)
 2013400:	e0bffc17 	ldw	r2,-16(fp)
 2013404:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2013408:	e0bffd17 	ldw	r2,-12(fp)
} 
 201340c:	e037883a 	mov	sp,fp
 2013410:	df000017 	ldw	fp,0(sp)
 2013414:	dec00104 	addi	sp,sp,4
 2013418:	f800283a 	ret

0201341c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 201341c:	defffd04 	addi	sp,sp,-12
 2013420:	dfc00215 	stw	ra,8(sp)
 2013424:	df000115 	stw	fp,4(sp)
 2013428:	df000104 	addi	fp,sp,4
 201342c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 2013430:	e13fff17 	ldw	r4,-4(fp)
 2013434:	201541c0 	call	201541c <alt_busy_sleep>
}
 2013438:	e037883a 	mov	sp,fp
 201343c:	dfc00117 	ldw	ra,4(sp)
 2013440:	df000017 	ldw	fp,0(sp)
 2013444:	dec00204 	addi	sp,sp,8
 2013448:	f800283a 	ret

0201344c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201344c:	defffe04 	addi	sp,sp,-8
 2013450:	dfc00115 	stw	ra,4(sp)
 2013454:	df000015 	stw	fp,0(sp)
 2013458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201345c:	d0a00c17 	ldw	r2,-32720(gp)
 2013460:	10000326 	beq	r2,zero,2013470 <alt_get_errno+0x24>
 2013464:	d0a00c17 	ldw	r2,-32720(gp)
 2013468:	103ee83a 	callr	r2
 201346c:	00000106 	br	2013474 <alt_get_errno+0x28>
 2013470:	d0a01604 	addi	r2,gp,-32680
}
 2013474:	e037883a 	mov	sp,fp
 2013478:	dfc00117 	ldw	ra,4(sp)
 201347c:	df000017 	ldw	fp,0(sp)
 2013480:	dec00204 	addi	sp,sp,8
 2013484:	f800283a 	ret

02013488 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2013488:	defff904 	addi	sp,sp,-28
 201348c:	dfc00615 	stw	ra,24(sp)
 2013490:	df000515 	stw	fp,20(sp)
 2013494:	df000504 	addi	fp,sp,20
 2013498:	e13ffd15 	stw	r4,-12(fp)
 201349c:	e17ffe15 	stw	r5,-8(fp)
 20134a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20134a4:	e0bffd17 	ldw	r2,-12(fp)
 20134a8:	10000616 	blt	r2,zero,20134c4 <write+0x3c>
 20134ac:	e0bffd17 	ldw	r2,-12(fp)
 20134b0:	10c00324 	muli	r3,r2,12
 20134b4:	00808134 	movhi	r2,516
 20134b8:	10b39d04 	addi	r2,r2,-12684
 20134bc:	1885883a 	add	r2,r3,r2
 20134c0:	00000106 	br	20134c8 <write+0x40>
 20134c4:	0005883a 	mov	r2,zero
 20134c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 20134cc:	e0bffb17 	ldw	r2,-20(fp)
 20134d0:	10002126 	beq	r2,zero,2013558 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 20134d4:	e0bffb17 	ldw	r2,-20(fp)
 20134d8:	10800217 	ldw	r2,8(r2)
 20134dc:	108000cc 	andi	r2,r2,3
 20134e0:	10001826 	beq	r2,zero,2013544 <write+0xbc>
 20134e4:	e0bffb17 	ldw	r2,-20(fp)
 20134e8:	10800017 	ldw	r2,0(r2)
 20134ec:	10800617 	ldw	r2,24(r2)
 20134f0:	10001426 	beq	r2,zero,2013544 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 20134f4:	e0bffb17 	ldw	r2,-20(fp)
 20134f8:	10800017 	ldw	r2,0(r2)
 20134fc:	10800617 	ldw	r2,24(r2)
 2013500:	e0ffff17 	ldw	r3,-4(fp)
 2013504:	180d883a 	mov	r6,r3
 2013508:	e17ffe17 	ldw	r5,-8(fp)
 201350c:	e13ffb17 	ldw	r4,-20(fp)
 2013510:	103ee83a 	callr	r2
 2013514:	e0bffc15 	stw	r2,-16(fp)
 2013518:	e0bffc17 	ldw	r2,-16(fp)
 201351c:	1000070e 	bge	r2,zero,201353c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 2013520:	201344c0 	call	201344c <alt_get_errno>
 2013524:	1007883a 	mov	r3,r2
 2013528:	e0bffc17 	ldw	r2,-16(fp)
 201352c:	0085c83a 	sub	r2,zero,r2
 2013530:	18800015 	stw	r2,0(r3)
        return -1;
 2013534:	00bfffc4 	movi	r2,-1
 2013538:	00000c06 	br	201356c <write+0xe4>
      }
      return rval;
 201353c:	e0bffc17 	ldw	r2,-16(fp)
 2013540:	00000a06 	br	201356c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2013544:	201344c0 	call	201344c <alt_get_errno>
 2013548:	1007883a 	mov	r3,r2
 201354c:	00800344 	movi	r2,13
 2013550:	18800015 	stw	r2,0(r3)
 2013554:	00000406 	br	2013568 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2013558:	201344c0 	call	201344c <alt_get_errno>
 201355c:	1007883a 	mov	r3,r2
 2013560:	00801444 	movi	r2,81
 2013564:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2013568:	00bfffc4 	movi	r2,-1
}
 201356c:	e037883a 	mov	sp,fp
 2013570:	dfc00117 	ldw	ra,4(sp)
 2013574:	df000017 	ldw	fp,0(sp)
 2013578:	dec00204 	addi	sp,sp,8
 201357c:	f800283a 	ret

02013580 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2013580:	defffd04 	addi	sp,sp,-12
 2013584:	dfc00215 	stw	ra,8(sp)
 2013588:	df000115 	stw	fp,4(sp)
 201358c:	df000104 	addi	fp,sp,4
 2013590:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2013594:	d1600904 	addi	r5,gp,-32732
 2013598:	e13fff17 	ldw	r4,-4(fp)
 201359c:	20155b00 	call	20155b0 <alt_dev_llist_insert>
}
 20135a0:	e037883a 	mov	sp,fp
 20135a4:	dfc00117 	ldw	ra,4(sp)
 20135a8:	df000017 	ldw	fp,0(sp)
 20135ac:	dec00204 	addi	sp,sp,8
 20135b0:	f800283a 	ret

020135b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 20135b4:	defffd04 	addi	sp,sp,-12
 20135b8:	dfc00215 	stw	ra,8(sp)
 20135bc:	df000115 	stw	fp,4(sp)
 20135c0:	df000104 	addi	fp,sp,4
 20135c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 20135c8:	2015fa80 	call	2015fa8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 20135cc:	00800044 	movi	r2,1
 20135d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 20135d4:	0001883a 	nop
 20135d8:	e037883a 	mov	sp,fp
 20135dc:	dfc00117 	ldw	ra,4(sp)
 20135e0:	df000017 	ldw	fp,0(sp)
 20135e4:	dec00204 	addi	sp,sp,8
 20135e8:	f800283a 	ret

020135ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 20135ec:	defffe04 	addi	sp,sp,-8
 20135f0:	dfc00115 	stw	ra,4(sp)
 20135f4:	df000015 	stw	fp,0(sp)
 20135f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 20135fc:	01c0fa04 	movi	r7,1000
 2013600:	01800144 	movi	r6,5
 2013604:	000b883a 	mov	r5,zero
 2013608:	01010034 	movhi	r4,1024
 201360c:	2014c380 	call	2014c38 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
 2013610:	01008134 	movhi	r4,516
 2013614:	2133fd04 	addi	r4,r4,-12300
 2013618:	20136900 	call	2013690 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 201361c:	01800044 	movi	r6,1
 2013620:	000b883a 	mov	r5,zero
 2013624:	01008134 	movhi	r4,516
 2013628:	21343a04 	addi	r4,r4,-12056
 201362c:	20142bc0 	call	20142bc <altera_avalon_jtag_uart_init>
 2013630:	01008134 	movhi	r4,516
 2013634:	21343004 	addi	r4,r4,-12096
 2013638:	20135800 	call	2013580 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( TOUCH_PANEL_SPI, touch_panel_spi);
 201363c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 2013640:	0001883a 	nop
}
 2013644:	0001883a 	nop
 2013648:	e037883a 	mov	sp,fp
 201364c:	dfc00117 	ldw	ra,4(sp)
 2013650:	df000017 	ldw	fp,0(sp)
 2013654:	dec00204 	addi	sp,sp,8
 2013658:	f800283a 	ret

0201365c <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 201365c:	defffd04 	addi	sp,sp,-12
 2013660:	dfc00215 	stw	ra,8(sp)
 2013664:	df000115 	stw	fp,4(sp)
 2013668:	df000104 	addi	fp,sp,4
 201366c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 2013670:	d1600e04 	addi	r5,gp,-32712
 2013674:	e13fff17 	ldw	r4,-4(fp)
 2013678:	20155b00 	call	20155b0 <alt_dev_llist_insert>
}
 201367c:	e037883a 	mov	sp,fp
 2013680:	dfc00117 	ldw	ra,4(sp)
 2013684:	df000017 	ldw	fp,0(sp)
 2013688:	dec00204 	addi	sp,sp,8
 201368c:	f800283a 	ret

02013690 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 2013690:	defffc04 	addi	sp,sp,-16
 2013694:	dfc00315 	stw	ra,12(sp)
 2013698:	df000215 	stw	fp,8(sp)
 201369c:	df000204 	addi	fp,sp,8
 20136a0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 20136a4:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 20136a8:	e13fff17 	ldw	r4,-4(fp)
 20136ac:	20136e40 	call	20136e4 <alt_epcs_flash_query>
 20136b0:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 20136b4:	e0bffe17 	ldw	r2,-8(fp)
 20136b8:	1000041e 	bne	r2,zero,20136cc <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 20136bc:	e0bfff17 	ldw	r2,-4(fp)
 20136c0:	1009883a 	mov	r4,r2
 20136c4:	201365c0 	call	201365c <alt_flash_device_register>
 20136c8:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 20136cc:	e0bffe17 	ldw	r2,-8(fp)
}
 20136d0:	e037883a 	mov	sp,fp
 20136d4:	dfc00117 	ldw	ra,4(sp)
 20136d8:	df000017 	ldw	fp,0(sp)
 20136dc:	dec00204 	addi	sp,sp,8
 20136e0:	f800283a 	ret

020136e4 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 20136e4:	defffc04 	addi	sp,sp,-16
 20136e8:	dfc00315 	stw	ra,12(sp)
 20136ec:	df000215 	stw	fp,8(sp)
 20136f0:	df000204 	addi	fp,sp,8
 20136f4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 20136f8:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 20136fc:	e0bfff17 	ldw	r2,-4(fp)
 2013700:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 2013704:	e0bfff17 	ldw	r2,-4(fp)
 2013708:	10802e17 	ldw	r2,184(r2)
 201370c:	1009883a 	mov	r4,r2
 2013710:	20151500 	call	2015150 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 2013714:	10c03fcc 	andi	r3,r2,255
 2013718:	e0bfff17 	ldw	r2,-4(fp)
 201371c:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 2013720:	e0bfff17 	ldw	r2,-4(fp)
 2013724:	10803017 	ldw	r2,192(r2)
 2013728:	10800598 	cmpnei	r2,r2,22
 201372c:	10000a1e 	bne	r2,zero,2013758 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2013730:	e0bfff17 	ldw	r2,-4(fp)
 2013734:	00c02034 	movhi	r3,128
 2013738:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 201373c:	e0bfff17 	ldw	r2,-4(fp)
 2013740:	00c02004 	movi	r3,128
 2013744:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2013748:	e0bfff17 	ldw	r2,-4(fp)
 201374c:	00c00074 	movhi	r3,1
 2013750:	10c01015 	stw	r3,64(r2)
 2013754:	0000ce06 	br	2013a90 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 2013758:	e0bfff17 	ldw	r2,-4(fp)
 201375c:	10803017 	ldw	r2,192(r2)
 2013760:	10800518 	cmpnei	r2,r2,20
 2013764:	10000a1e 	bne	r2,zero,2013790 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2013768:	e0bfff17 	ldw	r2,-4(fp)
 201376c:	00c00834 	movhi	r3,32
 2013770:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 2013774:	e0bfff17 	ldw	r2,-4(fp)
 2013778:	00c00804 	movi	r3,32
 201377c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2013780:	e0bfff17 	ldw	r2,-4(fp)
 2013784:	00c00074 	movhi	r3,1
 2013788:	10c01015 	stw	r3,64(r2)
 201378c:	0000c006 	br	2013a90 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 2013790:	e0bfff17 	ldw	r2,-4(fp)
 2013794:	10803017 	ldw	r2,192(r2)
 2013798:	108004d8 	cmpnei	r2,r2,19
 201379c:	10000a1e 	bne	r2,zero,20137c8 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 20137a0:	e0bfff17 	ldw	r2,-4(fp)
 20137a4:	00c00434 	movhi	r3,16
 20137a8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 20137ac:	e0bfff17 	ldw	r2,-4(fp)
 20137b0:	00c00404 	movi	r3,16
 20137b4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 20137b8:	e0bfff17 	ldw	r2,-4(fp)
 20137bc:	00c00074 	movhi	r3,1
 20137c0:	10c01015 	stw	r3,64(r2)
 20137c4:	0000b206 	br	2013a90 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 20137c8:	e0bfff17 	ldw	r2,-4(fp)
 20137cc:	10803017 	ldw	r2,192(r2)
 20137d0:	10800498 	cmpnei	r2,r2,18
 20137d4:	10000a1e 	bne	r2,zero,2013800 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 20137d8:	e0bfff17 	ldw	r2,-4(fp)
 20137dc:	00c00234 	movhi	r3,8
 20137e0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 20137e4:	e0bfff17 	ldw	r2,-4(fp)
 20137e8:	00c00204 	movi	r3,8
 20137ec:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 20137f0:	e0bfff17 	ldw	r2,-4(fp)
 20137f4:	00c00074 	movhi	r3,1
 20137f8:	10c01015 	stw	r3,64(r2)
 20137fc:	0000a406 	br	2013a90 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 2013800:	e0bfff17 	ldw	r2,-4(fp)
 2013804:	10803017 	ldw	r2,192(r2)
 2013808:	10800418 	cmpnei	r2,r2,16
 201380c:	10000a1e 	bne	r2,zero,2013838 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 2013810:	e0bfff17 	ldw	r2,-4(fp)
 2013814:	00c000b4 	movhi	r3,2
 2013818:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 201381c:	e0bfff17 	ldw	r2,-4(fp)
 2013820:	00c00104 	movi	r3,4
 2013824:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 2013828:	e0bfff17 	ldw	r2,-4(fp)
 201382c:	00e00014 	movui	r3,32768
 2013830:	10c01015 	stw	r3,64(r2)
 2013834:	00009606 	br	2013a90 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 2013838:	e0bfff17 	ldw	r2,-4(fp)
 201383c:	10802e17 	ldw	r2,184(r2)
 2013840:	1009883a 	mov	r4,r2
 2013844:	20151b80 	call	20151b8 <epcs_read_device_id>
 2013848:	1007883a 	mov	r3,r2
 201384c:	e0bfff17 	ldw	r2,-4(fp)
 2013850:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
 2013854:	e0bfff17 	ldw	r2,-4(fp)
 2013858:	10c03017 	ldw	r3,192(r2)
 201385c:	00804034 	movhi	r2,256
 2013860:	10bfffc4 	addi	r2,r2,-1
 2013864:	1886703a 	and	r3,r3,r2
 2013868:	00800874 	movhi	r2,33
 201386c:	10ae8544 	addi	r2,r2,-17899
 2013870:	18800a1e 	bne	r3,r2,201389c <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2013874:	e0bfff17 	ldw	r2,-4(fp)
 2013878:	00c00834 	movhi	r3,32
 201387c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
 2013880:	e0bfff17 	ldw	r2,-4(fp)
 2013884:	00c00804 	movi	r3,32
 2013888:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 201388c:	e0bfff17 	ldw	r2,-4(fp)
 2013890:	00c00074 	movhi	r3,1
 2013894:	10c01015 	stw	r3,64(r2)
 2013898:	00007d06 	br	2013a90 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
 201389c:	e0bfff17 	ldw	r2,-4(fp)
 20138a0:	10c03017 	ldw	r3,192(r2)
 20138a4:	00804034 	movhi	r2,256
 20138a8:	10bfffc4 	addi	r2,r2,-1
 20138ac:	1886703a 	and	r3,r3,r2
 20138b0:	00800874 	movhi	r2,33
 20138b4:	10ae8584 	addi	r2,r2,-17898
 20138b8:	18800a1e 	bne	r3,r2,20138e4 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
 20138bc:	e0bfff17 	ldw	r2,-4(fp)
 20138c0:	00c01034 	movhi	r3,64
 20138c4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
 20138c8:	e0bfff17 	ldw	r2,-4(fp)
 20138cc:	00c01004 	movi	r3,64
 20138d0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 20138d4:	e0bfff17 	ldw	r2,-4(fp)
 20138d8:	00c00074 	movhi	r3,1
 20138dc:	10c01015 	stw	r3,64(r2)
 20138e0:	00006b06 	br	2013a90 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
 20138e4:	e0bfff17 	ldw	r2,-4(fp)
 20138e8:	10c03017 	ldw	r3,192(r2)
 20138ec:	00804034 	movhi	r2,256
 20138f0:	10bfffc4 	addi	r2,r2,-1
 20138f4:	1886703a 	and	r3,r3,r2
 20138f8:	00800874 	movhi	r2,33
 20138fc:	10ae85c4 	addi	r2,r2,-17897
 2013900:	18800a1e 	bne	r3,r2,201392c <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2013904:	e0bfff17 	ldw	r2,-4(fp)
 2013908:	00c02034 	movhi	r3,128
 201390c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
 2013910:	e0bfff17 	ldw	r2,-4(fp)
 2013914:	00c02004 	movi	r3,128
 2013918:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 201391c:	e0bfff17 	ldw	r2,-4(fp)
 2013920:	00c00074 	movhi	r3,1
 2013924:	10c01015 	stw	r3,64(r2)
 2013928:	00005906 	br	2013a90 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 201392c:	e0bfff17 	ldw	r2,-4(fp)
 2013930:	10c03017 	ldw	r3,192(r2)
 2013934:	00804034 	movhi	r2,256
 2013938:	10bfffc4 	addi	r2,r2,-1
 201393c:	1886703a 	and	r3,r3,r2
 2013940:	00800874 	movhi	r2,33
 2013944:	10ae8604 	addi	r2,r2,-17896
 2013948:	18800a1e 	bne	r3,r2,2013974 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 201394c:	e0bfff17 	ldw	r2,-4(fp)
 2013950:	00c04034 	movhi	r3,256
 2013954:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 2013958:	e0bfff17 	ldw	r2,-4(fp)
 201395c:	00c04004 	movi	r3,256
 2013960:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2013964:	e0bfff17 	ldw	r2,-4(fp)
 2013968:	00c00074 	movhi	r3,1
 201396c:	10c01015 	stw	r3,64(r2)
 2013970:	00004706 	br	2013a90 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 2013974:	e0bfff17 	ldw	r2,-4(fp)
 2013978:	10803017 	ldw	r2,192(r2)
 201397c:	10803fcc 	andi	r2,r2,255
 2013980:	10800618 	cmpnei	r2,r2,24
 2013984:	10000a1e 	bne	r2,zero,20139b0 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2013988:	e0bfff17 	ldw	r2,-4(fp)
 201398c:	00c04034 	movhi	r3,256
 2013990:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 2013994:	e0bfff17 	ldw	r2,-4(fp)
 2013998:	00c01004 	movi	r3,64
 201399c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 20139a0:	e0bfff17 	ldw	r2,-4(fp)
 20139a4:	00c00134 	movhi	r3,4
 20139a8:	10c01015 	stw	r3,64(r2)
 20139ac:	00003806 	br	2013a90 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 20139b0:	e0bfff17 	ldw	r2,-4(fp)
 20139b4:	10803017 	ldw	r2,192(r2)
 20139b8:	10803fcc 	andi	r2,r2,255
 20139bc:	10800658 	cmpnei	r2,r2,25
 20139c0:	10000d1e 	bne	r2,zero,20139f8 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 20139c4:	e0bfff17 	ldw	r2,-4(fp)
 20139c8:	00c08034 	movhi	r3,512
 20139cc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 20139d0:	e0bfff17 	ldw	r2,-4(fp)
 20139d4:	00c08004 	movi	r3,512
 20139d8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 20139dc:	e0bfff17 	ldw	r2,-4(fp)
 20139e0:	00c00074 	movhi	r3,1
 20139e4:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 20139e8:	e0bfff17 	ldw	r2,-4(fp)
 20139ec:	00c00044 	movi	r3,1
 20139f0:	10c03215 	stw	r3,200(r2)
 20139f4:	00002606 	br	2013a90 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
 20139f8:	e0bfff17 	ldw	r2,-4(fp)
 20139fc:	10803017 	ldw	r2,192(r2)
 2013a00:	10803fcc 	andi	r2,r2,255
 2013a04:	10800818 	cmpnei	r2,r2,32
 2013a08:	10000d1e 	bne	r2,zero,2013a40 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
 2013a0c:	e0bfff17 	ldw	r2,-4(fp)
 2013a10:	00c10034 	movhi	r3,1024
 2013a14:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
 2013a18:	e0bfff17 	ldw	r2,-4(fp)
 2013a1c:	00c10004 	movi	r3,1024
 2013a20:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2013a24:	e0bfff17 	ldw	r2,-4(fp)
 2013a28:	00c00074 	movhi	r3,1
 2013a2c:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 2013a30:	e0bfff17 	ldw	r2,-4(fp)
 2013a34:	00c00044 	movi	r3,1
 2013a38:	10c03215 	stw	r3,200(r2)
 2013a3c:	00001406 	br	2013a90 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
 2013a40:	e0bfff17 	ldw	r2,-4(fp)
 2013a44:	10803017 	ldw	r2,192(r2)
 2013a48:	10803fcc 	andi	r2,r2,255
 2013a4c:	10800858 	cmpnei	r2,r2,33
 2013a50:	10000d1e 	bne	r2,zero,2013a88 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
 2013a54:	e0bfff17 	ldw	r2,-4(fp)
 2013a58:	00c20034 	movhi	r3,2048
 2013a5c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
 2013a60:	e0bfff17 	ldw	r2,-4(fp)
 2013a64:	00c20004 	movi	r3,2048
 2013a68:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2013a6c:	e0bfff17 	ldw	r2,-4(fp)
 2013a70:	00c00074 	movhi	r3,1
 2013a74:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 2013a78:	e0bfff17 	ldw	r2,-4(fp)
 2013a7c:	00c00044 	movi	r3,1
 2013a80:	10c03215 	stw	r3,200(r2)
 2013a84:	00000206 	br	2013a90 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 2013a88:	00bffb44 	movi	r2,-19
 2013a8c:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 2013a90:	e0bfff17 	ldw	r2,-4(fp)
 2013a94:	10800e17 	ldw	r2,56(r2)
 2013a98:	1007883a 	mov	r3,r2
 2013a9c:	e0bfff17 	ldw	r2,-4(fp)
 2013aa0:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
 2013aa4:	e0bfff17 	ldw	r2,-4(fp)
 2013aa8:	00c00044 	movi	r3,1
 2013aac:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 2013ab0:	e0bfff17 	ldw	r2,-4(fp)
 2013ab4:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 2013ab8:	e0bfff17 	ldw	r2,-4(fp)
 2013abc:	00c04004 	movi	r3,256
 2013ac0:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 2013ac4:	e0bffe17 	ldw	r2,-8(fp)
}
 2013ac8:	e037883a 	mov	sp,fp
 2013acc:	dfc00117 	ldw	ra,4(sp)
 2013ad0:	df000017 	ldw	fp,0(sp)
 2013ad4:	dec00204 	addi	sp,sp,8
 2013ad8:	f800283a 	ret

02013adc <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 2013adc:	deffee04 	addi	sp,sp,-72
 2013ae0:	dfc01115 	stw	ra,68(sp)
 2013ae4:	df001015 	stw	fp,64(sp)
 2013ae8:	df001004 	addi	fp,sp,64
 2013aec:	e13ffc15 	stw	r4,-16(fp)
 2013af0:	e17ffd15 	stw	r5,-12(fp)
 2013af4:	e1bffe15 	stw	r6,-8(fp)
 2013af8:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 2013afc:	00800804 	movi	r2,32
 2013b00:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 2013b04:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 2013b08:	00002706 	br	2013ba8 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 2013b0c:	e0fff117 	ldw	r3,-60(fp)
 2013b10:	e0bfff17 	ldw	r2,-4(fp)
 2013b14:	1880012e 	bgeu	r3,r2,2013b1c <alt_epcs_flash_memcmp+0x40>
 2013b18:	1805883a 	mov	r2,r3
 2013b1c:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 2013b20:	e0fffe17 	ldw	r3,-8(fp)
 2013b24:	e0bff017 	ldw	r2,-64(fp)
 2013b28:	1885883a 	add	r2,r3,r2
 2013b2c:	e0fff404 	addi	r3,fp,-48
 2013b30:	e1fff217 	ldw	r7,-56(fp)
 2013b34:	180d883a 	mov	r6,r3
 2013b38:	100b883a 	mov	r5,r2
 2013b3c:	e13ffc17 	ldw	r4,-16(fp)
 2013b40:	20140c00 	call	20140c0 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 2013b44:	1000020e 	bge	r2,zero,2013b50 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 2013b48:	00bfffc4 	movi	r2,-1
 2013b4c:	00001906 	br	2013bb4 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 2013b50:	e0bff017 	ldw	r2,-64(fp)
 2013b54:	e0fffd17 	ldw	r3,-12(fp)
 2013b58:	1885883a 	add	r2,r3,r2
 2013b5c:	e13ff217 	ldw	r4,-56(fp)
 2013b60:	e0fff404 	addi	r3,fp,-48
 2013b64:	200d883a 	mov	r6,r4
 2013b68:	180b883a 	mov	r5,r3
 2013b6c:	1009883a 	mov	r4,r2
 2013b70:	20164ec0 	call	20164ec <memcmp>
 2013b74:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 2013b78:	e0bff317 	ldw	r2,-52(fp)
 2013b7c:	10000226 	beq	r2,zero,2013b88 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
 2013b80:	e0bff317 	ldw	r2,-52(fp)
 2013b84:	00000b06 	br	2013bb4 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
 2013b88:	e0bff217 	ldw	r2,-56(fp)
 2013b8c:	e0ffff17 	ldw	r3,-4(fp)
 2013b90:	1885c83a 	sub	r2,r3,r2
 2013b94:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 2013b98:	e0fff017 	ldw	r3,-64(fp)
 2013b9c:	e0bff217 	ldw	r2,-56(fp)
 2013ba0:	1885883a 	add	r2,r3,r2
 2013ba4:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 2013ba8:	e0bfff17 	ldw	r2,-4(fp)
 2013bac:	103fd71e 	bne	r2,zero,2013b0c <__alt_mem_epcs_flash_controller_0+0xfd012b0c>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 2013bb0:	0005883a 	mov	r2,zero
}
 2013bb4:	e037883a 	mov	sp,fp
 2013bb8:	dfc00117 	ldw	ra,4(sp)
 2013bbc:	df000017 	ldw	fp,0(sp)
 2013bc0:	dec00204 	addi	sp,sp,8
 2013bc4:	f800283a 	ret

02013bc8 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 2013bc8:	defff404 	addi	sp,sp,-48
 2013bcc:	dfc00b15 	stw	ra,44(sp)
 2013bd0:	df000a15 	stw	fp,40(sp)
 2013bd4:	df000a04 	addi	fp,sp,40
 2013bd8:	e13ffc15 	stw	r4,-16(fp)
 2013bdc:	e17ffd15 	stw	r5,-12(fp)
 2013be0:	e1bffe15 	stw	r6,-8(fp)
 2013be4:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 2013be8:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2013bec:	e03ff815 	stw	zero,-32(fp)
 2013bf0:	00008306 	br	2013e00 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2013bf4:	e0fffc17 	ldw	r3,-16(fp)
 2013bf8:	e0bff817 	ldw	r2,-32(fp)
 2013bfc:	1004913a 	slli	r2,r2,4
 2013c00:	1885883a 	add	r2,r3,r2
 2013c04:	10800d04 	addi	r2,r2,52
 2013c08:	10800017 	ldw	r2,0(r2)
 2013c0c:	e0fffd17 	ldw	r3,-12(fp)
 2013c10:	18807816 	blt	r3,r2,2013df4 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 2013c14:	e0fffc17 	ldw	r3,-16(fp)
 2013c18:	e0bff817 	ldw	r2,-32(fp)
 2013c1c:	1004913a 	slli	r2,r2,4
 2013c20:	1885883a 	add	r2,r3,r2
 2013c24:	10800d04 	addi	r2,r2,52
 2013c28:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 2013c2c:	e13ffc17 	ldw	r4,-16(fp)
 2013c30:	e0bff817 	ldw	r2,-32(fp)
 2013c34:	1004913a 	slli	r2,r2,4
 2013c38:	2085883a 	add	r2,r4,r2
 2013c3c:	10800e04 	addi	r2,r2,56
 2013c40:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 2013c44:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2013c48:	e0fffd17 	ldw	r3,-12(fp)
 2013c4c:	1880690e 	bge	r3,r2,2013df4 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 2013c50:	e0fffc17 	ldw	r3,-16(fp)
 2013c54:	e0bff817 	ldw	r2,-32(fp)
 2013c58:	1004913a 	slli	r2,r2,4
 2013c5c:	1885883a 	add	r2,r3,r2
 2013c60:	10800d04 	addi	r2,r2,52
 2013c64:	10800017 	ldw	r2,0(r2)
 2013c68:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2013c6c:	e03ff915 	stw	zero,-28(fp)
 2013c70:	00005806 	br	2013dd4 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 2013c74:	e0fffd17 	ldw	r3,-12(fp)
 2013c78:	e0bffa17 	ldw	r2,-24(fp)
 2013c7c:	18804916 	blt	r3,r2,2013da4 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 2013c80:	e0fffc17 	ldw	r3,-16(fp)
 2013c84:	e0bff817 	ldw	r2,-32(fp)
 2013c88:	10800104 	addi	r2,r2,4
 2013c8c:	1004913a 	slli	r2,r2,4
 2013c90:	1885883a 	add	r2,r3,r2
 2013c94:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 2013c98:	e0bffa17 	ldw	r2,-24(fp)
 2013c9c:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 2013ca0:	e0fffd17 	ldw	r3,-12(fp)
 2013ca4:	18803f0e 	bge	r3,r2,2013da4 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 2013ca8:	e0fffc17 	ldw	r3,-16(fp)
 2013cac:	e0bff817 	ldw	r2,-32(fp)
 2013cb0:	10800104 	addi	r2,r2,4
 2013cb4:	1004913a 	slli	r2,r2,4
 2013cb8:	1885883a 	add	r2,r3,r2
 2013cbc:	10c00017 	ldw	r3,0(r2)
 2013cc0:	e0bffa17 	ldw	r2,-24(fp)
 2013cc4:	1887883a 	add	r3,r3,r2
 2013cc8:	e0bffd17 	ldw	r2,-12(fp)
 2013ccc:	1885c83a 	sub	r2,r3,r2
 2013cd0:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 2013cd4:	e0fffb17 	ldw	r3,-20(fp)
 2013cd8:	e0bfff17 	ldw	r2,-4(fp)
 2013cdc:	1880010e 	bge	r3,r2,2013ce4 <alt_epcs_flash_write+0x11c>
 2013ce0:	1805883a 	mov	r2,r3
 2013ce4:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 2013ce8:	e0bffb17 	ldw	r2,-20(fp)
 2013cec:	100f883a 	mov	r7,r2
 2013cf0:	e1bffd17 	ldw	r6,-12(fp)
 2013cf4:	e17ffe17 	ldw	r5,-8(fp)
 2013cf8:	e13ffc17 	ldw	r4,-16(fp)
 2013cfc:	2013adc0 	call	2013adc <alt_epcs_flash_memcmp>
 2013d00:	10001226 	beq	r2,zero,2013d4c <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 2013d04:	e0bffc17 	ldw	r2,-16(fp)
 2013d08:	10800817 	ldw	r2,32(r2)
 2013d0c:	e17ffa17 	ldw	r5,-24(fp)
 2013d10:	e13ffc17 	ldw	r4,-16(fp)
 2013d14:	103ee83a 	callr	r2
 2013d18:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 2013d1c:	e0bff717 	ldw	r2,-36(fp)
 2013d20:	10000a1e 	bne	r2,zero,2013d4c <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 2013d24:	e0bffc17 	ldw	r2,-16(fp)
 2013d28:	10800917 	ldw	r2,36(r2)
 2013d2c:	e0fffb17 	ldw	r3,-20(fp)
 2013d30:	d8c00015 	stw	r3,0(sp)
 2013d34:	e1fffe17 	ldw	r7,-8(fp)
 2013d38:	e1bffd17 	ldw	r6,-12(fp)
 2013d3c:	e17ffa17 	ldw	r5,-24(fp)
 2013d40:	e13ffc17 	ldw	r4,-16(fp)
 2013d44:	103ee83a 	callr	r2
 2013d48:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 2013d4c:	e0ffff17 	ldw	r3,-4(fp)
 2013d50:	e0bffb17 	ldw	r2,-20(fp)
 2013d54:	18802e26 	beq	r3,r2,2013e10 <alt_epcs_flash_write+0x248>
 2013d58:	e0bff717 	ldw	r2,-36(fp)
 2013d5c:	10002c1e 	bne	r2,zero,2013e10 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 2013d60:	e0ffff17 	ldw	r3,-4(fp)
 2013d64:	e0bffb17 	ldw	r2,-20(fp)
 2013d68:	1885c83a 	sub	r2,r3,r2
 2013d6c:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 2013d70:	e0fffc17 	ldw	r3,-16(fp)
 2013d74:	e0bff817 	ldw	r2,-32(fp)
 2013d78:	10800104 	addi	r2,r2,4
 2013d7c:	1004913a 	slli	r2,r2,4
 2013d80:	1885883a 	add	r2,r3,r2
 2013d84:	10c00017 	ldw	r3,0(r2)
 2013d88:	e0bffa17 	ldw	r2,-24(fp)
 2013d8c:	1885883a 	add	r2,r3,r2
 2013d90:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 2013d94:	e0bffb17 	ldw	r2,-20(fp)
 2013d98:	e0fffe17 	ldw	r3,-8(fp)
 2013d9c:	1885883a 	add	r2,r3,r2
 2013da0:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 2013da4:	e0fffc17 	ldw	r3,-16(fp)
 2013da8:	e0bff817 	ldw	r2,-32(fp)
 2013dac:	10800104 	addi	r2,r2,4
 2013db0:	1004913a 	slli	r2,r2,4
 2013db4:	1885883a 	add	r2,r3,r2
 2013db8:	10800017 	ldw	r2,0(r2)
 2013dbc:	e0fffa17 	ldw	r3,-24(fp)
 2013dc0:	1885883a 	add	r2,r3,r2
 2013dc4:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2013dc8:	e0bff917 	ldw	r2,-28(fp)
 2013dcc:	10800044 	addi	r2,r2,1
 2013dd0:	e0bff915 	stw	r2,-28(fp)
 2013dd4:	e0fffc17 	ldw	r3,-16(fp)
 2013dd8:	e0bff817 	ldw	r2,-32(fp)
 2013ddc:	1004913a 	slli	r2,r2,4
 2013de0:	1885883a 	add	r2,r3,r2
 2013de4:	10800f04 	addi	r2,r2,60
 2013de8:	10800017 	ldw	r2,0(r2)
 2013dec:	e0fff917 	ldw	r3,-28(fp)
 2013df0:	18bfa016 	blt	r3,r2,2013c74 <__alt_mem_epcs_flash_controller_0+0xfd012c74>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2013df4:	e0bff817 	ldw	r2,-32(fp)
 2013df8:	10800044 	addi	r2,r2,1
 2013dfc:	e0bff815 	stw	r2,-32(fp)
 2013e00:	e0bffc17 	ldw	r2,-16(fp)
 2013e04:	10800c17 	ldw	r2,48(r2)
 2013e08:	e0fff817 	ldw	r3,-32(fp)
 2013e0c:	18bf7916 	blt	r3,r2,2013bf4 <__alt_mem_epcs_flash_controller_0+0xfd012bf4>
      }
    }
  }

finished:
  return ret_code;
 2013e10:	e0bff717 	ldw	r2,-36(fp)
}
 2013e14:	e037883a 	mov	sp,fp
 2013e18:	dfc00117 	ldw	ra,4(sp)
 2013e1c:	df000017 	ldw	fp,0(sp)
 2013e20:	dec00204 	addi	sp,sp,8
 2013e24:	f800283a 	ret

02013e28 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 2013e28:	defffa04 	addi	sp,sp,-24
 2013e2c:	df000515 	stw	fp,20(sp)
 2013e30:	df000504 	addi	fp,sp,20
 2013e34:	e13ffd15 	stw	r4,-12(fp)
 2013e38:	e17ffe15 	stw	r5,-8(fp)
 2013e3c:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 2013e40:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 2013e44:	e0bffd17 	ldw	r2,-12(fp)
 2013e48:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 2013e4c:	e0bffc17 	ldw	r2,-16(fp)
 2013e50:	10c00c17 	ldw	r3,48(r2)
 2013e54:	e0bfff17 	ldw	r2,-4(fp)
 2013e58:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 2013e5c:	e0bffc17 	ldw	r2,-16(fp)
 2013e60:	10800c17 	ldw	r2,48(r2)
 2013e64:	1000031e 	bne	r2,zero,2013e74 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 2013e68:	00bffec4 	movi	r2,-5
 2013e6c:	e0bffb15 	stw	r2,-20(fp)
 2013e70:	00000b06 	br	2013ea0 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 2013e74:	e0bffc17 	ldw	r2,-16(fp)
 2013e78:	10800c17 	ldw	r2,48(r2)
 2013e7c:	10800250 	cmplti	r2,r2,9
 2013e80:	1000031e 	bne	r2,zero,2013e90 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 2013e84:	00bffd04 	movi	r2,-12
 2013e88:	e0bffb15 	stw	r2,-20(fp)
 2013e8c:	00000406 	br	2013ea0 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 2013e90:	e0bffc17 	ldw	r2,-16(fp)
 2013e94:	10c00d04 	addi	r3,r2,52
 2013e98:	e0bffe17 	ldw	r2,-8(fp)
 2013e9c:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 2013ea0:	e0bffb17 	ldw	r2,-20(fp)
}
 2013ea4:	e037883a 	mov	sp,fp
 2013ea8:	df000017 	ldw	fp,0(sp)
 2013eac:	dec00104 	addi	sp,sp,4
 2013eb0:	f800283a 	ret

02013eb4 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 2013eb4:	defff904 	addi	sp,sp,-28
 2013eb8:	df000615 	stw	fp,24(sp)
 2013ebc:	df000604 	addi	fp,sp,24
 2013ec0:	e13ffe15 	stw	r4,-8(fp)
 2013ec4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2013ec8:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2013ecc:	e0bffe17 	ldw	r2,-8(fp)
 2013ed0:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 2013ed4:	e0bffb17 	ldw	r2,-20(fp)
 2013ed8:	10800c17 	ldw	r2,48(r2)
 2013edc:	10bfffc4 	addi	r2,r2,-1
 2013ee0:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2013ee4:	e0fffb17 	ldw	r3,-20(fp)
 2013ee8:	e0bffc17 	ldw	r2,-16(fp)
 2013eec:	1004913a 	slli	r2,r2,4
 2013ef0:	1885883a 	add	r2,r3,r2
 2013ef4:	10800d04 	addi	r2,r2,52
 2013ef8:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 2013efc:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 2013f00:	e13ffb17 	ldw	r4,-20(fp)
 2013f04:	e0bffc17 	ldw	r2,-16(fp)
 2013f08:	1004913a 	slli	r2,r2,4
 2013f0c:	2085883a 	add	r2,r4,r2
 2013f10:	10800e04 	addi	r2,r2,56
 2013f14:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2013f18:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 2013f1c:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 2013f20:	e0bfff17 	ldw	r2,-4(fp)
 2013f24:	e0fffd17 	ldw	r3,-12(fp)
 2013f28:	1880022e 	bgeu	r3,r2,2013f34 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 2013f2c:	00bffec4 	movi	r2,-5
 2013f30:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 2013f34:	e0bffa17 	ldw	r2,-24(fp)
}
 2013f38:	e037883a 	mov	sp,fp
 2013f3c:	df000017 	ldw	fp,0(sp)
 2013f40:	dec00104 	addi	sp,sp,4
 2013f44:	f800283a 	ret

02013f48 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 2013f48:	defffa04 	addi	sp,sp,-24
 2013f4c:	dfc00515 	stw	ra,20(sp)
 2013f50:	df000415 	stw	fp,16(sp)
 2013f54:	df000404 	addi	fp,sp,16
 2013f58:	e13ffe15 	stw	r4,-8(fp)
 2013f5c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2013f60:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2013f64:	e0bffe17 	ldw	r2,-8(fp)
 2013f68:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 2013f6c:	e17fff17 	ldw	r5,-4(fp)
 2013f70:	e13ffe17 	ldw	r4,-8(fp)
 2013f74:	2013eb40 	call	2013eb4 <alt_epcs_test_address>
 2013f78:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 2013f7c:	e0bffc17 	ldw	r2,-16(fp)
 2013f80:	10000916 	blt	r2,zero,2013fa8 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 2013f84:	e0bffd17 	ldw	r2,-12(fp)
 2013f88:	10c02e17 	ldw	r3,184(r2)
 2013f8c:	e13fff17 	ldw	r4,-4(fp)
 2013f90:	e0bffd17 	ldw	r2,-12(fp)
 2013f94:	10803217 	ldw	r2,200(r2)
 2013f98:	100d883a 	mov	r6,r2
 2013f9c:	200b883a 	mov	r5,r4
 2013fa0:	1809883a 	mov	r4,r3
 2013fa4:	2014d840 	call	2014d84 <epcs_sector_erase>
  }
  return ret_code;
 2013fa8:	e0bffc17 	ldw	r2,-16(fp)
}
 2013fac:	e037883a 	mov	sp,fp
 2013fb0:	dfc00117 	ldw	ra,4(sp)
 2013fb4:	df000017 	ldw	fp,0(sp)
 2013fb8:	dec00204 	addi	sp,sp,8
 2013fbc:	f800283a 	ret

02013fc0 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 2013fc0:	defff404 	addi	sp,sp,-48
 2013fc4:	dfc00b15 	stw	ra,44(sp)
 2013fc8:	df000a15 	stw	fp,40(sp)
 2013fcc:	df000a04 	addi	fp,sp,40
 2013fd0:	e13ffc15 	stw	r4,-16(fp)
 2013fd4:	e17ffd15 	stw	r5,-12(fp)
 2013fd8:	e1bffe15 	stw	r6,-8(fp)
 2013fdc:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2013fe0:	e0bffc17 	ldw	r2,-16(fp)
 2013fe4:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 2013fe8:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 2013fec:	e17ffe17 	ldw	r5,-8(fp)
 2013ff0:	e13ffc17 	ldw	r4,-16(fp)
 2013ff4:	2013eb40 	call	2013eb4 <alt_epcs_test_address>
 2013ff8:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 2013ffc:	e0bff917 	ldw	r2,-28(fp)
 2014000:	10002916 	blt	r2,zero,20140a8 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2014004:	00002606 	br	20140a0 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 2014008:	e0bff817 	ldw	r2,-32(fp)
 201400c:	10c03117 	ldw	r3,196(r2)
 2014010:	e0bffe17 	ldw	r2,-8(fp)
 2014014:	1887883a 	add	r3,r3,r2
 2014018:	e0bff817 	ldw	r2,-32(fp)
 201401c:	10803117 	ldw	r2,196(r2)
 2014020:	0085c83a 	sub	r2,zero,r2
 2014024:	1884703a 	and	r2,r3,r2
 2014028:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 201402c:	e0fffa17 	ldw	r3,-24(fp)
 2014030:	e0bffe17 	ldw	r2,-8(fp)
 2014034:	1885c83a 	sub	r2,r3,r2
 2014038:	e0c00217 	ldw	r3,8(fp)
 201403c:	1880010e 	bge	r3,r2,2014044 <alt_epcs_flash_write_block+0x84>
 2014040:	1805883a 	mov	r2,r3
 2014044:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 2014048:	e0bff817 	ldw	r2,-32(fp)
 201404c:	11002e17 	ldw	r4,184(r2)
 2014050:	e0bff717 	ldw	r2,-36(fp)
 2014054:	e0ffff17 	ldw	r3,-4(fp)
 2014058:	1887883a 	add	r3,r3,r2
 201405c:	e0bff817 	ldw	r2,-32(fp)
 2014060:	10803217 	ldw	r2,200(r2)
 2014064:	d8800015 	stw	r2,0(sp)
 2014068:	e1fffb17 	ldw	r7,-20(fp)
 201406c:	180d883a 	mov	r6,r3
 2014070:	e17ffe17 	ldw	r5,-8(fp)
 2014074:	20150340 	call	2015034 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 2014078:	e0c00217 	ldw	r3,8(fp)
 201407c:	e0bffb17 	ldw	r2,-20(fp)
 2014080:	1885c83a 	sub	r2,r3,r2
 2014084:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 2014088:	e0fff717 	ldw	r3,-36(fp)
 201408c:	e0bffb17 	ldw	r2,-20(fp)
 2014090:	1885883a 	add	r2,r3,r2
 2014094:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 2014098:	e0bffa17 	ldw	r2,-24(fp)
 201409c:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 20140a0:	e0800217 	ldw	r2,8(fp)
 20140a4:	103fd81e 	bne	r2,zero,2014008 <__alt_mem_epcs_flash_controller_0+0xfd013008>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 20140a8:	e0bff917 	ldw	r2,-28(fp)
}
 20140ac:	e037883a 	mov	sp,fp
 20140b0:	dfc00117 	ldw	ra,4(sp)
 20140b4:	df000017 	ldw	fp,0(sp)
 20140b8:	dec00204 	addi	sp,sp,8
 20140bc:	f800283a 	ret

020140c0 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 20140c0:	defff704 	addi	sp,sp,-36
 20140c4:	dfc00815 	stw	ra,32(sp)
 20140c8:	df000715 	stw	fp,28(sp)
 20140cc:	df000704 	addi	fp,sp,28
 20140d0:	e13ffc15 	stw	r4,-16(fp)
 20140d4:	e17ffd15 	stw	r5,-12(fp)
 20140d8:	e1bffe15 	stw	r6,-8(fp)
 20140dc:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 20140e0:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20140e4:	e0bffc17 	ldw	r2,-16(fp)
 20140e8:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 20140ec:	e17ffd17 	ldw	r5,-12(fp)
 20140f0:	e13ffc17 	ldw	r4,-16(fp)
 20140f4:	2013eb40 	call	2013eb4 <alt_epcs_test_address>
 20140f8:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 20140fc:	e0bffa17 	ldw	r2,-24(fp)
 2014100:	10000f16 	blt	r2,zero,2014140 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 2014104:	e0bffb17 	ldw	r2,-20(fp)
 2014108:	10c02e17 	ldw	r3,184(r2)
 201410c:	e0bffb17 	ldw	r2,-20(fp)
 2014110:	10803217 	ldw	r2,200(r2)
 2014114:	d8800015 	stw	r2,0(sp)
 2014118:	e1ffff17 	ldw	r7,-4(fp)
 201411c:	e1bffe17 	ldw	r6,-8(fp)
 2014120:	e17ffd17 	ldw	r5,-12(fp)
 2014124:	1809883a 	mov	r4,r3
 2014128:	2014e800 	call	2014e80 <epcs_read_buffer>
 201412c:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 2014130:	e0fffa17 	ldw	r3,-24(fp)
 2014134:	e0bfff17 	ldw	r2,-4(fp)
 2014138:	1880011e 	bne	r3,r2,2014140 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 201413c:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 2014140:	e0bffa17 	ldw	r2,-24(fp)
}
 2014144:	e037883a 	mov	sp,fp
 2014148:	dfc00117 	ldw	ra,4(sp)
 201414c:	df000017 	ldw	fp,0(sp)
 2014150:	dec00204 	addi	sp,sp,8
 2014154:	f800283a 	ret

02014158 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2014158:	defffa04 	addi	sp,sp,-24
 201415c:	dfc00515 	stw	ra,20(sp)
 2014160:	df000415 	stw	fp,16(sp)
 2014164:	df000404 	addi	fp,sp,16
 2014168:	e13ffd15 	stw	r4,-12(fp)
 201416c:	e17ffe15 	stw	r5,-8(fp)
 2014170:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2014174:	e0bffd17 	ldw	r2,-12(fp)
 2014178:	10800017 	ldw	r2,0(r2)
 201417c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2014180:	e0bffc17 	ldw	r2,-16(fp)
 2014184:	10c00a04 	addi	r3,r2,40
 2014188:	e0bffd17 	ldw	r2,-12(fp)
 201418c:	10800217 	ldw	r2,8(r2)
 2014190:	100f883a 	mov	r7,r2
 2014194:	e1bfff17 	ldw	r6,-4(fp)
 2014198:	e17ffe17 	ldw	r5,-8(fp)
 201419c:	1809883a 	mov	r4,r3
 20141a0:	20147800 	call	2014780 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 20141a4:	e037883a 	mov	sp,fp
 20141a8:	dfc00117 	ldw	ra,4(sp)
 20141ac:	df000017 	ldw	fp,0(sp)
 20141b0:	dec00204 	addi	sp,sp,8
 20141b4:	f800283a 	ret

020141b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 20141b8:	defffa04 	addi	sp,sp,-24
 20141bc:	dfc00515 	stw	ra,20(sp)
 20141c0:	df000415 	stw	fp,16(sp)
 20141c4:	df000404 	addi	fp,sp,16
 20141c8:	e13ffd15 	stw	r4,-12(fp)
 20141cc:	e17ffe15 	stw	r5,-8(fp)
 20141d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20141d4:	e0bffd17 	ldw	r2,-12(fp)
 20141d8:	10800017 	ldw	r2,0(r2)
 20141dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 20141e0:	e0bffc17 	ldw	r2,-16(fp)
 20141e4:	10c00a04 	addi	r3,r2,40
 20141e8:	e0bffd17 	ldw	r2,-12(fp)
 20141ec:	10800217 	ldw	r2,8(r2)
 20141f0:	100f883a 	mov	r7,r2
 20141f4:	e1bfff17 	ldw	r6,-4(fp)
 20141f8:	e17ffe17 	ldw	r5,-8(fp)
 20141fc:	1809883a 	mov	r4,r3
 2014200:	201499c0 	call	201499c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2014204:	e037883a 	mov	sp,fp
 2014208:	dfc00117 	ldw	ra,4(sp)
 201420c:	df000017 	ldw	fp,0(sp)
 2014210:	dec00204 	addi	sp,sp,8
 2014214:	f800283a 	ret

02014218 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2014218:	defffc04 	addi	sp,sp,-16
 201421c:	dfc00315 	stw	ra,12(sp)
 2014220:	df000215 	stw	fp,8(sp)
 2014224:	df000204 	addi	fp,sp,8
 2014228:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201422c:	e0bfff17 	ldw	r2,-4(fp)
 2014230:	10800017 	ldw	r2,0(r2)
 2014234:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2014238:	e0bffe17 	ldw	r2,-8(fp)
 201423c:	10c00a04 	addi	r3,r2,40
 2014240:	e0bfff17 	ldw	r2,-4(fp)
 2014244:	10800217 	ldw	r2,8(r2)
 2014248:	100b883a 	mov	r5,r2
 201424c:	1809883a 	mov	r4,r3
 2014250:	20146280 	call	2014628 <altera_avalon_jtag_uart_close>
}
 2014254:	e037883a 	mov	sp,fp
 2014258:	dfc00117 	ldw	ra,4(sp)
 201425c:	df000017 	ldw	fp,0(sp)
 2014260:	dec00204 	addi	sp,sp,8
 2014264:	f800283a 	ret

02014268 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2014268:	defffa04 	addi	sp,sp,-24
 201426c:	dfc00515 	stw	ra,20(sp)
 2014270:	df000415 	stw	fp,16(sp)
 2014274:	df000404 	addi	fp,sp,16
 2014278:	e13ffd15 	stw	r4,-12(fp)
 201427c:	e17ffe15 	stw	r5,-8(fp)
 2014280:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2014284:	e0bffd17 	ldw	r2,-12(fp)
 2014288:	10800017 	ldw	r2,0(r2)
 201428c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2014290:	e0bffc17 	ldw	r2,-16(fp)
 2014294:	10800a04 	addi	r2,r2,40
 2014298:	e1bfff17 	ldw	r6,-4(fp)
 201429c:	e17ffe17 	ldw	r5,-8(fp)
 20142a0:	1009883a 	mov	r4,r2
 20142a4:	20146900 	call	2014690 <altera_avalon_jtag_uart_ioctl>
}
 20142a8:	e037883a 	mov	sp,fp
 20142ac:	dfc00117 	ldw	ra,4(sp)
 20142b0:	df000017 	ldw	fp,0(sp)
 20142b4:	dec00204 	addi	sp,sp,8
 20142b8:	f800283a 	ret

020142bc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 20142bc:	defffa04 	addi	sp,sp,-24
 20142c0:	dfc00515 	stw	ra,20(sp)
 20142c4:	df000415 	stw	fp,16(sp)
 20142c8:	df000404 	addi	fp,sp,16
 20142cc:	e13ffd15 	stw	r4,-12(fp)
 20142d0:	e17ffe15 	stw	r5,-8(fp)
 20142d4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20142d8:	e0bffd17 	ldw	r2,-12(fp)
 20142dc:	00c00044 	movi	r3,1
 20142e0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 20142e4:	e0bffd17 	ldw	r2,-12(fp)
 20142e8:	10800017 	ldw	r2,0(r2)
 20142ec:	10800104 	addi	r2,r2,4
 20142f0:	1007883a 	mov	r3,r2
 20142f4:	e0bffd17 	ldw	r2,-12(fp)
 20142f8:	10800817 	ldw	r2,32(r2)
 20142fc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2014300:	e0bffe17 	ldw	r2,-8(fp)
 2014304:	e0ffff17 	ldw	r3,-4(fp)
 2014308:	d8000015 	stw	zero,0(sp)
 201430c:	e1fffd17 	ldw	r7,-12(fp)
 2014310:	01808074 	movhi	r6,513
 2014314:	3190df04 	addi	r6,r6,17276
 2014318:	180b883a 	mov	r5,r3
 201431c:	1009883a 	mov	r4,r2
 2014320:	20157d00 	call	20157d0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2014324:	e0bffd17 	ldw	r2,-12(fp)
 2014328:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 201432c:	e0bffd17 	ldw	r2,-12(fp)
 2014330:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2014334:	d0e01e17 	ldw	r3,-32648(gp)
 2014338:	e1fffd17 	ldw	r7,-12(fp)
 201433c:	01808074 	movhi	r6,513
 2014340:	31916204 	addi	r6,r6,17800
 2014344:	180b883a 	mov	r5,r3
 2014348:	1009883a 	mov	r4,r2
 201434c:	20152f00 	call	20152f0 <alt_alarm_start>
 2014350:	1000040e 	bge	r2,zero,2014364 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2014354:	e0fffd17 	ldw	r3,-12(fp)
 2014358:	00a00034 	movhi	r2,32768
 201435c:	10bfffc4 	addi	r2,r2,-1
 2014360:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2014364:	0001883a 	nop
 2014368:	e037883a 	mov	sp,fp
 201436c:	dfc00117 	ldw	ra,4(sp)
 2014370:	df000017 	ldw	fp,0(sp)
 2014374:	dec00204 	addi	sp,sp,8
 2014378:	f800283a 	ret

0201437c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 201437c:	defff804 	addi	sp,sp,-32
 2014380:	df000715 	stw	fp,28(sp)
 2014384:	df000704 	addi	fp,sp,28
 2014388:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 201438c:	e0bfff17 	ldw	r2,-4(fp)
 2014390:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 2014394:	e0bffb17 	ldw	r2,-20(fp)
 2014398:	10800017 	ldw	r2,0(r2)
 201439c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20143a0:	e0bffc17 	ldw	r2,-16(fp)
 20143a4:	10800104 	addi	r2,r2,4
 20143a8:	10800037 	ldwio	r2,0(r2)
 20143ac:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 20143b0:	e0bffd17 	ldw	r2,-12(fp)
 20143b4:	1080c00c 	andi	r2,r2,768
 20143b8:	10006d26 	beq	r2,zero,2014570 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 20143bc:	e0bffd17 	ldw	r2,-12(fp)
 20143c0:	1080400c 	andi	r2,r2,256
 20143c4:	10003526 	beq	r2,zero,201449c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 20143c8:	00800074 	movhi	r2,1
 20143cc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20143d0:	e0bffb17 	ldw	r2,-20(fp)
 20143d4:	10800a17 	ldw	r2,40(r2)
 20143d8:	10800044 	addi	r2,r2,1
 20143dc:	1081ffcc 	andi	r2,r2,2047
 20143e0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 20143e4:	e0bffb17 	ldw	r2,-20(fp)
 20143e8:	10c00b17 	ldw	r3,44(r2)
 20143ec:	e0bffe17 	ldw	r2,-8(fp)
 20143f0:	18801526 	beq	r3,r2,2014448 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 20143f4:	e0bffc17 	ldw	r2,-16(fp)
 20143f8:	10800037 	ldwio	r2,0(r2)
 20143fc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2014400:	e0bff917 	ldw	r2,-28(fp)
 2014404:	10a0000c 	andi	r2,r2,32768
 2014408:	10001126 	beq	r2,zero,2014450 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 201440c:	e0bffb17 	ldw	r2,-20(fp)
 2014410:	10800a17 	ldw	r2,40(r2)
 2014414:	e0fff917 	ldw	r3,-28(fp)
 2014418:	1809883a 	mov	r4,r3
 201441c:	e0fffb17 	ldw	r3,-20(fp)
 2014420:	1885883a 	add	r2,r3,r2
 2014424:	10800e04 	addi	r2,r2,56
 2014428:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201442c:	e0bffb17 	ldw	r2,-20(fp)
 2014430:	10800a17 	ldw	r2,40(r2)
 2014434:	10800044 	addi	r2,r2,1
 2014438:	10c1ffcc 	andi	r3,r2,2047
 201443c:	e0bffb17 	ldw	r2,-20(fp)
 2014440:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2014444:	003fe206 	br	20143d0 <__alt_mem_epcs_flash_controller_0+0xfd0133d0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 2014448:	0001883a 	nop
 201444c:	00000106 	br	2014454 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 2014450:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2014454:	e0bff917 	ldw	r2,-28(fp)
 2014458:	10bfffec 	andhi	r2,r2,65535
 201445c:	10000f26 	beq	r2,zero,201449c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2014460:	e0bffb17 	ldw	r2,-20(fp)
 2014464:	10c00817 	ldw	r3,32(r2)
 2014468:	00bfff84 	movi	r2,-2
 201446c:	1886703a 	and	r3,r3,r2
 2014470:	e0bffb17 	ldw	r2,-20(fp)
 2014474:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2014478:	e0bffc17 	ldw	r2,-16(fp)
 201447c:	10800104 	addi	r2,r2,4
 2014480:	1007883a 	mov	r3,r2
 2014484:	e0bffb17 	ldw	r2,-20(fp)
 2014488:	10800817 	ldw	r2,32(r2)
 201448c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2014490:	e0bffc17 	ldw	r2,-16(fp)
 2014494:	10800104 	addi	r2,r2,4
 2014498:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 201449c:	e0bffd17 	ldw	r2,-12(fp)
 20144a0:	1080800c 	andi	r2,r2,512
 20144a4:	103fbe26 	beq	r2,zero,20143a0 <__alt_mem_epcs_flash_controller_0+0xfd0133a0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 20144a8:	e0bffd17 	ldw	r2,-12(fp)
 20144ac:	1004d43a 	srli	r2,r2,16
 20144b0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 20144b4:	00001406 	br	2014508 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 20144b8:	e0bffc17 	ldw	r2,-16(fp)
 20144bc:	e0fffb17 	ldw	r3,-20(fp)
 20144c0:	18c00d17 	ldw	r3,52(r3)
 20144c4:	e13ffb17 	ldw	r4,-20(fp)
 20144c8:	20c7883a 	add	r3,r4,r3
 20144cc:	18c20e04 	addi	r3,r3,2104
 20144d0:	18c00003 	ldbu	r3,0(r3)
 20144d4:	18c03fcc 	andi	r3,r3,255
 20144d8:	18c0201c 	xori	r3,r3,128
 20144dc:	18ffe004 	addi	r3,r3,-128
 20144e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20144e4:	e0bffb17 	ldw	r2,-20(fp)
 20144e8:	10800d17 	ldw	r2,52(r2)
 20144ec:	10800044 	addi	r2,r2,1
 20144f0:	10c1ffcc 	andi	r3,r2,2047
 20144f4:	e0bffb17 	ldw	r2,-20(fp)
 20144f8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 20144fc:	e0bffa17 	ldw	r2,-24(fp)
 2014500:	10bfffc4 	addi	r2,r2,-1
 2014504:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2014508:	e0bffa17 	ldw	r2,-24(fp)
 201450c:	10000526 	beq	r2,zero,2014524 <altera_avalon_jtag_uart_irq+0x1a8>
 2014510:	e0bffb17 	ldw	r2,-20(fp)
 2014514:	10c00d17 	ldw	r3,52(r2)
 2014518:	e0bffb17 	ldw	r2,-20(fp)
 201451c:	10800c17 	ldw	r2,48(r2)
 2014520:	18bfe51e 	bne	r3,r2,20144b8 <__alt_mem_epcs_flash_controller_0+0xfd0134b8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2014524:	e0bffa17 	ldw	r2,-24(fp)
 2014528:	103f9d26 	beq	r2,zero,20143a0 <__alt_mem_epcs_flash_controller_0+0xfd0133a0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201452c:	e0bffb17 	ldw	r2,-20(fp)
 2014530:	10c00817 	ldw	r3,32(r2)
 2014534:	00bfff44 	movi	r2,-3
 2014538:	1886703a 	and	r3,r3,r2
 201453c:	e0bffb17 	ldw	r2,-20(fp)
 2014540:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2014544:	e0bffb17 	ldw	r2,-20(fp)
 2014548:	10800017 	ldw	r2,0(r2)
 201454c:	10800104 	addi	r2,r2,4
 2014550:	1007883a 	mov	r3,r2
 2014554:	e0bffb17 	ldw	r2,-20(fp)
 2014558:	10800817 	ldw	r2,32(r2)
 201455c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2014560:	e0bffc17 	ldw	r2,-16(fp)
 2014564:	10800104 	addi	r2,r2,4
 2014568:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 201456c:	003f8c06 	br	20143a0 <__alt_mem_epcs_flash_controller_0+0xfd0133a0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 2014570:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 2014574:	0001883a 	nop
 2014578:	e037883a 	mov	sp,fp
 201457c:	df000017 	ldw	fp,0(sp)
 2014580:	dec00104 	addi	sp,sp,4
 2014584:	f800283a 	ret

02014588 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2014588:	defff804 	addi	sp,sp,-32
 201458c:	df000715 	stw	fp,28(sp)
 2014590:	df000704 	addi	fp,sp,28
 2014594:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2014598:	e0bffb17 	ldw	r2,-20(fp)
 201459c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 20145a0:	e0bff917 	ldw	r2,-28(fp)
 20145a4:	10800017 	ldw	r2,0(r2)
 20145a8:	10800104 	addi	r2,r2,4
 20145ac:	10800037 	ldwio	r2,0(r2)
 20145b0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 20145b4:	e0bffa17 	ldw	r2,-24(fp)
 20145b8:	1081000c 	andi	r2,r2,1024
 20145bc:	10000b26 	beq	r2,zero,20145ec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 20145c0:	e0bff917 	ldw	r2,-28(fp)
 20145c4:	10800017 	ldw	r2,0(r2)
 20145c8:	10800104 	addi	r2,r2,4
 20145cc:	1007883a 	mov	r3,r2
 20145d0:	e0bff917 	ldw	r2,-28(fp)
 20145d4:	10800817 	ldw	r2,32(r2)
 20145d8:	10810014 	ori	r2,r2,1024
 20145dc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 20145e0:	e0bff917 	ldw	r2,-28(fp)
 20145e4:	10000915 	stw	zero,36(r2)
 20145e8:	00000a06 	br	2014614 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 20145ec:	e0bff917 	ldw	r2,-28(fp)
 20145f0:	10c00917 	ldw	r3,36(r2)
 20145f4:	00a00034 	movhi	r2,32768
 20145f8:	10bfff04 	addi	r2,r2,-4
 20145fc:	10c00536 	bltu	r2,r3,2014614 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 2014600:	e0bff917 	ldw	r2,-28(fp)
 2014604:	10800917 	ldw	r2,36(r2)
 2014608:	10c00044 	addi	r3,r2,1
 201460c:	e0bff917 	ldw	r2,-28(fp)
 2014610:	10c00915 	stw	r3,36(r2)
 2014614:	d0a01e17 	ldw	r2,-32648(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2014618:	e037883a 	mov	sp,fp
 201461c:	df000017 	ldw	fp,0(sp)
 2014620:	dec00104 	addi	sp,sp,4
 2014624:	f800283a 	ret

02014628 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2014628:	defffd04 	addi	sp,sp,-12
 201462c:	df000215 	stw	fp,8(sp)
 2014630:	df000204 	addi	fp,sp,8
 2014634:	e13ffe15 	stw	r4,-8(fp)
 2014638:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201463c:	00000506 	br	2014654 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2014640:	e0bfff17 	ldw	r2,-4(fp)
 2014644:	1090000c 	andi	r2,r2,16384
 2014648:	10000226 	beq	r2,zero,2014654 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 201464c:	00bffd44 	movi	r2,-11
 2014650:	00000b06 	br	2014680 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2014654:	e0bffe17 	ldw	r2,-8(fp)
 2014658:	10c00d17 	ldw	r3,52(r2)
 201465c:	e0bffe17 	ldw	r2,-8(fp)
 2014660:	10800c17 	ldw	r2,48(r2)
 2014664:	18800526 	beq	r3,r2,201467c <altera_avalon_jtag_uart_close+0x54>
 2014668:	e0bffe17 	ldw	r2,-8(fp)
 201466c:	10c00917 	ldw	r3,36(r2)
 2014670:	e0bffe17 	ldw	r2,-8(fp)
 2014674:	10800117 	ldw	r2,4(r2)
 2014678:	18bff136 	bltu	r3,r2,2014640 <__alt_mem_epcs_flash_controller_0+0xfd013640>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 201467c:	0005883a 	mov	r2,zero
}
 2014680:	e037883a 	mov	sp,fp
 2014684:	df000017 	ldw	fp,0(sp)
 2014688:	dec00104 	addi	sp,sp,4
 201468c:	f800283a 	ret

02014690 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2014690:	defffa04 	addi	sp,sp,-24
 2014694:	df000515 	stw	fp,20(sp)
 2014698:	df000504 	addi	fp,sp,20
 201469c:	e13ffd15 	stw	r4,-12(fp)
 20146a0:	e17ffe15 	stw	r5,-8(fp)
 20146a4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 20146a8:	00bff9c4 	movi	r2,-25
 20146ac:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 20146b0:	e0bffe17 	ldw	r2,-8(fp)
 20146b4:	10da8060 	cmpeqi	r3,r2,27137
 20146b8:	1800031e 	bne	r3,zero,20146c8 <altera_avalon_jtag_uart_ioctl+0x38>
 20146bc:	109a80a0 	cmpeqi	r2,r2,27138
 20146c0:	1000181e 	bne	r2,zero,2014724 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 20146c4:	00002906 	br	201476c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 20146c8:	e0bffd17 	ldw	r2,-12(fp)
 20146cc:	10c00117 	ldw	r3,4(r2)
 20146d0:	00a00034 	movhi	r2,32768
 20146d4:	10bfffc4 	addi	r2,r2,-1
 20146d8:	18802126 	beq	r3,r2,2014760 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 20146dc:	e0bfff17 	ldw	r2,-4(fp)
 20146e0:	10800017 	ldw	r2,0(r2)
 20146e4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 20146e8:	e0bffc17 	ldw	r2,-16(fp)
 20146ec:	10800090 	cmplti	r2,r2,2
 20146f0:	1000061e 	bne	r2,zero,201470c <altera_avalon_jtag_uart_ioctl+0x7c>
 20146f4:	e0fffc17 	ldw	r3,-16(fp)
 20146f8:	00a00034 	movhi	r2,32768
 20146fc:	10bfffc4 	addi	r2,r2,-1
 2014700:	18800226 	beq	r3,r2,201470c <altera_avalon_jtag_uart_ioctl+0x7c>
 2014704:	e0bffc17 	ldw	r2,-16(fp)
 2014708:	00000206 	br	2014714 <altera_avalon_jtag_uart_ioctl+0x84>
 201470c:	00a00034 	movhi	r2,32768
 2014710:	10bfff84 	addi	r2,r2,-2
 2014714:	e0fffd17 	ldw	r3,-12(fp)
 2014718:	18800115 	stw	r2,4(r3)
      rc = 0;
 201471c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2014720:	00000f06 	br	2014760 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2014724:	e0bffd17 	ldw	r2,-12(fp)
 2014728:	10c00117 	ldw	r3,4(r2)
 201472c:	00a00034 	movhi	r2,32768
 2014730:	10bfffc4 	addi	r2,r2,-1
 2014734:	18800c26 	beq	r3,r2,2014768 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2014738:	e0bffd17 	ldw	r2,-12(fp)
 201473c:	10c00917 	ldw	r3,36(r2)
 2014740:	e0bffd17 	ldw	r2,-12(fp)
 2014744:	10800117 	ldw	r2,4(r2)
 2014748:	1885803a 	cmpltu	r2,r3,r2
 201474c:	10c03fcc 	andi	r3,r2,255
 2014750:	e0bfff17 	ldw	r2,-4(fp)
 2014754:	10c00015 	stw	r3,0(r2)
      rc = 0;
 2014758:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201475c:	00000206 	br	2014768 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 2014760:	0001883a 	nop
 2014764:	00000106 	br	201476c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 2014768:	0001883a 	nop

  default:
    break;
  }

  return rc;
 201476c:	e0bffb17 	ldw	r2,-20(fp)
}
 2014770:	e037883a 	mov	sp,fp
 2014774:	df000017 	ldw	fp,0(sp)
 2014778:	dec00104 	addi	sp,sp,4
 201477c:	f800283a 	ret

02014780 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2014780:	defff304 	addi	sp,sp,-52
 2014784:	dfc00c15 	stw	ra,48(sp)
 2014788:	df000b15 	stw	fp,44(sp)
 201478c:	df000b04 	addi	fp,sp,44
 2014790:	e13ffc15 	stw	r4,-16(fp)
 2014794:	e17ffd15 	stw	r5,-12(fp)
 2014798:	e1bffe15 	stw	r6,-8(fp)
 201479c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 20147a0:	e0bffd17 	ldw	r2,-12(fp)
 20147a4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20147a8:	00004706 	br	20148c8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 20147ac:	e0bffc17 	ldw	r2,-16(fp)
 20147b0:	10800a17 	ldw	r2,40(r2)
 20147b4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 20147b8:	e0bffc17 	ldw	r2,-16(fp)
 20147bc:	10800b17 	ldw	r2,44(r2)
 20147c0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 20147c4:	e0fff717 	ldw	r3,-36(fp)
 20147c8:	e0bff817 	ldw	r2,-32(fp)
 20147cc:	18800536 	bltu	r3,r2,20147e4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 20147d0:	e0fff717 	ldw	r3,-36(fp)
 20147d4:	e0bff817 	ldw	r2,-32(fp)
 20147d8:	1885c83a 	sub	r2,r3,r2
 20147dc:	e0bff615 	stw	r2,-40(fp)
 20147e0:	00000406 	br	20147f4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 20147e4:	00c20004 	movi	r3,2048
 20147e8:	e0bff817 	ldw	r2,-32(fp)
 20147ec:	1885c83a 	sub	r2,r3,r2
 20147f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 20147f4:	e0bff617 	ldw	r2,-40(fp)
 20147f8:	10001e26 	beq	r2,zero,2014874 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 20147fc:	e0fffe17 	ldw	r3,-8(fp)
 2014800:	e0bff617 	ldw	r2,-40(fp)
 2014804:	1880022e 	bgeu	r3,r2,2014810 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 2014808:	e0bffe17 	ldw	r2,-8(fp)
 201480c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2014810:	e0bffc17 	ldw	r2,-16(fp)
 2014814:	10c00e04 	addi	r3,r2,56
 2014818:	e0bff817 	ldw	r2,-32(fp)
 201481c:	1885883a 	add	r2,r3,r2
 2014820:	e1bff617 	ldw	r6,-40(fp)
 2014824:	100b883a 	mov	r5,r2
 2014828:	e13ff517 	ldw	r4,-44(fp)
 201482c:	200d2fc0 	call	200d2fc <memcpy>
      ptr   += n;
 2014830:	e0fff517 	ldw	r3,-44(fp)
 2014834:	e0bff617 	ldw	r2,-40(fp)
 2014838:	1885883a 	add	r2,r3,r2
 201483c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 2014840:	e0fffe17 	ldw	r3,-8(fp)
 2014844:	e0bff617 	ldw	r2,-40(fp)
 2014848:	1885c83a 	sub	r2,r3,r2
 201484c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2014850:	e0fff817 	ldw	r3,-32(fp)
 2014854:	e0bff617 	ldw	r2,-40(fp)
 2014858:	1885883a 	add	r2,r3,r2
 201485c:	10c1ffcc 	andi	r3,r2,2047
 2014860:	e0bffc17 	ldw	r2,-16(fp)
 2014864:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2014868:	e0bffe17 	ldw	r2,-8(fp)
 201486c:	00bfcf16 	blt	zero,r2,20147ac <__alt_mem_epcs_flash_controller_0+0xfd0137ac>
 2014870:	00000106 	br	2014878 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 2014874:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 2014878:	e0fff517 	ldw	r3,-44(fp)
 201487c:	e0bffd17 	ldw	r2,-12(fp)
 2014880:	1880141e 	bne	r3,r2,20148d4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2014884:	e0bfff17 	ldw	r2,-4(fp)
 2014888:	1090000c 	andi	r2,r2,16384
 201488c:	1000131e 	bne	r2,zero,20148dc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2014890:	0001883a 	nop
 2014894:	e0bffc17 	ldw	r2,-16(fp)
 2014898:	10c00a17 	ldw	r3,40(r2)
 201489c:	e0bff717 	ldw	r2,-36(fp)
 20148a0:	1880051e 	bne	r3,r2,20148b8 <altera_avalon_jtag_uart_read+0x138>
 20148a4:	e0bffc17 	ldw	r2,-16(fp)
 20148a8:	10c00917 	ldw	r3,36(r2)
 20148ac:	e0bffc17 	ldw	r2,-16(fp)
 20148b0:	10800117 	ldw	r2,4(r2)
 20148b4:	18bff736 	bltu	r3,r2,2014894 <__alt_mem_epcs_flash_controller_0+0xfd013894>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 20148b8:	e0bffc17 	ldw	r2,-16(fp)
 20148bc:	10c00a17 	ldw	r3,40(r2)
 20148c0:	e0bff717 	ldw	r2,-36(fp)
 20148c4:	18800726 	beq	r3,r2,20148e4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20148c8:	e0bffe17 	ldw	r2,-8(fp)
 20148cc:	00bfb716 	blt	zero,r2,20147ac <__alt_mem_epcs_flash_controller_0+0xfd0137ac>
 20148d0:	00000506 	br	20148e8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 20148d4:	0001883a 	nop
 20148d8:	00000306 	br	20148e8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 20148dc:	0001883a 	nop
 20148e0:	00000106 	br	20148e8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 20148e4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 20148e8:	e0fff517 	ldw	r3,-44(fp)
 20148ec:	e0bffd17 	ldw	r2,-12(fp)
 20148f0:	18801826 	beq	r3,r2,2014954 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20148f4:	0005303a 	rdctl	r2,status
 20148f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20148fc:	e0fffb17 	ldw	r3,-20(fp)
 2014900:	00bfff84 	movi	r2,-2
 2014904:	1884703a 	and	r2,r3,r2
 2014908:	1001703a 	wrctl	status,r2
  
  return context;
 201490c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2014910:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2014914:	e0bffc17 	ldw	r2,-16(fp)
 2014918:	10800817 	ldw	r2,32(r2)
 201491c:	10c00054 	ori	r3,r2,1
 2014920:	e0bffc17 	ldw	r2,-16(fp)
 2014924:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2014928:	e0bffc17 	ldw	r2,-16(fp)
 201492c:	10800017 	ldw	r2,0(r2)
 2014930:	10800104 	addi	r2,r2,4
 2014934:	1007883a 	mov	r3,r2
 2014938:	e0bffc17 	ldw	r2,-16(fp)
 201493c:	10800817 	ldw	r2,32(r2)
 2014940:	18800035 	stwio	r2,0(r3)
 2014944:	e0bffa17 	ldw	r2,-24(fp)
 2014948:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201494c:	e0bff917 	ldw	r2,-28(fp)
 2014950:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2014954:	e0fff517 	ldw	r3,-44(fp)
 2014958:	e0bffd17 	ldw	r2,-12(fp)
 201495c:	18800426 	beq	r3,r2,2014970 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 2014960:	e0fff517 	ldw	r3,-44(fp)
 2014964:	e0bffd17 	ldw	r2,-12(fp)
 2014968:	1885c83a 	sub	r2,r3,r2
 201496c:	00000606 	br	2014988 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 2014970:	e0bfff17 	ldw	r2,-4(fp)
 2014974:	1090000c 	andi	r2,r2,16384
 2014978:	10000226 	beq	r2,zero,2014984 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 201497c:	00bffd44 	movi	r2,-11
 2014980:	00000106 	br	2014988 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 2014984:	00bffec4 	movi	r2,-5
}
 2014988:	e037883a 	mov	sp,fp
 201498c:	dfc00117 	ldw	ra,4(sp)
 2014990:	df000017 	ldw	fp,0(sp)
 2014994:	dec00204 	addi	sp,sp,8
 2014998:	f800283a 	ret

0201499c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 201499c:	defff304 	addi	sp,sp,-52
 20149a0:	dfc00c15 	stw	ra,48(sp)
 20149a4:	df000b15 	stw	fp,44(sp)
 20149a8:	df000b04 	addi	fp,sp,44
 20149ac:	e13ffc15 	stw	r4,-16(fp)
 20149b0:	e17ffd15 	stw	r5,-12(fp)
 20149b4:	e1bffe15 	stw	r6,-8(fp)
 20149b8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 20149bc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 20149c0:	e0bffd17 	ldw	r2,-12(fp)
 20149c4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20149c8:	00003706 	br	2014aa8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 20149cc:	e0bffc17 	ldw	r2,-16(fp)
 20149d0:	10800c17 	ldw	r2,48(r2)
 20149d4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 20149d8:	e0bffc17 	ldw	r2,-16(fp)
 20149dc:	10800d17 	ldw	r2,52(r2)
 20149e0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 20149e4:	e0fff917 	ldw	r3,-28(fp)
 20149e8:	e0bff517 	ldw	r2,-44(fp)
 20149ec:	1880062e 	bgeu	r3,r2,2014a08 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 20149f0:	e0fff517 	ldw	r3,-44(fp)
 20149f4:	e0bff917 	ldw	r2,-28(fp)
 20149f8:	1885c83a 	sub	r2,r3,r2
 20149fc:	10bfffc4 	addi	r2,r2,-1
 2014a00:	e0bff615 	stw	r2,-40(fp)
 2014a04:	00000b06 	br	2014a34 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 2014a08:	e0bff517 	ldw	r2,-44(fp)
 2014a0c:	10000526 	beq	r2,zero,2014a24 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2014a10:	00c20004 	movi	r3,2048
 2014a14:	e0bff917 	ldw	r2,-28(fp)
 2014a18:	1885c83a 	sub	r2,r3,r2
 2014a1c:	e0bff615 	stw	r2,-40(fp)
 2014a20:	00000406 	br	2014a34 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2014a24:	00c1ffc4 	movi	r3,2047
 2014a28:	e0bff917 	ldw	r2,-28(fp)
 2014a2c:	1885c83a 	sub	r2,r3,r2
 2014a30:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2014a34:	e0bff617 	ldw	r2,-40(fp)
 2014a38:	10001e26 	beq	r2,zero,2014ab4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 2014a3c:	e0fffe17 	ldw	r3,-8(fp)
 2014a40:	e0bff617 	ldw	r2,-40(fp)
 2014a44:	1880022e 	bgeu	r3,r2,2014a50 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 2014a48:	e0bffe17 	ldw	r2,-8(fp)
 2014a4c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2014a50:	e0bffc17 	ldw	r2,-16(fp)
 2014a54:	10c20e04 	addi	r3,r2,2104
 2014a58:	e0bff917 	ldw	r2,-28(fp)
 2014a5c:	1885883a 	add	r2,r3,r2
 2014a60:	e1bff617 	ldw	r6,-40(fp)
 2014a64:	e17ffd17 	ldw	r5,-12(fp)
 2014a68:	1009883a 	mov	r4,r2
 2014a6c:	200d2fc0 	call	200d2fc <memcpy>
      ptr   += n;
 2014a70:	e0fffd17 	ldw	r3,-12(fp)
 2014a74:	e0bff617 	ldw	r2,-40(fp)
 2014a78:	1885883a 	add	r2,r3,r2
 2014a7c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 2014a80:	e0fffe17 	ldw	r3,-8(fp)
 2014a84:	e0bff617 	ldw	r2,-40(fp)
 2014a88:	1885c83a 	sub	r2,r3,r2
 2014a8c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2014a90:	e0fff917 	ldw	r3,-28(fp)
 2014a94:	e0bff617 	ldw	r2,-40(fp)
 2014a98:	1885883a 	add	r2,r3,r2
 2014a9c:	10c1ffcc 	andi	r3,r2,2047
 2014aa0:	e0bffc17 	ldw	r2,-16(fp)
 2014aa4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2014aa8:	e0bffe17 	ldw	r2,-8(fp)
 2014aac:	00bfc716 	blt	zero,r2,20149cc <__alt_mem_epcs_flash_controller_0+0xfd0139cc>
 2014ab0:	00000106 	br	2014ab8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 2014ab4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014ab8:	0005303a 	rdctl	r2,status
 2014abc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014ac0:	e0fffb17 	ldw	r3,-20(fp)
 2014ac4:	00bfff84 	movi	r2,-2
 2014ac8:	1884703a 	and	r2,r3,r2
 2014acc:	1001703a 	wrctl	status,r2
  
  return context;
 2014ad0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2014ad4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2014ad8:	e0bffc17 	ldw	r2,-16(fp)
 2014adc:	10800817 	ldw	r2,32(r2)
 2014ae0:	10c00094 	ori	r3,r2,2
 2014ae4:	e0bffc17 	ldw	r2,-16(fp)
 2014ae8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2014aec:	e0bffc17 	ldw	r2,-16(fp)
 2014af0:	10800017 	ldw	r2,0(r2)
 2014af4:	10800104 	addi	r2,r2,4
 2014af8:	1007883a 	mov	r3,r2
 2014afc:	e0bffc17 	ldw	r2,-16(fp)
 2014b00:	10800817 	ldw	r2,32(r2)
 2014b04:	18800035 	stwio	r2,0(r3)
 2014b08:	e0bffa17 	ldw	r2,-24(fp)
 2014b0c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014b10:	e0bff817 	ldw	r2,-32(fp)
 2014b14:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2014b18:	e0bffe17 	ldw	r2,-8(fp)
 2014b1c:	0080100e 	bge	zero,r2,2014b60 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 2014b20:	e0bfff17 	ldw	r2,-4(fp)
 2014b24:	1090000c 	andi	r2,r2,16384
 2014b28:	1000101e 	bne	r2,zero,2014b6c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2014b2c:	0001883a 	nop
 2014b30:	e0bffc17 	ldw	r2,-16(fp)
 2014b34:	10c00d17 	ldw	r3,52(r2)
 2014b38:	e0bff517 	ldw	r2,-44(fp)
 2014b3c:	1880051e 	bne	r3,r2,2014b54 <altera_avalon_jtag_uart_write+0x1b8>
 2014b40:	e0bffc17 	ldw	r2,-16(fp)
 2014b44:	10c00917 	ldw	r3,36(r2)
 2014b48:	e0bffc17 	ldw	r2,-16(fp)
 2014b4c:	10800117 	ldw	r2,4(r2)
 2014b50:	18bff736 	bltu	r3,r2,2014b30 <__alt_mem_epcs_flash_controller_0+0xfd013b30>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2014b54:	e0bffc17 	ldw	r2,-16(fp)
 2014b58:	10800917 	ldw	r2,36(r2)
 2014b5c:	1000051e 	bne	r2,zero,2014b74 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 2014b60:	e0bffe17 	ldw	r2,-8(fp)
 2014b64:	00bfd016 	blt	zero,r2,2014aa8 <__alt_mem_epcs_flash_controller_0+0xfd013aa8>
 2014b68:	00000306 	br	2014b78 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 2014b6c:	0001883a 	nop
 2014b70:	00000106 	br	2014b78 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 2014b74:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2014b78:	e0fffd17 	ldw	r3,-12(fp)
 2014b7c:	e0bff717 	ldw	r2,-36(fp)
 2014b80:	18800426 	beq	r3,r2,2014b94 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 2014b84:	e0fffd17 	ldw	r3,-12(fp)
 2014b88:	e0bff717 	ldw	r2,-36(fp)
 2014b8c:	1885c83a 	sub	r2,r3,r2
 2014b90:	00000606 	br	2014bac <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 2014b94:	e0bfff17 	ldw	r2,-4(fp)
 2014b98:	1090000c 	andi	r2,r2,16384
 2014b9c:	10000226 	beq	r2,zero,2014ba8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 2014ba0:	00bffd44 	movi	r2,-11
 2014ba4:	00000106 	br	2014bac <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2014ba8:	00bffec4 	movi	r2,-5
}
 2014bac:	e037883a 	mov	sp,fp
 2014bb0:	dfc00117 	ldw	ra,4(sp)
 2014bb4:	df000017 	ldw	fp,0(sp)
 2014bb8:	dec00204 	addi	sp,sp,8
 2014bbc:	f800283a 	ret

02014bc0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 2014bc0:	defffa04 	addi	sp,sp,-24
 2014bc4:	dfc00515 	stw	ra,20(sp)
 2014bc8:	df000415 	stw	fp,16(sp)
 2014bcc:	df000404 	addi	fp,sp,16
 2014bd0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2014bd4:	0007883a 	mov	r3,zero
 2014bd8:	e0bfff17 	ldw	r2,-4(fp)
 2014bdc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2014be0:	e0bfff17 	ldw	r2,-4(fp)
 2014be4:	10800104 	addi	r2,r2,4
 2014be8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014bec:	0005303a 	rdctl	r2,status
 2014bf0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014bf4:	e0fffd17 	ldw	r3,-12(fp)
 2014bf8:	00bfff84 	movi	r2,-2
 2014bfc:	1884703a 	and	r2,r3,r2
 2014c00:	1001703a 	wrctl	status,r2
  
  return context;
 2014c04:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2014c08:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 2014c0c:	2015ea00 	call	2015ea0 <alt_tick>
 2014c10:	e0bffc17 	ldw	r2,-16(fp)
 2014c14:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014c18:	e0bffe17 	ldw	r2,-8(fp)
 2014c1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2014c20:	0001883a 	nop
 2014c24:	e037883a 	mov	sp,fp
 2014c28:	dfc00117 	ldw	ra,4(sp)
 2014c2c:	df000017 	ldw	fp,0(sp)
 2014c30:	dec00204 	addi	sp,sp,8
 2014c34:	f800283a 	ret

02014c38 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2014c38:	defff804 	addi	sp,sp,-32
 2014c3c:	dfc00715 	stw	ra,28(sp)
 2014c40:	df000615 	stw	fp,24(sp)
 2014c44:	df000604 	addi	fp,sp,24
 2014c48:	e13ffc15 	stw	r4,-16(fp)
 2014c4c:	e17ffd15 	stw	r5,-12(fp)
 2014c50:	e1bffe15 	stw	r6,-8(fp)
 2014c54:	e1ffff15 	stw	r7,-4(fp)
 2014c58:	e0bfff17 	ldw	r2,-4(fp)
 2014c5c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2014c60:	d0a01e17 	ldw	r2,-32648(gp)
 2014c64:	1000021e 	bne	r2,zero,2014c70 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 2014c68:	e0bffb17 	ldw	r2,-20(fp)
 2014c6c:	d0a01e15 	stw	r2,-32648(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2014c70:	e0bffc17 	ldw	r2,-16(fp)
 2014c74:	10800104 	addi	r2,r2,4
 2014c78:	00c001c4 	movi	r3,7
 2014c7c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 2014c80:	d8000015 	stw	zero,0(sp)
 2014c84:	e1fffc17 	ldw	r7,-16(fp)
 2014c88:	01808074 	movhi	r6,513
 2014c8c:	3192f004 	addi	r6,r6,19392
 2014c90:	e17ffe17 	ldw	r5,-8(fp)
 2014c94:	e13ffd17 	ldw	r4,-12(fp)
 2014c98:	20157d00 	call	20157d0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 2014c9c:	0001883a 	nop
 2014ca0:	e037883a 	mov	sp,fp
 2014ca4:	dfc00117 	ldw	ra,4(sp)
 2014ca8:	df000017 	ldw	fp,0(sp)
 2014cac:	dec00204 	addi	sp,sp,8
 2014cb0:	f800283a 	ret

02014cb4 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 2014cb4:	defff904 	addi	sp,sp,-28
 2014cb8:	dfc00615 	stw	ra,24(sp)
 2014cbc:	df000515 	stw	fp,20(sp)
 2014cc0:	df000504 	addi	fp,sp,20
 2014cc4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 2014cc8:	00800144 	movi	r2,5
 2014ccc:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 2014cd0:	d8000215 	stw	zero,8(sp)
 2014cd4:	e0bffe44 	addi	r2,fp,-7
 2014cd8:	d8800115 	stw	r2,4(sp)
 2014cdc:	00800044 	movi	r2,1
 2014ce0:	d8800015 	stw	r2,0(sp)
 2014ce4:	e1fffe04 	addi	r7,fp,-8
 2014ce8:	01800044 	movi	r6,1
 2014cec:	000b883a 	mov	r5,zero
 2014cf0:	e13fff17 	ldw	r4,-4(fp)
 2014cf4:	2015fcc0 	call	2015fcc <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 2014cf8:	e0bffe43 	ldbu	r2,-7(fp)
}
 2014cfc:	e037883a 	mov	sp,fp
 2014d00:	dfc00117 	ldw	ra,4(sp)
 2014d04:	df000017 	ldw	fp,0(sp)
 2014d08:	dec00204 	addi	sp,sp,8
 2014d0c:	f800283a 	ret

02014d10 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 2014d10:	defffd04 	addi	sp,sp,-12
 2014d14:	dfc00215 	stw	ra,8(sp)
 2014d18:	df000115 	stw	fp,4(sp)
 2014d1c:	df000104 	addi	fp,sp,4
 2014d20:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 2014d24:	e13fff17 	ldw	r4,-4(fp)
 2014d28:	2014cb40 	call	2014cb4 <epcs_read_status_register>
 2014d2c:	10803fcc 	andi	r2,r2,255
 2014d30:	1080004c 	andi	r2,r2,1
}
 2014d34:	e037883a 	mov	sp,fp
 2014d38:	dfc00117 	ldw	ra,4(sp)
 2014d3c:	df000017 	ldw	fp,0(sp)
 2014d40:	dec00204 	addi	sp,sp,8
 2014d44:	f800283a 	ret

02014d48 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 2014d48:	defffd04 	addi	sp,sp,-12
 2014d4c:	dfc00215 	stw	ra,8(sp)
 2014d50:	df000115 	stw	fp,4(sp)
 2014d54:	df000104 	addi	fp,sp,4
 2014d58:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 2014d5c:	0001883a 	nop
 2014d60:	e13fff17 	ldw	r4,-4(fp)
 2014d64:	2014d100 	call	2014d10 <epcs_test_wip>
 2014d68:	103ffd1e 	bne	r2,zero,2014d60 <__alt_mem_epcs_flash_controller_0+0xfd013d60>
  {
  }
}
 2014d6c:	0001883a 	nop
 2014d70:	e037883a 	mov	sp,fp
 2014d74:	dfc00117 	ldw	ra,4(sp)
 2014d78:	df000017 	ldw	fp,0(sp)
 2014d7c:	dec00204 	addi	sp,sp,8
 2014d80:	f800283a 	ret

02014d84 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 2014d84:	defff604 	addi	sp,sp,-40
 2014d88:	dfc00915 	stw	ra,36(sp)
 2014d8c:	df000815 	stw	fp,32(sp)
 2014d90:	df000804 	addi	fp,sp,32
 2014d94:	e13ffd15 	stw	r4,-12(fp)
 2014d98:	e17ffe15 	stw	r5,-8(fp)
 2014d9c:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 2014da0:	e0bfff17 	ldw	r2,-4(fp)
 2014da4:	10001226 	beq	r2,zero,2014df0 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 2014da8:	00bff604 	movi	r2,-40
 2014dac:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 2014db0:	e0bffe17 	ldw	r2,-8(fp)
 2014db4:	1004d63a 	srli	r2,r2,24
 2014db8:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 2014dbc:	e0bffe17 	ldw	r2,-8(fp)
 2014dc0:	1004d43a 	srli	r2,r2,16
 2014dc4:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 2014dc8:	e0bffe17 	ldw	r2,-8(fp)
 2014dcc:	1004d23a 	srli	r2,r2,8
 2014dd0:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 2014dd4:	e0bffe17 	ldw	r2,-8(fp)
 2014dd8:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 2014ddc:	00800144 	movi	r2,5
 2014de0:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 2014de4:	e13ffd17 	ldw	r4,-12(fp)
 2014de8:	20152380 	call	2015238 <epcs_enter_4_bytes_mode>
 2014dec:	00000c06 	br	2014e20 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 2014df0:	00bff604 	movi	r2,-40
 2014df4:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 2014df8:	e0bffe17 	ldw	r2,-8(fp)
 2014dfc:	1004d43a 	srli	r2,r2,16
 2014e00:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 2014e04:	e0bffe17 	ldw	r2,-8(fp)
 2014e08:	1004d23a 	srli	r2,r2,8
 2014e0c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 2014e10:	e0bffe17 	ldw	r2,-8(fp)
 2014e14:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 2014e18:	00800104 	movi	r2,4
 2014e1c:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 2014e20:	e13ffd17 	ldw	r4,-12(fp)
 2014e24:	2014f740 	call	2014f74 <epcs_write_enable>

  alt_avalon_spi_command(
 2014e28:	e0bffb03 	ldbu	r2,-20(fp)
 2014e2c:	e0fffb44 	addi	r3,fp,-19
 2014e30:	d8000215 	stw	zero,8(sp)
 2014e34:	d8000115 	stw	zero,4(sp)
 2014e38:	d8000015 	stw	zero,0(sp)
 2014e3c:	180f883a 	mov	r7,r3
 2014e40:	100d883a 	mov	r6,r2
 2014e44:	000b883a 	mov	r5,zero
 2014e48:	e13ffd17 	ldw	r4,-12(fp)
 2014e4c:	2015fcc0 	call	2015fcc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2014e50:	e13ffd17 	ldw	r4,-12(fp)
 2014e54:	2014d480 	call	2014d48 <epcs_await_wip_released>

  if(four_bytes_mode)
 2014e58:	e0bfff17 	ldw	r2,-4(fp)
 2014e5c:	10000226 	beq	r2,zero,2014e68 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 2014e60:	e13ffd17 	ldw	r4,-12(fp)
 2014e64:	20152940 	call	2015294 <epcs_exit_4_bytes_mode>
  }
}
 2014e68:	0001883a 	nop
 2014e6c:	e037883a 	mov	sp,fp
 2014e70:	dfc00117 	ldw	ra,4(sp)
 2014e74:	df000017 	ldw	fp,0(sp)
 2014e78:	dec00204 	addi	sp,sp,8
 2014e7c:	f800283a 	ret

02014e80 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 2014e80:	defff404 	addi	sp,sp,-48
 2014e84:	dfc00b15 	stw	ra,44(sp)
 2014e88:	df000a15 	stw	fp,40(sp)
 2014e8c:	df000a04 	addi	fp,sp,40
 2014e90:	e13ffc15 	stw	r4,-16(fp)
 2014e94:	e17ffd15 	stw	r5,-12(fp)
 2014e98:	e1bffe15 	stw	r6,-8(fp)
 2014e9c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 2014ea0:	008000c4 	movi	r2,3
 2014ea4:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2014ea8:	e0800217 	ldw	r2,8(fp)
 2014eac:	10001026 	beq	r2,zero,2014ef0 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 2014eb0:	e0bffd17 	ldw	r2,-12(fp)
 2014eb4:	1004d63a 	srli	r2,r2,24
 2014eb8:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 2014ebc:	e0bffd17 	ldw	r2,-12(fp)
 2014ec0:	1005d43a 	srai	r2,r2,16
 2014ec4:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 2014ec8:	e0bffd17 	ldw	r2,-12(fp)
 2014ecc:	1005d23a 	srai	r2,r2,8
 2014ed0:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 2014ed4:	e0bffd17 	ldw	r2,-12(fp)
 2014ed8:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 2014edc:	00800144 	movi	r2,5
 2014ee0:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 2014ee4:	e13ffc17 	ldw	r4,-16(fp)
 2014ee8:	20152380 	call	2015238 <epcs_enter_4_bytes_mode>
 2014eec:	00000a06 	br	2014f18 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 2014ef0:	e0bffd17 	ldw	r2,-12(fp)
 2014ef4:	1005d43a 	srai	r2,r2,16
 2014ef8:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 2014efc:	e0bffd17 	ldw	r2,-12(fp)
 2014f00:	1005d23a 	srai	r2,r2,8
 2014f04:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 2014f08:	e0bffd17 	ldw	r2,-12(fp)
 2014f0c:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 2014f10:	00800104 	movi	r2,4
 2014f14:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 2014f18:	e13ffc17 	ldw	r4,-16(fp)
 2014f1c:	2014d480 	call	2014d48 <epcs_await_wip_released>

  alt_avalon_spi_command(
 2014f20:	e0bfff17 	ldw	r2,-4(fp)
 2014f24:	e13ffa04 	addi	r4,fp,-24
 2014f28:	d8000215 	stw	zero,8(sp)
 2014f2c:	e0fffe17 	ldw	r3,-8(fp)
 2014f30:	d8c00115 	stw	r3,4(sp)
 2014f34:	d8800015 	stw	r2,0(sp)
 2014f38:	200f883a 	mov	r7,r4
 2014f3c:	e1bff917 	ldw	r6,-28(fp)
 2014f40:	000b883a 	mov	r5,zero
 2014f44:	e13ffc17 	ldw	r4,-16(fp)
 2014f48:	2015fcc0 	call	2015fcc <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 2014f4c:	e0800217 	ldw	r2,8(fp)
 2014f50:	10000226 	beq	r2,zero,2014f5c <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 2014f54:	e13ffc17 	ldw	r4,-16(fp)
 2014f58:	20152940 	call	2015294 <epcs_exit_4_bytes_mode>
  }

  return length;
 2014f5c:	e0bfff17 	ldw	r2,-4(fp)
}
 2014f60:	e037883a 	mov	sp,fp
 2014f64:	dfc00117 	ldw	ra,4(sp)
 2014f68:	df000017 	ldw	fp,0(sp)
 2014f6c:	dec00204 	addi	sp,sp,8
 2014f70:	f800283a 	ret

02014f74 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 2014f74:	defff904 	addi	sp,sp,-28
 2014f78:	dfc00615 	stw	ra,24(sp)
 2014f7c:	df000515 	stw	fp,20(sp)
 2014f80:	df000504 	addi	fp,sp,20
 2014f84:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 2014f88:	00800184 	movi	r2,6
 2014f8c:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 2014f90:	d8000215 	stw	zero,8(sp)
 2014f94:	d8000115 	stw	zero,4(sp)
 2014f98:	d8000015 	stw	zero,0(sp)
 2014f9c:	e1fffe04 	addi	r7,fp,-8
 2014fa0:	01800044 	movi	r6,1
 2014fa4:	000b883a 	mov	r5,zero
 2014fa8:	e13fff17 	ldw	r4,-4(fp)
 2014fac:	2015fcc0 	call	2015fcc <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 2014fb0:	0001883a 	nop
 2014fb4:	e037883a 	mov	sp,fp
 2014fb8:	dfc00117 	ldw	ra,4(sp)
 2014fbc:	df000017 	ldw	fp,0(sp)
 2014fc0:	dec00204 	addi	sp,sp,8
 2014fc4:	f800283a 	ret

02014fc8 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 2014fc8:	defff804 	addi	sp,sp,-32
 2014fcc:	dfc00715 	stw	ra,28(sp)
 2014fd0:	df000615 	stw	fp,24(sp)
 2014fd4:	df000604 	addi	fp,sp,24
 2014fd8:	e13ffe15 	stw	r4,-8(fp)
 2014fdc:	2805883a 	mov	r2,r5
 2014fe0:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 2014fe4:	00800044 	movi	r2,1
 2014fe8:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 2014fec:	e0bfff03 	ldbu	r2,-4(fp)
 2014ff0:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 2014ff4:	d8000215 	stw	zero,8(sp)
 2014ff8:	d8000115 	stw	zero,4(sp)
 2014ffc:	d8000015 	stw	zero,0(sp)
 2015000:	e1fffd04 	addi	r7,fp,-12
 2015004:	01800084 	movi	r6,2
 2015008:	000b883a 	mov	r5,zero
 201500c:	e13ffe17 	ldw	r4,-8(fp)
 2015010:	2015fcc0 	call	2015fcc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2015014:	e13ffe17 	ldw	r4,-8(fp)
 2015018:	2014d480 	call	2014d48 <epcs_await_wip_released>
}
 201501c:	0001883a 	nop
 2015020:	e037883a 	mov	sp,fp
 2015024:	dfc00117 	ldw	ra,4(sp)
 2015028:	df000017 	ldw	fp,0(sp)
 201502c:	dec00204 	addi	sp,sp,8
 2015030:	f800283a 	ret

02015034 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 2015034:	defff404 	addi	sp,sp,-48
 2015038:	dfc00b15 	stw	ra,44(sp)
 201503c:	df000a15 	stw	fp,40(sp)
 2015040:	df000a04 	addi	fp,sp,40
 2015044:	e13ffc15 	stw	r4,-16(fp)
 2015048:	e17ffd15 	stw	r5,-12(fp)
 201504c:	e1bffe15 	stw	r6,-8(fp)
 2015050:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 2015054:	00800084 	movi	r2,2
 2015058:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 201505c:	e0800217 	ldw	r2,8(fp)
 2015060:	10001026 	beq	r2,zero,20150a4 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 2015064:	e0bffd17 	ldw	r2,-12(fp)
 2015068:	1004d63a 	srli	r2,r2,24
 201506c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 2015070:	e0bffd17 	ldw	r2,-12(fp)
 2015074:	1005d43a 	srai	r2,r2,16
 2015078:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 201507c:	e0bffd17 	ldw	r2,-12(fp)
 2015080:	1005d23a 	srai	r2,r2,8
 2015084:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 2015088:	e0bffd17 	ldw	r2,-12(fp)
 201508c:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 2015090:	00800144 	movi	r2,5
 2015094:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 2015098:	e13ffc17 	ldw	r4,-16(fp)
 201509c:	20152380 	call	2015238 <epcs_enter_4_bytes_mode>
 20150a0:	00000a06 	br	20150cc <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 20150a4:	e0bffd17 	ldw	r2,-12(fp)
 20150a8:	1005d43a 	srai	r2,r2,16
 20150ac:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 20150b0:	e0bffd17 	ldw	r2,-12(fp)
 20150b4:	1005d23a 	srai	r2,r2,8
 20150b8:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 20150bc:	e0bffd17 	ldw	r2,-12(fp)
 20150c0:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 20150c4:	00800104 	movi	r2,4
 20150c8:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 20150cc:	e13ffc17 	ldw	r4,-16(fp)
 20150d0:	2014f740 	call	2014f74 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 20150d4:	e0fffa04 	addi	r3,fp,-24
 20150d8:	00800044 	movi	r2,1
 20150dc:	d8800215 	stw	r2,8(sp)
 20150e0:	d8000115 	stw	zero,4(sp)
 20150e4:	d8000015 	stw	zero,0(sp)
 20150e8:	180f883a 	mov	r7,r3
 20150ec:	e1bff917 	ldw	r6,-28(fp)
 20150f0:	000b883a 	mov	r5,zero
 20150f4:	e13ffc17 	ldw	r4,-16(fp)
 20150f8:	2015fcc0 	call	2015fcc <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 20150fc:	e0bfff17 	ldw	r2,-4(fp)
 2015100:	d8000215 	stw	zero,8(sp)
 2015104:	d8000115 	stw	zero,4(sp)
 2015108:	d8000015 	stw	zero,0(sp)
 201510c:	e1fffe17 	ldw	r7,-8(fp)
 2015110:	100d883a 	mov	r6,r2
 2015114:	000b883a 	mov	r5,zero
 2015118:	e13ffc17 	ldw	r4,-16(fp)
 201511c:	2015fcc0 	call	2015fcc <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 2015120:	e13ffc17 	ldw	r4,-16(fp)
 2015124:	2014d480 	call	2014d48 <epcs_await_wip_released>

  if(four_bytes_mode)
 2015128:	e0800217 	ldw	r2,8(fp)
 201512c:	10000226 	beq	r2,zero,2015138 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 2015130:	e13ffc17 	ldw	r4,-16(fp)
 2015134:	20152940 	call	2015294 <epcs_exit_4_bytes_mode>
  }

  return length;
 2015138:	e0bfff17 	ldw	r2,-4(fp)
}
 201513c:	e037883a 	mov	sp,fp
 2015140:	dfc00117 	ldw	ra,4(sp)
 2015144:	df000017 	ldw	fp,0(sp)
 2015148:	dec00204 	addi	sp,sp,8
 201514c:	f800283a 	ret

02015150 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 2015150:	defff804 	addi	sp,sp,-32
 2015154:	dfc00715 	stw	ra,28(sp)
 2015158:	df000615 	stw	fp,24(sp)
 201515c:	df000604 	addi	fp,sp,24
 2015160:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 2015164:	00bfeac4 	movi	r2,-85
 2015168:	e0bffd05 	stb	r2,-12(fp)
 201516c:	e03ffd45 	stb	zero,-11(fp)
 2015170:	e03ffd85 	stb	zero,-10(fp)
 2015174:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 2015178:	d8000215 	stw	zero,8(sp)
 201517c:	e0bffe04 	addi	r2,fp,-8
 2015180:	d8800115 	stw	r2,4(sp)
 2015184:	00800044 	movi	r2,1
 2015188:	d8800015 	stw	r2,0(sp)
 201518c:	e1fffd04 	addi	r7,fp,-12
 2015190:	01800104 	movi	r6,4
 2015194:	000b883a 	mov	r5,zero
 2015198:	e13fff17 	ldw	r4,-4(fp)
 201519c:	2015fcc0 	call	2015fcc <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 20151a0:	e0bffe03 	ldbu	r2,-8(fp)
}
 20151a4:	e037883a 	mov	sp,fp
 20151a8:	dfc00117 	ldw	ra,4(sp)
 20151ac:	df000017 	ldw	fp,0(sp)
 20151b0:	dec00204 	addi	sp,sp,8
 20151b4:	f800283a 	ret

020151b8 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 20151b8:	defff904 	addi	sp,sp,-28
 20151bc:	dfc00615 	stw	ra,24(sp)
 20151c0:	df000515 	stw	fp,20(sp)
 20151c4:	df000504 	addi	fp,sp,20
 20151c8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 20151cc:	00bfe7c4 	movi	r2,-97
 20151d0:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 20151d4:	d8000215 	stw	zero,8(sp)
 20151d8:	e0bffe44 	addi	r2,fp,-7
 20151dc:	d8800115 	stw	r2,4(sp)
 20151e0:	008000c4 	movi	r2,3
 20151e4:	d8800015 	stw	r2,0(sp)
 20151e8:	e1fffe04 	addi	r7,fp,-8
 20151ec:	01800044 	movi	r6,1
 20151f0:	000b883a 	mov	r5,zero
 20151f4:	e13fff17 	ldw	r4,-4(fp)
 20151f8:	2015fcc0 	call	2015fcc <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 20151fc:	e0bffe43 	ldbu	r2,-7(fp)
 2015200:	10803fcc 	andi	r2,r2,255
 2015204:	1006943a 	slli	r3,r2,16
 2015208:	e0bffe83 	ldbu	r2,-6(fp)
 201520c:	10803fcc 	andi	r2,r2,255
 2015210:	1004923a 	slli	r2,r2,8
 2015214:	1886b03a 	or	r3,r3,r2
 2015218:	e0bffec3 	ldbu	r2,-5(fp)
 201521c:	10803fcc 	andi	r2,r2,255
 2015220:	1884b03a 	or	r2,r3,r2
}
 2015224:	e037883a 	mov	sp,fp
 2015228:	dfc00117 	ldw	ra,4(sp)
 201522c:	df000017 	ldw	fp,0(sp)
 2015230:	dec00204 	addi	sp,sp,8
 2015234:	f800283a 	ret

02015238 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 2015238:	defff904 	addi	sp,sp,-28
 201523c:	dfc00615 	stw	ra,24(sp)
 2015240:	df000515 	stw	fp,20(sp)
 2015244:	df000504 	addi	fp,sp,20
 2015248:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 201524c:	00bfedc4 	movi	r2,-73
 2015250:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2015254:	e13fff17 	ldw	r4,-4(fp)
 2015258:	2014f740 	call	2014f74 <epcs_write_enable>

  alt_avalon_spi_command(
 201525c:	d8000215 	stw	zero,8(sp)
 2015260:	d8000115 	stw	zero,4(sp)
 2015264:	d8000015 	stw	zero,0(sp)
 2015268:	e1fffe04 	addi	r7,fp,-8
 201526c:	01800044 	movi	r6,1
 2015270:	000b883a 	mov	r5,zero
 2015274:	e13fff17 	ldw	r4,-4(fp)
 2015278:	2015fcc0 	call	2015fcc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 201527c:	0001883a 	nop
}
 2015280:	e037883a 	mov	sp,fp
 2015284:	dfc00117 	ldw	ra,4(sp)
 2015288:	df000017 	ldw	fp,0(sp)
 201528c:	dec00204 	addi	sp,sp,8
 2015290:	f800283a 	ret

02015294 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 2015294:	defff904 	addi	sp,sp,-28
 2015298:	dfc00615 	stw	ra,24(sp)
 201529c:	df000515 	stw	fp,20(sp)
 20152a0:	df000504 	addi	fp,sp,20
 20152a4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 20152a8:	00bffa44 	movi	r2,-23
 20152ac:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 20152b0:	e13fff17 	ldw	r4,-4(fp)
 20152b4:	2014f740 	call	2014f74 <epcs_write_enable>

  alt_avalon_spi_command(
 20152b8:	d8000215 	stw	zero,8(sp)
 20152bc:	d8000115 	stw	zero,4(sp)
 20152c0:	d8000015 	stw	zero,0(sp)
 20152c4:	e1fffe04 	addi	r7,fp,-8
 20152c8:	01800044 	movi	r6,1
 20152cc:	000b883a 	mov	r5,zero
 20152d0:	e13fff17 	ldw	r4,-4(fp)
 20152d4:	2015fcc0 	call	2015fcc <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 20152d8:	0001883a 	nop
}
 20152dc:	e037883a 	mov	sp,fp
 20152e0:	dfc00117 	ldw	ra,4(sp)
 20152e4:	df000017 	ldw	fp,0(sp)
 20152e8:	dec00204 	addi	sp,sp,8
 20152ec:	f800283a 	ret

020152f0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 20152f0:	defff504 	addi	sp,sp,-44
 20152f4:	df000a15 	stw	fp,40(sp)
 20152f8:	df000a04 	addi	fp,sp,40
 20152fc:	e13ffc15 	stw	r4,-16(fp)
 2015300:	e17ffd15 	stw	r5,-12(fp)
 2015304:	e1bffe15 	stw	r6,-8(fp)
 2015308:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 201530c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2015310:	d0a01e17 	ldw	r2,-32648(gp)
  
  if (alt_ticks_per_second ())
 2015314:	10003c26 	beq	r2,zero,2015408 <alt_alarm_start+0x118>
  {
    if (alarm)
 2015318:	e0bffc17 	ldw	r2,-16(fp)
 201531c:	10003826 	beq	r2,zero,2015400 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 2015320:	e0bffc17 	ldw	r2,-16(fp)
 2015324:	e0fffe17 	ldw	r3,-8(fp)
 2015328:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 201532c:	e0bffc17 	ldw	r2,-16(fp)
 2015330:	e0ffff17 	ldw	r3,-4(fp)
 2015334:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015338:	0005303a 	rdctl	r2,status
 201533c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015340:	e0fff917 	ldw	r3,-28(fp)
 2015344:	00bfff84 	movi	r2,-2
 2015348:	1884703a 	and	r2,r3,r2
 201534c:	1001703a 	wrctl	status,r2
  
  return context;
 2015350:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 2015354:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2015358:	d0a01f17 	ldw	r2,-32644(gp)
      
      current_nticks = alt_nticks();
 201535c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2015360:	e0fffd17 	ldw	r3,-12(fp)
 2015364:	e0bff617 	ldw	r2,-40(fp)
 2015368:	1885883a 	add	r2,r3,r2
 201536c:	10c00044 	addi	r3,r2,1
 2015370:	e0bffc17 	ldw	r2,-16(fp)
 2015374:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2015378:	e0bffc17 	ldw	r2,-16(fp)
 201537c:	10c00217 	ldw	r3,8(r2)
 2015380:	e0bff617 	ldw	r2,-40(fp)
 2015384:	1880042e 	bgeu	r3,r2,2015398 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 2015388:	e0bffc17 	ldw	r2,-16(fp)
 201538c:	00c00044 	movi	r3,1
 2015390:	10c00405 	stb	r3,16(r2)
 2015394:	00000206 	br	20153a0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 2015398:	e0bffc17 	ldw	r2,-16(fp)
 201539c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 20153a0:	e0bffc17 	ldw	r2,-16(fp)
 20153a4:	d0e01104 	addi	r3,gp,-32700
 20153a8:	e0fffa15 	stw	r3,-24(fp)
 20153ac:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20153b0:	e0bffb17 	ldw	r2,-20(fp)
 20153b4:	e0fffa17 	ldw	r3,-24(fp)
 20153b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 20153bc:	e0bffa17 	ldw	r2,-24(fp)
 20153c0:	10c00017 	ldw	r3,0(r2)
 20153c4:	e0bffb17 	ldw	r2,-20(fp)
 20153c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20153cc:	e0bffa17 	ldw	r2,-24(fp)
 20153d0:	10800017 	ldw	r2,0(r2)
 20153d4:	e0fffb17 	ldw	r3,-20(fp)
 20153d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20153dc:	e0bffa17 	ldw	r2,-24(fp)
 20153e0:	e0fffb17 	ldw	r3,-20(fp)
 20153e4:	10c00015 	stw	r3,0(r2)
 20153e8:	e0bff817 	ldw	r2,-32(fp)
 20153ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20153f0:	e0bff717 	ldw	r2,-36(fp)
 20153f4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 20153f8:	0005883a 	mov	r2,zero
 20153fc:	00000306 	br	201540c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 2015400:	00bffa84 	movi	r2,-22
 2015404:	00000106 	br	201540c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 2015408:	00bfde84 	movi	r2,-134
  }
}
 201540c:	e037883a 	mov	sp,fp
 2015410:	df000017 	ldw	fp,0(sp)
 2015414:	dec00104 	addi	sp,sp,4
 2015418:	f800283a 	ret

0201541c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 201541c:	defffa04 	addi	sp,sp,-24
 2015420:	dfc00515 	stw	ra,20(sp)
 2015424:	df000415 	stw	fp,16(sp)
 2015428:	df000404 	addi	fp,sp,16
 201542c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 2015430:	008000c4 	movi	r2,3
 2015434:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 2015438:	e0fffd17 	ldw	r3,-12(fp)
 201543c:	008003f4 	movhi	r2,15
 2015440:	10909004 	addi	r2,r2,16960
 2015444:	1885383a 	mul	r2,r3,r2
 2015448:	100b883a 	mov	r5,r2
 201544c:	01017db4 	movhi	r4,1526
 2015450:	21384004 	addi	r4,r4,-7936
 2015454:	20050d00 	call	20050d0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2015458:	100b883a 	mov	r5,r2
 201545c:	01200034 	movhi	r4,32768
 2015460:	213fffc4 	addi	r4,r4,-1
 2015464:	20050d00 	call	20050d0 <__udivsi3>
 2015468:	100b883a 	mov	r5,r2
 201546c:	e13fff17 	ldw	r4,-4(fp)
 2015470:	20050d00 	call	20050d0 <__udivsi3>
 2015474:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 2015478:	e0bffe17 	ldw	r2,-8(fp)
 201547c:	10002a26 	beq	r2,zero,2015528 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 2015480:	e03ffc15 	stw	zero,-16(fp)
 2015484:	00001706 	br	20154e4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2015488:	00a00034 	movhi	r2,32768
 201548c:	10bfffc4 	addi	r2,r2,-1
 2015490:	10bfffc4 	addi	r2,r2,-1
 2015494:	103ffe1e 	bne	r2,zero,2015490 <__alt_mem_epcs_flash_controller_0+0xfd014490>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 2015498:	e0fffd17 	ldw	r3,-12(fp)
 201549c:	008003f4 	movhi	r2,15
 20154a0:	10909004 	addi	r2,r2,16960
 20154a4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 20154a8:	100b883a 	mov	r5,r2
 20154ac:	01017db4 	movhi	r4,1526
 20154b0:	21384004 	addi	r4,r4,-7936
 20154b4:	20050d00 	call	20050d0 <__udivsi3>
 20154b8:	100b883a 	mov	r5,r2
 20154bc:	01200034 	movhi	r4,32768
 20154c0:	213fffc4 	addi	r4,r4,-1
 20154c4:	20050d00 	call	20050d0 <__udivsi3>
 20154c8:	1007883a 	mov	r3,r2
 20154cc:	e0bfff17 	ldw	r2,-4(fp)
 20154d0:	10c5c83a 	sub	r2,r2,r3
 20154d4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 20154d8:	e0bffc17 	ldw	r2,-16(fp)
 20154dc:	10800044 	addi	r2,r2,1
 20154e0:	e0bffc15 	stw	r2,-16(fp)
 20154e4:	e0fffc17 	ldw	r3,-16(fp)
 20154e8:	e0bffe17 	ldw	r2,-8(fp)
 20154ec:	18bfe616 	blt	r3,r2,2015488 <__alt_mem_epcs_flash_controller_0+0xfd014488>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 20154f0:	e0fffd17 	ldw	r3,-12(fp)
 20154f4:	008003f4 	movhi	r2,15
 20154f8:	10909004 	addi	r2,r2,16960
 20154fc:	1885383a 	mul	r2,r3,r2
 2015500:	100b883a 	mov	r5,r2
 2015504:	01017db4 	movhi	r4,1526
 2015508:	21384004 	addi	r4,r4,-7936
 201550c:	20050d00 	call	20050d0 <__udivsi3>
 2015510:	1007883a 	mov	r3,r2
 2015514:	e0bfff17 	ldw	r2,-4(fp)
 2015518:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 201551c:	10bfffc4 	addi	r2,r2,-1
 2015520:	103ffe1e 	bne	r2,zero,201551c <__alt_mem_epcs_flash_controller_0+0xfd01451c>
 2015524:	00000d06 	br	201555c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 2015528:	e0fffd17 	ldw	r3,-12(fp)
 201552c:	008003f4 	movhi	r2,15
 2015530:	10909004 	addi	r2,r2,16960
 2015534:	1885383a 	mul	r2,r3,r2
 2015538:	100b883a 	mov	r5,r2
 201553c:	01017db4 	movhi	r4,1526
 2015540:	21384004 	addi	r4,r4,-7936
 2015544:	20050d00 	call	20050d0 <__udivsi3>
 2015548:	1007883a 	mov	r3,r2
 201554c:	e0bfff17 	ldw	r2,-4(fp)
 2015550:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2015554:	10bfffc4 	addi	r2,r2,-1
 2015558:	00bffe16 	blt	zero,r2,2015554 <__alt_mem_epcs_flash_controller_0+0xfd014554>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 201555c:	0005883a 	mov	r2,zero
}
 2015560:	e037883a 	mov	sp,fp
 2015564:	dfc00117 	ldw	ra,4(sp)
 2015568:	df000017 	ldw	fp,0(sp)
 201556c:	dec00204 	addi	sp,sp,8
 2015570:	f800283a 	ret

02015574 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2015574:	defffe04 	addi	sp,sp,-8
 2015578:	dfc00115 	stw	ra,4(sp)
 201557c:	df000015 	stw	fp,0(sp)
 2015580:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2015584:	d0a00c17 	ldw	r2,-32720(gp)
 2015588:	10000326 	beq	r2,zero,2015598 <alt_get_errno+0x24>
 201558c:	d0a00c17 	ldw	r2,-32720(gp)
 2015590:	103ee83a 	callr	r2
 2015594:	00000106 	br	201559c <alt_get_errno+0x28>
 2015598:	d0a01604 	addi	r2,gp,-32680
}
 201559c:	e037883a 	mov	sp,fp
 20155a0:	dfc00117 	ldw	ra,4(sp)
 20155a4:	df000017 	ldw	fp,0(sp)
 20155a8:	dec00204 	addi	sp,sp,8
 20155ac:	f800283a 	ret

020155b0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 20155b0:	defffa04 	addi	sp,sp,-24
 20155b4:	dfc00515 	stw	ra,20(sp)
 20155b8:	df000415 	stw	fp,16(sp)
 20155bc:	df000404 	addi	fp,sp,16
 20155c0:	e13ffe15 	stw	r4,-8(fp)
 20155c4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 20155c8:	e0bffe17 	ldw	r2,-8(fp)
 20155cc:	10000326 	beq	r2,zero,20155dc <alt_dev_llist_insert+0x2c>
 20155d0:	e0bffe17 	ldw	r2,-8(fp)
 20155d4:	10800217 	ldw	r2,8(r2)
 20155d8:	1000061e 	bne	r2,zero,20155f4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 20155dc:	20155740 	call	2015574 <alt_get_errno>
 20155e0:	1007883a 	mov	r3,r2
 20155e4:	00800584 	movi	r2,22
 20155e8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 20155ec:	00bffa84 	movi	r2,-22
 20155f0:	00001306 	br	2015640 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 20155f4:	e0bffe17 	ldw	r2,-8(fp)
 20155f8:	e0ffff17 	ldw	r3,-4(fp)
 20155fc:	e0fffc15 	stw	r3,-16(fp)
 2015600:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2015604:	e0bffd17 	ldw	r2,-12(fp)
 2015608:	e0fffc17 	ldw	r3,-16(fp)
 201560c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2015610:	e0bffc17 	ldw	r2,-16(fp)
 2015614:	10c00017 	ldw	r3,0(r2)
 2015618:	e0bffd17 	ldw	r2,-12(fp)
 201561c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2015620:	e0bffc17 	ldw	r2,-16(fp)
 2015624:	10800017 	ldw	r2,0(r2)
 2015628:	e0fffd17 	ldw	r3,-12(fp)
 201562c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2015630:	e0bffc17 	ldw	r2,-16(fp)
 2015634:	e0fffd17 	ldw	r3,-12(fp)
 2015638:	10c00015 	stw	r3,0(r2)

  return 0;  
 201563c:	0005883a 	mov	r2,zero
}
 2015640:	e037883a 	mov	sp,fp
 2015644:	dfc00117 	ldw	ra,4(sp)
 2015648:	df000017 	ldw	fp,0(sp)
 201564c:	dec00204 	addi	sp,sp,8
 2015650:	f800283a 	ret

02015654 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2015654:	defffd04 	addi	sp,sp,-12
 2015658:	dfc00215 	stw	ra,8(sp)
 201565c:	df000115 	stw	fp,4(sp)
 2015660:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2015664:	00808074 	movhi	r2,513
 2015668:	109a0c04 	addi	r2,r2,26672
 201566c:	e0bfff15 	stw	r2,-4(fp)
 2015670:	00000606 	br	201568c <_do_ctors+0x38>
        (*ctor) (); 
 2015674:	e0bfff17 	ldw	r2,-4(fp)
 2015678:	10800017 	ldw	r2,0(r2)
 201567c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2015680:	e0bfff17 	ldw	r2,-4(fp)
 2015684:	10bfff04 	addi	r2,r2,-4
 2015688:	e0bfff15 	stw	r2,-4(fp)
 201568c:	e0ffff17 	ldw	r3,-4(fp)
 2015690:	00808074 	movhi	r2,513
 2015694:	109a0d04 	addi	r2,r2,26676
 2015698:	18bff62e 	bgeu	r3,r2,2015674 <__alt_mem_epcs_flash_controller_0+0xfd014674>
        (*ctor) (); 
}
 201569c:	0001883a 	nop
 20156a0:	e037883a 	mov	sp,fp
 20156a4:	dfc00117 	ldw	ra,4(sp)
 20156a8:	df000017 	ldw	fp,0(sp)
 20156ac:	dec00204 	addi	sp,sp,8
 20156b0:	f800283a 	ret

020156b4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 20156b4:	defffd04 	addi	sp,sp,-12
 20156b8:	dfc00215 	stw	ra,8(sp)
 20156bc:	df000115 	stw	fp,4(sp)
 20156c0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20156c4:	00808074 	movhi	r2,513
 20156c8:	109a0c04 	addi	r2,r2,26672
 20156cc:	e0bfff15 	stw	r2,-4(fp)
 20156d0:	00000606 	br	20156ec <_do_dtors+0x38>
        (*dtor) (); 
 20156d4:	e0bfff17 	ldw	r2,-4(fp)
 20156d8:	10800017 	ldw	r2,0(r2)
 20156dc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20156e0:	e0bfff17 	ldw	r2,-4(fp)
 20156e4:	10bfff04 	addi	r2,r2,-4
 20156e8:	e0bfff15 	stw	r2,-4(fp)
 20156ec:	e0ffff17 	ldw	r3,-4(fp)
 20156f0:	00808074 	movhi	r2,513
 20156f4:	109a0d04 	addi	r2,r2,26676
 20156f8:	18bff62e 	bgeu	r3,r2,20156d4 <__alt_mem_epcs_flash_controller_0+0xfd0146d4>
        (*dtor) (); 
}
 20156fc:	0001883a 	nop
 2015700:	e037883a 	mov	sp,fp
 2015704:	dfc00117 	ldw	ra,4(sp)
 2015708:	df000017 	ldw	fp,0(sp)
 201570c:	dec00204 	addi	sp,sp,8
 2015710:	f800283a 	ret

02015714 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 2015714:	defffc04 	addi	sp,sp,-16
 2015718:	dfc00315 	stw	ra,12(sp)
 201571c:	df000215 	stw	fp,8(sp)
 2015720:	df000204 	addi	fp,sp,8
 2015724:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 2015728:	d1600e04 	addi	r5,gp,-32712
 201572c:	e13fff17 	ldw	r4,-4(fp)
 2015730:	20161c80 	call	20161c8 <alt_find_dev>
 2015734:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 2015738:	e0bffe17 	ldw	r2,-8(fp)
 201573c:	10000926 	beq	r2,zero,2015764 <alt_flash_open_dev+0x50>
 2015740:	e0bffe17 	ldw	r2,-8(fp)
 2015744:	10800317 	ldw	r2,12(r2)
 2015748:	10000626 	beq	r2,zero,2015764 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 201574c:	e0bffe17 	ldw	r2,-8(fp)
 2015750:	10800317 	ldw	r2,12(r2)
 2015754:	e17fff17 	ldw	r5,-4(fp)
 2015758:	e13ffe17 	ldw	r4,-8(fp)
 201575c:	103ee83a 	callr	r2
 2015760:	00000106 	br	2015768 <alt_flash_open_dev+0x54>
  }

  return dev;
 2015764:	e0bffe17 	ldw	r2,-8(fp)
}
 2015768:	e037883a 	mov	sp,fp
 201576c:	dfc00117 	ldw	ra,4(sp)
 2015770:	df000017 	ldw	fp,0(sp)
 2015774:	dec00204 	addi	sp,sp,8
 2015778:	f800283a 	ret

0201577c <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 201577c:	defffd04 	addi	sp,sp,-12
 2015780:	dfc00215 	stw	ra,8(sp)
 2015784:	df000115 	stw	fp,4(sp)
 2015788:	df000104 	addi	fp,sp,4
 201578c:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 2015790:	e0bfff17 	ldw	r2,-4(fp)
 2015794:	10000826 	beq	r2,zero,20157b8 <alt_flash_close_dev+0x3c>
 2015798:	e0bfff17 	ldw	r2,-4(fp)
 201579c:	10800417 	ldw	r2,16(r2)
 20157a0:	10000526 	beq	r2,zero,20157b8 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
 20157a4:	e0bfff17 	ldw	r2,-4(fp)
 20157a8:	10800417 	ldw	r2,16(r2)
 20157ac:	e13fff17 	ldw	r4,-4(fp)
 20157b0:	103ee83a 	callr	r2
  }
  return;
 20157b4:	0001883a 	nop
 20157b8:	0001883a 	nop
}
 20157bc:	e037883a 	mov	sp,fp
 20157c0:	dfc00117 	ldw	ra,4(sp)
 20157c4:	df000017 	ldw	fp,0(sp)
 20157c8:	dec00204 	addi	sp,sp,8
 20157cc:	f800283a 	ret

020157d0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20157d0:	defff904 	addi	sp,sp,-28
 20157d4:	dfc00615 	stw	ra,24(sp)
 20157d8:	df000515 	stw	fp,20(sp)
 20157dc:	df000504 	addi	fp,sp,20
 20157e0:	e13ffc15 	stw	r4,-16(fp)
 20157e4:	e17ffd15 	stw	r5,-12(fp)
 20157e8:	e1bffe15 	stw	r6,-8(fp)
 20157ec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 20157f0:	e0800217 	ldw	r2,8(fp)
 20157f4:	d8800015 	stw	r2,0(sp)
 20157f8:	e1ffff17 	ldw	r7,-4(fp)
 20157fc:	e1bffe17 	ldw	r6,-8(fp)
 2015800:	e17ffd17 	ldw	r5,-12(fp)
 2015804:	e13ffc17 	ldw	r4,-16(fp)
 2015808:	20159800 	call	2015980 <alt_iic_isr_register>
}  
 201580c:	e037883a 	mov	sp,fp
 2015810:	dfc00117 	ldw	ra,4(sp)
 2015814:	df000017 	ldw	fp,0(sp)
 2015818:	dec00204 	addi	sp,sp,8
 201581c:	f800283a 	ret

02015820 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2015820:	defff904 	addi	sp,sp,-28
 2015824:	df000615 	stw	fp,24(sp)
 2015828:	df000604 	addi	fp,sp,24
 201582c:	e13ffe15 	stw	r4,-8(fp)
 2015830:	e17fff15 	stw	r5,-4(fp)
 2015834:	e0bfff17 	ldw	r2,-4(fp)
 2015838:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201583c:	0005303a 	rdctl	r2,status
 2015840:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015844:	e0fffb17 	ldw	r3,-20(fp)
 2015848:	00bfff84 	movi	r2,-2
 201584c:	1884703a 	and	r2,r3,r2
 2015850:	1001703a 	wrctl	status,r2
  
  return context;
 2015854:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2015858:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 201585c:	00c00044 	movi	r3,1
 2015860:	e0bffa17 	ldw	r2,-24(fp)
 2015864:	1884983a 	sll	r2,r3,r2
 2015868:	1007883a 	mov	r3,r2
 201586c:	d0a01d17 	ldw	r2,-32652(gp)
 2015870:	1884b03a 	or	r2,r3,r2
 2015874:	d0a01d15 	stw	r2,-32652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2015878:	d0a01d17 	ldw	r2,-32652(gp)
 201587c:	100170fa 	wrctl	ienable,r2
 2015880:	e0bffc17 	ldw	r2,-16(fp)
 2015884:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015888:	e0bffd17 	ldw	r2,-12(fp)
 201588c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2015890:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 2015894:	0001883a 	nop
}
 2015898:	e037883a 	mov	sp,fp
 201589c:	df000017 	ldw	fp,0(sp)
 20158a0:	dec00104 	addi	sp,sp,4
 20158a4:	f800283a 	ret

020158a8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 20158a8:	defff904 	addi	sp,sp,-28
 20158ac:	df000615 	stw	fp,24(sp)
 20158b0:	df000604 	addi	fp,sp,24
 20158b4:	e13ffe15 	stw	r4,-8(fp)
 20158b8:	e17fff15 	stw	r5,-4(fp)
 20158bc:	e0bfff17 	ldw	r2,-4(fp)
 20158c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20158c4:	0005303a 	rdctl	r2,status
 20158c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20158cc:	e0fffb17 	ldw	r3,-20(fp)
 20158d0:	00bfff84 	movi	r2,-2
 20158d4:	1884703a 	and	r2,r3,r2
 20158d8:	1001703a 	wrctl	status,r2
  
  return context;
 20158dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20158e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 20158e4:	00c00044 	movi	r3,1
 20158e8:	e0bffa17 	ldw	r2,-24(fp)
 20158ec:	1884983a 	sll	r2,r3,r2
 20158f0:	0084303a 	nor	r2,zero,r2
 20158f4:	1007883a 	mov	r3,r2
 20158f8:	d0a01d17 	ldw	r2,-32652(gp)
 20158fc:	1884703a 	and	r2,r3,r2
 2015900:	d0a01d15 	stw	r2,-32652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2015904:	d0a01d17 	ldw	r2,-32652(gp)
 2015908:	100170fa 	wrctl	ienable,r2
 201590c:	e0bffc17 	ldw	r2,-16(fp)
 2015910:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015914:	e0bffd17 	ldw	r2,-12(fp)
 2015918:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201591c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 2015920:	0001883a 	nop
}
 2015924:	e037883a 	mov	sp,fp
 2015928:	df000017 	ldw	fp,0(sp)
 201592c:	dec00104 	addi	sp,sp,4
 2015930:	f800283a 	ret

02015934 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2015934:	defffc04 	addi	sp,sp,-16
 2015938:	df000315 	stw	fp,12(sp)
 201593c:	df000304 	addi	fp,sp,12
 2015940:	e13ffe15 	stw	r4,-8(fp)
 2015944:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2015948:	000530fa 	rdctl	r2,ienable
 201594c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2015950:	00c00044 	movi	r3,1
 2015954:	e0bfff17 	ldw	r2,-4(fp)
 2015958:	1884983a 	sll	r2,r3,r2
 201595c:	1007883a 	mov	r3,r2
 2015960:	e0bffd17 	ldw	r2,-12(fp)
 2015964:	1884703a 	and	r2,r3,r2
 2015968:	1004c03a 	cmpne	r2,r2,zero
 201596c:	10803fcc 	andi	r2,r2,255
}
 2015970:	e037883a 	mov	sp,fp
 2015974:	df000017 	ldw	fp,0(sp)
 2015978:	dec00104 	addi	sp,sp,4
 201597c:	f800283a 	ret

02015980 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2015980:	defff504 	addi	sp,sp,-44
 2015984:	dfc00a15 	stw	ra,40(sp)
 2015988:	df000915 	stw	fp,36(sp)
 201598c:	df000904 	addi	fp,sp,36
 2015990:	e13ffc15 	stw	r4,-16(fp)
 2015994:	e17ffd15 	stw	r5,-12(fp)
 2015998:	e1bffe15 	stw	r6,-8(fp)
 201599c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 20159a0:	00bffa84 	movi	r2,-22
 20159a4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 20159a8:	e0bffd17 	ldw	r2,-12(fp)
 20159ac:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 20159b0:	e0bff817 	ldw	r2,-32(fp)
 20159b4:	10800808 	cmpgei	r2,r2,32
 20159b8:	1000271e 	bne	r2,zero,2015a58 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20159bc:	0005303a 	rdctl	r2,status
 20159c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20159c4:	e0fffb17 	ldw	r3,-20(fp)
 20159c8:	00bfff84 	movi	r2,-2
 20159cc:	1884703a 	and	r2,r3,r2
 20159d0:	1001703a 	wrctl	status,r2
  
  return context;
 20159d4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 20159d8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 20159dc:	00808134 	movhi	r2,516
 20159e0:	10b87304 	addi	r2,r2,-7732
 20159e4:	e0fff817 	ldw	r3,-32(fp)
 20159e8:	180690fa 	slli	r3,r3,3
 20159ec:	10c5883a 	add	r2,r2,r3
 20159f0:	e0fffe17 	ldw	r3,-8(fp)
 20159f4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 20159f8:	00808134 	movhi	r2,516
 20159fc:	10b87304 	addi	r2,r2,-7732
 2015a00:	e0fff817 	ldw	r3,-32(fp)
 2015a04:	180690fa 	slli	r3,r3,3
 2015a08:	10c5883a 	add	r2,r2,r3
 2015a0c:	10800104 	addi	r2,r2,4
 2015a10:	e0ffff17 	ldw	r3,-4(fp)
 2015a14:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2015a18:	e0bffe17 	ldw	r2,-8(fp)
 2015a1c:	10000526 	beq	r2,zero,2015a34 <alt_iic_isr_register+0xb4>
 2015a20:	e0bff817 	ldw	r2,-32(fp)
 2015a24:	100b883a 	mov	r5,r2
 2015a28:	e13ffc17 	ldw	r4,-16(fp)
 2015a2c:	20158200 	call	2015820 <alt_ic_irq_enable>
 2015a30:	00000406 	br	2015a44 <alt_iic_isr_register+0xc4>
 2015a34:	e0bff817 	ldw	r2,-32(fp)
 2015a38:	100b883a 	mov	r5,r2
 2015a3c:	e13ffc17 	ldw	r4,-16(fp)
 2015a40:	20158a80 	call	20158a8 <alt_ic_irq_disable>
 2015a44:	e0bff715 	stw	r2,-36(fp)
 2015a48:	e0bffa17 	ldw	r2,-24(fp)
 2015a4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015a50:	e0bff917 	ldw	r2,-28(fp)
 2015a54:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2015a58:	e0bff717 	ldw	r2,-36(fp)
}
 2015a5c:	e037883a 	mov	sp,fp
 2015a60:	dfc00117 	ldw	ra,4(sp)
 2015a64:	df000017 	ldw	fp,0(sp)
 2015a68:	dec00204 	addi	sp,sp,8
 2015a6c:	f800283a 	ret

02015a70 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2015a70:	defff904 	addi	sp,sp,-28
 2015a74:	dfc00615 	stw	ra,24(sp)
 2015a78:	df000515 	stw	fp,20(sp)
 2015a7c:	df000504 	addi	fp,sp,20
 2015a80:	e13ffc15 	stw	r4,-16(fp)
 2015a84:	e17ffd15 	stw	r5,-12(fp)
 2015a88:	e1bffe15 	stw	r6,-8(fp)
 2015a8c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2015a90:	e1bfff17 	ldw	r6,-4(fp)
 2015a94:	e17ffe17 	ldw	r5,-8(fp)
 2015a98:	e13ffd17 	ldw	r4,-12(fp)
 2015a9c:	2015cb00 	call	2015cb0 <open>
 2015aa0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 2015aa4:	e0bffb17 	ldw	r2,-20(fp)
 2015aa8:	10001c16 	blt	r2,zero,2015b1c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 2015aac:	00808134 	movhi	r2,516
 2015ab0:	10b39d04 	addi	r2,r2,-12684
 2015ab4:	e0fffb17 	ldw	r3,-20(fp)
 2015ab8:	18c00324 	muli	r3,r3,12
 2015abc:	10c5883a 	add	r2,r2,r3
 2015ac0:	10c00017 	ldw	r3,0(r2)
 2015ac4:	e0bffc17 	ldw	r2,-16(fp)
 2015ac8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2015acc:	00808134 	movhi	r2,516
 2015ad0:	10b39d04 	addi	r2,r2,-12684
 2015ad4:	e0fffb17 	ldw	r3,-20(fp)
 2015ad8:	18c00324 	muli	r3,r3,12
 2015adc:	10c5883a 	add	r2,r2,r3
 2015ae0:	10800104 	addi	r2,r2,4
 2015ae4:	10c00017 	ldw	r3,0(r2)
 2015ae8:	e0bffc17 	ldw	r2,-16(fp)
 2015aec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2015af0:	00808134 	movhi	r2,516
 2015af4:	10b39d04 	addi	r2,r2,-12684
 2015af8:	e0fffb17 	ldw	r3,-20(fp)
 2015afc:	18c00324 	muli	r3,r3,12
 2015b00:	10c5883a 	add	r2,r2,r3
 2015b04:	10800204 	addi	r2,r2,8
 2015b08:	10c00017 	ldw	r3,0(r2)
 2015b0c:	e0bffc17 	ldw	r2,-16(fp)
 2015b10:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2015b14:	e13ffb17 	ldw	r4,-20(fp)
 2015b18:	20133080 	call	2013308 <alt_release_fd>
  }
} 
 2015b1c:	0001883a 	nop
 2015b20:	e037883a 	mov	sp,fp
 2015b24:	dfc00117 	ldw	ra,4(sp)
 2015b28:	df000017 	ldw	fp,0(sp)
 2015b2c:	dec00204 	addi	sp,sp,8
 2015b30:	f800283a 	ret

02015b34 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2015b34:	defffb04 	addi	sp,sp,-20
 2015b38:	dfc00415 	stw	ra,16(sp)
 2015b3c:	df000315 	stw	fp,12(sp)
 2015b40:	df000304 	addi	fp,sp,12
 2015b44:	e13ffd15 	stw	r4,-12(fp)
 2015b48:	e17ffe15 	stw	r5,-8(fp)
 2015b4c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2015b50:	01c07fc4 	movi	r7,511
 2015b54:	01800044 	movi	r6,1
 2015b58:	e17ffd17 	ldw	r5,-12(fp)
 2015b5c:	01008134 	movhi	r4,516
 2015b60:	2133a004 	addi	r4,r4,-12672
 2015b64:	2015a700 	call	2015a70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2015b68:	01c07fc4 	movi	r7,511
 2015b6c:	000d883a 	mov	r6,zero
 2015b70:	e17ffe17 	ldw	r5,-8(fp)
 2015b74:	01008134 	movhi	r4,516
 2015b78:	21339d04 	addi	r4,r4,-12684
 2015b7c:	2015a700 	call	2015a70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2015b80:	01c07fc4 	movi	r7,511
 2015b84:	01800044 	movi	r6,1
 2015b88:	e17fff17 	ldw	r5,-4(fp)
 2015b8c:	01008134 	movhi	r4,516
 2015b90:	2133a304 	addi	r4,r4,-12660
 2015b94:	2015a700 	call	2015a70 <alt_open_fd>
}  
 2015b98:	0001883a 	nop
 2015b9c:	e037883a 	mov	sp,fp
 2015ba0:	dfc00117 	ldw	ra,4(sp)
 2015ba4:	df000017 	ldw	fp,0(sp)
 2015ba8:	dec00204 	addi	sp,sp,8
 2015bac:	f800283a 	ret

02015bb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2015bb0:	defffe04 	addi	sp,sp,-8
 2015bb4:	dfc00115 	stw	ra,4(sp)
 2015bb8:	df000015 	stw	fp,0(sp)
 2015bbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2015bc0:	d0a00c17 	ldw	r2,-32720(gp)
 2015bc4:	10000326 	beq	r2,zero,2015bd4 <alt_get_errno+0x24>
 2015bc8:	d0a00c17 	ldw	r2,-32720(gp)
 2015bcc:	103ee83a 	callr	r2
 2015bd0:	00000106 	br	2015bd8 <alt_get_errno+0x28>
 2015bd4:	d0a01604 	addi	r2,gp,-32680
}
 2015bd8:	e037883a 	mov	sp,fp
 2015bdc:	dfc00117 	ldw	ra,4(sp)
 2015be0:	df000017 	ldw	fp,0(sp)
 2015be4:	dec00204 	addi	sp,sp,8
 2015be8:	f800283a 	ret

02015bec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2015bec:	defffd04 	addi	sp,sp,-12
 2015bf0:	df000215 	stw	fp,8(sp)
 2015bf4:	df000204 	addi	fp,sp,8
 2015bf8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2015bfc:	e0bfff17 	ldw	r2,-4(fp)
 2015c00:	10800217 	ldw	r2,8(r2)
 2015c04:	10d00034 	orhi	r3,r2,16384
 2015c08:	e0bfff17 	ldw	r2,-4(fp)
 2015c0c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2015c10:	e03ffe15 	stw	zero,-8(fp)
 2015c14:	00001d06 	br	2015c8c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2015c18:	00808134 	movhi	r2,516
 2015c1c:	10b39d04 	addi	r2,r2,-12684
 2015c20:	e0fffe17 	ldw	r3,-8(fp)
 2015c24:	18c00324 	muli	r3,r3,12
 2015c28:	10c5883a 	add	r2,r2,r3
 2015c2c:	10c00017 	ldw	r3,0(r2)
 2015c30:	e0bfff17 	ldw	r2,-4(fp)
 2015c34:	10800017 	ldw	r2,0(r2)
 2015c38:	1880111e 	bne	r3,r2,2015c80 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2015c3c:	00808134 	movhi	r2,516
 2015c40:	10b39d04 	addi	r2,r2,-12684
 2015c44:	e0fffe17 	ldw	r3,-8(fp)
 2015c48:	18c00324 	muli	r3,r3,12
 2015c4c:	10c5883a 	add	r2,r2,r3
 2015c50:	10800204 	addi	r2,r2,8
 2015c54:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2015c58:	1000090e 	bge	r2,zero,2015c80 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2015c5c:	e0bffe17 	ldw	r2,-8(fp)
 2015c60:	10c00324 	muli	r3,r2,12
 2015c64:	00808134 	movhi	r2,516
 2015c68:	10b39d04 	addi	r2,r2,-12684
 2015c6c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2015c70:	e0bfff17 	ldw	r2,-4(fp)
 2015c74:	18800226 	beq	r3,r2,2015c80 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2015c78:	00bffcc4 	movi	r2,-13
 2015c7c:	00000806 	br	2015ca0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2015c80:	e0bffe17 	ldw	r2,-8(fp)
 2015c84:	10800044 	addi	r2,r2,1
 2015c88:	e0bffe15 	stw	r2,-8(fp)
 2015c8c:	d0a00b17 	ldw	r2,-32724(gp)
 2015c90:	1007883a 	mov	r3,r2
 2015c94:	e0bffe17 	ldw	r2,-8(fp)
 2015c98:	18bfdf2e 	bgeu	r3,r2,2015c18 <__alt_mem_epcs_flash_controller_0+0xfd014c18>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2015c9c:	0005883a 	mov	r2,zero
}
 2015ca0:	e037883a 	mov	sp,fp
 2015ca4:	df000017 	ldw	fp,0(sp)
 2015ca8:	dec00104 	addi	sp,sp,4
 2015cac:	f800283a 	ret

02015cb0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2015cb0:	defff604 	addi	sp,sp,-40
 2015cb4:	dfc00915 	stw	ra,36(sp)
 2015cb8:	df000815 	stw	fp,32(sp)
 2015cbc:	df000804 	addi	fp,sp,32
 2015cc0:	e13ffd15 	stw	r4,-12(fp)
 2015cc4:	e17ffe15 	stw	r5,-8(fp)
 2015cc8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2015ccc:	00bfffc4 	movi	r2,-1
 2015cd0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2015cd4:	00bffb44 	movi	r2,-19
 2015cd8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2015cdc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2015ce0:	d1600904 	addi	r5,gp,-32732
 2015ce4:	e13ffd17 	ldw	r4,-12(fp)
 2015ce8:	20161c80 	call	20161c8 <alt_find_dev>
 2015cec:	e0bff815 	stw	r2,-32(fp)
 2015cf0:	e0bff817 	ldw	r2,-32(fp)
 2015cf4:	1000051e 	bne	r2,zero,2015d0c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2015cf8:	e13ffd17 	ldw	r4,-12(fp)
 2015cfc:	20162580 	call	2016258 <alt_find_file>
 2015d00:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2015d04:	00800044 	movi	r2,1
 2015d08:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2015d0c:	e0bff817 	ldw	r2,-32(fp)
 2015d10:	10002926 	beq	r2,zero,2015db8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2015d14:	e13ff817 	ldw	r4,-32(fp)
 2015d18:	20163600 	call	2016360 <alt_get_fd>
 2015d1c:	e0bff915 	stw	r2,-28(fp)
 2015d20:	e0bff917 	ldw	r2,-28(fp)
 2015d24:	1000030e 	bge	r2,zero,2015d34 <open+0x84>
    {
      status = index;
 2015d28:	e0bff917 	ldw	r2,-28(fp)
 2015d2c:	e0bffa15 	stw	r2,-24(fp)
 2015d30:	00002306 	br	2015dc0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 2015d34:	e0bff917 	ldw	r2,-28(fp)
 2015d38:	10c00324 	muli	r3,r2,12
 2015d3c:	00808134 	movhi	r2,516
 2015d40:	10b39d04 	addi	r2,r2,-12684
 2015d44:	1885883a 	add	r2,r3,r2
 2015d48:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2015d4c:	e0fffe17 	ldw	r3,-8(fp)
 2015d50:	00900034 	movhi	r2,16384
 2015d54:	10bfffc4 	addi	r2,r2,-1
 2015d58:	1886703a 	and	r3,r3,r2
 2015d5c:	e0bffc17 	ldw	r2,-16(fp)
 2015d60:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2015d64:	e0bffb17 	ldw	r2,-20(fp)
 2015d68:	1000051e 	bne	r2,zero,2015d80 <open+0xd0>
 2015d6c:	e13ffc17 	ldw	r4,-16(fp)
 2015d70:	2015bec0 	call	2015bec <alt_file_locked>
 2015d74:	e0bffa15 	stw	r2,-24(fp)
 2015d78:	e0bffa17 	ldw	r2,-24(fp)
 2015d7c:	10001016 	blt	r2,zero,2015dc0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2015d80:	e0bff817 	ldw	r2,-32(fp)
 2015d84:	10800317 	ldw	r2,12(r2)
 2015d88:	10000826 	beq	r2,zero,2015dac <open+0xfc>
 2015d8c:	e0bff817 	ldw	r2,-32(fp)
 2015d90:	10800317 	ldw	r2,12(r2)
 2015d94:	e1ffff17 	ldw	r7,-4(fp)
 2015d98:	e1bffe17 	ldw	r6,-8(fp)
 2015d9c:	e17ffd17 	ldw	r5,-12(fp)
 2015da0:	e13ffc17 	ldw	r4,-16(fp)
 2015da4:	103ee83a 	callr	r2
 2015da8:	00000106 	br	2015db0 <open+0x100>
 2015dac:	0005883a 	mov	r2,zero
 2015db0:	e0bffa15 	stw	r2,-24(fp)
 2015db4:	00000206 	br	2015dc0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2015db8:	00bffb44 	movi	r2,-19
 2015dbc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2015dc0:	e0bffa17 	ldw	r2,-24(fp)
 2015dc4:	1000090e 	bge	r2,zero,2015dec <open+0x13c>
  {
    alt_release_fd (index);  
 2015dc8:	e13ff917 	ldw	r4,-28(fp)
 2015dcc:	20133080 	call	2013308 <alt_release_fd>
    ALT_ERRNO = -status;
 2015dd0:	2015bb00 	call	2015bb0 <alt_get_errno>
 2015dd4:	1007883a 	mov	r3,r2
 2015dd8:	e0bffa17 	ldw	r2,-24(fp)
 2015ddc:	0085c83a 	sub	r2,zero,r2
 2015de0:	18800015 	stw	r2,0(r3)
    return -1;
 2015de4:	00bfffc4 	movi	r2,-1
 2015de8:	00000106 	br	2015df0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 2015dec:	e0bff917 	ldw	r2,-28(fp)
}
 2015df0:	e037883a 	mov	sp,fp
 2015df4:	dfc00117 	ldw	ra,4(sp)
 2015df8:	df000017 	ldw	fp,0(sp)
 2015dfc:	dec00204 	addi	sp,sp,8
 2015e00:	f800283a 	ret

02015e04 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2015e04:	defffa04 	addi	sp,sp,-24
 2015e08:	df000515 	stw	fp,20(sp)
 2015e0c:	df000504 	addi	fp,sp,20
 2015e10:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015e14:	0005303a 	rdctl	r2,status
 2015e18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015e1c:	e0fffc17 	ldw	r3,-16(fp)
 2015e20:	00bfff84 	movi	r2,-2
 2015e24:	1884703a 	and	r2,r3,r2
 2015e28:	1001703a 	wrctl	status,r2
  
  return context;
 2015e2c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2015e30:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 2015e34:	e0bfff17 	ldw	r2,-4(fp)
 2015e38:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2015e3c:	e0bffd17 	ldw	r2,-12(fp)
 2015e40:	10800017 	ldw	r2,0(r2)
 2015e44:	e0fffd17 	ldw	r3,-12(fp)
 2015e48:	18c00117 	ldw	r3,4(r3)
 2015e4c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2015e50:	e0bffd17 	ldw	r2,-12(fp)
 2015e54:	10800117 	ldw	r2,4(r2)
 2015e58:	e0fffd17 	ldw	r3,-12(fp)
 2015e5c:	18c00017 	ldw	r3,0(r3)
 2015e60:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2015e64:	e0bffd17 	ldw	r2,-12(fp)
 2015e68:	e0fffd17 	ldw	r3,-12(fp)
 2015e6c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2015e70:	e0bffd17 	ldw	r2,-12(fp)
 2015e74:	e0fffd17 	ldw	r3,-12(fp)
 2015e78:	10c00015 	stw	r3,0(r2)
 2015e7c:	e0bffb17 	ldw	r2,-20(fp)
 2015e80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015e84:	e0bffe17 	ldw	r2,-8(fp)
 2015e88:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2015e8c:	0001883a 	nop
 2015e90:	e037883a 	mov	sp,fp
 2015e94:	df000017 	ldw	fp,0(sp)
 2015e98:	dec00104 	addi	sp,sp,4
 2015e9c:	f800283a 	ret

02015ea0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2015ea0:	defffb04 	addi	sp,sp,-20
 2015ea4:	dfc00415 	stw	ra,16(sp)
 2015ea8:	df000315 	stw	fp,12(sp)
 2015eac:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2015eb0:	d0a01117 	ldw	r2,-32700(gp)
 2015eb4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2015eb8:	d0a01f17 	ldw	r2,-32644(gp)
 2015ebc:	10800044 	addi	r2,r2,1
 2015ec0:	d0a01f15 	stw	r2,-32644(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2015ec4:	00002e06 	br	2015f80 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2015ec8:	e0bffd17 	ldw	r2,-12(fp)
 2015ecc:	10800017 	ldw	r2,0(r2)
 2015ed0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2015ed4:	e0bffd17 	ldw	r2,-12(fp)
 2015ed8:	10800403 	ldbu	r2,16(r2)
 2015edc:	10803fcc 	andi	r2,r2,255
 2015ee0:	10000426 	beq	r2,zero,2015ef4 <alt_tick+0x54>
 2015ee4:	d0a01f17 	ldw	r2,-32644(gp)
 2015ee8:	1000021e 	bne	r2,zero,2015ef4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2015eec:	e0bffd17 	ldw	r2,-12(fp)
 2015ef0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2015ef4:	e0bffd17 	ldw	r2,-12(fp)
 2015ef8:	10800217 	ldw	r2,8(r2)
 2015efc:	d0e01f17 	ldw	r3,-32644(gp)
 2015f00:	18801d36 	bltu	r3,r2,2015f78 <alt_tick+0xd8>
 2015f04:	e0bffd17 	ldw	r2,-12(fp)
 2015f08:	10800403 	ldbu	r2,16(r2)
 2015f0c:	10803fcc 	andi	r2,r2,255
 2015f10:	1000191e 	bne	r2,zero,2015f78 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2015f14:	e0bffd17 	ldw	r2,-12(fp)
 2015f18:	10800317 	ldw	r2,12(r2)
 2015f1c:	e0fffd17 	ldw	r3,-12(fp)
 2015f20:	18c00517 	ldw	r3,20(r3)
 2015f24:	1809883a 	mov	r4,r3
 2015f28:	103ee83a 	callr	r2
 2015f2c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2015f30:	e0bfff17 	ldw	r2,-4(fp)
 2015f34:	1000031e 	bne	r2,zero,2015f44 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2015f38:	e13ffd17 	ldw	r4,-12(fp)
 2015f3c:	2015e040 	call	2015e04 <alt_alarm_stop>
 2015f40:	00000d06 	br	2015f78 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2015f44:	e0bffd17 	ldw	r2,-12(fp)
 2015f48:	10c00217 	ldw	r3,8(r2)
 2015f4c:	e0bfff17 	ldw	r2,-4(fp)
 2015f50:	1887883a 	add	r3,r3,r2
 2015f54:	e0bffd17 	ldw	r2,-12(fp)
 2015f58:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2015f5c:	e0bffd17 	ldw	r2,-12(fp)
 2015f60:	10c00217 	ldw	r3,8(r2)
 2015f64:	d0a01f17 	ldw	r2,-32644(gp)
 2015f68:	1880032e 	bgeu	r3,r2,2015f78 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2015f6c:	e0bffd17 	ldw	r2,-12(fp)
 2015f70:	00c00044 	movi	r3,1
 2015f74:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 2015f78:	e0bffe17 	ldw	r2,-8(fp)
 2015f7c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2015f80:	e0fffd17 	ldw	r3,-12(fp)
 2015f84:	d0a01104 	addi	r2,gp,-32700
 2015f88:	18bfcf1e 	bne	r3,r2,2015ec8 <__alt_mem_epcs_flash_controller_0+0xfd014ec8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2015f8c:	0001883a 	nop
}
 2015f90:	0001883a 	nop
 2015f94:	e037883a 	mov	sp,fp
 2015f98:	dfc00117 	ldw	ra,4(sp)
 2015f9c:	df000017 	ldw	fp,0(sp)
 2015fa0:	dec00204 	addi	sp,sp,8
 2015fa4:	f800283a 	ret

02015fa8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 2015fa8:	deffff04 	addi	sp,sp,-4
 2015fac:	df000015 	stw	fp,0(sp)
 2015fb0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2015fb4:	000170fa 	wrctl	ienable,zero
}
 2015fb8:	0001883a 	nop
 2015fbc:	e037883a 	mov	sp,fp
 2015fc0:	df000017 	ldw	fp,0(sp)
 2015fc4:	dec00104 	addi	sp,sp,4
 2015fc8:	f800283a 	ret

02015fcc <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 2015fcc:	defff404 	addi	sp,sp,-48
 2015fd0:	df000b15 	stw	fp,44(sp)
 2015fd4:	df000b04 	addi	fp,sp,44
 2015fd8:	e13ffc15 	stw	r4,-16(fp)
 2015fdc:	e17ffd15 	stw	r5,-12(fp)
 2015fe0:	e1bffe15 	stw	r6,-8(fp)
 2015fe4:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 2015fe8:	e0ffff17 	ldw	r3,-4(fp)
 2015fec:	e0bffe17 	ldw	r2,-8(fp)
 2015ff0:	1885883a 	add	r2,r3,r2
 2015ff4:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 2015ff8:	e0c00217 	ldw	r3,8(fp)
 2015ffc:	e0800117 	ldw	r2,4(fp)
 2016000:	1885883a 	add	r2,r3,r2
 2016004:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 2016008:	e0800117 	ldw	r2,4(fp)
 201600c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 2016010:	e0bffe17 	ldw	r2,-8(fp)
 2016014:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 2016018:	00800044 	movi	r2,1
 201601c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 2016020:	e0bffc17 	ldw	r2,-16(fp)
 2016024:	10800504 	addi	r2,r2,20
 2016028:	1009883a 	mov	r4,r2
 201602c:	00c00044 	movi	r3,1
 2016030:	e0bffd17 	ldw	r2,-12(fp)
 2016034:	1884983a 	sll	r2,r3,r2
 2016038:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 201603c:	e0800317 	ldw	r2,12(fp)
 2016040:	1080008c 	andi	r2,r2,2
 2016044:	1000051e 	bne	r2,zero,201605c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 2016048:	e0bffc17 	ldw	r2,-16(fp)
 201604c:	10800304 	addi	r2,r2,12
 2016050:	1007883a 	mov	r3,r2
 2016054:	00810004 	movi	r2,1024
 2016058:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 201605c:	e0bffc17 	ldw	r2,-16(fp)
 2016060:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2016064:	e0bffc17 	ldw	r2,-16(fp)
 2016068:	10800204 	addi	r2,r2,8
 201606c:	10800037 	ldwio	r2,0(r2)
 2016070:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2016074:	e0bffa17 	ldw	r2,-24(fp)
 2016078:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 201607c:	10000226 	beq	r2,zero,2016088 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2016080:	e0bff717 	ldw	r2,-36(fp)
 2016084:	1000031e 	bne	r2,zero,2016094 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2016088:	e0bffa17 	ldw	r2,-24(fp)
 201608c:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2016090:	103ff426 	beq	r2,zero,2016064 <__alt_mem_epcs_flash_controller_0+0xfd015064>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 2016094:	e0bffa17 	ldw	r2,-24(fp)
 2016098:	1080100c 	andi	r2,r2,64
 201609c:	10001e26 	beq	r2,zero,2016118 <alt_avalon_spi_command+0x14c>
 20160a0:	e0bff717 	ldw	r2,-36(fp)
 20160a4:	00801c0e 	bge	zero,r2,2016118 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 20160a8:	e0bff717 	ldw	r2,-36(fp)
 20160ac:	10bfffc4 	addi	r2,r2,-1
 20160b0:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 20160b4:	e0ffff17 	ldw	r3,-4(fp)
 20160b8:	e0bff817 	ldw	r2,-32(fp)
 20160bc:	18800a2e 	bgeu	r3,r2,20160e8 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 20160c0:	e0bffc17 	ldw	r2,-16(fp)
 20160c4:	10800104 	addi	r2,r2,4
 20160c8:	1009883a 	mov	r4,r2
 20160cc:	e0bfff17 	ldw	r2,-4(fp)
 20160d0:	10c00044 	addi	r3,r2,1
 20160d4:	e0ffff15 	stw	r3,-4(fp)
 20160d8:	10800003 	ldbu	r2,0(r2)
 20160dc:	10803fcc 	andi	r2,r2,255
 20160e0:	20800035 	stwio	r2,0(r4)
 20160e4:	00000c06 	br	2016118 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 20160e8:	e0bff517 	ldw	r2,-44(fp)
 20160ec:	10000826 	beq	r2,zero,2016110 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 20160f0:	e0bff517 	ldw	r2,-44(fp)
 20160f4:	10bfffc4 	addi	r2,r2,-1
 20160f8:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 20160fc:	e0bffc17 	ldw	r2,-16(fp)
 2016100:	10800104 	addi	r2,r2,4
 2016104:	0007883a 	mov	r3,zero
 2016108:	10c00035 	stwio	r3,0(r2)
 201610c:	00000206 	br	2016118 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 2016110:	00bf0004 	movi	r2,-1024
 2016114:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 2016118:	e0bffa17 	ldw	r2,-24(fp)
 201611c:	1080200c 	andi	r2,r2,128
 2016120:	103fd026 	beq	r2,zero,2016064 <__alt_mem_epcs_flash_controller_0+0xfd015064>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2016124:	e0bffc17 	ldw	r2,-16(fp)
 2016128:	10800037 	ldwio	r2,0(r2)
 201612c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 2016130:	e0bff617 	ldw	r2,-40(fp)
 2016134:	10000426 	beq	r2,zero,2016148 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 2016138:	e0bff617 	ldw	r2,-40(fp)
 201613c:	10bfffc4 	addi	r2,r2,-1
 2016140:	e0bff615 	stw	r2,-40(fp)
 2016144:	00000506 	br	201615c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 2016148:	e0800217 	ldw	r2,8(fp)
 201614c:	10c00044 	addi	r3,r2,1
 2016150:	e0c00215 	stw	r3,8(fp)
 2016154:	e0fffb17 	ldw	r3,-20(fp)
 2016158:	10c00005 	stb	r3,0(r2)
      credits++;
 201615c:	e0bff717 	ldw	r2,-36(fp)
 2016160:	10800044 	addi	r2,r2,1
 2016164:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 2016168:	e0bff617 	ldw	r2,-40(fp)
 201616c:	103fbd1e 	bne	r2,zero,2016064 <__alt_mem_epcs_flash_controller_0+0xfd015064>
 2016170:	e0c00217 	ldw	r3,8(fp)
 2016174:	e0bff917 	ldw	r2,-28(fp)
 2016178:	18bfba1e 	bne	r3,r2,2016064 <__alt_mem_epcs_flash_controller_0+0xfd015064>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 201617c:	e0bffc17 	ldw	r2,-16(fp)
 2016180:	10800204 	addi	r2,r2,8
 2016184:	10800037 	ldwio	r2,0(r2)
 2016188:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 201618c:	e0bffa17 	ldw	r2,-24(fp)
 2016190:	1080080c 	andi	r2,r2,32
 2016194:	103ff926 	beq	r2,zero,201617c <__alt_mem_epcs_flash_controller_0+0xfd01517c>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 2016198:	e0800317 	ldw	r2,12(fp)
 201619c:	1080004c 	andi	r2,r2,1
 20161a0:	1000041e 	bne	r2,zero,20161b4 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 20161a4:	e0bffc17 	ldw	r2,-16(fp)
 20161a8:	10800304 	addi	r2,r2,12
 20161ac:	0007883a 	mov	r3,zero
 20161b0:	10c00035 	stwio	r3,0(r2)

  return read_length;
 20161b4:	e0800117 	ldw	r2,4(fp)
}
 20161b8:	e037883a 	mov	sp,fp
 20161bc:	df000017 	ldw	fp,0(sp)
 20161c0:	dec00104 	addi	sp,sp,4
 20161c4:	f800283a 	ret

020161c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 20161c8:	defffa04 	addi	sp,sp,-24
 20161cc:	dfc00515 	stw	ra,20(sp)
 20161d0:	df000415 	stw	fp,16(sp)
 20161d4:	df000404 	addi	fp,sp,16
 20161d8:	e13ffe15 	stw	r4,-8(fp)
 20161dc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 20161e0:	e0bfff17 	ldw	r2,-4(fp)
 20161e4:	10800017 	ldw	r2,0(r2)
 20161e8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 20161ec:	e13ffe17 	ldw	r4,-8(fp)
 20161f0:	2005e800 	call	2005e80 <strlen>
 20161f4:	10800044 	addi	r2,r2,1
 20161f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20161fc:	00000d06 	br	2016234 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2016200:	e0bffc17 	ldw	r2,-16(fp)
 2016204:	10800217 	ldw	r2,8(r2)
 2016208:	e0fffd17 	ldw	r3,-12(fp)
 201620c:	180d883a 	mov	r6,r3
 2016210:	e17ffe17 	ldw	r5,-8(fp)
 2016214:	1009883a 	mov	r4,r2
 2016218:	20164ec0 	call	20164ec <memcmp>
 201621c:	1000021e 	bne	r2,zero,2016228 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2016220:	e0bffc17 	ldw	r2,-16(fp)
 2016224:	00000706 	br	2016244 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2016228:	e0bffc17 	ldw	r2,-16(fp)
 201622c:	10800017 	ldw	r2,0(r2)
 2016230:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2016234:	e0fffc17 	ldw	r3,-16(fp)
 2016238:	e0bfff17 	ldw	r2,-4(fp)
 201623c:	18bff01e 	bne	r3,r2,2016200 <__alt_mem_epcs_flash_controller_0+0xfd015200>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2016240:	0005883a 	mov	r2,zero
}
 2016244:	e037883a 	mov	sp,fp
 2016248:	dfc00117 	ldw	ra,4(sp)
 201624c:	df000017 	ldw	fp,0(sp)
 2016250:	dec00204 	addi	sp,sp,8
 2016254:	f800283a 	ret

02016258 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2016258:	defffb04 	addi	sp,sp,-20
 201625c:	dfc00415 	stw	ra,16(sp)
 2016260:	df000315 	stw	fp,12(sp)
 2016264:	df000304 	addi	fp,sp,12
 2016268:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 201626c:	d0a00717 	ldw	r2,-32740(gp)
 2016270:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2016274:	00003106 	br	201633c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 2016278:	e0bffd17 	ldw	r2,-12(fp)
 201627c:	10800217 	ldw	r2,8(r2)
 2016280:	1009883a 	mov	r4,r2
 2016284:	2005e800 	call	2005e80 <strlen>
 2016288:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 201628c:	e0bffd17 	ldw	r2,-12(fp)
 2016290:	10c00217 	ldw	r3,8(r2)
 2016294:	e0bffe17 	ldw	r2,-8(fp)
 2016298:	10bfffc4 	addi	r2,r2,-1
 201629c:	1885883a 	add	r2,r3,r2
 20162a0:	10800003 	ldbu	r2,0(r2)
 20162a4:	10803fcc 	andi	r2,r2,255
 20162a8:	1080201c 	xori	r2,r2,128
 20162ac:	10bfe004 	addi	r2,r2,-128
 20162b0:	10800bd8 	cmpnei	r2,r2,47
 20162b4:	1000031e 	bne	r2,zero,20162c4 <alt_find_file+0x6c>
    {
      len -= 1;
 20162b8:	e0bffe17 	ldw	r2,-8(fp)
 20162bc:	10bfffc4 	addi	r2,r2,-1
 20162c0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20162c4:	e0bffe17 	ldw	r2,-8(fp)
 20162c8:	e0ffff17 	ldw	r3,-4(fp)
 20162cc:	1885883a 	add	r2,r3,r2
 20162d0:	10800003 	ldbu	r2,0(r2)
 20162d4:	10803fcc 	andi	r2,r2,255
 20162d8:	1080201c 	xori	r2,r2,128
 20162dc:	10bfe004 	addi	r2,r2,-128
 20162e0:	10800be0 	cmpeqi	r2,r2,47
 20162e4:	1000081e 	bne	r2,zero,2016308 <alt_find_file+0xb0>
 20162e8:	e0bffe17 	ldw	r2,-8(fp)
 20162ec:	e0ffff17 	ldw	r3,-4(fp)
 20162f0:	1885883a 	add	r2,r3,r2
 20162f4:	10800003 	ldbu	r2,0(r2)
 20162f8:	10803fcc 	andi	r2,r2,255
 20162fc:	1080201c 	xori	r2,r2,128
 2016300:	10bfe004 	addi	r2,r2,-128
 2016304:	10000a1e 	bne	r2,zero,2016330 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 2016308:	e0bffd17 	ldw	r2,-12(fp)
 201630c:	10800217 	ldw	r2,8(r2)
 2016310:	e0fffe17 	ldw	r3,-8(fp)
 2016314:	180d883a 	mov	r6,r3
 2016318:	e17fff17 	ldw	r5,-4(fp)
 201631c:	1009883a 	mov	r4,r2
 2016320:	20164ec0 	call	20164ec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2016324:	1000021e 	bne	r2,zero,2016330 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2016328:	e0bffd17 	ldw	r2,-12(fp)
 201632c:	00000706 	br	201634c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 2016330:	e0bffd17 	ldw	r2,-12(fp)
 2016334:	10800017 	ldw	r2,0(r2)
 2016338:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201633c:	e0fffd17 	ldw	r3,-12(fp)
 2016340:	d0a00704 	addi	r2,gp,-32740
 2016344:	18bfcc1e 	bne	r3,r2,2016278 <__alt_mem_epcs_flash_controller_0+0xfd015278>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2016348:	0005883a 	mov	r2,zero
}
 201634c:	e037883a 	mov	sp,fp
 2016350:	dfc00117 	ldw	ra,4(sp)
 2016354:	df000017 	ldw	fp,0(sp)
 2016358:	dec00204 	addi	sp,sp,8
 201635c:	f800283a 	ret

02016360 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2016360:	defffc04 	addi	sp,sp,-16
 2016364:	df000315 	stw	fp,12(sp)
 2016368:	df000304 	addi	fp,sp,12
 201636c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2016370:	00bffa04 	movi	r2,-24
 2016374:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2016378:	e03ffd15 	stw	zero,-12(fp)
 201637c:	00001906 	br	20163e4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 2016380:	00808134 	movhi	r2,516
 2016384:	10b39d04 	addi	r2,r2,-12684
 2016388:	e0fffd17 	ldw	r3,-12(fp)
 201638c:	18c00324 	muli	r3,r3,12
 2016390:	10c5883a 	add	r2,r2,r3
 2016394:	10800017 	ldw	r2,0(r2)
 2016398:	10000f1e 	bne	r2,zero,20163d8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 201639c:	00808134 	movhi	r2,516
 20163a0:	10b39d04 	addi	r2,r2,-12684
 20163a4:	e0fffd17 	ldw	r3,-12(fp)
 20163a8:	18c00324 	muli	r3,r3,12
 20163ac:	10c5883a 	add	r2,r2,r3
 20163b0:	e0ffff17 	ldw	r3,-4(fp)
 20163b4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 20163b8:	d0e00b17 	ldw	r3,-32724(gp)
 20163bc:	e0bffd17 	ldw	r2,-12(fp)
 20163c0:	1880020e 	bge	r3,r2,20163cc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 20163c4:	e0bffd17 	ldw	r2,-12(fp)
 20163c8:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 20163cc:	e0bffd17 	ldw	r2,-12(fp)
 20163d0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 20163d4:	00000606 	br	20163f0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20163d8:	e0bffd17 	ldw	r2,-12(fp)
 20163dc:	10800044 	addi	r2,r2,1
 20163e0:	e0bffd15 	stw	r2,-12(fp)
 20163e4:	e0bffd17 	ldw	r2,-12(fp)
 20163e8:	10800810 	cmplti	r2,r2,32
 20163ec:	103fe41e 	bne	r2,zero,2016380 <__alt_mem_epcs_flash_controller_0+0xfd015380>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 20163f0:	e0bffe17 	ldw	r2,-8(fp)
}
 20163f4:	e037883a 	mov	sp,fp
 20163f8:	df000017 	ldw	fp,0(sp)
 20163fc:	dec00104 	addi	sp,sp,4
 2016400:	f800283a 	ret

02016404 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 2016404:	defffe04 	addi	sp,sp,-8
 2016408:	df000115 	stw	fp,4(sp)
 201640c:	df000104 	addi	fp,sp,4
 2016410:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 2016414:	e0bfff17 	ldw	r2,-4(fp)
 2016418:	10bffe84 	addi	r2,r2,-6
 201641c:	10c00428 	cmpgeui	r3,r2,16
 2016420:	18001a1e 	bne	r3,zero,201648c <alt_exception_cause_generated_bad_addr+0x88>
 2016424:	100690ba 	slli	r3,r2,2
 2016428:	00808074 	movhi	r2,513
 201642c:	10990f04 	addi	r2,r2,25660
 2016430:	1885883a 	add	r2,r3,r2
 2016434:	10800017 	ldw	r2,0(r2)
 2016438:	1000683a 	jmp	r2
 201643c:	0201647c 	xorhi	r8,zero,1425
 2016440:	0201647c 	xorhi	r8,zero,1425
 2016444:	0201648c 	andi	r8,zero,1426
 2016448:	0201648c 	andi	r8,zero,1426
 201644c:	0201648c 	andi	r8,zero,1426
 2016450:	0201647c 	xorhi	r8,zero,1425
 2016454:	02016484 	movi	r8,1426
 2016458:	0201648c 	andi	r8,zero,1426
 201645c:	0201647c 	xorhi	r8,zero,1425
 2016460:	0201647c 	xorhi	r8,zero,1425
 2016464:	0201648c 	andi	r8,zero,1426
 2016468:	0201647c 	xorhi	r8,zero,1425
 201646c:	02016484 	movi	r8,1426
 2016470:	0201648c 	andi	r8,zero,1426
 2016474:	0201648c 	andi	r8,zero,1426
 2016478:	0201647c 	xorhi	r8,zero,1425
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 201647c:	00800044 	movi	r2,1
 2016480:	00000306 	br	2016490 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 2016484:	0005883a 	mov	r2,zero
 2016488:	00000106 	br	2016490 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 201648c:	0005883a 	mov	r2,zero
  }
}
 2016490:	e037883a 	mov	sp,fp
 2016494:	df000017 	ldw	fp,0(sp)
 2016498:	dec00104 	addi	sp,sp,4
 201649c:	f800283a 	ret

020164a0 <atexit>:
 20164a0:	200b883a 	mov	r5,r4
 20164a4:	000f883a 	mov	r7,zero
 20164a8:	000d883a 	mov	r6,zero
 20164ac:	0009883a 	mov	r4,zero
 20164b0:	20165681 	jmpi	2016568 <__register_exitproc>

020164b4 <exit>:
 20164b4:	defffe04 	addi	sp,sp,-8
 20164b8:	000b883a 	mov	r5,zero
 20164bc:	dc000015 	stw	r16,0(sp)
 20164c0:	dfc00115 	stw	ra,4(sp)
 20164c4:	2021883a 	mov	r16,r4
 20164c8:	20166800 	call	2016680 <__call_exitprocs>
 20164cc:	00808134 	movhi	r2,516
 20164d0:	10b84904 	addi	r2,r2,-7900
 20164d4:	11000017 	ldw	r4,0(r2)
 20164d8:	20800f17 	ldw	r2,60(r4)
 20164dc:	10000126 	beq	r2,zero,20164e4 <exit+0x30>
 20164e0:	103ee83a 	callr	r2
 20164e4:	8009883a 	mov	r4,r16
 20164e8:	20168000 	call	2016800 <_exit>

020164ec <memcmp>:
 20164ec:	01c000c4 	movi	r7,3
 20164f0:	3980192e 	bgeu	r7,r6,2016558 <memcmp+0x6c>
 20164f4:	2144b03a 	or	r2,r4,r5
 20164f8:	11c4703a 	and	r2,r2,r7
 20164fc:	10000f26 	beq	r2,zero,201653c <memcmp+0x50>
 2016500:	20800003 	ldbu	r2,0(r4)
 2016504:	28c00003 	ldbu	r3,0(r5)
 2016508:	10c0151e 	bne	r2,r3,2016560 <memcmp+0x74>
 201650c:	31bfff84 	addi	r6,r6,-2
 2016510:	01ffffc4 	movi	r7,-1
 2016514:	00000406 	br	2016528 <memcmp+0x3c>
 2016518:	20800003 	ldbu	r2,0(r4)
 201651c:	28c00003 	ldbu	r3,0(r5)
 2016520:	31bfffc4 	addi	r6,r6,-1
 2016524:	10c00e1e 	bne	r2,r3,2016560 <memcmp+0x74>
 2016528:	21000044 	addi	r4,r4,1
 201652c:	29400044 	addi	r5,r5,1
 2016530:	31fff91e 	bne	r6,r7,2016518 <__alt_mem_epcs_flash_controller_0+0xfd015518>
 2016534:	0005883a 	mov	r2,zero
 2016538:	f800283a 	ret
 201653c:	20c00017 	ldw	r3,0(r4)
 2016540:	28800017 	ldw	r2,0(r5)
 2016544:	18bfee1e 	bne	r3,r2,2016500 <__alt_mem_epcs_flash_controller_0+0xfd015500>
 2016548:	31bfff04 	addi	r6,r6,-4
 201654c:	21000104 	addi	r4,r4,4
 2016550:	29400104 	addi	r5,r5,4
 2016554:	39bff936 	bltu	r7,r6,201653c <__alt_mem_epcs_flash_controller_0+0xfd01553c>
 2016558:	303fe91e 	bne	r6,zero,2016500 <__alt_mem_epcs_flash_controller_0+0xfd015500>
 201655c:	003ff506 	br	2016534 <__alt_mem_epcs_flash_controller_0+0xfd015534>
 2016560:	10c5c83a 	sub	r2,r2,r3
 2016564:	f800283a 	ret

02016568 <__register_exitproc>:
 2016568:	defffa04 	addi	sp,sp,-24
 201656c:	dc000315 	stw	r16,12(sp)
 2016570:	04008134 	movhi	r16,516
 2016574:	84384904 	addi	r16,r16,-7900
 2016578:	80c00017 	ldw	r3,0(r16)
 201657c:	dc400415 	stw	r17,16(sp)
 2016580:	dfc00515 	stw	ra,20(sp)
 2016584:	18805217 	ldw	r2,328(r3)
 2016588:	2023883a 	mov	r17,r4
 201658c:	10003726 	beq	r2,zero,201666c <__register_exitproc+0x104>
 2016590:	10c00117 	ldw	r3,4(r2)
 2016594:	010007c4 	movi	r4,31
 2016598:	20c00e16 	blt	r4,r3,20165d4 <__register_exitproc+0x6c>
 201659c:	1a000044 	addi	r8,r3,1
 20165a0:	8800221e 	bne	r17,zero,201662c <__register_exitproc+0xc4>
 20165a4:	18c00084 	addi	r3,r3,2
 20165a8:	18c7883a 	add	r3,r3,r3
 20165ac:	18c7883a 	add	r3,r3,r3
 20165b0:	12000115 	stw	r8,4(r2)
 20165b4:	10c7883a 	add	r3,r2,r3
 20165b8:	19400015 	stw	r5,0(r3)
 20165bc:	0005883a 	mov	r2,zero
 20165c0:	dfc00517 	ldw	ra,20(sp)
 20165c4:	dc400417 	ldw	r17,16(sp)
 20165c8:	dc000317 	ldw	r16,12(sp)
 20165cc:	dec00604 	addi	sp,sp,24
 20165d0:	f800283a 	ret
 20165d4:	00800034 	movhi	r2,0
 20165d8:	10800004 	addi	r2,r2,0
 20165dc:	10002626 	beq	r2,zero,2016678 <__register_exitproc+0x110>
 20165e0:	01006404 	movi	r4,400
 20165e4:	d9400015 	stw	r5,0(sp)
 20165e8:	d9800115 	stw	r6,4(sp)
 20165ec:	d9c00215 	stw	r7,8(sp)
 20165f0:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 20165f4:	d9400017 	ldw	r5,0(sp)
 20165f8:	d9800117 	ldw	r6,4(sp)
 20165fc:	d9c00217 	ldw	r7,8(sp)
 2016600:	10001d26 	beq	r2,zero,2016678 <__register_exitproc+0x110>
 2016604:	81000017 	ldw	r4,0(r16)
 2016608:	10000115 	stw	zero,4(r2)
 201660c:	02000044 	movi	r8,1
 2016610:	22405217 	ldw	r9,328(r4)
 2016614:	0007883a 	mov	r3,zero
 2016618:	12400015 	stw	r9,0(r2)
 201661c:	20805215 	stw	r2,328(r4)
 2016620:	10006215 	stw	zero,392(r2)
 2016624:	10006315 	stw	zero,396(r2)
 2016628:	883fde26 	beq	r17,zero,20165a4 <__alt_mem_epcs_flash_controller_0+0xfd0155a4>
 201662c:	18c9883a 	add	r4,r3,r3
 2016630:	2109883a 	add	r4,r4,r4
 2016634:	1109883a 	add	r4,r2,r4
 2016638:	21802215 	stw	r6,136(r4)
 201663c:	01800044 	movi	r6,1
 2016640:	12406217 	ldw	r9,392(r2)
 2016644:	30cc983a 	sll	r6,r6,r3
 2016648:	4992b03a 	or	r9,r9,r6
 201664c:	12406215 	stw	r9,392(r2)
 2016650:	21c04215 	stw	r7,264(r4)
 2016654:	01000084 	movi	r4,2
 2016658:	893fd21e 	bne	r17,r4,20165a4 <__alt_mem_epcs_flash_controller_0+0xfd0155a4>
 201665c:	11006317 	ldw	r4,396(r2)
 2016660:	218cb03a 	or	r6,r4,r6
 2016664:	11806315 	stw	r6,396(r2)
 2016668:	003fce06 	br	20165a4 <__alt_mem_epcs_flash_controller_0+0xfd0155a4>
 201666c:	18805304 	addi	r2,r3,332
 2016670:	18805215 	stw	r2,328(r3)
 2016674:	003fc606 	br	2016590 <__alt_mem_epcs_flash_controller_0+0xfd015590>
 2016678:	00bfffc4 	movi	r2,-1
 201667c:	003fd006 	br	20165c0 <__alt_mem_epcs_flash_controller_0+0xfd0155c0>

02016680 <__call_exitprocs>:
 2016680:	defff504 	addi	sp,sp,-44
 2016684:	df000915 	stw	fp,36(sp)
 2016688:	dd400615 	stw	r21,24(sp)
 201668c:	dc800315 	stw	r18,12(sp)
 2016690:	dfc00a15 	stw	ra,40(sp)
 2016694:	ddc00815 	stw	r23,32(sp)
 2016698:	dd800715 	stw	r22,28(sp)
 201669c:	dd000515 	stw	r20,20(sp)
 20166a0:	dcc00415 	stw	r19,16(sp)
 20166a4:	dc400215 	stw	r17,8(sp)
 20166a8:	dc000115 	stw	r16,4(sp)
 20166ac:	d9000015 	stw	r4,0(sp)
 20166b0:	2839883a 	mov	fp,r5
 20166b4:	04800044 	movi	r18,1
 20166b8:	057fffc4 	movi	r21,-1
 20166bc:	00808134 	movhi	r2,516
 20166c0:	10b84904 	addi	r2,r2,-7900
 20166c4:	12000017 	ldw	r8,0(r2)
 20166c8:	45005217 	ldw	r20,328(r8)
 20166cc:	44c05204 	addi	r19,r8,328
 20166d0:	a0001c26 	beq	r20,zero,2016744 <__call_exitprocs+0xc4>
 20166d4:	a0800117 	ldw	r2,4(r20)
 20166d8:	15ffffc4 	addi	r23,r2,-1
 20166dc:	b8000d16 	blt	r23,zero,2016714 <__call_exitprocs+0x94>
 20166e0:	14000044 	addi	r16,r2,1
 20166e4:	8421883a 	add	r16,r16,r16
 20166e8:	8421883a 	add	r16,r16,r16
 20166ec:	84402004 	addi	r17,r16,128
 20166f0:	a463883a 	add	r17,r20,r17
 20166f4:	a421883a 	add	r16,r20,r16
 20166f8:	e0001e26 	beq	fp,zero,2016774 <__call_exitprocs+0xf4>
 20166fc:	80804017 	ldw	r2,256(r16)
 2016700:	e0801c26 	beq	fp,r2,2016774 <__call_exitprocs+0xf4>
 2016704:	bdffffc4 	addi	r23,r23,-1
 2016708:	843fff04 	addi	r16,r16,-4
 201670c:	8c7fff04 	addi	r17,r17,-4
 2016710:	bd7ff91e 	bne	r23,r21,20166f8 <__alt_mem_epcs_flash_controller_0+0xfd0156f8>
 2016714:	00800034 	movhi	r2,0
 2016718:	10800004 	addi	r2,r2,0
 201671c:	10000926 	beq	r2,zero,2016744 <__call_exitprocs+0xc4>
 2016720:	a0800117 	ldw	r2,4(r20)
 2016724:	1000301e 	bne	r2,zero,20167e8 <__call_exitprocs+0x168>
 2016728:	a0800017 	ldw	r2,0(r20)
 201672c:	10003226 	beq	r2,zero,20167f8 <__call_exitprocs+0x178>
 2016730:	a009883a 	mov	r4,r20
 2016734:	98800015 	stw	r2,0(r19)
 2016738:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 201673c:	9d000017 	ldw	r20,0(r19)
 2016740:	a03fe41e 	bne	r20,zero,20166d4 <__alt_mem_epcs_flash_controller_0+0xfd0156d4>
 2016744:	dfc00a17 	ldw	ra,40(sp)
 2016748:	df000917 	ldw	fp,36(sp)
 201674c:	ddc00817 	ldw	r23,32(sp)
 2016750:	dd800717 	ldw	r22,28(sp)
 2016754:	dd400617 	ldw	r21,24(sp)
 2016758:	dd000517 	ldw	r20,20(sp)
 201675c:	dcc00417 	ldw	r19,16(sp)
 2016760:	dc800317 	ldw	r18,12(sp)
 2016764:	dc400217 	ldw	r17,8(sp)
 2016768:	dc000117 	ldw	r16,4(sp)
 201676c:	dec00b04 	addi	sp,sp,44
 2016770:	f800283a 	ret
 2016774:	a0800117 	ldw	r2,4(r20)
 2016778:	80c00017 	ldw	r3,0(r16)
 201677c:	10bfffc4 	addi	r2,r2,-1
 2016780:	15c01426 	beq	r2,r23,20167d4 <__call_exitprocs+0x154>
 2016784:	80000015 	stw	zero,0(r16)
 2016788:	183fde26 	beq	r3,zero,2016704 <__alt_mem_epcs_flash_controller_0+0xfd015704>
 201678c:	95c8983a 	sll	r4,r18,r23
 2016790:	a0806217 	ldw	r2,392(r20)
 2016794:	a5800117 	ldw	r22,4(r20)
 2016798:	2084703a 	and	r2,r4,r2
 201679c:	10000b26 	beq	r2,zero,20167cc <__call_exitprocs+0x14c>
 20167a0:	a0806317 	ldw	r2,396(r20)
 20167a4:	2088703a 	and	r4,r4,r2
 20167a8:	20000c1e 	bne	r4,zero,20167dc <__call_exitprocs+0x15c>
 20167ac:	89400017 	ldw	r5,0(r17)
 20167b0:	d9000017 	ldw	r4,0(sp)
 20167b4:	183ee83a 	callr	r3
 20167b8:	a0800117 	ldw	r2,4(r20)
 20167bc:	15bfbf1e 	bne	r2,r22,20166bc <__alt_mem_epcs_flash_controller_0+0xfd0156bc>
 20167c0:	98800017 	ldw	r2,0(r19)
 20167c4:	153fcf26 	beq	r2,r20,2016704 <__alt_mem_epcs_flash_controller_0+0xfd015704>
 20167c8:	003fbc06 	br	20166bc <__alt_mem_epcs_flash_controller_0+0xfd0156bc>
 20167cc:	183ee83a 	callr	r3
 20167d0:	003ff906 	br	20167b8 <__alt_mem_epcs_flash_controller_0+0xfd0157b8>
 20167d4:	a5c00115 	stw	r23,4(r20)
 20167d8:	003feb06 	br	2016788 <__alt_mem_epcs_flash_controller_0+0xfd015788>
 20167dc:	89000017 	ldw	r4,0(r17)
 20167e0:	183ee83a 	callr	r3
 20167e4:	003ff406 	br	20167b8 <__alt_mem_epcs_flash_controller_0+0xfd0157b8>
 20167e8:	a0800017 	ldw	r2,0(r20)
 20167ec:	a027883a 	mov	r19,r20
 20167f0:	1029883a 	mov	r20,r2
 20167f4:	003fb606 	br	20166d0 <__alt_mem_epcs_flash_controller_0+0xfd0156d0>
 20167f8:	0005883a 	mov	r2,zero
 20167fc:	003ffb06 	br	20167ec <__alt_mem_epcs_flash_controller_0+0xfd0157ec>

02016800 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2016800:	defffd04 	addi	sp,sp,-12
 2016804:	df000215 	stw	fp,8(sp)
 2016808:	df000204 	addi	fp,sp,8
 201680c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2016810:	0001883a 	nop
 2016814:	e0bfff17 	ldw	r2,-4(fp)
 2016818:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 201681c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2016820:	10000226 	beq	r2,zero,201682c <_exit+0x2c>
    ALT_SIM_FAIL();
 2016824:	002af070 	cmpltui	zero,zero,43969
 2016828:	00000106 	br	2016830 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 201682c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2016830:	003fff06 	br	2016830 <__alt_mem_epcs_flash_controller_0+0xfd015830>
